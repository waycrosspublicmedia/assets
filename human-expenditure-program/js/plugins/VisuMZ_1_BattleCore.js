//=============================================================================
// VisuStella MZ - Battle Core
// VisuMZ_1_BattleCore.js
//=============================================================================

var Imported = Imported || {};
Imported.VisuMZ_1_BattleCore = true;

var VisuMZ = VisuMZ || {};
VisuMZ.BattleCore = VisuMZ.BattleCore || {};
VisuMZ.BattleCore.version = 1.87;

//=============================================================================
 /*:
 * @target MZ
 * @plugindesc [RPG Maker MZ] [Tier 1] [Version 1.87] [BattleCore]
 * @author VisuStella
 * @url http://www.yanfly.moe/wiki/Battle_Core_VisuStella_MZ
 * @orderAfter VisuMZ_0_CoreEngine
 *
 * @help
 * ============================================================================
 * Introduction
 * ============================================================================
 *
 * The Battle Core plugin revamps the battle engine provided by RPG Maker MZ to
 * become more flexible, streamlined, and support a variety of features. The
 * updated battle engine allows for custom Action Sequences, battle layout
 * styles, and a lot of control over the battle mechanics, too.
 *
 * Features include all (but not limited to) the following:
 * 
 * * Action Sequence Plugin Commands to give you full control over what happens
 *   during the course of a skill or item.
 * * Animated Sideview Battler support for enemies!
 * * Auto Battle options for party-wide and actor-only instances.
 * * Base Troop Events to quickly streamline events for all Troop events.
 * * Battle Command control to let you change which commands appear for actors.
 * * Battle Layout styles to change the way the battle scene looks.
 * * Casting animation support for skills.
 * * Critical Hit control over the success rate formula and damage multipliers.
 * * Custom target scopes added for skills and items.
 * * Damage formula control, including Damage Styles.
 * * Damage caps, both hard caps and soft caps.
 * * Damage traits such Armor Penetration/Reduction to bypass defenses.
 * * Elements & Status Menu Core support for traits.
 * * Multitude of JavaScript notetags and global Plugin Parameters to let you
 *   make a variety of effects across various instances during battle.
 * * Party Command window can be skipped/disabled entirely.
 * * Weather effects now show in battle.
 * * Streamlined Battle Log to remove redundant information and improve the
 *   flow of battle.
 * * Visual HP Gauges can be displayed above the heads of actors and/or enemies
 *   with a possible requirement for enemies to be defeated at least once first
 *   in order for them to show.
 *
 * ============================================================================
 * Requirements
 * ============================================================================
 *
 * This plugin is made for RPG Maker MZ. This will not work in other iterations
 * of RPG Maker.
 *
 * ------ Tier 1 ------
 *
 * This plugin is a Tier 1 plugin. Place it under other plugins of lower tier
 * value on your Plugin Manager list (ie: 0, 1, 2, 3, 4, 5). This is to ensure
 * that your plugins will have the best compatibility with the rest of the
 * VisuStella MZ library.
 *
 * ============================================================================
 * Major Changes
 * ============================================================================
 *
 * This plugin will overwrite some core parts of the RPG Maker MZ base code in
 * order to ensure the Battle Core plugin will work at full capacity. The
 * following are explanations of what has been changed.
 *
 * ---
 *
 * Action Sequences
 *
 * - Action sequences are now done either entirely by the Battle Log Window or
 * through common events if the <Custom Action Sequence> notetag is used.
 * In RPG Maker MZ by default, Action Sequences would be a mixture of using the
 * Battle Log Window, the Battle Manager, and the Battle Scene, making it hard
 * to fully grab control of the situation.
 *
 * ---
 *
 * Action Speed
 *
 * - Action speeds determine the turn order in the default battle system. The
 * AGI of a battle unit is also taken into consideration. However, the random
 * variance applied to the action speed system makes the turn order extremely
 * chaotic and hard for the player to determine. Thus, the random variance
 * aspect of it has been turned off. This can be reenabled by default through
 * Plugin Parameters => Mechanics Settings => Allow Random Speed?
 *
 * ---
 *
 * Animated Sideview Battler Support For Enemies
 *
 * - Enemies can now use Sideview Actor sprites for themselves! They will
 * behave like actors and can even carry their own set of weapons for physical
 * attacks. These must be set up using notetags. More information can be found
 * in the notetag section.
 *
 * - As the sprites are normally used for actors, some changes have been made
 * to Sprite_Actor to be able to support both actors and enemies. These changes
 * should have minimal impact on other plugins.
 *
 * ---
 *
 * Battle Sprite Updates
 *
 * - A lot of functions in Sprite_Battler, Sprite_Actor, and Sprite_Enemy have
 * been overwritten to make the new Action Sequence system added by this plugin
 * possible. These changes make it possible for the sprites to move anywhere on
 * the screen, jump, float, change visibility, and more.
 *
 * ---
 *
 * Change Battle Back in Battle
 * 
 * - By default, the Change Battle Back event command does not work in battle.
 * Any settings made to it will only reflect in the following battle. Now, if
 * the battle back event command is used during battle, it will reflect upon
 * any new changes immediately.
 *
 * ---
 *
 * Critical Hit - LUK Influence
 *
 * - The LUK Buffs now affect the critical hit rate based off how the formula
 * is now calculated. Each stack of a LUK Buff will double the critical hit
 * rate and compound upon that. That means a x1 LUK Buff stack will raise it by
 * x2, a x2 LUK Buff stack will raise the critical hit rate by x4, a x3 LUK
 * Buff Stack will raise the critical hit rate stack by x8, and so on.
 *
 * - LUK also plays a role in how much damage is dealt with critical hits. The
 * default critical hit multiplier has been reduced from x3 to x2. However, a
 * percentage of LUK will added on (based off the user's CRI rate) onto the
 * finalized critical damage. If the user's CRI rate is 4%, then 4% of the user
 * LUK value will also be added onto the damage.
 *
 * - This change can be altered through Plugin Parameters => Damage Settings =>
 * Critical Hits => JS: Rate Formula and JS: Damage Formula.
 *
 * ---
 * 
 * Damage Popups
 * 
 * - Damage popups are now formatted with + and - to determine healing and
 * damage. MP Damage will also include "MP" at the back. This is to make it
 * clearer what each colored variant of the damage popup means as well as help
 * color blind players read the on-screen data properly.
 * 
 * - Damage popups have also been rewritten to show all changed aspects instead
 * of just one. Previously with RPG Maker MZ, if an action would deal both HP
 * and MP damage, only one of them would show. Now, everything is separated and
 * both HP and MP changes will at a time.
 * 
 * ---
 * 
 * Dual Wielding
 * 
 * - Previously, RPG Maker MZ had "Dual Wielding" attack using both weapon
 * animations at once, with the combined ATK of each weapon. It's confusing to
 * look at and does not portray the nature of "Dual Wielding".
 * 
 * - Dual Wielding, or in the case of users adding in third and fourth weapons,
 * Multi Wielding is now changed. Each weapon is displayed individually, each
 * producing its own attack animation, showing each weapon type, and applying
 * only that weapon's ATK, Traits, and related effects. It is no longer a
 * combined effect to display everything at once like RPG Maker MZ default.
 * 
 * - If an actor has multiple weapon slots but some of them are unequipped,
 * then the action will treat the attack as a single attack. There will be no
 * barehanded attack to add on top of it. This is to match RPG Maker MZ's
 * decision to omit a second animation if the same scenario is applied.
 * 
 * ---
 *
 * Force Action
 *
 * - Previously, Forced Actions would interrupt the middle of an event to
 * perform an action. However, with the addition of more flexible Action
 * Sequences, the pre-existing Force Action system would not be able to exist
 * and would require being remade.
 *
 * - Forced Actions now are instead, added to a separate queue from the action
 * battler list. Whenever an action and/or common event is completed, then if
 * there's a Forced Action battler queued, then the Forced Action battler will
 * have its turn. This is the cleanest method available and avoids the most
 * conflicts possible.
 *
 * - This means if you planned to make cinematic sequences with Forced Actions,
 * you will need to account for the queued Force Actions. However, in the case
 * of battle cinematics, we would highly recommend that you use the newly added
 * Action Sequence Plugin Commands instead as those give you more control than
 * any Force Action ever could.
 *
 * ---
 *
 * Random Scope
 *
 * - The skill and item targeting scopes for Random Enemy, 2 Random Enemies,
 * 3 Random Enemies, 4 Random Enemies will now ignore TGR and utilize true
 * randomness.
 *
 * ---
 *
 * Spriteset_Battle Update
 *
 * - The spriteset now has extra containers to separate battlers (actors and
 * enemies), animations, and damage. This is to make actors and enemy battler
 * sprites more efficient to sort (if enabled), so that animations won't
 * interfere with and cover damage sprites, and to make sure damage sprites are
 * unaffected by screen tints in order to ensure the player will always have a
 * clear read on the information relaying sprites.
 *
 * ---
 * 
 * TPB/ATB Active Battle Actor Shifting
 * 
 * - Pressing cancel on the Actor Command Window no longer switches between
 * actors with a full TPB/ATB gauge before reaching the Party Command Window.
 * This is to accomplish a couple of things: 1) reduce the number of button
 * presses to reach the Party Command Window and 2) to prevent motion resets
 * and disrupting action sequences. If this feature is vital to your battle
 * system, we recommend that you do not use this plugin or any of the Battle
 * Core-required plugins.
 * 
 * ---
 *
 * Weather Displayed in Battle
 *
 * - Previously, weather has not been displayed in battle. This means that any
 * weather effects placed on the map do not transfer over to battle and causes
 * a huge disconnect for players. The Battle Core plugin will add weather
 * effects to match the map's weather conditions. Any changes made to weather
 * through event commands midway through battle will also be reflected.
 *
 * ---
 *
 * ============================================================================
 * Base Troops
 * ============================================================================
 *
 * Base Troops can be found, declared, and modified in the Plugin Parameters =>
 * Mechanics Settings => Base Troop ID's. All of the listed Troop ID's here
 * will have their page events replicated and placed under all other troops
 * found in the database.
 *
 * ---
 *
 * This means that if you have an event that runs on Turn 1 of a Base Troop,
 * then for every troop out there, that same event will also run on Turn 1,
 * as well. This is useful for those who wish to customize their battle system
 * further and to reduce the amount of work needed to copy/paste said event
 * pages into every database troop object manually.
 *
 * ---
 *
 * ============================================================================
 * Damage Styles
 * ============================================================================
 *
 * Damage Styles are a new feature added through the Battle Core plugin. When
 * using certain Battle Styles, you can completely ignore typing in the whole
 * damage formula inside the damage formula input box, and instead, insert
 * either a power amount or a multiplier depending on the Damage Style. The
 * plugin will then automatically calculate damage using that value factoring
 * in ATK, DEF, MAT, MDF values.
 *
 * ---
 *
 * Here is a list of the Damage Styles that come with this plugin by default.
 * You can add in your own and even edit them to your liking.
 * Or just remove them if you want.
 *
 * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
 * Style          Use Formula As   PH/MA Disparity   Stat Scale   Damage Scale
 * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
 * Standard       Formula          No                Varies       Varies
 * ArmorScaling   Formula          No                Varies       Varies
 * CT             Multiplier       Yes               Low          Normal
 * D4             Multiplier       No                High         Normal
 * DQ             Multiplier       No                Low          Low
 * FF7            Power            Yes               Low          High
 * FF8            Power            Yes               Medium       Normal
 * FF9            Power            Yes               Low          Normal
 * FF10           Power            Yes               Medium       High
 * MK             Multiplier       No                Medium       Low
 * MOBA           Multiplier       No                Medium       Normal
 * PKMN           Power            No                Low          Normal
 *
 * Use the above chart to figure out which Damage Style best fits your game,
 * if you plan on using them.
 *
 * The 'Standard' style is the same as the 'Manual' formula input, except that
 * it allows for the support of <Armor Penetration> and <Armor Reduction>
 * notetags.
 *
 * The 'Armor Scaling' style allows you to type in the base damage calculation
 * without the need to type in any defending modifiers.
 *
 * NOTE: While these are based off the damage formulas found in other games,
 * not all of them are exact replicas. Many of them are adapted for use in
 * RPG Maker MZ since not all RPG's use the same set of parameters and not all
 * external multipliers function the same way as RPG Maker MZ.
 * 
 * ---
 *
 * Style:
 * - This is what the Damage Style is.
 *
 * Use Formula As:
 * - This is what you insert into the formula box.
 * - Formula: Type in the formula for the action just as you would normally.
 * - Multiplier: Type in the multiplier for the action.
 *     Use float values. This means 250% is typed out as 2.50
 * - Power: Type in the power constant for the action.
 *     Use whole numbers. Type in something like 16 for a power constant.
 * 
 * PH/MA Disparity:
 * - Is there a disparity between how Physical Attacks and Magical Attacks
 *   are calculated?
 * - If yes, then physical attacks and magical attacks will have different
 *   formulas used.
 * - If no, then physical attacks and magical attacks will share similar
 *   formulas for how they're calculated.
 *
 * Stat Scale:
 * - How much should stats scale throughout the game?
 * - Low: Keep them under 100 for the best results.
 * - Medium: Numbers work from low to mid 400's for best results.
 * - High: The numbers really shine once they're higher.
 *
 * Damage Scale:
 * - How much does damage vary depending on small parameter changes?
 * - Low: Very little increase from parameter changes.
 * - Normal: Damage scales close to proportionally with parameter changes.
 * - High: Damage can boost itself drastically with parameter changes.
 *
 * ---
 *
 * To determine what kind of parameters are used for the Damage Styles, they
 * will depend on two things: the action's 'Hit Type' (ie Physical Attack,
 * Magical Attack, and Certain Hit) and the action's 'Damage Type' (ie. Damage,
 * Recovery, or Drain).
 *
 * Certain Hit tends to use whichever value is higher: ATK or MAT, and then
 * ignores the target's defense values. Use Certain Hits for 'True Damage'.
 *
 * Use the chart below to figure out everything else:
 * 
 * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
 * Hit Type      Damage Type   Attacker Parameter   Defender Parameter
 * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
 * Physical      Damage        ATK                  DEF
 * Magical       Damage        MAT                  MDF
 * Certain Hit   Damage        Larger (ATK, MAT)    -Ignores-
 * Physical      Recover       DEF                  -Ignores-
 * Magical       Recover       MDF                  -Ignores-
 * Certain Hit   Recover       Larger (ATK, MAT)    -Ignores-
 * Physical      Drain         ATK                  DEF
 * Magical       Drain         MAT                  MDF
 * Certain Hit   Drain         Larger (ATK, MAT)    -Ignores-
 *
 * These can be modified within the Plugin Parameters in the individual
 * Damage Styles themselves.
 *
 * ---
 *
 * Skills and Items can use different Damage Styles from the setting you've
 * selected in the Plugin Parameters. They can be altered to have different
 * Damage Styles through the usage of a notetag:
 *
 * <Damage Style: name>
 *
 * This will use whichever style is found in the Plugin Parameters.
 *
 * If "Manual" is used, then no style will be used and all calculations will be
 * made strictly based off the formula found inside the formula box.
 *
 * ---
 *
 * ============================================================================
 * VisuStella MZ Compatibility
 * ============================================================================
 *
 * While this plugin is compatible with the majority of the VisuStella MZ
 * plugin library, it is not compatible with specific plugins or specific
 * features. This section will highlight the main plugins/features that will
 * not be compatible with this plugin or put focus on how the make certain
 * features compatible.
 *
 * ---
 * 
 * VisuMZ_1_BattleCore
 * 
 * When using Action Sequences, Boost effects for damage, turn extensions,
 * analyze, etc. will not occur for anything other than the Action Sequence:
 * "MECH: Action Effect" in order to maintain controlled effects. However, if
 * you do want to apply bonuses for Boosts, utilize "MECH: Boost Store Data" to
 * store inside a variable how many times Boosts were used. This can be used
 * however which way you want it to as long as it is manageable through events
 * and Common Events.
 * 
 * ---
 *
 * ============================================================================
 * Notetags
 * ============================================================================
 *
 * The following are notetags that have been added through this plugin. These
 * notetags will not work with your game if this plugin is OFF or not present.
 * 
 * ---
 * 
 * === HP Gauge-Related Notetags ===
 * 
 * The following notetags allow you to set whether or not HP Gauges can be
 * displayed by enemies regardless of Plugin Parameter settings.
 * 
 * ---
 *
 * <Show HP Gauge>
 *
 * - Used for: Enemy Notetags
 * - Will always show the HP Gauge for the enemy regardless of the defeat
 *   requirement setting.
 * - This does not bypass the player's Options preferences.
 * - This does not bypass disabling enemy HP Gauges as a whole.
 * 
 * ---
 *
 * <Hide HP Gauge>
 *
 * - Used for: Enemy Notetags
 * - Will always hide the HP Gauge for the enemy regardless of the defeat
 *   requirement setting.
 * - This does not bypass the player's Options preferences.
 * 
 * ---
 * 
 * <Battle UI Offset: +x, +y>
 * <Battle UI Offset: -x, -y>
 * 
 * <Battle UI Offset X: +x>
 * <Battle UI Offset X: -x>
 * 
 * <Battle UI Offset Y: +y>
 * <Battle UI Offset Y: -y>
 * 
 * - Used for: Actor and Enemy Notetags
 * - Adjusts the offset of HP Gauges and State Icons above the heads of actors
 *   and enemies.
 * - Replace 'x' with a number value that offsets the x coordinate.
 * - Negative x values offset left. Positive x values offset right.
 * - Replace 'y' with a number value that offsets the y coordinate.
 * - Negative y values offset up. Positive x values offset down.
 * 
 * ---
 *
 * === Animation-Related Notetags ===
 *
 * The following notetags allow you to set animations to play at certain
 * instances and/or conditions.
 *
 * ---
 *
 * <Slip Animation: x>
 *
 * - Requires VisuMZ_0_CoreEngine!
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - During the phase at which the user regenerates HP, MP, or TP, this
 *   animation will play as long as the user is alive and visible.
 * - Replace 'x' with a number value representing the Animation ID to play.
 *
 * ---
 *
 * <Cast Animation: x>
 *
 * - Used for: Skill Notetags
 * - Plays a battle animation at the start of the skill.
 * - Replace 'x' with a number value representing the Animation ID to play.
 *
 * ---
 *
 * <Attack Animation: x>
 *
 * - Used for: Enemy Notetags
 * - Gives an enemy an attack animation to play for its basic attack.
 * - Replace 'x' with a number value representing the Animation ID to play.
 *
 * ---
 * 
 * <Under>
 * 
 * - Used for: Animation Name Tags
 * - If this tag is found in an animation's name, the animation will appear
 *   under battlers while in battle.
 * - This effect only applies to battlers in the battle scene.
 * - Under effect is NOT applied to status window portraits.
 * - Under effect is NOT applied to projectile animations.
 * 
 * ---
 *
 * === Battleback-Related Notetags ===
 *
 * You can apply these notetags to have some control over the battlebacks that
 * appear in different regions of the map for random or touch encounters.
 *
 * ---
 *
 * <Region x Battleback1: filename>
 * <Region x Battleback2: filename>
 * 
 * - Used for: Map Notetags
 * - If the player starts a battle while standing on 'x' region, then the
 *   'filename' battleback will be used.
 * - Replace 'x' with a number representing the region ID you wish to use.
 * - Replace 'filename' with the filename of the graphic to use. Do not insert
 *   any extensions. This means the file 'Castle1.png' will be only inserted
 *   as 'Castle1' without the '.png' at the end.
 * - *NOTE: This will override any specified battleback settings.
 *
 * ---
 *
 * === Battle Command-Related Notetags ===
 *
 * You can use notetags to change how the battle commands of playable
 * characters appear in battle as well as whether or not they can be used.
 *
 * ---
 *
 * <Seal Attack>
 * <Seal Guard>
 * <Seal Item>
 *
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Prevents specific battle commands from being able to be used.
 *
 * ---
 *
 * <Battle Commands>
 *  Attack
 *  Skills
 *  SType: x
 *  SType: name
 *  All Skills
 *  Skill: x
 *  Skill: name
 *  Guard
 *  Item
 *  Status
 *  Party
 *  Escape
 *  Auto Battle
 *  Combat Log
 *  Talk
 *  Weapon Swap
 * </Battle Commands>
 *
 * - Used for: Class Notetags
 * - Changes which commands appear in the Actor Command Window in battle.
 *   If this notetag is not used, then the default commands determined in
 *   Plugin Parameters => Actor Command Window => Command List will be used.
 * - Add/remove/modify entries as needed.
 *
 * - Attack 
 *   - Adds the basic attack command.
 * 
 * - Skills
 *   - Displays all the skill types available to the actor.
 * 
 * - SType: x
 * - Stype: name
 *   - Adds in a specific skill type.
 *   - Replace 'x' with the ID of the skill type.
 *   - Replace 'name' with the name of the skill type (without text codes).
 *
 * - All Skills
 *   - Adds all usable battle skills as individual actions.
 * 
 * - Skill: x
 * - Skill: name
 *   - Adds in a specific skill as a usable action.
 *   - Replace 'x' with the ID of the skill.
 *   - Replace 'name' with the name of the skill.
 * 
 * - Guard
 *   - Adds the basic guard command.
 * 
 * - Item
 *   - Adds the basic item command.
 * 
 * - Status
 *   - Adds a status command to view the current inputting actor's status.
 *
 * - Party
 *   - Requires VisuMZ_2_PartySystem.
 *   - Allows this actor to switch out with a different party member.
 * 
 * - Escape
 *   - Adds the escape command.
 * 
 * - Auto Battle
 *   - Adds the auto battle command.
 * 
 * - Combat Log
 *   - Requires VisuMZ_4_CombatLog.
 *   - Opens up the combat log.
 * 
 * - Talk
 *   - Requires VisuMZ_3_BattleCmdTalk!
 *   - Shows talk command if applicable.
 * 
 * - Weapon Swap
 *   - Requires VisuMZ_2_WeaponSwapSystem.
 *   - Swaps the current weapon.
 *
 * Example:
 *
 * <Battle Commands>
 *  Attack
 *  Skill: Heal
 *  Skills
 *  Guard
 *  Item
 *  Escape
 * </Battle Commands>
 *
 * ---
 *
 * <Command Text: x>
 *
 * - Used for: Skill Notetags
 * - When a skill is used in a <Battle Commands> notetag set, you can change
 *   the skill name text that appears to something else.
 * - Replace 'x' with the skill's name you want to shown in the Actor Battle
 *   Command window.
 * - Recommended Usage: Shorten skill names that are otherwise too big to fit
 *   inside of the Actor Battle Command window.
 *
 * ---
 *
 * <Command Icon: x>
 *
 * - Used for: Skill Notetags
 * - When a skill is used in a <Battle Commands> notetag set, you can change
 *   the skill icon that appears to something else.
 * - Replace 'x' with the ID of icon you want shown in the Actor Battle Command
 *   window to represent the skill.
 * 
 * ---
 * 
 * <Command Require Learn>
 * 
 * - Used for: Skill Notetags
 * - Determines if a battle command is visible or not by whether the actor has
 *   learned the skill.
 * - Learning the skill is a requirement. Acquiring the skill through traits
 *   does not count as learning the skill.
 * 
 * ---
 * 
 * <Command Require Access>
 * 
 * - Used for: Skill Notetags
 * - Determines if a battle command is visible or not by whether the actor has
 *   access to the skill.
 * - Having access to the skill can come through either learning the skill or
 *   temporarily acquiring it through trait objects.
 * 
 * ---
 * 
 * <Command Show Switch: x>
 * 
 * <Command Show All Switches: x,x,x>
 * <Command Show Any Switches: x,x,x>
 * 
 * - Used for: Skill Notetags
 * - Determines if a battle command is visible or not through switches.
 * - Replace 'x' with the switch ID to determine the skill's visibility.
 * - If 'All' notetag variant is used, item will be hidden until all
 *   switches are ON. Then, it would be shown.
 * - If 'Any' notetag variant is used, item will be shown if any of the
 *   switches are ON. Otherwise, it would be hidden.
 * - This can be applied to Attack and Guard commands, too.
 * 
 * ---
 * 
 * <Command Hide Switch: x>
 * 
 * <Command Hide All Switches: x,x,x>
 * <Command Hide Any Switches: x,x,x>
 * 
 * - Used for: Skill Notetags
 * - Determines if a battle command is visible or not through switches.
 * - Replace 'x' with the switch ID to determine the skill's visibility.
 * - If 'All' notetag variant is used, item will be shown until all
 *   switches are ON. Then, it would be hidden.
 * - If 'Any' notetag variant is used, item will be hidden if any of the
 *   switches are ON. Otherwise, it would be shown.
 * - This can be applied to Attack and Guard commands, too.
 * 
 * ---
 * 
 * <Battle Portrait: filename>
 *
 * - Used for: Actor
 * - This is used with the "Portrait" Battle Layout.
 * - Sets the battle portrait image for the actor to 'filename'.
 * - Replace 'filename' with a picture found within your game project's
 *   img/pictures/ folder. Filenames are case sensitive. Leave out the filename
 *   extension from the notetag.
 * - This will override any menu images used for battle only.
 * 
 * ---
 * 
 * <Battle Portrait Offset: +x, +y>
 * <Battle Portrait Offset: -x, -y>
 * 
 * <Battle Portrait Offset X: +x>
 * <Battle Portrait Offset X: -x>
 * 
 * <Battle Portrait Offset Y: +y>
 * <Battle Portrait Offset Y: -y>
 *
 * - Used for: Actor
 * - This is used with the "Portrait" and "Border" Battle Layouts.
 * - Offsets the X and Y coordinates for the battle portrait.
 * - Replace 'x' with a number value that offsets the x coordinate.
 * - Negative x values offset left. Positive x values offset right.
 * - Replace 'y' with a number value that offsets the y coordinate.
 * - Negative y values offset up. Positive x values offset down.
 * 
 * ---
 *
 * <Help Description>
 *  text
 *  text
 * </Help Description>
 *
 * - Used for: State Notetags
 * - Assigns a help description for the state that's displayed under the
 *   "Status" actor command.
 * - Replace 'text' with text you want displayed for the help window.
 * - This best works with one line for compatibility with other plugins.
 * - Insert %1 into the help description to show any data that would otherwise
 *   be shown as the state display, such as Absorption Barrier count.
 * - This is used as a common notetag between Battle Core's state descriptions
 *   and State Tooltips' state descriptions.
 * 
 * ---
 * 
 * <In-Battle Status Description>
 *  text
 *  text
 * </In-Battle Status Description>
 * - Assigns a help description for the state that's displayed under the
 *   "Status" actor command.
 * - Replace 'text' with text you want displayed for the help window.
 * - This best works with one line for compatibility with other plugins.
 * - Insert %1 into the help description to show any data that would otherwise
 *   be shown as the state display, such as Absorption Barrier count.
 * - The description used here will not be used for State Tooltips.
 * - If both <Help Description> and <In-Battle Status Description> notetags
 *   exist in the same state, priority will be given to this one for the
 *   In-Battle Status Window.
 *
 * ---
 * 
 * <Exclude From Status Listing>
 * 
 * - Used for: State Notetags
 * - Excludes the state from being displayed in the status listing.
 * 
 * ---
 * 
 * === JavaScript Notetag: Battle Command-Related ===
 *
 * The following are notetags made for users with JavaScript knowledge to
 * determine if skill-based battle commands are visible or hidden.
 * 
 * ---
 * 
 * <JS Command Visible>
 *  code
 *  code
 *  visible = code;
 * </JS Command Visible>
 * 
 * - Used for: Skill Notetags
 * - The 'visible' variable is the final returned variable to determine the
 *   skill's visibility in the Battle Command Window.
 * - Replace 'code' with JavaScript code to determine the skill's visibility in
 *   the Battle Command Window.
 * - The 'user' variable represents the user who will perform the skill.
 * - The 'skill' variable represents the skill to be used.
 * 
 * ---
 *
 * === Targeting-Related Notetags ===
 *
 * The following notetags are related to the targeting aspect of skills and
 * items and may adjust the scope of how certain skills/items work.
 *
 * ---
 *
 * <Always Hit>
 *
 * <Always Hit Rate: x%>
 *
 * - Used for: Skill, Item Notetags
 * - Causes the action to always hit or to always have a hit rate of exactly
 *   the marked x%.
 * - Replace 'x' with a number value representing the hit success percentage.
 *
 * ---
 *
 * <Repeat Hits: x>
 *
 * - Used for: Skill, Item Notetags
 * - Changes the number of hits the action will produce.
 * - Replace 'x' with a number value representing the number of hits to incur.
 *
 * ---
 *
 * <Target: x Random Any>
 *
 * - Used for: Skill, Item Notetags
 * - Makes the skill pick 'x' random targets when used.
 * - Targets can be both actors and enemies.
 * - This will overwrite the existing database scope and ignore the database's
 *   existing scope in favor of this.
 * - Replace 'x' with a number value representing the number of random targets.
 *
 * ---
 *
 * <Target: x Random Enemies>
 *
 * - Used for: Skill, Item Notetags
 * - Makes the skill pick 'x' random targets when used.
 * - This will overwrite the existing database scope and ignore the database's
 *   existing scope in favor of this.
 * - Targets are only enemies.
 * - Replace 'x' with a number value representing the number of random targets.
 *
 * ---
 *
 * <Target: x Random Allies>
 *
 * - Used for: Skill, Item Notetags
 * - Makes the skill pick 'x' random targets when used.
 * - This will overwrite the existing database scope and ignore the database's
 *   existing scope in favor of this.
 * - Targets are only actors.
 * - Replace 'x' with a number value representing the number of random targets.
 *
 * ---
 *
 * <Target: All Allies But User>
 *
 * - Used for: Skill, Item Notetags
 * - Targets all allies with the exception of the user.
 * - This will overwrite the existing database scope and ignore the database's
 *   existing scope in favor of this.
 *
 * ---
 * 
 * <Target: Ally or Enemy>
 * 
 * - Used for: Skill, Item Notetags
 * - Allows the player to target allies or enemies with the skill/item.
 *   - Keep in mind this does NOT allow you to select dead party members.
 * - This will overwrite the existing database scope and ignore the database's
 *   existing scope in favor of this.
 * - Target selection emphasis will go to allies first.
 * - Ignored when used by enemies and will be treated as an ally scope.
 * - Auto-battle actors will also treat this action as an ally scope.
 * - For certain battle layouts in frontview, this will open the Actor Select
 *   window in order for Touch Input to be able to select actors.
 * 
 * ---
 * 
 * <Target: Enemy or Ally>
 * 
 * - Used for: Skill, Item Notetags
 * - Allows the player to target enemies or allies with the skill/item.
 *   - Keep in mind this does NOT allow you to select dead party members.
 * - This will overwrite the existing database scope and ignore the database's
 *   existing scope in favor of this.
 * - Target selection emphasis will go to enemies first.
 * - Ignored when used by enemies and will be treated as an enemy scope.
 * - Auto-battle actors will also treat this action as an enemy scope.
 * - For certain battle layouts in frontview, this will open the Actor Select
 *   window in order for Touch Input to be able to select actors.
 * 
 * ---
 * 
 * <Single or Multiple Select>
 * 
 * - Used for: Skill, Item Notetags
 * - Requires an original scope that can select individual targets.
 * - This will allow the skill/item to be able to select either single targets
 *   or multiple targets at once.
 *   - In order to select "all enemies", the player must press the "Page Up"
 *     keyboard button or the visual on screen "All Enemies" button.
 *   - In order to select "all allies", the player must press the "Page Down"
 *     keyboard button or the visual on screen "All Allies" button.
 *   - Those wondering why this isn't regulated to a command left or right of
 *     the enemies and actors is because mouse controls and touch controls
 *     would not be able to select all enemies or all allies that way.
 *   - This can NOT be used with single dead ally scopes.
 * - If there is an enemy with Taunt or Provoke, the option to select
 *   "All Enemies" does not become possible.
 * - The enemy AI and Auto-Battle actor AI will NOT make use of the ability to
 *   toggle between single and multiple target scopes. They will only use the
 *   single target versions of these skills.
 * 
 * ---
 * 
 * <Disperse Damage>
 * 
 * - Used for: Skill, Item Notetags
 * - This will cause any damage dealt by this skill to be split equally amongst
 *   all targets of the skill including repeats.
 *   - For basic attacks, any damage reduction added attack trait totals will
 *     by reverted.
 * - This does NOT have to be used with <Single or Multiple Select> notetag and
 *   can be used by itself for an "All" scope, making the skill/item deal less
 *   damage if there's more enemies and more damage if there's less enemies.
 * 
 * ---
 * 
 * <Cannot Target User>
 * 
 * - Used for: Skill, Item Notetags
 * - This will cause the action to be unable to select the user as the target.
 * - This is not a targeting scope. Instead, it is used in addition to any
 *   other targeting scopes out there.
 * - When used with "All" scopes, the user is removed from the target pool.
 * - This is also applied outside of battle.
 * - If the user somehow enters the target pool, the user is then replaced by
 *   a random ally found in the party.
 * 
 * ---
 *
 * === JavaScript Notetag: Targeting-Related ===
 *
 * ---
 * 
 * <JS Accuracy>
 *  code
 *  code
 *  rate = code;
 * </JS Accuracy>
 * 
 * - Used for: Skill, Item Notetags
 * - Only applies during battle.
 * - The 'rate' variable is the final returned amount to determine the
 *   accuracy hit success rate.
 *   - Base value comes from Game_Action.itemHit
 *   - Skill/Item <JS Accuracy> runs
 *   - Then <JS Accuracy as User/Target> notetags run
 * - Replace 'code' with JavaScript code to determine the final 'rate' to be
 *   returned as the accuracy hit success rate.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 * - Works best with VisuMZ Core Engine's "Improved Accuracy" QoL formula in
 *   order to consolidate both HIT and EVA.
 * 
 * ---
 * 
 * <JS Accuracy as User>
 *  code
 *  code
 *  rate = code;
 * </JS Accuracy as User>
 * 
 * <JS Accuracy as Target>
 *  code
 *  code
 *  rate = code;
 * </JS Accuracy as Target>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Only applies during battle.
 * - The 'rate' variable is the final returned amount to determine the
 *   accuracy hit success rate.
 *   - Base value comes from Game_Action.itemHit
 *   - Skill/Item <JS Accuracy> runs
 *   - Then <JS Accuracy as User/Target> notetags run
 * - If used on trait objects, this will apply to any skills/items used as long
 *   as the unit affected by the trait object has access to the trait object.
 * - If the 'as User' notetag variant is used, this code will be run as a
 *   response to the action from the action user end.
 * - If the 'as Target' notetag variant is used, this code will be run as a
 *   response to the action from the action target end.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 * 
 * ---
 * 
 * <JS Targets>
 *  code
 *  code
 *  targets = [code];
 * </JS Targets>
 *
 * - Used for: Skill, Item Notetags
 * - The 'targets' variable is an array that is returned to be used as a
 *   container for all the valid action targets.
 *   - This is NOT used for filtering out who the player can or cannot select.
 *   - This determines a final result.
 * - The 'targets' variable will include the original set of targets determined
 *   by the skill/item's original scale.
 * - If you wish to clear it out, simply do 'targets = []' first.
 * - Replace 'code' with JavaScript code to determine valid targets.
 *
 * ---
 *
 * === Damage-Related Notetags ===
 *
 * ---
 *
 * <Damage Style: name>
 *
 * - Used for: Skill, Item Notetags
 * - Replace 'name' with a Damage Style name to change the way calculations are
 *   made using the damage formula input box.
 * - Names can be found in Plugin Parameters => Damage Settings => Style List
 *
 * ---
 *
 * <Armor Reduction: x>
 * <Armor Reduction: x%>
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - If used on skills and/or items, sets the current skill/item's armor
 *   reduction properties to 'x' and/or 'x%'.
 * - If used on trait objects, adds 'x' and/or 'x%' armor reduction properties
 *   when calculating one's own armor.
 * - This applies to physical attacks.
 * - Use the 'x' notetag variant to determine a flat reduction value.
 * - Use the 'x%' notetag variant to determine a percentile reduction value.
 *
 * ---
 *
 * <Armor Penetration: x>
 * <Armor Penetration: x%>
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - If used on skills and/or items, sets the current skill/item's armor
 *   penetration properties to 'x' and/or 'x%'.
 * - If used on trait objects, adds 'x' and/or 'x%' armor penetration
 *   properties when calculating a target's armor.
 * - This applies to physical attacks.
 * - Use the 'x' notetag variant to determine a flat penetration value.
 * - Use the 'x%' notetag variant to determine a percentile penetration value.
 *
 * ---
 *
 * <Magic Reduction: x>
 * <Magic Reduction: x%>
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - If used on skills and/or items, sets the current skill/item's armor
 *   reduction properties to 'x' and/or 'x%'.
 * - If used on trait objects, adds 'x' and/or 'x%' armor reduction properties
 *   when calculating one's own armor.
 * - This applies to magical attacks.
 * - Use the 'x' notetag variant to determine a flat reduction value.
 * - Use the 'x%' notetag variant to determine a percentile reduction value.
 *
 * ---
 *
 * <Magic Penetration: x>
 * <Magic Penetration: x%>
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - If used on skills and/or items, sets the current skill/item's armor
 *   penetration properties to 'x' and/or 'x%'.
 * - If used on trait objects, adds 'x' and/or 'x%' armor penetration
 *   properties when calculating a target's armor.
 * - This applies to magical attacks.
 * - Use the 'x' notetag variant to determine a flat penetration value.
 * - Use the 'x%' notetag variant to determine a percentile penetration value.
 *
 * ---
 *
 * <Bypass Damage Cap>
 * 
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - If used on skills and/or items, this will cause the action to never have
 *   its damage capped.
 * - If used on trait objects, this will cause the affected unit to never have
 *   its damage capped.
 *
 * ---
 *
 * <Damage Cap: x>
 *
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - If used on skills and/or items, this will declare the hard damage cap to
 *   be the 'x' value.
 * - If used on trait objects, this will raise the affect unit's hard damage
 *   cap to 'x' value. If another trait object has a higher value, use that
 *   value instead.
 *
 * ---
 *
 * <Bypass Soft Damage Cap>
 *
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - If used on skills and/or items, this will cause the action to never have
 *   its damage scaled downward to the soft cap.
 * - If used on trait objects, this will cause the affected unit to never have
 *   its damage scaled downward to the soft cap.
 *
 * ---
 *
 * <Soft Damage Cap: +x%>
 * <Soft Damage Cap: -x%>
 *
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - If used on skills and/or items, this will increase/decrease the action's
 *   soft cap by x% where 'x' is a percentage value representing the increment
 *   changed by the hard cap value.
 * - If used on trait objects, this will raise the affect unit's soft damage
 *   limit by x% where 'x' is a percentage value representing the increment
 *   changed by the hard cap value.
 *
 * ---
 *
 * <Unblockable>
 *
 * - Used for: Skill, Item Notetags
 * - Using "Guard" against this skill will not reduce any damage.
 *
 * ---
 * 
 * <Popup Position: Head>
 * <Popup Position: Center>
 * <Popup Position: Base>
 * 
 * - Used for: Enemy Notetags
 * - Determines the popup starting position for this enemy.
 *   - Head makes the popups start at the top of the ennemy.
 *   - Center makes the popups start at the center of the ennemy.
 *   - Base makes the popups start at the bottom of the ennemy.
 * - If this notetag is not used, refer to the default Plugin Parameter setting
 *   found in Damage Settings.
 * 
 * ---
 * 
 * <Popup Offset X: +x>
 * <Popup Offset X: -x>
 * <Popup Offset Y: +y>
 * <Popup Offset Y: -y>
 * 
 * - Used for: Enemy Notetags
 * - Alters the popup x/y position offset for this enemy.
 * - Replace 'x' with a number representing the horizontal position x offset.
 *   - Negative: left. Positive: right.
 * - Replace 'y' with a number representing the vertical position y offset.
 *   - Negative: up. Positive: down.
 * - If these notetags are not used, refer to the default Plugin Parameter
 *   settings found in Damage Settings.
 * 
 * ---
 *
 * === Critical-Related Notetags ===
 *
 * The following notetags affect skill and item critical hit rates and the
 * critical damage multiplier.
 *
 * ---
 *
 * <Always Critical>
 *
 * - Used for: Skill, Item Notetags
 * - This skill/item will always land a critical hit regardless of the
 *   user's CRI parameter value.
 *
 * ---
 *
 * <Set Critical Rate: x%>
 *
 * - Used for: Skill, Item Notetags
 * - This skill/item will always have a x% change to land a critical hit
 *   regardless of user's CRI parameter value.
 * - Replace 'x' with a percerntage value representing the success rate.
 *
 * ---
 *
 * <Modify Critical Rate: x%>
 * <Modify Critical Rate: +x%>
 * <Modify Critical Rate: -x%>
 *
 * - Used for: Skill, Item Notetags
 * - Modifies the user's CRI parameter calculation for this skill/item.
 * - The 'x%' notetag variant will multiply the user's CRI parameter value
 *   for this skill/item.
 * - The '+x%' and '-x%' notetag variants will incremenetally increase/decrease
 *   the user's CRI parameter value for this skill/item.
 *
 * ---
 *
 * <Modify Critical Multiplier: x%>
 * <Modify Critical Multiplier: +x%>
 * <Modify Critical Multiplier: -x%>
 *
 * - Used for: Skill, Item Notetags
 * - These notetags determine the damage multiplier when a critical hit lands.
 * - The 'x%' notetag variant multiply the multiplier to that exact percentage.
 * - The '+x%' and '-x%' notetag variants will change the multiplier with an
 *   incremenetal rate for this skill/item.
 *
 * ---
 *
 * <Modify Critical Bonus Damage: x%>
 * <Modify Critical Bonus Damage: +x%>
 * <Modify Critical Bonus Damage: -x%>
 *
 * - Used for: Skill, Item Notetags
 * - These notetags determine the bonus damage added when a critical hit lands.
 * - The 'x%' notetag variant multiply the damage to that exact percentage.
 * - The '+x%' and '-x%' notetag variants will change the bonus damage with an
 *   incremenetal rate for this skill/item.
 *
 * ---
 *
 * === JavaScript Notetags: Critical-Related ===
 *
 * The following are notetags made for users with JavaScript knowledge to
 * determine how critical hit-related aspects are calculated.
 *
 * ---
 *
 * <JS Critical Rate>
 *  code
 *  code
 *  rate = code;
 * </JS Critical Rate>
 *
 * - Used for: Skill, Item Notetags
 * - The 'rate' variable is the final returned amount to determine the
 *   critical hit success rate.
 *   - Base value comes from Game_Action.itemCri
 *   - Skill/Item <JS Critical Rate> runs
 *   - Then <JS Critical Rate as User/Target> notetags run
 * - Replace 'code' with JavaScript code to determine the final 'rate' to be
 *   returned as the critical hit success rate.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 *
 * ---
 *
 * <JS Critical Rate as User>
 *  code
 *  code
 *  rate = code;
 * </JS Critical Rate as User>
 *
 * <JS Critical Rate as Target>
 *  code
 *  code
 *  rate = code;
 * </JS Critical Rate as Target>
 *
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Only applies during battle.
 * - The 'rate' variable is the final returned amount to determine the
 *   critical hit success rate.
 *   - Base value comes from Game_Action.itemCri
 *   - Skill/Item <JS Critical Rate> runs
 *   - Then <JS Critical Rate as User/Target> notetags run
 * - Replace 'code' with JavaScript code to determine the final 'rate' to be
 *   returned as the critical hit success rate.
 * - If used on trait objects, this will apply to any skills/items used as long
 *   as the unit affected by the trait object has access to the trait object.
 * - If the 'as User' notetag variant is used, this code will be run as a
 *   response to the action from the action user end.
 * - If the 'as Target' notetag variant is used, this code will be run as a
 *   response to the action from the action target end.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 *
 * ---
 *
 * <JS Critical Damage>
 *  code
 *  code
 *  multiplier = code;
 *  bonusDamage = code;
 * </JS Critical Damage>
 *
 * - Used for: Skill, Item Notetags
 * - The 'multiplier' variable is returned later and used as the damage
 *   multiplier used to amplify the critical damage amount.
 * - The 'bonusDamage' variable is returned later and used as extra added
 *   damage for the critical damage amount.
 * - Replace 'code' with JavaScript code to determine how the 'multiplier' and
 *   'bonusDamage' variables are calculated.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 *
 * ---
 * 
 * === Life Steal-Related Notetags ===
 * 
 * ---
 * 
 * <HP Life Steal: x%>
 * <MP Life Steal: x%>
 * 
 * - Used for: Skill, Item Notetags
 * - Causes this skill/item to have Life Steal properties, allowing the user to
 *   take x% of the HP/MP Damage as recovered HP/MP.
 *   - HP Life Steal can only take HP from dealt HP damage.
 *   - MP Life Steal can only take MP from dealt MP damage.
 * - Replace 'x' with a number representing the percentage of the dealt damage
 *   used as HP/MP recovery.
 * - This cannot be used with skills/items with HP Drain/MP Drain. Life Steal
 *   is a different mechanic from HP Drain/MP Drain.
 * 
 * ---
 * 
 * <HP Life Steal Certain Hit: +x%>
 * <HP Life Steal Physical Hit: +x%>
 * <HP Life Steal Magical Hit: +x%>
 * 
 * <HP Life Steal Certain Hit: -x%>
 * <HP Life Steal Physical Hit: -x%>
 * <HP Life Steal Magical Hit: -x%>
 * 
 * <MP Life Steal Certain Hit: +x%>
 * <MP Life Steal Physical Hit: +x%>
 * <MP Life Steal Magical Hit: +x%>
 * 
 * <MP Life Steal Certain Hit: -x%>
 * <MP Life Steal Physical Hit: -x%>
 * <MP Life Steal Magical Hit: -x%>
 * 
 * - Used for: Used for: Actor, Class, Armor, Enemy, State Notetags
 * - The related battler's various trait properties can have passive life steal
 *   properties that will trigger upon using skills/items with matching hit
 *   types regardless of whether or not the skill/item innately has Life Steal.
 *   - Notetag variants with "Certain Hit" will only trigger from "Certain Hit"
 *     skill and item types. Same with "Physical" and "Magical" variants.
 *   - HP Life Steal can only take HP from dealt HP damage.
 *   - MP Life Steal can only take HP from dealt MP damage.
 * - Replace 'x' with a number representing the additive stacking percentage
 *   boost of the dealt damage used as HP/MP recovery. The effects will stack
 *   additively with other trait objects.
 * - This cannot be used with skills/items with HP Drain/MP Drain. Life Steal
 *   is a different mechanic from HP Drain/MP Drain.
 * 
 * ---
 * 
 * <Cancel Life Steal>
 * 
 * <Cancel HP Life Steal>
 * <Cancel MP Life Steal>
 * 
 * - Used for: Skill, Item Notetags
 * - Prevents this skill from allowing Life Steal effects to occur including
 *   the passive life steal calculators from the skill/item user.
 * - This does not affect HP Drain/MP Drain. Life Steal is a different mechanic
 *   from HP Drain/MP Drain.
 * 
 * ---
 * 
 * <Guard Life Steal>
 * 
 * <Guard HP Life Steal>
 * <Guard MP Life Steal>
 * 
 * - Used for: Used for: Actor, Class, Armor, Enemy, State Notetags
 * - If the related battler becomes the target of Life Steal, this will prevent
 *   the Life Steal effects from taking effect.
 * - This does not affect HP Drain/MP Drain. Life Steal is a different mechanic
 *   from HP Drain/MP Drain.
 * 
 * ---
 * 
 * <Disarm Life Steal>
 * 
 * <Disarm HP Life Steal>
 * <Disarm MP Life Steal>
 * 
 * - Used for: Used for: Actor, Class, Armor, Enemy, State Notetags
 * - Makes the related battler unable to HP/MP Life Steal regardless of the
 *   skill/item and its related properties like equipment.
 * - This does not prevent skills/items with innate Life Steal from being used.
 *   Only the Life Steal part of the skill/item will have no effect.
 * - This does not affect HP Drain/MP Drain. Life Steal is a different mechanic
 *   from HP Drain/MP Drain.
 * 
 * ---
 * 
 * <Negative Life Steal>
 * 
 * <Negative HP Life Steal>
 * <Negative MP Life Steal>
 * 
 * - Used for: Used for: Actor, Class, Armor, Enemy, State Notetags
 * - If the related battler becomes the target of Life Steal, this will invert
 *   the healing properties of Life Steal, causing the Life Steal user to
 *   instead take HP/MP damage.
 *   - This does NOT heal the target related battler.
 * - This does not prevent skills/items with innate Life Steal from being used.
 *   Only the Life Steal part of the skill/item will have no effect.
 * - This does not affect HP Drain/MP Drain. Life Steal is a different mechanic
 *   from HP Drain/MP Drain.
 * 
 * ---
 *
 * === Action Sequence-Related Notetags ===
 *
 * Action Sequences allow you full control over how a skill and/or item plays
 * through its course. These notetags give you control over various aspects of
 * those Action Sequences. More information is found in the Action Sequences
 * help section.
 *
 * ---
 *
 * <Custom Action Sequence>
 *
 * - Used for: Skill, Item Notetags
 * - Removes all automated Action Sequence parts from the skill.
 * - Everything Action Sequence-related will be done by Common Events.
 * - Insert Common Event(s) into the skill/item's effects list to make use of
 *   the Custom Action Sequences.
 * - This will prevent common events from loading in the Item Scene and Skill
 *   Scene when used outside of battle.
 *
 * ---
 * 
 * <Auto Action Sequence>
 * 
 * - Used for: Skill, Item Notetags
 * - If the Action Sequence Plugin Parameter "Auto Notetag" is enabled, this
 *   plugin will prevent custom action sequences from happening for the skill
 *   or item, and instead, use an Automatic Action Sequence instead.
 * - Ignore this if you have "Auto Notetag" disabled or set to false. By
 *   default, this setting is set to false. Please be aware of the changes
 *   you've made to your game before using it.
 * 
 * ---
 * 
 * <Bypass Auto Action Sequence>
 * 
 * - Used for: Skill, Item Notetags
 * - This notetag is used for the game devs that have the Action Sequence
 *   Plugin Parameter "Auto Notetag" on for applying <Custom Action Sequence>
 *   to everything.
 * - This will allow items and skills to be able to launch their common
 *   events from the menu scene regardless of the inherent restriction to
 *   prevent action sequence based skills/items with common events from
 *   launching.
 * - Ignore this if you have "Auto Notetag" disabled or set to false. By
 *   default, this setting is set to false. Please be aware of the changes
 *   you've made to your game before using it.
 * 
 * ---
 * 
 * <Common Event: name>
 *
 * - Used for: Skill, Item Notetags
 * - Battle only: calls forth a Common Event of a matching name.
 * - Replace 'name' with the name of a Common Event to call from when this
 *   skill/item is used in battle.
 *   - Remove any \I[x] in the name.
 * - Insert multiple notetags to call multiple Common Events in succession.
 * - This will occur after any Common Event Trait Effects for the skill/item's
 *   database entry.
 * - This is primarily used for users who are reorganizing around their Common
 *   Events and would still like to have their skills/items perform the correct
 *   Action Sequences in case the ID's are different.
 * 
 * ---
 *
 * <Display Icon: x>
 * <Display Text: string>
 *
 * - Used for: Skill, Item Notetags
 * - When displaying the skill/item name in the Action Sequence, determine the
 *   icon and/or text displayed.
 * - Replace 'x' with a number value representing the icon ID to be displayed.
 * - Replace 'string' with a text value representing the displayed name.
 *
 * ---
 * 
 * <Common Event Key: name>
 * <Common Event Keys: name, name, name>
 * 
 * <Common Event Keys>
 *  key
 *  key
 *  key
 * </Common Event Keys>
 * 
 * - Used for: Skill, Item Notetags
 * - Will generate Common Events for the skill/item with a corresponding key.
 * - Replace 'name' with the name of the Common Event's key that you want to
 *   reference. That key will be converted into a Common Event effect for the
 *   skill/item and be treated as an action sequence.
 *   - The notetag variants that use multiple keys will have the keys added in
 *     the order they are listed.
 *   - If keys do not reference any Common Events, no Common Events will be
 *     added for that key.
 * - To mark a Common Event with a key, insert inside a Common Event's name the
 *   [ and ] brackets around the text that will be used as the Common Event's
 *   key text.
 *   - For example, if Common Event's name is "Penta Slash [PENTA]", then the
 *     key used is "PENTA" without the quotes.
 *   - This key could then be referenced by <Common Event Key: PENTA> notetag.
 *   - Do not use commas (,) inside the key text as it will be automatically
 *     removed for the sake of consistency.
 * - This feature is made for make the process of sharing Action Sequences to
 *   become easier without needing to line up Common Event ID's.
 * 
 * ---
 *
 * === Animated Sideview Battler-Related Notetags ===
 *
 * Enemies can use Animated Sideview Actor graphics thanks to this plugin.
 * These notetags give you control over that aspect. Some of these also affect
 * actors in addition to enemies.
 *
 * ---
 *
 * <Sideview Battler: filename>
 *
 * <Sideview Battlers>
 *  filename: weight
 *  filename: weight
 *  filename: weight
 * </Sideview Battlers>
 *
 * - Used for: Enemy Notetags
 * - Replaces the enemy's battler graphic with an animated Sideview Actor
 *   graphic found in the img/sv_actors/ folder.
 * - Replace 'filename' with the filename of the graphic to use. Do not insert
 *   any extensions. This means the file 'Actor1_1.png' will be only inserted
 *   as 'Actor1_1' without the '.png' at the end.
 * - If the multiple notetag vaiant is used, then a random filename is selected
 *   from the list upon the enemy's creation.
 * - Replace 'weight' with a number value representing how often the 'filename'
 *   would come up. The higher the weight, the more often. You may omit this
 *   and the colon(:) and just type in the 'filename' instead.
 * - Add/remove lines as you see fit.
 *
 * Example:
 *
 * <Sideview Battlers>
 *  Actor1_1: 25
 *  Actor1_3: 10
 *  Actor1_5
 *  Actor1_7
 * </Sideview Battlers>
 *
 * ---
 *
 * <Sideview Anchor: x, y>
 *
 * - Used for: Actor, Enemy Notetags
 * - Sets the sprite anchor positions for the sideview sprite.
 * - Replace 'x' and 'y' with numbers depicting where the anchors should be for
 *   the sideview sprite.
 * - By default, the x and y anchors are 0.5 and 1.0.
 *
 * ---
 * 
 * <Sideview Home Offset: +x, +y>
 * <Sideview Home Offset: -x, -y>
 * 
 * - Used for: Actor, Class, Weapon, Armor, State Notetags
 * - Offsets the sideview actor sprite's home position by +/-x, +/-y.
 * - Replace 'x' and 'y' with numbers depicting how much to offset each of the
 *   coordinates by. For '0' values, use +0 or -0.
 * - This notetag will not work if you remove it from the JavaScript code in
 *   Plugin Parameters > Actor > JS:  Home Position
 * 
 * ---
 * 
 * <Sideview Weapon Offset: +x, +y>
 * <Sideview Weapon Offset: -x, -y>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy State Notetags
 * - Offsets the sideview weapon sprite's position by +/-x, +/-y.
 * - Replace 'x' and 'y' with numbers depicting how much to offset each of the
 *   coordinates by. For '0' values, use +0 or -0.
 * 
 * ---
 *
 * <Sideview Show Shadow>
 * <Sideview Hide Shadow>
 *
 * - Used for: Actor, Enemy Notetags
 * - Sets it so the sideview battler's shadow will be visible or hidden.
 *
 * ---
 * 
 * <Sideview Shadow Scale: x%>
 * <Sideview Shadow Scale: x.y>
 * 
 * - Used for: Actor, Enemy Notetags
 * - Adjusts the scaling size of the sideview battler's shadow.
 * - This affects both the X and Y scale.
 * 
 * ---
 * 
 * <Sideview Shadow Scale X: x%>
 * <Sideview Shadow Scale X: x.y>
 * 
 * <Sideview Shadow Scale Y: x%>
 * <Sideview Shadow Scale Y: x.y>
 * 
 * - Used for: Actor, Enemy Notetags
 * - Adjusts the scaling size of the sideview battler's shadow.
 * - These affect their respective X and Y scales separately.
 * 
 * ---
 *
 * <Sideview Collapse>
 * <Sideview No Collapse>
 *
 * - Used for: Enemy Notetags
 * - Either shows the collapse graphic or does not show the collapse graphic.
 * - Collapse graphic means the enemy will 'fade away' once it's defeated.
 * - No collapse graphic means the enemy's corpse will remain on the screen.
 *
 * ---
 *
 * <Sideview Idle Motion: name>
 *
 * <Sideview Idle Motions>
 *  name: weight
 *  name: weight
 *  name: weight
 * </Sideview Idle Motions>
 *
 * - Used for: Enemy Notetags
 * - Changes the default idle motion for the enemy.
 * - Replace 'name' with any of the following motion names:
 *   - 'walk', 'wait', 'chant', 'guard', 'damage', 'evade', 'thrust', 'swing',
 *     'missile', 'skill', 'spell', 'item', 'escape', 'victory', 'dying',
 *     'abnormal', 'sleep', 'dead'
 * - If the multiple notetag vaiant is used, then a random motion name is
 *   selected from the list upon the enemy's creation.
 * - Replace 'weight' with a number value representing how often the 'name'
 *   would come up. The higher the weight, the more often. You may omit this
 *   and the colon(:) and just type in the 'name' instead.
 * - Add/remove lines as you see fit.
 *
 * Example:
 *
 * <Sideview Idle Motions>
 *  walk: 25
 *  wait: 50
 *  guard
 *  victory
 *  abnormal
 * </Sideview Idle Motions>
 *
 * ---
 *
 * <Sideview Size: width, height>
 *
 * - Used for: Enemy Notetags
 * - When using a sideview battler, its width and height will default to the
 *   setting made in Plugin Parameters => Enemy Settings => Size: Width/Height.
 * - This notetag lets you change that value to something else.
 * - Replace 'width' and 'height' with numbers representing how many pixels
 *   wide/tall the sprite will be treated as.
 * - This does NOT change the image size. This only changes the HITBOX size.
 *
 * ---
 *
 * <Sideview Weapon: weapontype>
 *
 * <Sideview Weapons>
 *  weapontype: weight
 *  weapontype: weight
 *  weapontype: weight
 * </Sideview Weapons>
 *
 * - Used for: Enemy Notetags
 * - Give your sideview enemies weapons to use.
 * - Replace 'weapontype' with the name of the weapon type found under the
 *   Database => Types => Weapon Types list (without text codes).
 * - If the multiple notetag vaiant is used, then a random weapon type is
 *   selected from the list upon the enemy's creation.
 * - Replace 'weight' with a number value representing how often the weapontype
 *   would come up. The higher the weight, the more often. You may omit this
 *   and the colon(:) and just type in the 'weapontype' instead.
 * - Add/remove lines as you see fit.
 *
 * Example:
 *
 * <Sideview Weapons>
 *  Dagger: 25
 *  Sword: 25
 *  Axe
 * </Sideview Weapons>
 *
 * ---
 *
 * <traitname Sideview Battler: filename>
 *
 * <traitname Sideview Battlers>
 *  filename: weight
 *  filename: weight
 *  filename: weight
 * </traitname Sideview Battlers>
 *
 * - Used for: Enemy Notetags
 * - Requires VisuMZ_1_ElementStatusCore
 * - Allows certain Trait Sets to cause battlers to have a unique appearance.
 * - Replace 'filename' with the filename of the graphic to use. Do not insert
 *   any extensions. This means the file 'Actor1_1.png' will be only inserted
 *   as 'Actor1_1' without the '.png' at the end.
 * - If the multiple notetag vaiant is used, then a random filename is selected
 *   from the list upon the enemy's creation.
 * - Replace 'weight' with a number value representing how often the 'filename'
 *   would come up. The higher the weight, the more often. You may omit this
 *   and the colon(:) and just type in the 'filename' instead.
 * - Add/remove lines as you see fit.
 *
 * Examples:
 *
 * <Male Sideview Battlers>
 *  Actor1_1: 25
 *  Actor1_3: 10
 *  Actor1_5
 *  Actor1_7
 * </Male Sideview Battlers>
 *
 * <Female Sideview Battlers>
 *  Actor1_2: 25
 *  Actor1_4: 10
 *  Actor1_6
 *  Actor1_8
 * </Female Sideview Battlers>
 *
 * ---
 *
 * <traitname Sideview Idle Motion: name>
 *
 * <traitname Sideview Idle Motions>
 *  name: weight
 *  name: weight
 *  name: weight
 * </traitname Sideview Idle Motions>
 *
 * - Used for: Enemy Notetags
 * - Requires VisuMZ_1_ElementStatusCore
 * - Allows certain Trait Sets to cause battlers to have unique idle motions.
 * - Replace 'name' with any of the following motion names:
 *   - 'walk', 'wait', 'chant', 'guard', 'damage', 'evade', 'thrust', 'swing',
 *     'missile', 'skill', 'spell', 'item', 'escape', 'victory', 'dying',
 *     'abnormal', 'sleep', 'dead'
 * - If the multiple notetag vaiant is used, then a random motion name is
 *   selected from the list upon the enemy's creation.
 * - Replace 'weight' with a number value representing how often the 'name'
 *   would come up. The higher the weight, the more often. You may omit this
 *   and the colon(:) and just type in the 'name' instead.
 * - Add/remove lines as you see fit.
 *
 * Examples:
 *
 * <Jolly Sideview Idle Motions>
 *  wait: 25
 *  victory: 10
 *  walk
 * </Jolly Sideview Idle Motions>
 *
 * <Serious Sideview Idle Motions>
 *  walk: 25
 *  guard: 10
 *  wait
 * </Jolly Sideview Idle Motions>
 *
 * ---
 *
 * <traitname Sideview Weapon: weapontype>
 *
 * <traitname Sideview Weapons>
 *  weapontype: weight
 *  weapontype: weight
 *  weapontype: weight
 * </traitname Sideview Weapons>
 *
 * - Used for: Enemy Notetags
 * - Requires VisuMZ_1_ElementStatusCore
 * - Allows certain Trait Sets to cause battlers to have unique weapons.
 * - Replace 'weapontype' with the name of the weapon type found under the
 *   Database => Types => Weapon Types list (without text codes).
 * - If the multiple notetag vaiant is used, then a random weapon type is
 *   selected from the list upon the enemy's creation.
 * - Replace 'weight' with a number value representing how often the weapontype
 *   would come up. The higher the weight, the more often. You may omit this
 *   and the colon(:) and just type in the 'weapontype' instead.
 * - Add/remove lines as you see fit.
 *
 * Examples:
 *
 * <Male Sideview Weapons>
 *  Dagger: 25
 *  Sword: 25
 *  Axe
 * </Male Sideview Weapons>
 *
 * <Female Sideview Weapons>
 *  Dagger: 25
 *  Spear: 25
 *  Cane
 * </Female Sideview Weapons>
 *
 * ---
 *
 * === Enemy-Related Notetags ===
 *
 * ---
 *
 * <Battler Sprite Cannot Move>
 *
 * - Used for: Enemy Notetags
 * - Prevents the enemy from being able to move, jump, and/or float due to
 *   Action Sequences. Useful for rooted enemies.
 *
 * ---
 * 
 * <Battler Sprite Grounded>
 *
 * - Used for: Enemy Notetags
 * - Prevents the enemy from being able to jumping and/or floating due to
 *   Action Sequences but still able to move. Useful for rooted enemies.
 * 
 * ---
 *
 * <Swap Enemies>
 *  name: weight
 *  name: weight
 *  name: weight
 * </Swap Enemies>
 *
 * - Used for: Enemy Notetags
 * - Causes this enemy database object to function as a randomizer for any of
 *   the listed enemies inside the notetag. When the enemy is loaded into the
 *   battle scene, the enemy is immediately replaced with one of the enemies
 *   listed. The randomization is based off the 'weight' given to each of the
 *   enemy 'names'.
 * - Replace 'name' with the database enemy of the enemy you wish to replace
 *   the enemy with.
 * - Replace 'weight' with a number value representing how often the 'name'
 *   would come up. The higher the weight, the more often. You may omit this
 *   and the colon(:) and just type in the 'name' instead.
 * - Add/remove lines as you see fit.
 *
 * Example:
 *
 * <Swap Enemies>
 *  Bat: 50
 *  Slime: 25
 *  Orc
 *  Minotaur
 * </Swap Enemies>
 *
 * ---
 * 
 * <Aspect Name: name>
 * 
 * - Used for: Enemy Notetags
 * - Changes enemy's aspect name shown in the In-Battle Status and other
 *   supported plugin menus.
 *   - Requires <Aspect Description> in order to show.
 * - Replace 'name' with text for how enemy aspect should be renamed.
 * 
 * ---
 * 
 * <Aspect Color: color>
 * 
 * - Used for: Enemy Notetags
 * - Changes enemy's aspect name color shown in the In-Battle Status and other
 *   supported plugin menus.
 *   - Requires <Aspect Description> in order to show.
 * - Replace 'color' with either a number from 0 to 31 representing the text
 *   color or in the format of '#rrggbb' to custom pick a hex color.
 * 
 * ---
 * 
 * <Aspect Icon: x>
 * 
 * - Used for: Enemy Notetags
 * - Changes enemy's aspect icon shown in the In-Battle Status and other
 *   supported plugin menus.
 *   - Requires <Aspect Description> in order to show.
 * - Replace 'x' with a number representing the icon index used to represent
 *   the enemy aspect.
 * 
 * ---
 * 
 * <Aspect Description>
 *  text
 *  text
 * </Aspect Description>
 * 
 * - Used for: Enemy Notetags
 * - Changes enemy's aspect description shown in the In-Battle Status and other
 *   supported plugin menus.
 * - Replace 'text' with the text you would like to appear as a description for
 *   the enemy's aspect.
 * 
 * ---
 *
 * === JavaScript Notetags: Mechanics-Related ===
 *
 * These JavaScript notetags allow you to run code at specific instances during
 * battle provided that the unit has that code associated with them in a trait
 * object (actor, class, weapon, armor, enemy, or state). How you use these is
 * entirely up to you and will depend on your ability to understand the code
 * used and driven for each case.
 *
 * ---
 *
 * <JS Pre-Start Battle>
 *  code
 *  code
 *  code
 * </JS Pre-Start Battle>
 *
 * <JS Post-Start Battle>
 *  code
 *  code
 *  code
 * </JS Post-Start Battle>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code at the start of battle aimed at the function:
 *   BattleManager.startBattle()
 *   - 'Pre' runs before the function runs.
 *   - 'Post' runs after the function runs.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Pre-Start Turn>
 *  code
 *  code
 *  code
 * </JS Pre-Start Turn>
 *
 * <JS Post-Start Turn>
 *  code
 *  code
 *  code
 * </JS Post-Start Turn>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code at the start of a turn aimed at the function:
 *   BattleManager.startTurn()
 *   - 'Pre' runs before the function runs.
 *   - 'Post' runs after the function runs.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Pre-Start Action>
 *  code
 *  code
 *  code
 * </JS Pre-Start Action>
 *
 * <JS Post-Start Action>
 *  code
 *  code
 *  code
 * </JS Post-Start Action>
 * 
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code at the start of an action aimed at the function:
 *   BattleManager.startAction()
 *   - 'Pre' runs before the function runs.
 *   - 'Post' runs after the function runs.
 * - If used on skills and/or items, this will only apply to the skill/item
 *   being used and does not affect other skills and items.
 * - If used on trait objects, this will apply to any skills/items used as long
 *   as the unit affected by the trait object has access to the trait object.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Pre-Apply>
 *  code
 *  code
 *  code
 * </JS Pre-Apply>
 * 
 * - Used for: Skill, Item Notetags
 * - Runs JavaScript code at the start of an action hit aimed at the function:
 *   Game_Action.prototype.apply()
 *   - 'Pre' runs before the function runs.
 * - If used on skills and/or items, this will only apply to the skill/item
 *   being used and does not affect other skills and items.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 *
 * ---
 *
 * <JS Pre-Apply as User>
 *  code
 *  code
 *  code
 * </JS Pre-Apply as User>
 *
 * <JS Pre-Apply as Target>
 *  code
 *  code
 *  code
 * </JS Pre-Apply as Target>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code at the start of an action hit aimed at the function:
 *   Game_Action.prototype.apply()
 *   - 'Pre' runs before the function runs.
 * - If used on trait objects, this will apply to any skills/items used as long
 *   as the unit affected by the trait object has access to the trait object.
 * - If the 'as User' notetag variant is used, this code will be run as a
 *   response to the action from the action user end.
 * - If the 'as Target' notetag variant is used, this code will be run as a
 *   response to the action from the action target end.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 *
 * ---
 *
 * <JS Pre-Damage>
 *  code
 *  code
 *  code
 * </JS Pre-Damage>
 * 
 * - Used for: Skill, Item Notetags
 * - Runs JavaScript code before damage is dealt aimed at the function:
 *   Game_Action.prototype.executeDamage()
 *   - 'Pre' runs before the function runs.
 * - If used on skills and/or items, this will only apply to the skill/item
 *   being used and does not affect other skills and items.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 * - The 'value' variable represents the damage being calculated up to this
 *   point (if any) and any changes made to the 'value' variable will reflect
 *   on the damage dealt/healed, too.
 *
 * ---
 *
 * <JS Pre-Damage as User>
 *  code
 *  code
 *  code
 * </JS Pre-Damage as User>
 *
 * <JS Pre-Damage as Target>
 *  code
 *  code
 *  code
 * </JS Pre-Damage as Target>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code before damage is dealt aimed at the function:
 *   Game_Action.prototype.executeDamage()
 *   - 'Pre' runs before the function runs.
 * - If used on trait objects, this will apply to any skills/items used as long
 *   as the unit affected by the trait object has access to the trait object.
 * - If the 'as User' notetag variant is used, this code will be run as a
 *   response to the action from the action user end.
 * - If the 'as Target' notetag variant is used, this code will be run as a
 *   response to the action from the action target end.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 * - The 'value' variable represents the damage being calculated up to this
 *   point (if any) and any changes made to the 'value' variable will reflect
 *   on the damage dealt/healed, too.
 *
 * ---
 *
 * <JS Post-Damage>
 *  code
 *  code
 *  code
 * </JS Post-Damage>
 * 
 * - Used for: Skill, Item Notetags
 * - Runs JavaScript code after damage is dealt aimed at the function:
 *   Game_Action.prototype.executeDamage()
 *   - 'Post' runs after the function runs.
 * - If used on skills and/or items, this will only apply to the skill/item
 *   being used and does not affect other skills and items.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 * - The 'value' variable represents the damage/healing that has been last
 *   dealt through this action.
 *
 * ---
 *
 * <JS Post-Damage as User>
 *  code
 *  code
 *  code
 * </JS Post-Damage as User>
 *
 * <JS Post-Damage as Target>
 *  code
 *  code
 *  code
 * </JS Post-Damage as Target>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code after damage is dealt aimed at the function:
 *   Game_Action.prototype.executeDamage()
 *   - 'Post' runs after the function runs.
 * - If used on trait objects, this will apply to any skills/items used as long
 *   as the unit affected by the trait object has access to the trait object.
 * - If the 'as User' notetag variant is used, this code will be run as a
 *   response to the action from the action user end.
 * - If the 'as Target' notetag variant is used, this code will be run as a
 *   response to the action from the action target end.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 * - The 'value' variable represents the damage/healing that has been last
 *   dealt through this action.
 *
 * ---
 *
 * <JS Post-Apply>
 *  code
 *  code
 *  code
 * </JS Post-Apply>
 * 
 * - Used for: Skill, Item Notetags
 * - Runs JavaScript code at the end of an action hit aimed at the function:
 *   Game_Action.prototype.apply()
 *   - 'Post' runs after the function runs.
 * - If used on skills and/or items, this will only apply to the skill/item
 *   being used and does not affect other skills and items.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 *
 * ---
 *
 * <JS Post-Apply as User>
 *  code
 *  code
 *  code
 * </JS Post-Apply as User>
 *
 * <JS Post-Apply as Target>
 *  code
 *  code
 *  code
 * </JS Post-Apply as Target>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code at the end of an action hit aimed at the function:
 *   Game_Action.prototype.apply()
 *   - 'Post' runs after the function runs.
 * - If used on trait objects, this will apply to any skills/items used as long
 *   as the unit affected by the trait object has access to the trait object.
 * - If the 'as User' notetag variant is used, this code will be run as a
 *   response to the action from the action user end.
 * - If the 'as Target' notetag variant is used, this code will be run as a
 *   response to the action from the action target end.
 * - Replace 'code' with JavaScript code to run desired effects.
 *
 * ---
 *
 * <JS Pre-End Action>
 *  code
 *  code
 *  code
 * </JS Pre-End Action>
 *
 * <JS Post-End Action>
 *  code
 *  code
 *  code
 * </JS Post-End Action>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code at the end of an action aimed at the function:
 *   BattleManager.endAction()
 *   - 'Pre' runs before the function runs.
 *   - 'Post' runs after the function runs.
 * - If used on trait objects, this will apply to any skills/items used as long
 *   as the unit affected by the trait object has access to the trait object.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Pre-End Turn>
 *  code
 *  code
 *  code
 * </JS Pre-End Turn>
 *
 * <JS Post-End Turn>
 *  code
 *  code
 *  code
 * </JS Post-End Turn>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code at the end of a turn aimed at the function:
 *   Game_Battler.prototype.onTurnEnd()
 *   - 'Pre' runs before the function runs.
 *   - 'Post' runs after the function runs.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Pre-Regenerate>
 *  code
 *  code
 *  code
 * </JS Pre-Regenerate>
 *
 * <JS Post-Regenerate>
 *  code
 *  code
 *  code
 * </JS Post-Regenerate>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code when a unit regenerates HP/MP aimed at the function:
 *   Game_Battler.prototype.regenerateAll()
 *   - 'Pre' runs before the function runs.
 *   - 'Post' runs after the function runs.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Battle Victory>
 *  code
 *  code
 *  code
 * </JS Battle Victory>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code when a battle is won aimed at the function:
 *   BattleManager.processVictory()
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Escape Success>
 *  code
 *  code
 *  code
 * </JS Escape Success>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code when escaping succeeds aimed at the function:
 *   BattleManager.onEscapeSuccess()
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Escape Failure>
 *  code
 *  code
 *  code
 * </JS Escape Failure>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code when escaping fails aimed at the function:
 *   BattleManager.onEscapeFailure()
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Battle Defeat>
 *  code
 *  code
 *  code
 * </JS Battle Defeat>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code when a battle is lost aimed at the function:
 *   BattleManager.processDefeat()
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Pre-End Battle>
 *  code
 *  code
 *  code
 * </JS Pre-End Battle>
 *
 * <JS Post-End Battle>
 *  code
 *  code
 *  code
 * </JS Post-End Battle>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code when the battle is over aimed at the function:
 *   BattleManager.endBattle()
 *   - 'Pre' runs before the function runs.
 *   - 'Post' runs after the function runs.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 * 
 * === Battle Layout-Related Notetags ===
 * 
 * These tags will change the battle layout for a troop regardless of how the
 * plugin parameters are set up normally. Insert these tags in either the
 * noteboxes of maps or the names of troops for them to take effect. If both
 * are present for a specific battle, then priority goes to the setting found
 * in the troop name.
 * 
 * ---
 * 
 * <Layout: type>
 * <Battle Layout: type>
 * 
 * - Used for: Map Notetags, Troop Name Tags, and Troop Comment Tags
 * - Changes the battle layout style used for this specific map or battle.
 * - Replace 'type' with 'default', 'list', 'xp', 'portrait', or 'border'.
 * - Those with VisuMZ_3_FrontviewBattleUI can use 'frontview'.
 * - Those with VisuMZ_3_SideviewBattleUI can use 'sideview'.
 * - If using Troop Comment Tags, then as long as the tag appears in a comment
 *   found on any of the Troop's pages (even if they don't run), the tag will
 *   be considered in effect.
 * 
 * ---
 * 
 * === Troop Size Tags ===
 * 
 * ---
 * 
 * <Extend: x>
 * <Extend: x, x, x>
 * 
 * - Used for: Troop Name Tags and Troop Comment Tags
 * - Adds enemies from another troop to the current troop.
 * - Enemies from another troop will retain their database positions.
 * - Replace 'x' with the ID of the database troop entry you wish to add enemy
 *   members from.
 *   - Insert multiple x's to add from more troops.
 * - Extended troop members will be added in the order they're listed.
 * - Be cautious of how many enemies you add as too many will lag the battle
 *   system. We are not responsible for frame drops due to this.
 * 
 * ---
 * 
 * === Troop Comment Tags ===
 * 
 * Place these tags inside of a comment found in a troop page's event list.
 * 
 * ---
 * 
 * <Once Parallel When Start Battle>
 * 
 * - Used for: Troop Page Comment Tags
 * - Causes the troop page to immediately load the moment the battle scene
 *   begins to fade in (not after it fades in). This is faster than a turn 0
 *   condition troop page. Troop page conditions are ignored.
 * - This can be used for things like the Action Sequence Camera plugin, the
 *   Visual Battle Environment plugin, and/or initial battle poses and such in
 *   order to provide a near seamless battle transition experience.
 * - This does NOT trigger when coming out of the options menu or party menu.
 * - This WILL trigger when going from battle to battle nonstop via plugins
 *   like VisuStella MZ's Chain Battles.
 * - When actors are moving towards their home positions, it will take around
 *   30 frames by default. Use this information however you like.
 * 
 * ---
 *
 * ============================================================================
 * Action Sequence - Plugin Commands
 * ============================================================================
 *
 * Skills and items, when used in battle, have a pre-determined series of
 * actions to display to the player as a means of representing what's going on
 * with the action. For some game devs, this may not be enough and they would
 * like to get more involved with the actions themselves.
 *
 * Action Sequences, added through this plugin, enable this. To give a skill or
 * item a Custom Action Sequence, a couple of steps must be followed:
 *
 * ---
 *
 * 1. Insert the <Custom Action Sequence> notetag into the skill or item's
 *    notebox (or else this would not work as intended).
 * 2. Give that skill/item a Common Event through the Effects box. The selected
 *    Common Event will contain all the Action Sequence data.
 * 3. Create the Common Event with Action Sequence Plugin Commands and/or event
 *    commands to make the skill/item do what you want it to do.
 *
 * ---
 *
 * The Plugin Commands added through the Battle Core plugin focus entirely on
 * Action Sequences. However, despite the fact that they're made for skills and
 * items, some of these Action Sequence Plugin Commands can still be used for
 * regular Troop events and Common Events.
 *
 * ---
 *
 * === Action Sequence - Action Sets ===
 *
 * Action Sequence Action Sets are groups of commonly used
 * Action Sequence Commands put together for more efficient usage.
 *
 * ---
 *
 * ACSET: Setup Action Set
 * - The generic start to most actions.
 *
 *   Display Action:
 *   Immortal: On:
 *   Battle Step:
 *   Wait For Movement:
 *   Cast Animation:
 *   Wait For Animation:
 *   - Use this part of the action sequence?
 *
 * ---
 *
 * ACSET: All Targets Action Set
 * - Affects all targets simultaneously performing the following.
 *
 *   Dual/Multi Wield?
 *   - Add times struck based on weapon quantity equipped?
 * 
 *   Perform Action:
 *   Wait Count:
 *   Action Animation:
 *   Wait For Animation:
 *   Action Effect:
 *   Immortal: Off:
 *   - Use this part of the action sequence?
 *   - Insert values for the Wait Count(s).
 *
 * ---
 *
 * ACSET: Each Target Action Set
 * - Goes through each target one by one to perform the following.
 *
 *   Dual/Multi Wield?
 *   - Add times struck based on weapon quantity equipped?
 *
 *   Perform Action:
 *   Wait Count:
 *   Action Animation:
 *   Wait Count:
 *   Action Effect:
 *   Immortal: Off:
 *   - Use this part of the action sequence?
 *   - Insert values for the Wait Count(s).
 *
 * ---
 *
 * ACSET: Finish Action
 * - The generic ending to most actions.
 *
 *   Wait For New Line:
 *   Wait For Effects:
 *   Clear Battle Log:
 *   Home Reset:
 *   Wait For Movement:
 *   - Use this part of the action sequence?
 *
 * ---
 * 
 * === Action Sequences - Angle ===
 * 
 * These action sequences allow you to have control over the camera angle.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * ---
 *
 * ANGLE: Change Angle
 * - Changes the camera angle.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Angle:
 *   - Change the camera angle to this many degrees.
 *
 *   Duration:
 *   - Duration in frames to change camera angle.
 *
 *   Angle Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Angle?:
 *   - Wait for angle changes to complete before performing next command?
 *
 * ---
 *
 * ANGLE: Reset Angle
 * - Reset any angle settings.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Duration:
 *   - Duration in frames to reset camera angle.
 *
 *   Angle Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Angle?:
 *   - Wait for angle changes to complete before performing next command?
 *
 * ---
 *
 * ANGLE: Wait For Angle
 * - Waits for angle changes to complete before performing next command.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 * ---
 *
 * === Action Sequences - Animations ===
 *
 * These Action Sequences are related to the 'Animations' that can be found in
 * the Animations tab of the Database.
 *
 * ---
 *
 * ANIM: Action Animation
 * - Plays the animation associated with the action.
 *
 *   Targets:
 *   - Select unit(s) to play the animation on.
 *
 *   Mirror Animation:
 *   - Mirror the animation?
 *
 *   Wait For Animation?:
 *   - Wait for animation to complete before performing next command?
 *
 * ---
 *
 * ANIM: Attack Animation
 * - Plays the animation associated with the user's weapon.
 *
 *   Targets:
 *   - Select unit(s) to play the animation on.
 *
 *   Mirror Animation:
 *   - Mirror the animation?
 *
 *   Wait For Animation?:
 *   - Wait for animation to complete before performing next command?
 *
 * ---
 *
 * ANIM: Attack Animation 2+
 * - Plays the animation associated with the user's other weapons.
 * - Plays nothing if there is no other weapon equipped.
 *
 *   Targets:
 *   - Select unit(s) to play the animation on.
 * 
 *   Slot:
 *   - Which weapon slot to get this data from?
 *   - Main-hand weapon is weapon slot 1.
 *
 *   Mirror Animation:
 *   - Mirror the animation?
 *
 *   Wait For Animation?:
 *   - Wait for animation to complete before performing next command?
 *
 * ---
 * 
 * ANIM: Balloon Animation
 * - Plays a balloon animation on target(s).
 * 
 *   Targets:
 *   - Select unit(s) to play the animation on.
 * 
 *   Balloon Type:
 *   - What kind of balloon should be played on target(s)?
 * 
 *   Wait for Completion:
 *   - Wait for balloon animation completion before continuing?
 * 
 * ---
 * 
 * ANIM: Balloon Icon (Single)
 * - Plays a balloon animation using an icon on target(s).
 * - Requires VisuMZ_4_IconBalloons!
 * 
 *   Targets:
 *   - Select unit(s) to play the animation on.
 * 
 *   Icon Index:
 *   - Insert the ID of the icon to show.
 *   - Tip: Right click > Insert Icon Index
 * 
 *   Wait for Completion:
 *   - Wait for balloon animation completion before continuing?
 * 
 * ---
 * 
 * ANIM: Balloon Icon (Range)
 * - Plays a balloon animation an icon range on target(s).
 * - Requires VisuMZ_4_IconBalloons!
 * 
 *   Targets:
 *   - Select unit(s) to play the animation on.
 * 
 *   Starting Icon Index:
 *   - Insert the ID of the icon to show.
 *   - Tip: Right click > Insert Icon Index
 * 
 *   Ending Icon Index:
 *   - Insert the ID of the icon to show.
 *   - Tip: Right click > Insert Icon Index
 * 
 *   Wait for Completion:
 *   - Wait for balloon animation completion before continuing?
 * 
 * ---
 * 
 * ANIM: Balloon Icon (Specific)
 * - Plays a balloon animation with specific icons on target(s).
 * - Requires VisuMZ_4_IconBalloons!
 * 
 *   Targets:
 *   - Select unit(s) to play the animation on.
 * 
 *   Icons:
 *   - Insert the ID(s) of the icon to show.
 *   - Tip: Right click > Insert Icon Index
 * 
 *   Wait for Completion:
 *   - Wait for balloon animation completion before continuing?
 * 
 * ---
 *
 * ANIM: Cast Animation
 * - Plays the cast animation associated with the action.
 *
 *   Targets:
 *   - Select unit(s) to play the animation on.
 *
 *   Mirror Animation:
 *   - Mirror the animation?
 *
 *   Wait For Animation?:
 *   - Wait for animation to complete before performing next command?
 *
 * ---
 *
 * ANIM: Change Battle Portrait
 * - Changes the battle portrait of the actor (if it's an actor).
 * - Can be used outside of battle/action sequences.
 *
 *   Targets:
 *   - Select unit(s) to play the animation on.
 *   - Valid units can only be actors.
 *
 *   Filename:
 *   - Select the file to change the actor's portrait to.
 * 
 * ---
 *
 * ANIM: Change Battle Portrait (JS)
 * - Changes the battle portrait of the actor through JavaScript.
 * - Can be used outside of battle/action sequences.
 * 
 *   JS: Actor ID:
 *   - Enter which Actor ID to affect.
 *   - Uses JavaScript code.
 * 
 *   JS: Filename:
 *   - Enter the filename you wish to use.
 *   - Uses JavaScript code.
 * 
 * ---
 *
 * ANIM: Guard Animation
 * - Plays the animation associated with the user's guard action (if any).
 *
 *   Targets:
 *   - Select unit(s) to play the animation on.
 *
 *   Mirror Animation:
 *   - Mirror the animation?
 *
 *   Wait For Animation?:
 *   - Wait for animation to complete before performing next command?
 *
 * ---
 *
 * ANIM: Item Animation
 * - Plays the animation associated with a specific item.
 * 
 *   Item ID:
 *   - Which item ID will the animation come from?
 *
 *   Targets:
 *   - Select unit(s) to play the animation on.
 *
 *   Mirror Animation:
 *   - Mirror the animation?
 *
 *   Wait For Animation?:
 *   - Wait for animation to complete before performing next command?
 *
 * ---
 *
 * ANIM: Play at Coordinate
 * - Plays an animation on the screen at a specific x, y coordinate.
 * - Requires VisuMZ_0_CoreEngine!
 * 
 *   Animation ID:
 *   - Plays this animation.
 * 
 *   Coordinates:
 * 
 *     X:
 *     Y:
 *     - X/Y coordinate used for the animation.
 *       You may use JavaScript code.
 * 
 *   Mirror Animation?:
 *   - Mirror the animation?
 * 
 *   Mute Animation?:
 *   - Mute the animation?
 * 
 *   Wait for Completion?:
 *   - Wait the animation to finish before continuing?
 *
 * ---
 *
 * ANIM: Show Animation
 * - Plays the a specific animation on unit(s).
 *
 *   Targets:
 *   - Select unit(s) to play the animation on.
 *
 *   Animation ID:
 *   - Select which animation to play on unit(s).
 *
 *   Mirror Animation:
 *   - Mirror the animation?
 *
 *   Wait For Animation?:
 *   - Wait for animation to complete before performing next command?
 *
 * ---
 *
 * ANIM: Show Animation JS
 * - Plays the a specific animation on unit(s).
 * - Uses JavaScript to determine animation ID.
 *
 *   Targets:
 *   - Select unit(s) to play the animation on.
 *
 *   JS: Animation ID:
 *   - Select which animation to play on unit(s).
 *   - Uses JavaScript to determine animation ID.
 *
 *   Mirror Animation:
 *   - Mirror the animation?
 *
 *   Wait For Animation?:
 *   - Wait for animation to complete before performing next command?
 *
 * ---
 *
 * ANIM: Skill Animation
 * - Plays the animation associated with a specific skill.
 * 
 *   Skill ID:
 *   - Which skill ID will the animation come from?
 *
 *   Targets:
 *   - Select unit(s) to play the animation on.
 *
 *   Mirror Animation:
 *   - Mirror the animation?
 *
 *   Wait For Animation?:
 *   - Wait for animation to complete before performing next command?
 *
 * ---
 *
 * ANIM: Wait For Animation
 * - Causes the interpreter to wait for any animation(s) to finish.
 *
 * ---
 *
 * === Action Sequences - Battle Log ===
 *
 * These Action Sequences are related to the Battle Log Window, the window
 * found at the top of the battle screen.
 *
 * ---
 *
 * BTLOG: Add Text
 * - Adds a new line of text into the Battle Log.
 *
 *   Text:
 *   - Add this text into the Battle Log.
 *   - Text codes allowed.
 * 
 *   Copy to Combat Log?:
 *   - Copies text to the Combat Log.
 *   - Requires VisuMZ_4_CombatLog
 * 
 *     Combat Log Icon:
 *     - What icon would you like to bind to this entry?
 *     - Requires VisuMZ_4_CombatLog
 *
 * ---
 *
 * BTLOG: Clear Battle Log
 * - Clears all the text in the Battle Log.
 *
 * ---
 *
 * BTLOG: Display Action
 * - plays the current action in the Battle Log.
 *
 * ---
 *
 * BTLOG: Pop Base Line
 * - Removes the Battle Log's last added base line and  all text up to its
 *   former location.
 *
 * ---
 *
 * BTLOG: Push Base Line
 * - Adds a new base line to where the Battle Log currently is at.
 *
 * ---
 *
 * BTLOG: Refresh Battle Log
 * - Refreshes the Battle Log.
 *
 * ---
 *
 * BTLOG: UI Show/Hide
 * - Shows or hides the Battle UI (including the Battle Log).
 *
 *   Show/Hide?:
 *   - Shows/hides the Battle UI.
 *
 * ---
 *
 * BTLOG: Wait For Battle Log
 * - Causes the interpreter to wait for the Battle Log to finish.
 *
 * ---
 *
 * BTLOG: Wait For New Line
 * - Causes the interpreter to wait for a new line in the Battle Log.
 *
 * ---
 *
 * === Action Sequences - Camera ===
 *
 * These Action Sequences are battle camera-related.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * ---
 *
 * CAMERA: Clamp ON/OFF
 * - Turns battle camera clamping on/off.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Setting:
 *   - Turns camera clamping on/off.
 *
 * ---
 *
 * CAMERA: Focus Point
 * - Focus the battle camera on a certain point in the screen.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   X Coordinate:
 *   - Insert the point to focus the camera on.
 *   - You may use JavaScript code.
 *
 *   Y Coordinate:
 *   - Insert the point to focus the camera on.
 *   - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for camera focus change.
 *
 *   Camera Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Camera?
 *   - Wait for camera changes to complete before performing next command?
 *
 * ---
 *
 * CAMERA: Focus Target(s)
 * - Focus the battle camera on certain battler target(s).
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Targets:
 *   - Select unit(s) to focus the battle camera on.
 *
 *   Duration:
 *   - Duration in frames for camera focus change.
 *
 *   Camera Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Camera?
 *   - Wait for camera changes to complete before performing next command?
 *
 * ---
 *
 * CAMERA: Offset
 * - Offset the battle camera from the focus target.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Offset X:
 *   - How much to offset the camera X by.
 *   - Negative: left. Positive: right.
 *
 *   Offset Y:
 *   - How much to offset the camera Y by.
 *   - Negative: up. Positive: down.
 *
 *   Duration:
 *   - Duration in frames for offset change.
 *
 *   Camera Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Camera?
 *   - Wait for camera changes to complete before performing next command?
 *
 * ---
 *
 * CAMERA: Reset
 * - Reset the battle camera settings.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Reset Focus?:
 *   - Reset the focus point?
 *
 *   Reset Offset?:
 *   - Reset the camera offset?
 *
 *   Duration:
 *   - Duration in frames for reset change.
 *
 *   Camera Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Camera?
 *   - Wait for camera changes to complete before performing next command?
 *
 * ---
 *
 * CAMERA: Wait For Camera
 * - Waits for camera changes to complete before performing next command.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 * ---
 * 
 * === Action Sequences - Cutins ===
 * 
 * Allows you to have control over Visual Cutin Effects.
 * Requires VisuMZ_3_VisualCutinEffect!
 * 
 * ---
 * 
 * CUTIN: Add Visual Cutin Effect
 * - Adds the Visual Cutin Effect using these desired settings.
 * - Only one of each cutin-style type can be present at a time.
 * - Requires VisuMZ_3_VisualCutinEffect!
 * 
 *   Basic Settings:
 * 
 *     Cutin Style Type:
 *     - What Visual Cutin Effect style type do you wish to use?
 *     - Only one of each cutin-style type can be present.
 *     - Refer to VisuMZ wiki for visuals on styles.
 * 
 *     Portrait Target:
 *     - Select unit(s) to grab the Visual Cutin Effect portrait data from.
 *     - First unit will be used to make portrait.
 * 
 *     Parallax Filename:
 *     - Pick a parallax to use for the Visual Cutin Effect.
 *     - Pick (None) to not use a parallax.
 * 
 *     Background Color:
 *     - Use #rrggbb for custom colors or regular numbers for text colors from
 *       the Window Skin.
 *
 *   Extra Settings:
 *   - Extra Plugin Command settings pertaining to this Visual Cutin Effect.
 *   - An explanation for these settings are found in the Visual Cutin Effect
 *     help file and documentation.
 *   - Extra parameters are added for Parallax Scroll Inversion when the target
 *     is an enemy.
 * 
 *   Wait for Entrance:
 *   - Wait until cutin entrance is finished before performing the next
 *     event command?
 * 
 * ---
 *
 * CUTIN: End Visual Cutin Effect (All)
 * - Ends all Visual Cutin Effects currently present.
 * - Requires VisuMZ_3_VisualCutinEffect!
 * 
 *   Wait for Exit:
 *   - Wait until cutin exit is finished before performing the next
 *     event command?
 *
 * ---
 *
 * CUTIN: End Visual Cutin Effect (Type)
 * - Ends the Visual Cutin Effect with the matching type.
 * - Requires VisuMZ_3_VisualCutinEffect!
 *
 *   Cutin Style Type:
 *   - What Visual Cutin Effect style type do you wish to end?
 * 
 *   Wait for Exit:
 *   - Wait until cutin exit is finished before performing the next
 *     event command?
 *
 * ---
 * 
 * CUTIN: Wait for Cutin Entrance
 * - Wait until all cutin entrances are finished before performing the next
 *   event command.
 * - Requires VisuMZ_3_VisualCutinEffect!
 * 
 * ---
 * 
 * CUTIN: Wait for Cutin Exit
 * - Wait until all cutin exits are finished before performing the next
 *   event command.
 * - Requires VisuMZ_3_VisualCutinEffect!
 * 
 * ---
 *
 * === Action Sequences - Dragonbones ===
 *
 * These Action Sequences are Dragonbones-related.
 * Requires VisuMZ_2_DragonbonesUnion!
 *
 * ---
 *
 * DB: Dragonbones Animation
 * - Causes the unit(s) to play a Dragonbones motion animation.
 * - Requires VisuMZ_2_DragonbonesUnion!
 *
 *   Targets:
 *   - Select which unit(s) to perform a motion animation.
 *
 *   Motion Animation:
 *   - What is the name of the Dragonbones motion animation you wish to play?
 *
 * ---
 *
 * DB: Dragonbones Time Scale
 * - Causes the unit(s) to change their Dragonbones time scale.
 * - Requires VisuMZ_2_DragonbonesUnion!
 *
 *   Targets:
 *   - Select which unit(s) to perform a motion animation.
 *
 *   Time Scale:
 *   - Change the value of the Dragonbones time scale to this.
 *
 * ---
 *
 * === Action Sequences - Elements ===
 *
 * These Action Sequences can change up the element(s) used for the action's
 * damage calculation midway through an action.
 *
 * They also require the VisuMZ_1_ElementStatusCore plugin to be present in
 * order for them to work.
 *
 * ---
 *
 * ELE: Add Elements
 * - Adds element(s) to be used when calculating damage.
 * - Requires VisuMZ_1_ElementStatusCore!
 *
 *   Elements:
 *   - Select which element ID to add onto the action.
 *   - Insert multiple element ID's to add multiple at once.
 *
 * ---
 *
 * ELE: Clear Element Changes
 * - Clears all element changes made through Action Sequences.
 * - Requires VisuMZ_1_ElementStatusCore!
 *
 * ---
 *
 * ELE: Force Elements
 * - Forces only specific element(s) when calculating damage.
 * - Requires VisuMZ_1_ElementStatusCore!
 *
 *   Elements:
 *   - Select which element ID to force in the action.
 *   - Insert multiple element ID's to force multiple at once.
 *
 * ---
 *
 * ELE: Null Element
 * - Forces no element to be used when calculating damage.
 * - Requires VisuMZ_1_ElementStatusCore!
 *
 * ---
 * 
 * === Action Sequences - Grid ===
 * 
 * These Action Sequences are Battle Grid System-related.
 * Requires VisuMZ_2_BattleGridSystem!
 * 
 * ---
 * 
 * GRID: Action Animation at Node
 * - Plays action animation at target node.
 * - Requires VisuMZ_2_BattleGridSystem!
 * 
 *   Action-Selected Node?:
 *   - Use Action-Selected Node Coordinates if possible?
 *   - Requires "Empty" or "Any" for <Target: x Grid Node>
 *   - If the no action is in effect or the action doesn't use that target
 *     structure, use the node coordinates below:
 * 
 *     Unit:
 *     - Which unit's Node do you want to play an animation on?
 * 
 *     Rank:
 *     - Input the number representing the Rank of the Node you want to play an
 *       animation on.
 * 
 *     Flank:
 *     - Input the number representing the Flank of the Node you want to play
 *       an animation on.
 * 
 *   Offset X:
 *   - Offsets the animation x position.
 *   - Negative: left. Positive: right.
 * 
 *   Offset Y:
 *   - Offsets the animation y position.
 *   - Negative: up. Positive: down.
 * 
 * ---
 *
 * GRID: Add Passive State(s) to Node
 * - Adds Passive State(s) at target node.
 * - Requires VisuMZ_2_BattleGridSystem!
 *
 *   State ID(s):
 *   - Select which State ID(s) to add as a Passive State.
 * 
 *   Action-Selected Node?:
 *   - Use Action-Selected Node Coordinates if possible?
 *   - Requires "Empty" or "Any" for <Target: x Grid Node>
 *   - If the no action is in effect or the action doesn't use that target
 *     structure, use the node coordinates below:
 *
 *     Unit:
 *     - Which unit do you want to add the Passive State Node effect for?
 *
 *     Rank:
 *     - Input the number representing the Rank of the Node you want to add a
 *       Passive State(s) to.
 *
 *     Flank:
 *     - Input the number representing the Flank of the Node you want to add a
 *       Passive State(s) to.
 *
 * ---
 * 
 * GRID: Add Trigger to Node
 * - Adds Trigger to target node.
 * - Target node cannot have battler.
 * - Each node can only contain ONE trigger! 
 * - Otherwise, newly placed triggers will overwrite the old ones.
 * - Requires VisuMZ_2_BattleGridSystem!
 * 
 *   Skill ID:
 *   - Select which Skill ID(s) to add as the trigger.
 * 
 *   Action-Selected Node?:
 *   - Use Action-Selected Node Coordinates if possible?
 *   - Requires "Empty" or "Any" for <Target: x Grid Node>
 *   - If the no action is in effect or the action doesn't use that target
 *     structure, use the node coordinates below:
 * 
 *     Unit:
 *     - Which unit do you want to add the Trigger Node effect for?
 * 
 *     Rank:
 *     - Input the number representing the Rank of the Node you want to add a
 *       Trigger to.
 * 
 *     Flank:
 *     - Input the number representing the Flank of the Node you want to add a
 *       Trigger to.
 * 
 * ---
 * 
 * GRID: Add Trigger to Node JS
 * - Adds JS Trigger to target node.
 * - Target node cannot have battler.
 * - Each node can only contain ONE trigger! 
 * - Otherwise, newly placed triggers will overwrite the old ones.
 * - Requires VisuMZ_2_BattleGridSystem!
 * 
 *   JS: Skill ID:
 *   - Use JavaScript to determine what skill ID to add to this node.
 * 
 *   Action-Selected Node?:
 *   - Use Action-Selected Node Coordinates if possible?
 *   - Requires "Empty" or "Any" for <Target: x Grid Node>
 *   - If the no action is in effect or the action doesn't use that target
 *     structure, use the node coordinates below:
 * 
 *     Unit:
 *     - Which unit do you want to add the Trigger Node effect for?
 * 
 *     Rank:
 *     - Input the number representing the Rank of the Node you want to add a
 *       Trigger to.
 * 
 *     Flank:
 *     - Input the number representing the Flank of the Node you want to add a
 *       Trigger to.
 * 
 * ---
 * 
 * GRID: Animation ID at Node
 * - Plays specific animation ID at target node.
 * 
 *   Animation ID:
 *   - Play this animation at target node.
 * 
 *     Mirror?:
 *     - Mirror this animation?
 * 
 *     Mute?:
 *     - Mute this animation?
 * 
 *   Action-Selected Node?:
 *   - Use Action-Selected Node Coordinates if possible?
 *   - Requires "Empty" or "Any" for <Target: x Grid Node>
 *   - If the no action is in effect or the action doesn't use that target
 *     structure, use the node coordinates below:
 * 
 *     Unit:
 *     - Which unit's Node do you want to play an animation on?
 * 
 *     Rank:
 *     - Input the number representing the Rank of the Node you want to play an
 *       animation on.
 * 
 *     Flank:
 *     - Input the number representing the Flank of the Node you want to play
 *       an animation on.
 * 
 *   Offset X:
 *   - Offsets the animation x position.
 *   - Negative: left. Positive: right.
 * 
 *   Offset Y:
 *   - Offsets the animation y position.
 *   - Negative: up. Positive: down.
 * 
 * ---
 * 
 * GRID: Animation JS at Node
 * - Uses JS to calculate which animation to play at target node.
 * 
 *   JS: Animation ID:
 *   - Calculate which animation to play on unit(s).
 *   - Uses JavaScript to determine animation ID.
 * 
 *     Mirror?:
 *     - Mirror this animation?
 * 
 *     Mute?:
 *     - Mute this animation?
 * 
 *   Action-Selected Node?:
 *   - Use Action-Selected Node Coordinates if possible?
 *   - Requires "Empty" or "Any" for <Target: x Grid Node>
 *   - If the no action is in effect or the action doesn't use that target
 *     structure, use the node coordinates below:
 * 
 *     Unit:
 *     - Which unit's Node do you want to play an animation on?
 * 
 *     Rank:
 *     - Input the number representing the Rank of the Node you want to play an
 *       animation on.
 * 
 *     Flank:
 *     - Input the number representing the Flank of the Node you want to play
 *       an animation on.
 * 
 *   Offset X:
 *   - Offsets the animation x position.
 *   - Negative: left. Positive: right.
 * 
 *   Offset Y:
 *   - Offsets the animation y position.
 *   - Negative: up. Positive: down.
 * 
 * ---
 * 
 * GRID: Animation Type at Node
 * - Plays certain animation type at target node.
 * - Requires VisuMZ_2_BattleGridSystem!
 * 
 *   Type:
 *   - What is the animation type you would like to play?
 *     - Attack
 *     - Guard
 *     - Item
 *     - Skill
 * 
 *     Slot (Attack Type):
 *     - Which weapon slot to get this data from?
 *     - Main-hand weapon is weapon slot 1.
 * 
 *     Item ID (Item Type):
 *     - Which item ID will the animation come from?
 * 
 *     Skill ID (Skill Type):
 *     - Which skill ID will the animation come from?
 * 
 *   Action-Selected Node?:
 *   - Use Action-Selected Node Coordinates if possible?
 *   - Requires "Empty" or "Any" for <Target: x Grid Node>
 *   - If the no action is in effect or the action doesn't use that target
 *     structure, use the node coordinates below:
 * 
 *     Unit:
 *     - Which unit's Node do you want to play an animation on?
 * 
 *     Rank:
 *     - Input the number representing the Rank of the Node you want to play an
 *       animation on.
 * 
 *     Flank:
 *     - Input the number representing the Flank of the Node you want to play
 *       an animation on.
 * 
 *   Offset X:
 *   - Offsets the animation x position.
 *   - Negative: left. Positive: right.
 * 
 *   Offset Y:
 *   - Offsets the animation y position.
 *   - Negative: up. Positive: down.
 * 
 * ---
 * 
 * GRID: Move Target(s) In Direction
 * - Moves target(s) in a specific direction to other Nodes.
 * - Requires VisuMZ_2_BattleGridSystem!
 * - This will bypass the "once per action" condition used for both the
 *   <rule Move User Node direction: x> & <rule Move Target Node direction: x>
 *   notetags as this is not a notetag effect.
 * 
 *   Targets:
 *   - Select unit(s) to move.
 * 
 *   Movement Type:
 *   - Select the Movement type rulings.
 *   - See VisuMZ_2_BattleGridSystem help file for details.
 * 
 *     Direction:
 *     - Select the movement direction.
 * 
 *     Distance:
 *     - The number of nodes to be moved.
 *     - You may use JavaScript code.
 * 
 *   Duration:
 *   - Input the number representing the frames used to move.
 * 
 *   Silent Change?:
 *   - Silent: Discreet changes shown. More apparent later.
 *   - Visual: Instant changes shown.
 * 
 * ---
 * 
 * GRID: Pull To Target Node
 * - Pulls battlers towards target node.
 * - Requires VisuMZ_2_BattleGridSystem!
 * 
 *   Action-Selected Node?:
 *   - Use Action-Selected Node Coordinates if possible?
 *   - Requires "Empty" or "Any" for <Target: x Grid Node>
 *
 *     Unit:
 *     - Which unit do you want to pull on?
 *
 *     Rank:
 *     - Input the number representing the Rank of the Node you want to
 *       pull to.
 *
 *     Flank:
 *     - Input the number representing the Flank of the Node you want to
 *       pull to.
 * 
 *   Strength:
 *   - Input the strength level of the pull.
 * 
 *   Duration:
 *   - Input the number representing the frames used to move.
 * 
 * ---
 * 
 * GRID: Push From Target Node
 * - Pushes battlers away from target node.
 * - Requires VisuMZ_2_BattleGridSystem!
 * 
 *   Action-Selected Node?:
 *   - Use Action-Selected Node Coordinates if possible?
 *   - Requires "Empty" or "Any" for <Target: x Grid Node>
 *
 *     Unit:
 *     - Which unit do you want to push from?
 *
 *     Rank:
 *     - Input the number representing the Rank of the Node you want to
 *       push from.
 *
 *     Flank:
 *     - Input the number representing the Flank of the Node you want to
 *       push from.
 * 
 *   Strength:
 *   - Input the strength level of the push.
 * 
 *   Duration:
 *   - Input the number representing the frames used to move.
 * 
 * ---
 *
 * GRID: Remove All Passive States from Node
 * - Removes all Passive State effects at target node.
 * - Requires VisuMZ_2_BattleGridSystem!
 * 
 *   Action-Selected Node?:
 *   - Use Action-Selected Node Coordinates if possible?
 *   - Requires "Empty" or "Any" for <Target: x Grid Node>
 *   - If the no action is in effect or the action doesn't use that target
 *     structure, use the node coordinates below:
 *
 *     Unit:
 *     - Which unit do you want to clear the Node for?
 *
 *     Rank:
 *     - Input the number representing the Rank of the Node you want to clear
 *       Passive States from.
 *
 *     Flank:
 *     - Input the number representing the Flank of the Node you want to clear
 *       Passive States from.
 *
 * ---
 *
 * GRID: Remove Passive State(s) from Node
 * - Remove Passive State(s) at target node.
 * - Requires VisuMZ_2_BattleGridSystem!
 *
 *   State ID(s):
 *   - Select which State ID(s) to remove as a Passive State.
 * 
 *   Action-Selected Node?:
 *   - Use Action-Selected Node Coordinates if possible?
 *   - Requires "Empty" or "Any" for <Target: x Grid Node>
 *   - If the no action is in effect or the action doesn't use that target
 *     structure, use the node coordinates below:
 *
 *     Unit:
 *     - Which unit do you want to remove the Passive State Node effect for?
 *
 *     Rank:
 *     - Input the number representing the Rank of the Node you want to remove
 *       a Passive State(s) from.
 *
 *     Flank:
 *     - Input the number representing the Flank of the Node you want to remove
 *       a Passive State(s) from.
 *
 * ---
 * 
 * GRID: Remove Trigger from Node
 * - Removes Trigger at target node.
 * - Requires VisuMZ_2_BattleGridSystem!
 * 
 *   Action-Selected Node?:
 *   - Use Action-Selected Node Coordinates if possible?
 *   - Requires "Empty" or "Any" for <Target: x Grid Node>
 *   - If the no action is in effect or the action doesn't use that target
 *     structure, use the node coordinates below:
 * 
 *     Unit:
 *     - Which unit do you want to clear Triggers for?
 * 
 *     Rank:
 *     - Input the number representing the Rank of the Node you want to clear
 *       Triggers from.
 * 
 *     Flank:
 *     - Input the number representing the Flank of the Node you want to clear
 *       Triggers from.
 * 
 * ---
 * 
 * === Action Sequences - Horror Effects ===
 * 
 * These Action Sequences are Horror Effects-related.
 * Requires VisuMZ_2_HorrorEffects!
 * 
 * ---
 *
 * HORROR: Clear All Filters
 * - Clear all Horror Effects filters on the target battler(s).
 *
 *   Targets:
 *   - Select unit(s) to remove Horror Effects for.
 *
 * ---
 *
 * HORROR: Glitch Create
 * - Creates the glitch effect on the target battler(s).
 *
 *   Targets:
 *   - Select unit(s) to create the Horror Effect for.
 *
 *   Glitch Slices:
 *   - Glitch slices to be used with the target.
 *
 *   Glitch Offset:
 *   - Default offset value.
 *
 *   Glitch Animated?:
 *   - Animate the glitch effect?
 *
 *   Glitch Frequency:
 *   - If animated, how frequent to make the glitch effect?
 *   - Lower = often     Higher = rarer
 *
 *   Glitch Strength:
 *   - If animated, how strong is the glitch effect?
 *   - Lower = weaker     Higher = stronger
 *
 * ---
 *
 * HORROR: Glitch Remove
 * - Removes the glitch effect on the target battler(s).
 *
 *   Targets:
 *   - Select unit(s) to remove the Horror Effect for.
 *
 * ---
 *
 * HORROR: Noise Create
 * - Creates the noise effect on the target battler(s).
 *
 *   Targets:
 *   - Select unit(s) to create the Horror Effect for.
 *
 *   Noise Rate:
 *   - Noise rate to be used with the target.
 *
 *   Noise Animated:
 *   - Animate the noise for the target?
 *
 * ---
 *
 * HORROR: Noise Remove
 * - Removes the noise effect on the target battler(s).
 *
 *   Targets:
 *   - Select unit(s) to remove the Horror Effect for.
 *
 * ---
 *
 * HORROR: TV Create
 * - Creates the TV effect on the target battler(s).
 *
 *   Targets:
 *   - Select unit(s) to create the Horror Effect for.
 *
 *   TV Line Thickness:
 *   - Default TV line thickness
 *   - Lower = thinner     Higher = thicker
 *
 *   TV Corner Size:
 *   - Default TV line corner size
 *   - Lower = smaller     Higher = bigger
 *
 *   TV Animated:
 *   - Animate the TV?
 *
 *   TV Speed:
 *   - Speed used to animate the TV if animated
 *   - Lower = slower     Higher = faster
 *
 * ---
 *
 * HORROR: TV Remove
 * - Removes the TV effect on the target battler(s).
 *
 *   Targets:
 *   - Select unit(s) to remove the Horror Effect for.
 *
 * ---
 * 
 * === Action Sequences - Impact ===
 * 
 * These Action Sequences are related to creating impact.
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * ---
 *
 * IMPACT: Bizarro Inversion
 * - Swaps blue/red colors on the battlefield.
 * - Requires VisuMZ_3_ActSeqImpact!
 * - Created by Manu Gaming!
 *
 *   Bizarro?:
 *   - Enable Bizarro Inversion effect?
 *
 * ---
 *
 * IMPACT: Color Break
 * - Breaks the colors on the screen before reassembling.
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Intensity:
 *   - What is the intensity of the color break effect?
 *
 *   Duration:
 *   - What is the duration of the color break effect?
 *
 *   Easing Type:
 *   - Select which easing type you wish to apply.
 *
 * ---
 *
 * IMPACT: Desaturation
 * - Desaturates all colors on the battlefield.
 * - Requires VisuMZ_3_ActSeqImpact!
 * - Created by Manu Gaming!
 *
 *   Desaturate?:
 *   - Enable Desaturation effect?
 *
 * ---
 *
 * IMPACT: Motion Blur Screen
 * - Creates a motion blur on the whole screen.
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Angle:
 *   - Determine what angle to make the motion blur at.
 *
 *   Intensity Rate:
 *   - This determines intensity rate of the motion blur.
 *   - Use a number between 0 and 1.
 *
 *   Duration:
 *   - How many frames should the motion blur last?
 *   - What do you want to be its duration?
 *
 *   Easing Type:
 *   - Select which easing type you wish to apply.
 *
 * ---
 *
 * IMPACT: Motion Blur Target(s)
 * - Creates a motion blur on selected target(s).
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Targets:
 *   - Select unit(s) to create motion blur effects for.
 *
 *   Angle:
 *   - Determine what angle to make the motion blur at.
 *
 *   Intensity Rate:
 *   - This determines intensity rate of the motion blur.
 *   - Use a number between 0 and 1.
 *
 *   Duration:
 *   - How many frames should the motion blur last?
 *   - What do you want to be its duration?
 *
 *   Easing Type:
 *   - Select which easing type you wish to apply.
 *
 * ---
 *
 * IMPACT: Motion Trail Create
 * - Creates a motion trail effect for the target(s).
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Targets:
 *   - Select unit(s) to create motion trail effects for.
 *
 *   Delay:
 *   - How many frames to delay by when creating a motion trail?
 *   - The higher the delay, the less motion trails there are.
 *
 *   Duration:
 *   - How many frames should the motion trail last?
 *   - What do you want to be its duration?
 *
 *   Hue:
 *   - What do you want to be the hue for the motion trail?
 *
 *   Starting Opacity:
 *   - What starting opacity value do you want for the motion trail?
 *   - Opacity values decrease over time.
 *
 *   Tone:
 *   - What tone do you want for the motion trail?
 *   - Format: [Red, Green, Blue, Gray]
 *
 * ---
 *
 * IMPACT: Motion Trail Remove
 * - Removes the motion trail effect from the target(s).
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Targets:
 *   - Select unit(s) to clear motion trail effects for.
 *
 * ---
 *
 * IMPACT: Negative Inversion
 * - Inverts all the colors on the battlefield.
 * - Requires VisuMZ_3_ActSeqImpact!
 * - Created by Manu Gaming!
 *
 *   Negative?:
 *   - Enable Negative Inversion effect?
 *
 * ---
 *
 * IMPACT: Oversaturation
 * - Oversaturates colors on the battlefield.
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Oversaturate?:
 *   - Enable Oversaturation effect?
 *
 * ---
 *
 * IMPACT: Shockwave at Point
 * - Creates a shockwave at the designated coordinates.
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Point: X:
 *   Point: Y:
 *   - What x/y coordinate do you want to create a shockwave at?
 *   - You can use JavaScript code.
 *
 *   Amplitude:
 *   - What is the aplitude of the shockwave effect?
 *
 *   Wavelength:
 *   - What is the wavelength of the shockwave effect?
 *
 *   Duration:
 *   - What is the duration of the shockwave?
 *
 * ---
 *
 * IMPACT: Shockwave from Each Target(s)
 * - Creates a shockwave at each of the target(s) location(s).
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Targets:
 *   - Select unit(s) to start a shockwave from.
 *
 *   Target Location:
 *   - Select which part target group to start a shockwave from.
 * 
 *     Offset X:
 *     Offset Y:
 *     - How much to offset the shockwave X/Y point by.
 *
 *   Amplitude:
 *   - What is the aplitude of the shockwave effect?
 *
 *   Wavelength:
 *   - What is the wavelength of the shockwave effect?
 *
 *   Duration:
 *   - What is the duration of the shockwave?
 *
 * ---
 *
 * IMPACT: Shockwave from Target(s) Center
 * - Creates a shockwave from the center of the target(s).
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Targets:
 *   - Select unit(s) to start a shockwave from.
 *
 *   Target Location:
 *   - Select which part target group to start a shockwave from.
 * 
 *     Offset X:
 *     Offset Y:
 *     - How much to offset the shockwave X/Y point by.
 *
 *   Amplitude:
 *   - What is the aplitude of the shockwave effect?
 *
 *   Wavelength:
 *   - What is the wavelength of the shockwave effect?
 *
 *   Duration:
 *   - What is the duration of the shockwave?
 *
 * ---
 *
 * IMPACT: Time Scale
 * - Adjust time to go faster or slower!
 * - Requires VisuMZ_3_ActSeqImpact!
 * - Created by Manu Gaming!
 *
 *   Scale:
 *   - Adjusts how fast/slow time goes.
 *   - 1.00 is normal. Lower is slower. Higher is faster.
 *
 * ---
 *
 * IMPACT: Time Stop
 * - Stops time for a set amount of milliseconds.
 * - Requires VisuMZ_3_ActSeqImpact!
 * - Created by Manu Gaming!
 *
 *   Milliseconds:
 *   - How many milliseconds should time stop for?
 *   - 1000 milliseconds = 1 second.
 *
 * ---
 *
 * IMPACT: Zoom Blur at Point
 * - Creates a zoom blur at the designated coordinates.
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Point: X:
 *   Point: Y:
 *   - What x/y coordinate do you want to focus the zoom at?
 *   - You can use JavaScript code.
 *
 *   Zoom Strength:
 *   - What is the strength of the zoom effect?
 *   - Use a number between 0 and 1.
 *
 *   Visible Radius:
 *   - How much of a radius should be visible from the center?
 *
 *   Duration:
 *   - What is the duration of the zoom blur?
 *
 *   Easing Type:
 *   - Select which easing type you wish to apply.
 *
 * ---
 *
 * IMPACT: Zoom Blur at Target(s) Center
 * - Creates a zoom blur at the center of targets.
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Targets:
 *   - Select unit(s) to start a zoom blur from.
 *
 *   Target Location:
 *   - Select which part target group to start a zoom blur from.
 * 
 *     Offset X:
 *     Offset Y:
 *     - How much to offset the zoom blur X/Y point by.
 *
 *   Zoom Strength:
 *   - What is the strength of the zoom effect?
 *   - Use a number between 0 and 1.
 *
 *   Visible Radius:
 *   - How much of a radius should be visible from the center?
 *
 *   Duration:
 *   - What is the duration of the zoom blur?
 *
 *   Easing Type:
 *   - Select which easing type you wish to apply.
 *
 * ---
 *
 * === Action Sequences - Inject ===
 *
 * These Action Sequences are related to injecting sprite animations.
 * Requires VisuMZ_3_ActSeqImpact!
 *
 * ---
 * 
 * INJECT: Animation Begin
 * - Injects and plays a whole spritesheet animation.
 * - The spritesheet animation will play over the battler until it is finished.
 * - The battler's original sprite will be invisible until finished.
 * - Requires VisuMZ_3_ActSeqImpact!
 * 
 *   Targets:
 *   - Select unit(s) to inject the animation on.
 * 
 *   Filename:
 *   - Select the animation spritesheet file.
 *   - Located in the /img/sv_actors/ folder.
 * 
 *     Horizontal Cells:
 *     - How many horizontal cells (or columns) are there?
 * 
 *     Vertical Cells:
 *     - How many vertical cells (or rows) are there?
 * 
 *     Frame Delay:
 *     - How many frames are played inbetween cells?
 * 
 *     Smooth Bitmap?:
 *     - Smooth the spritesheet graphic?
 * 
 *   Offset:
 * 
 *     Offset X:
 *     - Offsets the X position of the injected animation.
 *     - Negative: left. Positive: right.
 * 
 *     Offset Y:
 *     - Offsets the Y position of the injected animation.
 *     - Negative: up. Positive: down.
 * 
 * ---
 * 
 * INJECT: Animation End
 * - Stops and ends any injected animations on target(s).
 * - Any inject animation will be prematurely terminated.
 * - Requires VisuMZ_3_ActSeqImpact!
 * 
 *   Targets:
 *   - Select unit(s) to stop injected animation(s).
 * 
 * ---
 * 
 * INJECT: Animation Pause/Resume
 * - Pauses/resumes any injected animations on target(s).
 * - Requires VisuMZ_3_ActSeqImpact!
 * 
 *   Targets:
 *   - Select unit(s) to pause/resume injected animation(s).
 * 
 *   Pause?:
 *   - Pause the injected animation?
 * 
 * ---
 * 
 * INJECT: Wait For Injected Animation
 * - Waits for injected animations to complete before performing next command.
 * - Requires VisuMZ_3_ActSeqImpact!
 * 
 * ---
 *
 * === Action Sequences - Mechanics ===
 *
 * These Action Sequences are related to various mechanics related to the
 * battle system.
 *
 * ---
 *
 * MECH: Action Effect
 * - Causes the unit(s) to take damage/healing from action and incurs any
 *   changes made such as buffs and states.
 *
 *   Targets:
 *   - Select unit(s) to receive the current action's effects.
 *
 * ---
 * 
 * MECH: Active Chain Input Disable
 * - Disables input for Active Chain Skills at this time.
 * - Requires VisuMZ_3_ActiveChainSkills!
 * 
 * ---
 *
 * MECH: Add Buff/Debuff
 * - Adds buff(s)/debuff(s) to unit(s). 
 * - Determine which parameters are affected and their durations.
 *
 *   Targets:
 *   - Select unit(s) to receive the buff(s) and/or debuff(s).
 *
 *   Buff Parameters:
 *   - Select which parameter(s) to buff.
 *   - Insert a parameter multiple times to raise its stacks.
 *
 *   Debuff Parameters:
 *   - Select which parameter(s) to debuff.
 *   - Insert a parameter multiple times to raise its stacks.
 *
 *   Turns:
 *   - Number of turns to set the parameter(s) buffs to.
 *   - You may use JavaScript code.
 *
 * ---
 *
 * MECH: Add State
 * - Adds state(s) to unit(s).
 *
 *   Targets:
 *   - Select unit(s) to receive the buff(s).
 *
 *   States:
 *   - Select which state ID(s) to add to unit(s).
 *   - Insert multiple state ID's to add multiple at once.
 *
 * ---
 * 
 * MECH: Analyze Weakness
 * - Reveal elemental weakness(es) from target(s).
 * - Requires VisuMZ_3_WeaknessDisplay!
 * 
 *   Targets:
 *   - Select unit(s) to reveal elemental weaknesses for.
 * 
 *   Reveal:
 *   - How many elemental weaknesses do you wish to reveal?
 *   - You may use JavaScript code.
 * 
 * ---
 *
 * MECH: Armor Penetration
 * - Adds an extra layer of defensive penetration/reduction.
 * - You may use JavaScript code for any of these.
 *
 *   Armor/Magic Penetration:
 *
 *     Rate:
 *     - Penetrates an extra multiplier of armor by this value.
 *
 *     Flat:
 *     - Penetrates a flat amount of armor by this value.
 *
 *   Armor/Magic Reduction:
 *
 *     Rate:
 *     - Reduces an extra multiplier of armor by this value.
 *
 *     Flat:
 *     - Reduces a flat amount of armor by this value.
 *
 * ---
 * 
 * MECH: ATB Gauge
 * - Alters the ATB/TPB Gauges.
 * - Requires VisuMZ_2_BattleSystemATB!
 * 
 *   Targets:
 *   - Select unit(s) to alter the ATB/TPB Gauges for.
 * 
 *   Charging:
 *   
 *     Charge Rate:
 *     - Changes made to the ATB Gauge if it is currently charging.
 * 
 *   Casting:
 *   
 *     Cast Rate:
 *     - Changes made to the ATB Gauge if it is currently casting.
 *   
 *     Interrupt?:
 *     - Interrupt the ATB Gauge if it is currently casting?
 * 
 * ---
 * 
 * MECH: Boost Points Change
 * - Changes Boost Points for target(s).
 * - Requires VisuMZ_3_BoostAction!
 * 
 *   Targets:
 *   - Select unit(s) to alter the Boost Points for.
 * 
 *   Alter Boost Points By:
 *   - Alters the unit(s) Boost Points.
 *   - Positive for gaining points. Negative for losing points.
 * 
 * ---
 * 
 * MECH: Boost Store Data
 * - Stores the number of Boosts used this action inside a variable.
 * - Requires VisuMZ_3_BoostAction!
 * 
 *   Variable ID:
 *   - Which variable do you want to store the data inside?
 * 
 * ---
 * 
 * MECH: Break Shield Change
 * - Changes Break Shields for target(s) if not Break Stunned.
 * - Requires VisuMZ_4_BreakShields!
 * 
 *   Targets:
 *   - Select unit(s) to alter the Break Shields for.
 * 
 *   Alter Break Shields By:
 *   - Alters the unit(s) Break Shields.
 *   - Positive for gaining shields. Negative for losing shields.
 * 
 * ---
 * 
 * MECH: Break Shield Reset
 * - Resets Break Shields for target(s) if not Break Stunned.
 * - Requires VisuMZ_4_BreakShields!
 * 
 *   Targets:
 *   - Select unit(s) to reset the Break Shields for.
 * 
 * ---
 * 
 * MECH: BTB Brave Points
 * - Alters the target(s) Brave Points to an exact value.
 * - Requires VisuMZ_2_BattleSystemBTB!
 * 
 *   Targets:
 *   - Select unit(s) to alter the ATB/TPB Gauges for.
 * 
 *   Alter Brave Points By:
 *   - Alters the target(s) Brave Points.
 *   - Positive for gaining BP.
 *   - Negative for losing BP.
 * 
 * ---
 *
 * MECH: Collapse
 * - Causes the unit(s) to perform its collapse animation if the unit(s)
 *   has died.
 *
 *   Targets:
 *   - Select unit(s) to process a death collapse.
 *
 *   Force Death:
 *   - Force death even if the unit has not reached 0 HP?
 *   - This will remove immortality.
 *
 *   Wait For Effect?:
 *   - Wait for the collapse effect to complete before performing next command?
 *
 * ---
 * 
 * MECH: CTB Order
 * - Alters the CTB Turn Order.
 * - Requires VisuMZ_2_BattleSystemCTB!
 * 
 *   Targets:
 *   - Select unit(s) to alter the CTB Turn Order for.
 * 
 *   Change Order By:
 *   - Changes turn order for target(s) by this amount.
 *   - Positive increases wait. Negative decreases wait.
 * 
 * ---
 * 
 * MECH: CTB Speed
 * - Alters the CTB Speed.
 * - Requires VisuMZ_2_BattleSystemCTB!
 * 
 *   Targets:
 *   - Select unit(s) to alter the CTB Speed for.
 * 
 *   Charge Rate:
 *   - Changes made to the CTB Speed if it is currently charging.
 * 
 *   Cast Rate:
 *   - Changes made to the CTB Speed if it is currently casting.
 * 
 * ---
 * 
 * MECH: Custom Damage Formula
 * - Changes the current action's damage formula to custom.
 * - This will assume the MANUAL damage style.
 * 
 *   Formula:
 *   - Changes the current action's damage formula to custom.
 *   - Use 'default' to revert the damage formula.
 * 
 * ---
 *
 * MECH: Damage Popup
 * - Causes the unit(s) to display the current state of damage received
 *   or healed.
 *
 *   Targets:
 *   - Select unit(s) to prompt a damage popup.
 *
 * ---
 *
 * MECH: Dead Label Jump
 * - If the active battler is dead, jump to a specific label in the
 *   common event.
 *
 *   Jump To Label:
 *   - If the active battler is dead, jump to this specific label in the
 *     common event.
 *
 * ---
 * 
 * MECH: Emulate Attack Effect
 * - Emulate an "Action Effect" but using a the user's attack skill instead of
 *   the current action.
 * - Essentially lets you perform the mechanics of another action without
 *   having to use another action or needing to pay that action's costs.
 * 
 *   User(s):
 *   - Select unit(s) to perform the action's effects.
 * 
 *   Targets:
 *   - Select unit(s) to receive the current action's effects.
 * 
 * ---
 * 
 * MECH: Emulate Guard Effect
 * - Emulate an "Action Effect" but using a the user's guard skill instead of
 *   the current action.
 * - Essentially lets you perform the mechanics of another action without
 *   having to use another action or needing to pay that action's costs.
 * 
 *   User(s):
 *   - Select unit(s) to perform the action's effects.
 * 
 *   Targets:
 *   - Select unit(s) to receive the current action's effects.
 * 
 * ---
 * 
 * MECH: Emulate Item Effect
 * - Emulate an "Action Effect" but using a specific item instead of the
 *   current action.
 * - Essentially lets you perform the mechanics of another action without
 *   having to use another action or needing to pay that action's costs.
 * 
 *   Item ID:
 *   - Which item ID will be emulated?
 * 
 *   User(s):
 *   - Select unit(s) to perform the action's effects.
 * 
 *   Targets:
 *   - Select unit(s) to receive the current action's effects.
 * 
 * ---
 * 
 * MECH: Emulate Skill Cost
 * - Pick a skill for target(s) to emulate paying the cost of.
 * - Lets you cause characters to perform paying the costs of a specific skill
 *   without needing to actually use them.
 * - This will include Skill Cooldowns and Limited Skill Uses.
 * 
 *   Skill ID:
 *   - Which skill ID will have its cost paid for?
 *   - Use 0 for current action's skill.
 * 
 *   User(s):
 *   - Select unit(s) to perform the action's effects.
 * 
 * ---
 * 
 * MECH: Emulate Skill Effect
 * - Emulate an "Action Effect" but using a specific skill instead of the
 *   current action.
 * - Essentially lets you perform the mechanics of another action without
 *   having to use another action or needing to pay that action's costs.
 * 
 *   Skill ID:
 *   - Which skill ID will be emulated?
 * 
 *   User(s):
 *   - Select unit(s) to perform the action's effects.
 * 
 *   Targets:
 *   - Select unit(s) to receive the current action's effects.
 * 
 * ---
 *
 * MECH: Enemy Escape
 * - Causes the enemy unit(s) to escape.
 *
 *   Targets:
 *   - Select unit(s) to escape.
 *
 * ---
 *
 * MECH: ETB Energy Count
 * - Alters the subject team's available Energy Count.
 * - Requires VisuMZ_2_BattleSystemETB!
 *
 *   Energy Count:
 *   - Alters the subject team's available Energy Count.
 *   - Positive for gaining energy. Negative for losing energy.
 *
 * ---
 *
 * MECH: FTB Action Count
 * - Alters the subject team's available Action Count.
 * - Requires VisuMZ_2_BattleSystemFTB!
 *
 *   Action Count:
 *   - Alters the subject team's available Action Count.
 *   - Positive for gaining actions. Negative for losing actions.
 *
 * ---
 *
 * MECH: HP, MP, TP
 * - Alters the HP, MP, and TP values for unit(s).
 * - Positive values for healing. Negative values for damage.
 *
 *   Targets:
 *   - Select unit(s) to receive the current action's effects.
 *
 *   HP, MP, TP:
 *
 *     Rate:
 *     - Changes made to the parameter based on rate.
 *     - Positive values for healing. Negative values for damage.
 *
 *     Flat:
 *     - Flat changes made to the parameter.
 *     - Positive values for healing. Negative values for damage.
 *
 *   Damage Popup?:
 *   - Display a damage popup after?
 *
 * ---
 *
 * MECH: Immortal
 * - Changes the immortal flag of targets. If immortal flag is removed and a
 *   unit would die, collapse that unit.
 *
 *   Targets:
 *   - Alter the immortal flag of these groups. If immortal flag is removed and
 *     a unit would die, collapse that unit.
 *
 *   Immortal:
 *   - Turn immortal flag for unit(s) on/off?
 *
 * ---
 *
 * MECH: Multipliers
 * - Changes the multipliers for the current action.
 * - You may use JavaScript code for any of these.
 *
 *   Critical Hit%:
 *
 *     Rate:
 *     - Affects chance to land a critical hit by this multiplier.
 *
 *     Flat:
 *     - Affects chance to land a critical hit by this flat bonus.
 *
 *   Critical Damage
 *
 *     Rate:
 *     - Affects critical damage by this multiplier.
 *
 *     Flat:
 *     - Affects critical damage by this flat bonus.
 *
 *   Damage/Healing
 *
 *     Rate:
 *     - Sets the damage/healing multiplier for current action.
 *
 *     Flat:
 *     - Sets the damage/healing bonus for current action.
 *
 *   Hit Rate
 *
 *     Rate:
 *     - Affects chance to connect attack by this multiplier.
 *
 *     Flat:
 *     - Affects chance to connect attack by this flat bonus.
 *
 * ---
 * 
 * MECH: Once Parallel
 * - Plays a Common Event parallel to the battle event once without repeating
 *   itself when done.
 * 
 *   Common Event ID:
 *   - The ID of the parallel Common Event to play.
 *   - Does NOT repeat itself when finished.
 *   - When exiting battle scene, all Once Parallels are cleared.
 *   - Once Parallels are not retained upon reentering the scene.
 *   - Once Parallels are not stored in memory and cannot be saved.
 * 
 * ---
 * 
 * MECH: OTB Order
 * - Alters the OTB Turn Order. Best used with single targets.
 * - Requires VisuMZ_2_BattleSystemOTB!
 * 
 *   Targets:
 *   - Select unit(s) to alter the OTB Turn Order for.
 * 
 *   Current Turn By:
 *   - Changes turn order for target(s) by this amount.
 *   - Positive increases wait. Negative decreases wait.
 * 
 *   Next Turn By:
 *   - Changes turn order for target(s) by this amount.
 *   - Positive increases wait. Negative decreases wait.
 * 
 *   Follow Turn By:
 *   - Changes turn order for target(s) by this amount.
 *   - Positive increases wait. Negative decreases wait.
 * 
 * ---
 * 
 * MECH: PTB Alter Cost
 * - Alters the action's cost settings.
 * - Requires VisuMZ_2_BattleSystemPTB!
 * 
 *   Override?:
 *   - Overrides any 'permanent' settings for Changeability?
 * 
 *   Alter Changeability:
 *   - Allow the cost type and value to be changeable?
 * 
 *   Alter Cost Type:
 *   - Change the cost type to this scenario.
 *   - Use 'Unchanged' for no changes.
 * 
 *   Alter Cost Value:
 *   - What is the default action cost for this scenario?
 * 
 *   Priority:
 *   - What is this scenario's priority? Scenario outcomes with equal or lower
 *     priorities cannot override types and costs.
 * 
 * ---
 * 
 * MECH: PTB Conversion
 * - Converts full actions into half actions.
 * - Requires VisuMZ_2_BattleSystemPTB!
 * 
 *   Conversion Count:
 *   - Converts full actions into half actions.
 *   - If not enough, consume half actions.
 * 
 * ---
 * 
 * MECH: PTB Full/Half Action(s)
 * - Alters the subject team's available Full/Half Actions.
 * - Requires VisuMZ_2_BattleSystemPTB!
 * 
 *   Full Actions:
 *   - Alters the subject team's available Full Actions.
 *   - Positive for gaining. Negative for losing.
 * 
 *   Half Actions:
 *   - Alters the subject team's available Half Actions.
 *   - Positive for gaining. Negative for losing.
 * 
 * ---
 *
 * MECH: Remove Buff/Debuff
 * - Removes buff(s)/debuff(s) from unit(s). 
 * - Determine which parameters are removed.
 *
 *   Targets:
 *   - Select unit(s) to have the buff(s) and/or debuff(s) removed.
 *
 *   Buff Parameters:
 *   - Select which buffed parameter(s) to remove.
 *
 *   Debuff Parameters:
 *   - Select which debuffed parameter(s) to remove.
 *
 * ---
 *
 * MECH: Remove State
 * - Remove state(s) from unit(s).
 *
 *   Targets:
 *   - Select unit(s) to have states removed from.
 *
 *   States:
 *   - Select which state ID(s) to remove from unit(s).
 *   - Insert multiple state ID's to remove multiple at once.
 *
 * ---
 * 
 * MECH: State Turns Change By
 * - Changes target(s) state turns by an amount.
 * - Requires VisuMZ_1_SkillsStatesCore!
 * 
 *   Targets:
 *   - Select unit(s) to affect state turns for.
 * 
 *   State ID:
 *   - What is the ID of the state you wish to change turns for?
 *   - Only works on states that can have turns.
 * 
 *   Change Turns By:
 *   - How many turns should the state be changed to?
 *   - You may use JavaScript code.
 * 
 *   Auto-Add State?:
 *   - Automatically adds state if actor(s) does not have it applied?
 * 
 * ---
 * 
 * MECH: State Turns Change To
 * - Changes target(s) state turns to a specific value.
 * - Requires VisuMZ_1_SkillsStatesCore!
 * 
 *   Targets:
 *   - Select unit(s) to affect state turns for.
 * 
 *   State ID:
 *   - What is the ID of the state you wish to change turns for?
 *   - Only works on states that can have turns.
 * 
 *   Change Turns To:
 *   - How many turns should the state be changed to?
 *   - You may use JavaScript code.
 * 
 *   Auto-Add State?:
 *   - Automatically adds state if target(s) does not have it applied?
 * 
 * ---
 * 
 * MECH: STB Exploit Effect
 * - Utilize the STB Exploitation mechanics!
 * - Requires VisuMZ_2_BattleSystemSTB!
 * 
 *   Target(s) Exploited?:
 *   - Exploit the below targets?
 * 
 *     Targets:
 *     - Select unit(s) to become exploited.
 * 
 *     Force Exploitation:
 *     - Force the exploited status?
 * 
 *   User Exploiter?:
 *   - Allow the user to become the exploiter?
 * 
 *     Force Exploitation:
 *     - Force the exploiter status?
 * 
 * ---
 * 
 * MECH: STB Extra Action
 * - Adds an extra action for the currently active battler.
 * - Requires VisuMZ_2_BattleSystemSTB!
 * 
 *   Extra Actions:
 *   - How many extra actions should the active battler gain?
 *   - You may use JavaScript code.
 * 
 * ---
 * 
 * MECH: STB Remove Excess Actions
 * - Removes excess actions from the active battler.
 * - Requires VisuMZ_2_BattleSystemSTB!
 * 
 *   Remove Actions:
 *   - How many actions to remove from the active battler?
 *   - You may use JavaScript code.
 * 
 * ---
 * 
 * MECH: Swap Weapon
 * - Causes the unit(s) to swap their weapon for another.
 * - Requires VisuMZ_2_WeaponSwapSystem!
 * 
 *   Targets:
 *   - Select unit(s) to swap weapons for.
 * 
 *   Weapon Type ID:
 *   - Which weapon type to swap to?
 *   - This is NOT the weapon's ID.
 *   - It's the weapon TYPE.
 * 
 * ---
 * 
 * MECH: Text Popup
 * - Causes the unit(s) to display a text popup.
 * 
 *   Targets:
 *   - Select unit(s) to prompt a text popup.
 * 
 *   Text:
 *   - What text do you wish to display?
 * 
 *   Text Color:
 *   - Use #rrggbb for custom colors or regular numbers for text colors from
 *     the Window Skin.
 * 
 *   Flash Color:
 *   - Adjust the popup's flash color.
 *   - Format: [red, green, blue, alpha]
 * 
 *   Flash Duration:
 *   - What is the frame duration of the flash effect?
 * 
 * ---
 * 
 * MECH: Variable Popup
 * - Causes the unit(s) to display a popup using the data stored inside
 *   a variable.
 * 
 *   Targets:
 *   - Select unit(s) to prompt a text popup.
 * 
 *   Variable:
 *   - Get data from which variable to display as a popup?
 * 
 *   Digit Grouping:
 *   - Use digit grouping to separate numbers?
 *   - Requires VisuMZ_0_CoreEngine!
 * 
 *   Text Color:
 *   - Use #rrggbb for custom colors or regular numbers for text colors from
 *     the Window Skin.
 * 
 *   Flash Color:
 *   - Adjust the popup's flash color.
 *   - Format: [red, green, blue, alpha]
 * 
 *   Flash Duration:
 *   - What is the frame duration of the flash effect?
 * 
 * ---
 *
 * MECH: Wait For Effect
 * - Waits for the effects to complete before performing next command.
 *
 * ---
 *
 * === Action Sequences - Motion ===
 *
 * These Action Sequences allow you the ability to control the motions of
 * sideview sprites.
 *
 * ---
 * 
 * MOTION: Clear Freeze Frame
 * - Clears any freeze frames from the unit(s).
 * - Only applies to sprite sheets.
 * - Does NOT work with Dragonbones.
 * - Use "DB: Dragonbones Time Scale" instead.
 * 
 *   Targets:
 *   - Select which unit(s) to clear freeze frames for.
 * 
 * ---
 * 
 * MOTION: Freeze Motion Frame
 * - Forces a freeze frame instantly at the selected motion.
 * - Automatically clears with a new motion.
 * - Only applies to sprite sheets.
 * - Does NOT work with Dragonbones.
 * - Use "DB: Dragonbones Time Scale" instead.
 * 
 *   Targets:
 *   - Select which unit(s) to freeze motions for.
 * 
 *   Motion Type:
 *   - Freeze this motion for the unit(s).
 * 
 *   Frame Index:
 *   - Which frame do you want to freeze the motion on?
 *   - Frame index values start at 0.
 * 
 *   Show Weapon?:
 *   - If using 'attack', 'thrust', 'swing', or 'missile', display the
 *     weapon sprite?
 * 
 * ---
 *
 * MOTION: Motion Type
 * - Causes the unit(s) to play the selected motion.
 *
 *   Targets:
 *   - Select which unit(s) to perform a motion.
 *
 *   Motion Type:
 *   - Play this motion for the unit(s).
 *
 *   Show Weapon?:
 *   - If using 'attack', 'thrust', 'swing', or 'missile', display the
 *     weapon sprite?
 *
 * ---
 *
 * MOTION: Perform Action
 * - Causes the unit(s) to play the proper motion based on the current action.
 *
 *   Targets:
 *   - Select which unit(s) to perform a motion.
 *
 * ---
 *
 * MOTION: Refresh Motion
 * - Cancels any set motions unit(s) has to do and use their most natural
 *   motion at the moment.
 *
 *   Targets:
 *   - Select which unit(s) to refresh their motion state.
 *
 * ---
 *
 * MOTION: Wait By Motion Frame
 * - Creates a wait equal to the number of motion frames passing.
 * - Time is based on Plugin Parameters => Actors => Motion Speed.
 *
 *   Motion Frames to Wait?:
 *   - Each "frame" is equal to the value found in 
 *     Plugin Parameters => Actors => Motion Speed
 *
 * ---
 *
 * === Action Sequences - Movement ===
 *
 * These Action Sequences allow you the ability to control the sprites of
 * actors and enemies in battle.
 *
 * ---
 *
 * MOVE: Battle Step
 * - Causes the unit(s) to move forward past their home position to prepare
 *   for action.
 *
 *   Targets:
 *   - Select which unit(s) to move.
 *
 *   Wait For Movement?:
 *   - Wait for movement to complete before performing next command?
 *
 * ---
 *
 * MOVE: Change Home By Distance
 * - Change unit(s)'s home position by a distance from their current home
 *   position(s).
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to change home position(s) for.
 *
 *   Distance Adjustment:
 *   - Makes adjustments to distance values to determine which direction to
 *     change by.
 *     - Normal - No adjustments made
 *     - Horizontal - Actors adjust left, Enemies adjust right
 *     - Vertical - Actors adjust Up, Enemies adjust down
 *     - Both - Applies both Horizontal and Vertical
 *
 *     Distance: X:
 *     - Horizontal distance to move.
 *     - You may use JavaScript code.
 *
 *     Distance: Y:
 *     - Vertical distance to move.
 *     - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for total change amount.
 *
 *   Face Destination?:
 *   - Turn and face the destination?
 *
 *   Movement Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Movement Motion:
 *   - Play this motion for the unit(s).
 *
 *   Wait For Movement?:
 *   - Wait for movement to complete before performing next command?
 *
 * ---
 *
 * MOVE: Change Home To JS Coordinates
 * - Change home position(s) to specified JS Coordinates.
 * - Sideview-only! Uses JavaScript!
 *
 *   Targets:
 *   - Select which unit(s) to change home position(s) for.
 *
 *   JS: Coordinates:
 *   - Code used to determine the coordinates for the target(s)'s new home
 *     position.
 *
 *   Offset Adjustment:
 *   - Makes adjustments to offset values to determine which direction to
 *     adjust the destination by.
 *
 *     Offset: X:
 *     - Horizontal offset to move.
 *     - You may use JavaScript code.
 *
 *     Offset: Y:
 *     - Vertical offset to move.
 *     - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for total change amount.
 *
 *   Face Destination?:
 *   - Turn and face the destination?
 *
 *   Movement Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Movement Motion:
 *   - Play this motion for the unit(s).
 *
 *   Wait For Movement?:
 *   - Wait for movement to complete before performing next command?
 *
 * ---
 *
 * MOVE: Change Home To Point
 * - Change home position(s) to a target point on the screen.
 * - Sideview-only! Points based off Graphics.boxWidth/Height.
 *
 *   Targets:
 *   - Select which unit(s) to change home position(s) for.
 *
 *   Destination Point:
 *   - Select which point to face.
 *     - Center
 *     - Point X, Y
 *       - Replace 'x' and 'y' with coordinates
 *
 *   Offset Adjustment:
 *   - Makes adjustments to offset values to determine which direction to
 *     adjust the destination by.
 *
 *     Offset: X:
 *     - Horizontal offset to move.
 *     - You may use JavaScript code.
 *
 *     Offset: Y:
 *     - Vertical offset to move.
 *     - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for total change amount.
 *
 *   Face Destination?:
 *   - Turn and face the destination?
 *
 *   Movement Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Movement Motion:
 *   - Play this motion for the unit(s).
 *
 *   Wait For Movement?:
 *   - Wait for movement to complete before performing next command?
 *
 * ---
 *
 * MOVE: Change Home To Target(s)
 * - Moves unit(s) to another unit(s) on the battle field.
 * - Sideview-only!
 *
 *   Targets (Moving):
 *   - Select which unit(s) to change home position(s) for.
 *
 *   Targets (Destination):
 *   - Select which unit(s) to change home position to.
 *
 *     Target Location:
 *     - Select which part target group to change home position to.
 *       - front head
 *       - front center
 *       - front base
 *       - middle head
 *       - middle center
 *       - middle base
 *       - back head
 *       - back center
 *       - back base
 *
 *     Melee Distance:
 *     - The melee distance away from the target location in addition to the
 *       battler's width.
 *
 *   Offset Adjustment:
 *   - Makes adjustments to offset values to determine which direction to
 *     adjust the destination by.
 *
 *     Offset: X:
 *     - Horizontal offset to move.
 *     - You may use JavaScript code.
 *
 *     Offset: Y:
 *     - Vertical offset to move.
 *     - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for total change amount.
 *
 *   Face Destination?:
 *   - Turn and face the destination?
 *
 *   Movement Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Movement Motion:
 *   - Play this motion for the unit(s).
 *
 *   Wait For Movement?:
 *   - Wait for movement to complete before performing next command?
 *
 * ---
 *
 * MOVE: Face Direction
 * - Causes the unit(s) to face forward or backward.
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to change direction.
 *
 *   Direction:
 *   - Select which direction to face.
 *
 * ---
 *
 * MOVE: Face JS Coordinates
 * - Causes the unit(s) to face specified JS Coordinates.
 * - Sideview-only! Uses JavaScript!
 *
 *   Targets:
 *   - Select which unit(s) to change direction.
 *
 *   JS: Coordinates:
 *   - Code used to determine the coordinates for the target(s) to face
 *     towards.
 *
 *   Face Away From?:
 *   - Face away from the point instead?
 *
 * ---
 *
 * MOVE: Face Point
 * - Causes the unit(s) to face a point on the screen.
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to change direction.
 *
 *   Point:
 *   - Select which point to face.
 *     - Home
 *     - Center
 *     - Point X, Y
 *       - Replace 'x' and 'y' with coordinates
 *
 *   Face Away From?:
 *   - Face away from the point instead?
 *
 * ---
 *
 * MOVE: Face Target(s)
 * - Causes the unit(s) to face other targets on the screen.
 * - Sideview-only!
 *
 *   Targets (facing):
 *   - Select which unit(s) to change direction.
 *
 *   Targets (destination):
 *   - Select which unit(s) for the turning unit(s) to face.
 *
 *   Face Away From?:
 *   - Face away from the unit(s) instead?
 *
 * ---
 *
 * MOVE: Float
 * - Causes the unit(s) to float above the ground.
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to make float.
 *
 *   Desired Height:
 *   - Vertical distance to float upward.
 *   - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for total float amount.
 *
 *   Float Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Float?:
 *   - Wait for floating to complete before performing next command?
 *
 * ---
 *
 * MOVE: Home Reset
 * - Causes the unit(s) to move back to their home position(s) and face back to
 *   their original direction(s).
 *
 *   Targets:
 *   - Select which unit(s) to move.
 *
 *   Wait For Movement?:
 *   - Wait for movement to complete before performing next command?
 *
 * ---
 *
 * MOVE: Jump
 * - Causes the unit(s) to jump into the air.
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to make jump.
 *
 *   Desired Height:
 *   - Max jump height to go above the ground
 *   - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for total jump amount.
 *
 *   Wait For Jump?:
 *   - Wait for jumping to complete before performing next command?
 *
 * ---
 *
 * MOVE: Move Distance
 * - Moves unit(s) by a distance from their current position(s).
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to move.
 *
 *   Distance Adjustment:
 *   - Makes adjustments to distance values to determine which direction to
 *     move unit(s).
 *     - Normal - No adjustments made
 *     - Horizontal - Actors adjust left, Enemies adjust right
 *     - Vertical - Actors adjust Up, Enemies adjust down
 *     - Both - Applies both Horizontal and Vertical
 *
 *     Distance: X:
 *     - Horizontal distance to move.
 *     - You may use JavaScript code.
 *
 *     Distance: Y:
 *     - Vertical distance to move.
 *     - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for total movement amount.
 *
 *   Face Destination?:
 *   - Turn and face the destination?
 *
 *   Movement Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Movement Motion:
 *   - Play this motion for the unit(s).
 *
 *   Wait For Movement?:
 *   - Wait for movement to complete before performing next command?
 *
 * ---
 *
 * MOVE: Move To JS Coordinates
 * - Moves unit(s) to specified JS Coordinates.
 * - Sideview-only! Uses JavaScript!
 *
 *   Targets:
 *   - Select which unit(s) to move.
 *
 *   JS: Coordinates:
 *   - Code used to determine the coordinates for the target(s) to move to.
 *
 *   Offset Adjustment:
 *   - Makes adjustments to offset values to determine which direction to
 *     adjust the destination by.
 *
 *     Offset: X:
 *     - Horizontal offset to move.
 *     - You may use JavaScript code.
 *
 *     Offset: Y:
 *     - Vertical offset to move.
 *     - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for total movement amount.
 *
 *   Face Destination?:
 *   - Turn and face the destination?
 *
 *   Movement Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Movement Motion:
 *   - Play this motion for the unit(s).
 *
 *   Wait For Movement?:
 *   - Wait for movement to complete before performing next command?
 *
 * ---
 *
 * MOVE: Move To Point
 * - Moves unit(s) to a designated point on the screen.
 * - Sideview-only! Points based off Graphics.boxWidth/Height.
 *
 *   Targets:
 *   - Select which unit(s) to move.
 *
 *   Destination Point:
 *   - Select which point to face.
 *     - Home
 *     - Center
 *     - Point X, Y
 *       - Replace 'x' and 'y' with coordinates
 *
 *   Offset Adjustment:
 *   - Makes adjustments to offset values to determine which direction to
 *     adjust the destination by.
 *
 *     Offset: X:
 *     - Horizontal offset to move.
 *     - You may use JavaScript code.
 *
 *     Offset: Y:
 *     - Vertical offset to move.
 *     - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for total movement amount.
 *
 *   Face Destination?:
 *   - Turn and face the destination?
 *
 *   Movement Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Movement Motion:
 *   - Play this motion for the unit(s).
 *
 *   Wait For Movement?:
 *   - Wait for movement to complete before performing next command?
 *
 * ---
 *
 * MOVE: Move To Target(s)
 * - Moves unit(s) to another unit(s) on the battle field.
 * - Sideview-only!
 *
 *   Targets (Moving):
 *   - Select which unit(s) to move.
 *
 *   Targets (Destination):
 *   - Select which unit(s) to move to.
 *
 *     Target Location:
 *     - Select which part target group to move to.
 *       - front head
 *       - front center
 *       - front base
 *       - middle head
 *       - middle center
 *       - middle base
 *       - back head
 *       - back center
 *       - back base
 *
 *     Melee Distance:
 *     - The melee distance away from the target location in addition to the
 *       battler's width.
 *
 *   Offset Adjustment:
 *   - Makes adjustments to offset values to determine which direction to
 *     adjust the destination by.
 *
 *     Offset: X:
 *     - Horizontal offset to move.
 *     - You may use JavaScript code.
 *
 *     Offset: Y:
 *     - Vertical offset to move.
 *     - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for total movement amount.
 *
 *   Face Destination?:
 *   - Turn and face the destination?
 *
 *   Movement Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Movement Motion:
 *   - Play this motion for the unit(s).
 *
 *   Wait For Movement?:
 *   - Wait for movement to complete before performing next command?
 *
 * ---
 *
 * MOVE: Opacity
 * - Causes the unit(s) to change opacity.
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to change opacity.
 *
 *   Desired Opacity:
 *   - Change to this opacity value.
 *   - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for opacity change.
 *
 *   Opacity Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Opacity?:
 *   - Wait for opacity changes to complete before performing next command?
 *
 * ---
 *
 * MOVE: Scale/Grow/Shrink
 * - Causes the unit(s) to scale, grow, or shrink?.
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to change the scale of.
 *
 *   Scale X:
 *   Scale Y:
 *   - What target scale value do you want?
 *   - 1.0 is normal size.
 *
 *   Duration:
 *   - Duration in frames to scale for.
 *
 *   Scale Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Scale?:
 *   - Wait for scaling to complete before performing next command?
 *
 * ---
 *
 * MOVE: Skew/Distort
 * - Causes the unit(s) to skew.
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to skew.
 *
 *   Skew X:
 *   Skew Y:
 *   - What variance to skew?
 *   - Use small values for the best results.
 *
 *   Duration:
 *   - Duration in frames to skew for.
 *
 *   Skew Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Skew?:
 *   - Wait for skew to complete before performing next command?
 *
 * ---
 *
 * MOVE: Spin/Rotate
 * - Causes the unit(s) to spin.
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to spin.
 *
 *   Angle:
 *   - How many degrees to spin?
 *
 *   Duration:
 *   - Duration in frames to spin for.
 *
 *   Spin Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 * 
 *   Revert Angle on Finish:
 *   - Upon finishing the spin, revert the angle back to 0.
 *
 *   Wait For Spin?:
 *   - Wait for spin to complete before performing next command?
 *
 * ---
 *
 * MOVE: Wait For Float
 * - Waits for floating to complete before performing next command.
 *
 * ---
 *
 * MOVE: Wait For Jump
 * - Waits for jumping to complete before performing next command.
 *
 * ---
 *
 * MOVE: Wait For Movement
 * - Waits for movement to complete before performing next command.
 *
 * ---
 *
 * MOVE: Wait For Opacity
 * - Waits for opacity changes to complete before performing next command.
 *
 * ---
 *
 * MOVE: Wait For Scale
 * - Waits for scaling to complete before performing next command.
 *
 * ---
 *
 * MOVE: Wait For Skew
 * - Waits for skewing to complete before performing next command.
 *
 * ---
 *
 * MOVE: Wait For Spin
 * - Waits for spinning to complete before performing next command.
 *
 * ---
 * 
 * === Action Sequences - Projectiles ===
 * 
 * Create projectiles on the screen and fire them off at a target.
 * Requires VisuMZ_3_ActSeqProjectiles!
 * 
 * ---
 *
 * PROJECTILE: Animation
 * - Create an animation projectile and fire it at a target.
 * - Requires VisuMZ_3_ActSeqProjectiles!
 *
 *   Coordinates:
 *
 *     Start Location:
 *     - Settings to determine where the projectile(s) start from.
 *
 *       Type:
 *       - Select where the projectile should start from.
 *         - Target - Start from battler target(s)
 *         - Point - Start from a point on the screen
 *
 *         Target(s):
 *         - Select which unit(s) to start the projectile from.
 *
 *           Centralize:
 *           - Create one projectile at the center of the targets?
 *           - Or create a projectile for each target?
 * 
 *           Target Location:
 *           - Select which part of the target to send the projectile from.
 *           - front head
 *           - front center
 *           - front base
 *           - middle head
 *           - middle center
 *           - middle base
 *           - back head
 *           - back center
 *           - back base
 *
 *         Point X:
 *         Point Y:
 *         - Insert the X/Y coordinate to start the projectile at.
 *         - You may use JavaScript code.
 *
 *       Offset X:
 *       Offset Y:
 *       - Insert how many pixels to offset the X/Y coordinate by.
 *       - You may use JavaScript code.
 *
 *     Goal Location:
 *     - Settings to determine where the projectile(s) start from.
 *
 *       Type:
 *       - Select where the projectile should go to.
 *         - Target - Goal is battler target(s)
 *         - Point - Goal is a point on the screen
 *
 *         Target(s):
 *         - Select which unit(s) for projectile to go to.
 *
 *           Centralize:
 *           - Create one projectile at the center of the targets?
 *           - Or create a projectile for each target?
 * 
 *           Target Location:
 *           - Select which part of the target to send the projectile to.
 *           - front head
 *           - front center
 *           - front base
 *           - middle head
 *           - middle center
 *           - middle base
 *           - back head
 *           - back center
 *           - back base
 *
 *         Point X:
 *         Point Y:
 *         - Insert the X/Y coordinate to send the projectile to.
 *         - You may use JavaScript code.
 *
 *       Offset X:
 *       Offset Y:
 *       - Insert how many pixels to offset the X/Y coordinate by.
 *       - You may use JavaScript code.
 *
 *   Settings:
 *
 *     Animation ID:
 *     - Determine which animation to use as a projectile.
 *
 *     Duration:
 *     - Duration for the projectile(s) to travel.
 *
 *     Wait For Projectile?:
 *     - Wait for projectile(s) to reach their destination before going onto
 *       the next command?
 * 
 *     Wait For Animation?:
 *     - Wait for animation to finish before going to the next command?
 *
 *     Extra Settings:
 *     - Add extra settings to the projectile?
 *
 *       Auto Angle?:
 *       - Automatically angle the projectile to tilt the direction
 *         it's moving?
 *
 *       Angle Offset:
 *       - Alter the projectile's tilt by this many degrees.
 *
 *       Arc Peak:
 *       - This is the height of the projectile's trajectory arc in pixels.
 *
 *       Easing:
 *       - Select which easing type to apply to the projectile's trajectory.
 *
 *       Spin Speed:
 *       - Determine how much angle the projectile spins per frame.
 *       - Does not work well with "Auto Angle".
 * 
 *     Effect Emulation:
 * 
 *       Action Effect?:
 *       - Emulate current Action Effect when projectile reaches target?
 *       - Only works with start and goal targets.
 * 
 *       Item Effect ID?:
 *       - Emulate an Item Effect when projectile reaches target?
 *       - Use 0 to not use.
 *       - Only works with start and goal targets.
 * 
 *       Skill Effect ID?:
 *       - Emulate a Skill Effect when projectile reaches target?
 *       - Use 0 to not use.
 *       - Only works with start and goal targets.
 * 
 *       Common Event ID:
 *       - Plays a Once Parallel Common Event upon reaching target.
 *       - Use 0 to not use.
 *       - Works regardless of start/goal targets.
 * 
 *     End Animation ID:
 *     - Plays an animation when projectile reaches target.
 *     - Use 0 to not use.
 *     - Requires VisuMZ_1_BattleCore v1.86+.
 *     - Requires VisuMZ_3_ActSeqProjectiles v1.09+.
 * 
 *       Mirror Animation:
 *       - Mirror the effect animation?
 *       - Requires VisuMZ_1_BattleCore v1.86+.
 *       - Requires VisuMZ_3_ActSeqProjectiles version 1.09+.
 * 
 *       Mute Animation:
 *       - Mute the effect animation?
 *       - Requires VisuMZ_1_BattleCore v1.86+.
 *       - Requires VisuMZ_3_ActSeqProjectiles version 1.09+.
 *     
 *
 * ---
 *
 * PROJECTILE: Icon
 * - Create an icon projectile and fire it at a target.
 * - Requires VisuMZ_3_ActSeqProjectiles!
 *
 *   Coordinates:
 *
 *     Start Location:
 *     - Settings to determine where the projectile(s) start from.
 *
 *       Type:
 *       - Select where the projectile should start from.
 *         - Target - Start from battler target(s)
 *         - Point - Start from a point on the screen
 *
 *         Target(s):
 *         - Select which unit(s) to start the projectile from.
 *
 *           Centralize:
 *           - Create one projectile at the center of the targets?
 *           - Or create a projectile for each target?
 * 
 *           Target Location:
 *           - Select which part of the target to send the projectile from.
 *           - front head
 *           - front center
 *           - front base
 *           - middle head
 *           - middle center
 *           - middle base
 *           - back head
 *           - back center
 *           - back base
 *
 *         Point X:
 *         Point Y:
 *         - Insert the X/Y coordinate to start the projectile at.
 *         - You may use JavaScript code.
 *
 *       Offset X:
 *       Offset Y:
 *       - Insert how many pixels to offset the X/Y coordinate by.
 *       - You may use JavaScript code.
 *
 *     Goal Location:
 *     - Settings to determine where the projectile(s) start from.
 *
 *       Type:
 *       - Select where the projectile should go to.
 *         - Target - Goal is battler target(s)
 *         - Point - Goal is a point on the screen
 *
 *         Target(s):
 *         - Select which unit(s) for projectile to go to.
 *
 *           Centralize:
 *           - Create one projectile at the center of the targets?
 *           - Or create a projectile for each target?
 * 
 *           Target Location:
 *           - Select which part of the target to send the projectile to.
 *           - front head
 *           - front center
 *           - front base
 *           - middle head
 *           - middle center
 *           - middle base
 *           - back head
 *           - back center
 *           - back base
 *
 *         Point X:
 *         Point Y:
 *         - Insert the X/Y coordinate to send the projectile to.
 *         - You may use JavaScript code.
 *
 *       Offset X:
 *       Offset Y:
 *       - Insert how many pixels to offset the X/Y coordinate by.
 *       - You may use JavaScript code.
 *
 *   Settings:
 *
 *     Icon:
 *     - Determine which icon to use as a projectile.
 *       - You may use JavaScript code.
 *
 *     Duration:
 *     - Duration for the projectile(s) to travel.
 *
 *     Wait For Projectile?:
 *     - Wait for projectile(s) to reach their destination before going onto
 *       the next command?
 *
 *     Extra Settings:
 *     - Add extra settings to the projectile?
 *
 *       Auto Angle?:
 *       - Automatically angle the projectile to tilt the direction
 *         it's moving?
 *
 *       Angle Offset:
 *       - Alter the projectile's tilt by this many degrees.
 *
 *       Arc Peak:
 *       - This is the height of the projectile's trajectory arc in pixels.
 *
 *       Blend Mode:
 *       - What kind of blend mode do you wish to apply to the projectile?
 *         - Normal
 *         - Additive
 *         - Multiply
 *         - Screen
 *
 *       Easing:
 *       - Select which easing type to apply to the projectile's trajectory.
 *
 *       Hue:
 *       - Adjust the hue of the projectile.
 *       - Insert a number between 0 and 360.
 *
 *       Scale:
 *       - Adjust the size scaling of the projectile.
 *       - Use decimals for exact control.
 *
 *       Spin Speed:
 *       - Determine how much angle the projectile spins per frame.
 *       - Does not work well with "Auto Angle".
 * 
 *     Effect Emulation:
 * 
 *       Action Effect?:
 *       - Emulate current Action Effect when projectile reaches target?
 *       - Only works with start and goal targets.
 * 
 *       Item Effect ID?:
 *       - Emulate an Item Effect when projectile reaches target?
 *       - Use 0 to not use.
 *       - Only works with start and goal targets.
 * 
 *       Skill Effect ID?:
 *       - Emulate a Skill Effect when projectile reaches target?
 *       - Use 0 to not use.
 *       - Only works with start and goal targets.
 * 
 *       Common Event ID:
 *       - Plays a Once Parallel Common Event upon reaching target.
 *       - Use 0 to not use.
 *       - Works regardless of start/goal targets.
 * 
 *     End Animation ID:
 *     - Plays an animation when projectile reaches target.
 *     - Use 0 to not use.
 *     - Requires VisuMZ_1_BattleCore v1.86+.
 *     - Requires VisuMZ_3_ActSeqProjectiles v1.09+.
 * 
 *       Mirror Animation:
 *       - Mirror the effect animation?
 *       - Requires VisuMZ_1_BattleCore v1.86+.
 *       - Requires VisuMZ_3_ActSeqProjectiles version 1.09+.
 * 
 *       Mute Animation:
 *       - Mute the effect animation?
 *       - Requires VisuMZ_1_BattleCore v1.86+.
 *       - Requires VisuMZ_3_ActSeqProjectiles version 1.09+.
 *
 * ---
 *
 * PROJECTILE: Picture
 * - Create a picture projectile and fire it at a target.
 * - Requires VisuMZ_3_ActSeqProjectiles!
 *
 *   Coordinates:
 *
 *     Start Location:
 *     - Settings to determine where the projectile(s) start from.
 *
 *       Type:
 *       - Select where the projectile should start from.
 *         - Target - Start from battler target(s)
 *         - Point - Start from a point on the screen
 *
 *         Target(s):
 *         - Select which unit(s) to start the projectile from.
 *
 *           Centralize:
 *           - Create one projectile at the center of the targets?
 *           - Or create a projectile for each target?
 * 
 *           Target Location:
 *           - Select which part of the target to send the projectile from.
 *           - front head
 *           - front center
 *           - front base
 *           - middle head
 *           - middle center
 *           - middle base
 *           - back head
 *           - back center
 *           - back base
 *
 *         Point X:
 *         Point Y:
 *         - Insert the X/Y coordinate to start the projectile at.
 *         - You may use JavaScript code.
 *
 *       Offset X:
 *       Offset Y:
 *       - Insert how many pixels to offset the X/Y coordinate by.
 *       - You may use JavaScript code.
 *
 *     Goal Location:
 *     - Settings to determine where the projectile(s) start from.
 *
 *       Type:
 *       - Select where the projectile should go to.
 *         - Target - Goal is battler target(s)
 *         - Point - Goal is a point on the screen
 *
 *         Target(s):
 *         - Select which unit(s) for projectile to go to.
 *
 *           Centralize:
 *           - Create one projectile at the center of the targets?
 *           - Or create a projectile for each target?
 * 
 *           Target Location:
 *           - Select which part of the target to send the projectile to.
 *           - front head
 *           - front center
 *           - front base
 *           - middle head
 *           - middle center
 *           - middle base
 *           - back head
 *           - back center
 *           - back base
 *
 *         Point X:
 *         Point Y:
 *         - Insert the X/Y coordinate to send the projectile to.
 *         - You may use JavaScript code.
 *
 *       Offset X:
 *       Offset Y:
 *       - Insert how many pixels to offset the X/Y coordinate by.
 *       - You may use JavaScript code.
 *
 *   Settings:
 *
 *     Picture Filename:
 *     - Determine which picture to use as a projectile.
 *
 *     Duration:
 *     - Duration for the projectile(s) to travel.
 *
 *     Wait For Projectile?:
 *     - Wait for projectile(s) to reach their destination before going onto
 *       the next command?
 *
 *     Extra Settings:
 *     - Add extra settings to the projectile?
 *
 *       Auto Angle?:
 *       - Automatically angle the projectile to tilt the direction
 *         it's moving?
 *
 *       Angle Offset:
 *       - Alter the projectile's tilt by this many degrees.
 *
 *       Arc Peak:
 *       - This is the height of the projectile's trajectory arc in pixels.
 *
 *       Blend Mode:
 *       - What kind of blend mode do you wish to apply to the projectile?
 *         - Normal
 *         - Additive
 *         - Multiply
 *         - Screen
 *
 *       Easing:
 *       - Select which easing type to apply to the projectile's trajectory.
 *
 *       Hue:
 *       - Adjust the hue of the projectile.
 *       - Insert a number between 0 and 360.
 *
 *       Scale:
 *       - Adjust the size scaling of the projectile.
 *       - Use decimals for exact control.
 *
 *       Spin Speed:
 *       - Determine how much angle the projectile spins per frame.
 *       - Does not work well with "Auto Angle".
 * 
 *     Effect Emulation:
 * 
 *       Action Effect?:
 *       - Emulate current Action Effect when projectile reaches target?
 *       - Only works with start and goal targets.
 * 
 *       Item Effect ID?:
 *       - Emulate an Item Effect when projectile reaches target?
 *       - Use 0 to not use.
 *       - Only works with start and goal targets.
 * 
 *       Skill Effect ID?:
 *       - Emulate a Skill Effect when projectile reaches target?
 *       - Use 0 to not use.
 *       - Only works with start and goal targets.
 * 
 *       Common Event ID:
 *       - Plays a Once Parallel Common Event upon reaching target.
 *       - Use 0 to not use.
 *       - Works regardless of start/goal targets.
 * 
 *     End Animation ID:
 *     - Plays an animation when projectile reaches target.
 *     - Use 0 to not use.
 *     - Requires VisuMZ_1_BattleCore v1.86+.
 *     - Requires VisuMZ_3_ActSeqProjectiles v1.09+.
 * 
 *       Mirror Animation:
 *       - Mirror the effect animation?
 *       - Requires VisuMZ_1_BattleCore v1.86+.
 *       - Requires VisuMZ_3_ActSeqProjectiles version 1.09+.
 * 
 *       Mute Animation:
 *       - Mute the effect animation?
 *       - Requires VisuMZ_1_BattleCore v1.86+.
 *       - Requires VisuMZ_3_ActSeqProjectiles version 1.09+.
 *
 * ---
 * 
 * === Action Sequences - Skew ===
 * 
 * These action sequences allow you to have control over the camera skew.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * ---
 *
 * SKEW: Change Skew
 * - Changes the camera skew.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Skew X:
 *   - Change the camera skew X to this value.
 *
 *   Skew Y:
 *   - Change the camera skew Y to this value.
 *
 *   Duration:
 *   - Duration in frames to change camera skew.
 *
 *   Skew Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Skew?:
 *   - Wait for skew changes to complete before performing next command?
 *
 * ---
 *
 * SKEW: Reset Skew
 * - Reset any skew settings.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Duration:
 *   - Duration in frames to reset camera skew.
 *
 *   Skew Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Skew?:
 *   - Wait for skew changes to complete before performing next command?
 *
 * ---
 *
 * SKEW: Wait For Skew
 * - Waits for skew changes to complete before performing next command.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 * ---
 *
 * === Action Sequences - Target ===
 *
 * If using a manual target by target Action Sequence, these commands will give
 * you full control over its usage.
 *
 * ---
 *
 * TARGET: Current Index
 * - Sets the current index to this value.
 * - Then decide to jump to a label (optional).
 *
 *   Set Index To:
 *   - Sets current targeting index to this value.
 *   - 0 is the starting index of a target group.
 *
 *   Jump To Label:
 *   - If a target is found after the index change, jump to this label in the
 *     Common Event.
 *
 * ---
 *
 * TARGET: Next Target
 * - Moves index forward by 1 to select a new current target.
 * - Then decide to jump to a label (optional).
 *
 *   Jump To Label:
 *   - If a target is found after the index change, jump to this label in the
 *     Common Event.
 *
 * ---
 *
 * TARGET: Previous Target
 * - Moves index backward by 1 to select a new current target.
 * - Then decide to jump to a label (optional).
 *
 *   Jump To Label:
 *   - If a target is found after the index change, jump to this label in the
 *     Common Event.
 *
 * ---
 *
 * TARGET: Random Target
 * - Sets index randomly to determine new currernt target.
 * - Then decide to jump to a label (optional).
 *
 *   Force Random?:
 *   - Index cannot be its previous index amount after random.
 *
 *   Jump To Label:
 *   - If a target is found after the index change, jump to this label in the
 *     Common Event.
 *
 * ---
 * 
 * === Action Sequences - Voice ==
 * 
 * ---
 *
 * VOICE: Common Line
 * - Plays a common voice line from target battler(s).
 * - Requires VisuMZ_3_BattleVoices!
 *
 *   Speaker Target(s):
 *   - Select unit(s) to play voice lines from.
 *
 *   Voice Line:
 *   - What voice line do you wish to play?
 *
 * ---
 *
 * VOICE: Play Special Line
 * - Plays a special voice line from target battler(s).
 * - Requires VisuMZ_3_BattleVoices!
 *
 *   Speaker Target(s):
 *   - Select unit(s) to play voice lines from.
 *
 *   Voice Line Type:
 *   - What voice line type do you wish to play?
 *     - Action Name
 *     - Chant Line
 *     - Item Name
 *     - Skill Name
 *     - Spell Name
 *     - Unique Lines
 *
 *   Name / Letter:
 *   - What voice letter/name do you want to play?
 *
 * ---
 *
 * === Action Sequences - Weapon ===
 *
 * Allows for finer control over Dual/Multi Wielding actors.
 * Only works for Actors.
 *
 * ---
 *
 * WEAPON: Clear Weapon Slot
 * - Clears the active weapon slot (making others valid again).
 * - Only works for Actors.
 *
 *   Targets:
 *   - Select unit(s) to clear the active weapon slot for.
 *
 * ---
 *
 * WEAPON: Next Weapon Slot
 * - Goes to next active weapon slot (making others invalid).
 * - If next slot is weaponless, don't label jump.
 *
 *   Targets:
 *   - Select unit(s) to change the next active weapon slot for.
 *
 * ---
 *
 * WEAPON: Set Weapon Slot
 * - Sets the active weapon slot (making others invalid).
 * - Only works for Actors.
 *
 *   Targets:
 *   - Select unit(s) to change the active weapon slot for.
 *
 *   Weapon Slot ID:
 *   - Select weapon slot to make active (making others invalid).
 *   - Use 0 to clear and normalize. You may use JavaScript code.
 *
 * ---
 *
 * === Action Sequences - Zoom ===
 *
 * These Action Sequences are zoom-related.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * ---
 *
 * ZOOM: Change Scale
 * - Changes the zoom scale.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Scale:
 *   - The zoom scale to change to.
 *
 *   Duration:
 *   - Duration in frames to reset battle zoom.
 *
 *   Zoom Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Zoom?
 *   - Wait for zoom changes to complete before performing next command?
 *
 * ---
 *
 * ZOOM: Reset Zoom
 * - Reset any zoom settings.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Duration:
 *   - Duration in frames to reset battle zoom.
 *
 *   Zoom Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Zoom?
 *   - Wait for zoom changes to complete before performing next command?
 *
 * ---
 *
 * ZOOM: Wait For Zoom
 * - Waits for zoom changes to complete before performing next command.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Auto Battle Settings
 * ============================================================================
 *
 * These Plugin Parameter settings allow you to change the aspects added by
 * this plugin that support Auto Battle and the Auto Battle commands.
 *
 * Auto Battle commands can be added to the Party Command Window and/or Actor
 * Command Window. The one used by the Party Command Window will cause the
 * whole party to enter an Auto Battle state until stopped by a button input.
 * The command used by the Actor Command Window, however, will cause the actor
 * to select an action based off the Auto Battle A.I. once for the current turn
 * instead.
 *
 * ---
 *
 * Battle Display
 * 
 *   Message:
 *   - Message that's displayed when Auto Battle is on.
 *     Text codes allowed. %1 - OK button, %2 - Cancel button
 * 
 *   OK Button:
 *   - Text used to represent the OK button.
 *   - If VisuMZ_0_CoreEngine is present, ignore this.
 * 
 *   Cancel Button:
 *   - Text used to represent the Cancel button.
 *   - If VisuMZ_0_CoreEngine is present, ignore this.
 * 
 *   Background Type:
 *   - Select background type for Auto Battle window.
 *     - 0 - Window
 *     - 1 - Dim
 *     - 2 - Transparent
 * 
 *   JS: X, Y, W, H:
 *   - Code used to determine the dimensions for this window.
 *
 * ---
 *
 * Options
 * 
 *   Add Option?:
 *   - Add the Auto Battle options to the Options menu?
 * 
 *   Adjust Window Height:
 *   - Automatically adjust the options window height?
 * 
 *   Startup Name:
 *   - Command name of the option.
 * 
 *   Style Name:
 *   - Command name of the option.
 * 
 *   OFF:
 *   - Text displayed when Auto Battle Style is OFF.
 * 
 *   ON:
 *   - Text displayed when Auto Battle Style is ON.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Damage Settings
 * ============================================================================
 *
 * These Plugin Parameters add a variety of things to how damage is handled in
 * battle. These range from hard damage caps to soft damage caps to how damage
 * popups appear, how the formulas for various aspects are handled and more.
 *
 * Damage Styles are also a feature added through this plugin. More information
 * can be found in the help section above labeled 'Damage Styles'.
 *
 * ---
 *
 * Damage Styles
 * 
 *   Default Style:
 *   - Which Damage Style do you want to set as default?
 *   - Use 'Manual' to not use any styles at all.
 *     - The 'Manual' style will not support <Armor Penetration> notetags.
 *     - The 'Manual' style will not support <Armor Reduction> notetags.
 * 
 *   Style List:
 *   - A list of the damage styles available.
 *   - These are used to calculate base damage.
 * 
 *     Name:
 *     - Name of this Damage Style.
 *     -Used for notetags and such.
 * 
 *     JS: Formula:
 *     - The base formula for this Damage Style.
 * 
 *     Items & Equips Core:
 * 
 *       HP Damage:
 *       MP Damage:
 *       HP Recovery:
 *       MP Recovery:
 *       HP Drain:
 *       MP Drain:
 *       - Vocabulary used for this data entry.
 * 
 *       JS: Damage Display:
 *       - Code used the data displayed for this category.
 *
 * ---
 *
 * Damage Cap
 * 
 *   Enable Damage Cap?:
 *   - Put a maximum hard damage cap on how far damage can go?
 *   - This can be broken through the usage of notetags.
 * 
 *   Default Hard Cap:
 *   - The default hard damage cap used before applying damage.
 * 
 *   Enable Soft Cap?:
 *   - Soft caps ease in the damage values leading up to the  hard damage cap.
 *   - Requires hard Damage Cap enabled.
 * 
 *     Base Soft Cap Rate:
 *     - The default soft damage cap used before applying damage.
 * 
 *     Soft Scale Constant:
 *     - The default soft damage cap used before applying damage.
 *
 * ---
 *
 * Popups
 * 
 *   Popup Duration:
 *   - Adjusts how many frames a popup stays visible.
 * 
 *   Newest Popups Bottom:
 *   - Puts the newest popups at the bottom.
 * 
 *   End Battle Show?:
 *   - Show or hide popups upon victory or escape?
 *   - Used to hide battle-state removal popups.
 * 
 *   Offset X:
 *   Offset Y:
 *   - Sets how much to offset the sprites by horizontally/vertically.
 * 
 *   Shift X:
 *   Shift Y:
 *   - Sets how much to shift the sprites by horizontally/vertically.
 * 
 *   Shift Y:
 * 
 *   Critical Flash Color:
 *   - Adjust the popup's flash color.
 *   - Format: [red, green, blue, alpha]
 * 
 *   Critical Duration:
 *   - Adjusts how many frames a the flash lasts.
 *
 * ---
 *
 * Formulas
 * 
 *   JS: Overall Formula:
 *   - The overall formula used when calculating damage.
 * 
 *   JS: Variance Formula:
 *   - The formula used when damage variance.
 * 
 *   JS: Guard Formula:
 *   - The formula used when damage is guarded.
 *
 * ---
 *
 * Critical Hits
 * 
 *   JS: Rate Formula:
 *   - The formula used to calculate Critical Hit Rates.
 * 
 *   JS: Damage Formula:
 *   - The formula used to calculate Critical Hit Damage modification.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Mechanics Settings
 * ============================================================================
 *
 * Some of the base settings for the various mechanics found in the battle
 * system can be altered here in these Plugin Parameters. Most of these will
 * involve JavaScript code and require you to have to good understanding of
 * how the RPG Maker MZ code works before tampering with it.
 *
 * ---
 *
 * Action Speed
 * 
 *   Allow Random Speed?:
 *   - Allow speed to be randomized base off the user's AGI?
 * 
 *   Turn End Buffs Expire?:
 *   - Normally, buffs expire after all actions end.
 *   - But here, you can have buffs expire on turn end.
 * 
 *   JS: Calculate:
 *   - Code used to calculate action speed.
 *
 * ---
 *
 * Base Troop
 * 
 *   Base Troop ID's:
 *   - Select the Troop ID(s) to duplicate page events from for all
 *     other troops.
 *   - More information can be found in the dedicated Help section above.
 *
 * ---
 * 
 * Common Events (on Map)
 * 
 *   Pre-Battle Event:
 *   Post-Battle Event:
 *   Victory Event:
 *   Defeat Event:
 *   Escape Success Event:
 *   Escape Fail Event:
 *   - Queued Common Event to run upon meeting the condition.
 *   - Use to 0 to not run any Common Event at all.
 *   - "Post-Battle Event" will always run regardless.
 *   - If any events are running before the battle, they will continue running
 *     to the end first before the queued Common Events will run.
 *   - These common events only run on the map scene. They're not meant to run
 *     in the battle scene.
 *   - If the "Defeat Event" has a common event attached to it, then random
 *     encounters will be changed to allow defeat without being sent to the
 *     Game Over scene. Instead, the game will send the player to the map scene
 *     where the Defeat Event will run.
 *
 * ---
 *
 * Escape
 * 
 *   JS: Calc Escape Ratio:
 *   - Code used to calculate the escape success ratio.
 * 
 *   JS: Calc Escape Raise:
 *   - Code used to calculate how much the escape success ratio raises upon
 *     each failure.
 * 
 * ---
 * 
 * Switches
 * 
 *   Switch: Critical:
 *   - Turns switch ON if the action performs a critical hit.
 *   - Switch reverts to OFF whenever an action starts.
 *   - If multiple targets/hits are struck, as long as one hit lands a critical
 *     hit, then the switch will remain ON for the rest of the action.
 * 
 *   Switch: Miss/Evade:
 *   - Turns switch ON if the action misses/is evaded.
 *   - Switch reverts to OFF whenever an action starts.
 *   - If multiple targets/hits are struck, as long as one hit fails to land,
 *     then the switch will remain ON for the rest of the action.
 * 
 * ---
 * 
 * Variables
 * 
 *   Variable: Damage:
 *   - Variable records target damage during action.
 *   - Variable reverts to 0 whenever an action starts.
 *   - If multiple targets/hits are struck, the variable will record the total
 *     amount of damage done for the remainder of the action (unless manually
 *     reseting to 0 during an Action Sequence).
 * 
 *   Variable: Healing:
 *   - Variable records target healing during action.
 *   - Variable reverts to 0 whenever an action starts.
 *   - If multiple targets/hits are struck, the variable will record the total
 *     amount of healing done for the remainder of the action (unless manually
 *     reseting to 0 during an Action Sequence).
 * 
 * ---
 *
 * JS: Battle-Related
 * 
 *   JS: Pre-Start Battle:
 *   - Target function: BattleManager.startBattle()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Post-Start Battle:
 *   - Target function: BattleManager.startBattle()
 *   - JavaScript code occurs after function is run.
 * 
 *   JS: Battle Victory:
 *   - Target function: BattleManager.processVictory()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Escape Success:
 *   - Target function: BattleManager.onEscapeSuccess()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Escape Failure:
 *   - Target function: BattleManager.onEscapeFailure()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Battle Defeat:
 *   - Target function: BattleManager.processDefeat()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Pre-End Battle:
 *   - Target function: BattleManager.endBattle()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Post-End Battle:
 *   - Target function: BattleManager.endBattle()
 *   - JavaScript code occurs after function is run.
 *
 * ---
 *
 * JS: Turn-Related
 * 
 *   JS: Pre-Start Turn:
 *   - Target function: BattleManager.startTurn()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Post-Start Turn:
 *   - Target function: BattleManager.startTurn()
 *   - JavaScript code occurs after function is run.
 * 
 *   JS: Pre-End Turn:
 *   - Target function: Game_Battler.prototype.onTurnEnd()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Post-End Turn:
 *   - Target function: Game_Battler.prototype.onTurnEnd()
 *   - JavaScript code occurs after function is run.
 * 
 *   JS: Pre-Regenerate:
 *   - Target function: Game_Battler.prototype.regenerateAll()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Post-Regenerate:
 *   - Target function: Game_Battler.prototype.regenerateAll()
 *   - JavaScript code occurs after function is run.
 *
 * ---
 *
 * JS: Action-Related
 * 
 *   JS: Pre-Start Action:
 *   - Target function: BattleManager.startAction()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Post-Start Action:
 *   - Target function: BattleManager.startAction()
 *   - JavaScript code occurs after function is run.
 * 
 *   JS: Pre-Apply:
 *   - Target function: Game_Action.prototype.apply()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Pre-Damage:
 *   - Target function: Game_Action.prototype.executeDamage()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Post-Damage:
 *   - Target function: Game_Action.prototype.executeDamage()
 *   - JavaScript code occurs after function is run.
 * 
 *   JS: Post-Apply:
 *   - Target function: Game_Action.prototype.apply()
 *   - JavaScript code occurs after function is run.
 * 
 *   JS: Pre-End Action:
 *   - Target function: BattleManager.endAction()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Post-End Action:
 *   - DescriTarget function: BattleManager.endAction()
 *   - JavaScript code occurs after function is run.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Battle Layout Settings
 * ============================================================================
 *
 * The Battle Layout Settings Plugin Parameter gives you control over the look,
 * style, and appearance of certain UI elements. These range from the way the
 * Battle Status Window presents its information to the way certain windows
 * like the Party Command Window and Actor Command Window appear.
 *
 * ---
 *
 * Battle Layout Style
 * - The style used for the battle layout.
 * 
 *   Default:
 *   - Shows actor faces in Battle Status.
 * 
 *   List:
 *   - Lists actors in Battle Status.
 * 
 *   XP:
 *   - Shows actor battlers in a stretched Battle Status.
 * 
 *   Portrait:
 *   - Shows portraits in a stretched Battle Status.
 * 
 *   Border:
 *   - Displays windows around the screen border.
 *
 * ---
 *
 * List Style
 * 
 *   Show Faces:
 *   - Shows faces in List Style?
 * 
 *   Command Window Width:
 *   - Determine the window width for the Party and Actor Command Windows.
 *   - Affects Default and List Battle Layout styles.
 *
 * ---
 *
 * XP Style
 * 
 *   Command Lines:
 *   - Number of action lines in the Actor Command Window for the XP Style.
 * 
 *   Sprite Height:
 *   - Default sprite height used when if the sprite's height has not been
 *     determined yet.
 * 
 *   Sprite Base Location:
 *   - Determine where the sprite is located on the Battle Status Window.
 *     - Above Name - Sprite is located above the name.
 *     - Bottom - Sprite is located at the bottom of the window.
 *     - Centered - Sprite is centered in the window.
 *     - Top - Sprite is located at the top of the window.
 *
 * ---
 *
 * Portrait Style
 * 
 *   Show Portraits?:
 *   - Requires VisuMZ_1_MainMenuCore.
 *   - Shows the actor's portrait instead of a face.
 * 
 *   Portrait Scaling:
 *   - If portraits are used, scale them by this much.
 *
 * ---
 *
 * Border Style
 * 
 *   Columns:
 *   - The total number of columns for Skill & Item Windows in the battle scene
 * 
 *   Show Portraits?:
 *   - Requires VisuMZ_1_MainMenuCore.
 *   - Shows the actor's portrait at the edge of the screen.
 * 
 *   Portrait Scaling:
 *   - If portraits are used, scale them by this much.
 *
 * ---
 *
 * Skill & Item Windows
 * 
 *   Middle Layout:
 *   - Shows the Skill & Item Windows in mid-screen?
 * 
 *   Columns:
 *   - The total number of columns for Skill & Item Windows in the battle scene
 *
 * ---
 * 
 * Status Window Elements
 * 
 *   Battler Name:
 *   Gauge 1 (HP):
 *   Gauge 2 (MP):
 *   Gauge 3 (TP):
 *   State Icon:
 *   TPB/ATB Gauge:
 * 
 *     Offset: X/Y:
 *     - Offset this Battle Status Window element's X/Y.
 *     - For X: Negative goes left. Positive goes right.
 *     - For Y: Negative goes up. Positive goes down.
 * 
 *   Window Skin:
 * 
 *     Filename:
 *     - Filename used for the Battle Status Window skin.
 *     - Leave this empty to use the default window skin.
 * 
 *     Hide Window Skin?:
 *     - Hide the window skin for the Battle Status Window?
 * 
 *   Selectable Background:
 * 
 *     Hide Selectable BG?:
 *     - Show/Hide the selectable background box for the Battle Status Window?
 * 
 *   Attachments:
 * 
 *     Back Attachment:
 * 
 *       Filename:
 *       - Filename used for an image to attach to the back of the Battle
 *         Status Window. Leave empty for none.
 * 
 *       Offset: X/Y:
 *       - Offset this Battle Status Window element's X/Y.
 *       - For X: Negative goes left. Positive goes right.
 *       - For Y: Negative goes up. Positive goes down.
 * 
 *     Front Attachment:
 * 
 *       Filename:
 *       - Filename used for an image to attach to the front of the Battle
 *         Status Window. Leave empty for none.
 * 
 * ---
 * 
 * UI Elements
 * 
 *   Anti-Tint UI?
 *   - Prevent UI Elements from being tinted?
 *   - This prevents UI Elements such as HP Gauges, Enemy Names, Battle Cursor,
 *     and Weakness Display from being affected by screen tint.
 * 
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Battle Log Settings
 * ============================================================================
 *
 * These Plugin Parameters give you control over how the Battle Log Window, the
 * window shown at the top of the screen in the battle layout, appears, its
 * various properties, and which text will be displayed.
 *
 * The majority of the text has been disabled by default with this plugin to
 * make the flow of battle progress faster.
 *
 * ---
 *
 * General
 * 
 *   Back Color:
 *   - Use #rrggbb for a hex color.
 * 
 *   Max Lines:
 *   - Maximum number of lines to be displayed.
 * 
 *   Message Wait:
 *   - Number of frames for a usual message wait.
 * 
 *   Text Align:
 *   - Text alignment for the Window_BattleLog.
 * 
 *   JS: X, Y, W, H:
 *   - Code used to determine the dimensions for the battle log.
 *
 * ---
 *
 * Start Turn
 * 
 *   Show Start Turn?:
 *   - Display turn changes at the start of the turn?
 * 
 *   Start Turn Message:
 *   - Message displayed at turn start.
 *   - %1 - Turn Count
 * 
 *   Start Turn Wait:
 *   - Number of frames to wait after a turn started.
 *
 * ---
 *
 * Display Action
 * 
 *   Show Centered Action?:
 *   - Display a centered text of the action name?
 * 
 *   Show Skill Message 1?:
 *   - Display the 1st skill message?
 * 
 *   Show Skill Message 2?:
 *   - Display the 2nd skill message?
 * 
 *   Show Item Message?:
 *   - Display the item use message?
 *
 * ---
 *
 * Action Changes
 * 
 *   Show Counter?:
 *   - Display counter text?
 * 
 *     Wait Frames:
 *     - How many frames should the battle log wait after text?
 *     - 60 frames = 1 second.
 * 
 *   Show Reflect?:
 *   - Display magic reflection text?
 * 
 *     Wait Frames:
 *     - How many frames should the battle log wait after text?
 *     - 60 frames = 1 second.
 * 
 *   Show Substitute?:
 *   - Display substitute text?
 * 
 *     Wait Frames:
 *     - How many frames should the battle log wait after text?
 *     - 60 frames = 1 second.
 *
 * ---
 *
 * Action Results
 * 
 *   Show No Effect?:
 *   - Display no effect text?
 * 
 *   Show Critical?:
 *   - Display critical text?
 * 
 *   Show Miss/Evasion?:
 *   - Display miss/evasion text?
 * 
 *   Show HP Damage?:
 *   - Display HP Damage text?
 * 
 *   Show MP Damage?:
 *   - Display MP Damage text?
 * 
 *   Show TP Damage?:
 *   - Display TP Damage text?
 *
 * ---
 *
 * Display States
 * 
 *   Show Added States?:
 *   - Display added states text?
 * 
 *   Show Removed States?:
 *   - Display removed states text?
 * 
 *   Show Current States?:
 *   - Display the currently affected state text?
 * 
 *   Show Added Buffs?:
 *   - Display added buffs text?
 * 
 *   Show Added Debuffs?:
 *   - Display added debuffs text?
 * 
 *   Show Removed Buffs?:
 *   - Display removed de/buffs text?
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Battleback Scaling Settings
 * ============================================================================
 *
 * By default, the battlebacks in RPG Maker MZ scale as if the screen size is
 * a static 816x624 resolution, which isn't always the case. These settings
 * here allow you to dictate how you want the battlebacks to scale for the
 * whole game. These settings CANNOT be changed midgame or per battle.
 *
 * ---
 *
 * Settings
 * 
 *   Default Style:
 *   - The default scaling style used for battlebacks.
 *   - MZ (MZ's default style)
 *   - 1:1 (No Scaling)
 *   - Scale To Fit (Scale to screen size)
 *   - Scale Down (Scale Downward if Larger than Screen)
 *   - Scale Up (Scale Upward if Smaller than Screen)
 * 
 *   JS: 1:1:
 *   JS: Scale To Fit:
 *   JS: Scale Down:
 *   JS: Scale Up:
 *   - This code gives you control over the scaling for this style.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Party Command Window
 * ============================================================================
 *
 * These Plugin Parameters allow you control over how the Party Command Window
 * operates in the battle scene. You can turn disable it from appearing or make
 * it so that it doesn't 
 *
 * ---
 *
 * Command Window
 * 
 *   Style:
 *   - How do you wish to draw commands in the Party Command Window?
 *   - Text Only: Display only the text.
 *   - Icon Only: Display only the icon.
 *   - Icon + Text: Display the icon first, then the text.
 *   - Auto: Determine which is better to use based on the size of the cell.
 * 
 *   Text Align:
 *   - Text alignment for the Party Command Window.
 * 
 *   Fight Icon:
 *   - The icon used for the Fight command.
 * 
 *   Add Auto Battle?:
 *   - Add the "Auto Battle" command to the Command Window?
 * 
 *     Auto Battle Icon:
 *     - The icon used for the Auto Battle command.
 * 
 *     Auto Battle Text:
 *     - The text used for the Auto Battle command.
 * 
 *   Add Status?:
 *   - Add the "Status" command to the Command Window?
 * 
 *   Add Options?:
 *   - Add the "Options" command to the Command Window?
 * 
 *     Options Icon:
 *     - The icon used for the Options command.
 * 
 *     Active TPB Message:
 *     - Message that will be displayed when selecting options during the
 *       middle of an action.
 * 
 *   Escape Icon:
 *   - The icon used for the Escape command.
 *
 * ---
 *
 * Access
 * 
 *   Skip Party Command:
 *   - DTB: Skip Party Command selection on turn start.
 *   - TPB: Skip Party Command selection at battle start.
 * 
 *   Disable Party Command:
 *   - Disable the Party Command Window entirely?
 *
 * ---
 *
 * Help Window
 * 
 * The Help Window will only appear for 'Border' and 'Frontview Battle UI'
 * battle layouts. It does not appear for other battle layouts.
 * 
 *   Fight:
 *   - Text displayed when selecting a skill type.
 *   - %1 - Skill Type Name
 * 
 *   Auto Battle:
 *   - Text displayed when selecting the Auto Battle command.
 * 
 *   Options:
 *   - Text displayed when selecting the Options command.
 * 
 *   Escape:
 *   - Text displayed when selecting the escape command.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Actor Command Window
 * ============================================================================
 *
 * These Plugin Parameters allow you to change various aspects regarding the
 * Actor Command Window and how it operates in the battle scene. This ranges
 * from how it appears to the default battle commands given to all players
 * without a custom <Battle Commands> notetag.
 *
 * ---
 *
 * Command Window
 * 
 *   Style:
 *   - How do you wish to draw commands in the Actor Command Window?
 *   - Text Only: Display only the text.
 *   - Icon Only: Display only the icon.
 *   - Icon + Text: Display the icon first, then the text.
 *   - Auto: Determine which is better to use based on the size of the cell.
 * 
 *   Text Align:
 *   - Text alignment for the Actor Command Window.
 * 
 *   Item Icon:
 *   - The icon used for the Item command.
 * 
 *   Normal SType Icon:
 *   - Icon used for normal skill types that aren't assigned any icons.
 *   - Ignore if VisuMZ_1_SkillsStatesCore is installed.
 * 
 *   Magic SType Icon:
 *   - Icon used for magic skill types that aren't assigned any icons.
 *   - Ignore if VisuMZ_1_SkillsStatesCore is installed.
 *
 * ---
 *
 * Battle Commands
 * 
 *   Command List:
 *   - List of battle commands that appear by default if the <Battle Commands>
 *     notetag isn't present.
 *
 *     - Attack 
 *       - Adds the basic attack command.
 * 
 *     - Skills
 *       - Displays all the skill types available to the actor.
 * 
 *     - SType: x
 *     - Stype: name
 *       - Adds in a specific skill type.
 *       - Replace 'x' with the ID of the skill type.
 *       - Replace 'name' with the name of the skill type (without text codes).
 *
 *     - All Skills
 *       - Adds all usable battle skills as individual actions.
 * 
 *     - Skill: x
 *     - Skill: name
 *       - Adds in a specific skill as a usable action.
 *       - Replace 'x' with the ID of the skill.
 *       - Replace 'name' with the name of the skill.
 * 
 *     - Guard
 *       - Adds the basic guard command.
 * 
 *     - Item
 *       - Adds the basic item command.
 * 
 *     - Status
 *       - Adds the status command.
 * 
 *     - Escape
 *       - Adds the escape command.
 * 
 *     - Auto Battle
 *       - Adds the auto battle command.
 * 
 *     - Party
 *       - Requires VisuMZ_2_PartySystem!
 *       - Switches out the current actor for another.
 * 
 *     - Combat Log
 *       - Requires VisuMZ_4_CombatLog!
 *       - Shows combat log.
 * 
 *     - Talk
 *       - Requires VisuMZ_3_BattleCmdTalk!
 *       - Shows talk command if applicable.
 * 
 *     - Weapon Swap
 *       - Requires VisuMZ_2_WeaponSwapSystem!
 *       - Swaps current weapon for next one.
 * 
 *   Show Command Costs:
 *   - If a battle command has a resource cost, show it?
 *
 * ---
 *
 * Help Window
 * 
 * The Help Window will only appear for 'Border' and 'Frontview Battle UI'
 * battle layouts. It does not appear for other battle layouts.
 * 
 *   Skill Types:
 *   - Text displayed when selecting a skill type.
 *   - %1 - Skill Type Name
 * 
 *   Items:
 *   - Text displayed when selecting the item command.
 * 
 *   Escape:
 *   - Text displayed when selecting the escape command.
 * 
 *   Auto Battle:
 *   - Text displayed when selecting the Auto Battle command.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: In-Battle Status Window
 * ============================================================================
 *
 * Added with Battle Core version 1.84, this new window allows the player to
 * view the status of the current active party. If the actors have states and
 * buffs, the player can scroll through them and read about their effects
 * through the help window.
 * 
 * If you would like to manage which parameters can appear here, this can be
 * done through the VisuMZ_0_CoreEngine's "Parameter Settings" and adjust which
 * parameters are shown through "Extended Parameters". These settings will
 * reflect in the In-Battle Status window, too. Otherwise, the parameters that
 * will be shown will only be MaxHP, MaxMP, ATK, DEF, MAT, MDF, AGI, and LUK.
 * 
 * The In-Battle Status can also be used to view enemies (if the parameter is
 * enabled). To view enemies, players must scroll through all the actors before
 * viewing enemies. Enemies will have their battler graphic displayed. If the
 * enemy has a SV Battler graphic, that will be displayed instead. However, if
 * the enemy has a Dragonbones, then the database battler graphic is displayed
 * to match any of the turn order displays as those also use the same graphic.
 * 
 * Enemies will not display the current HP on their In-Battle Status gauges.
 * Instead, they will display what percentage their HP, MP, and/or TP is at.
 * This is primarily due to how gauges do not support large numbers well and
 * showing the percentage values are better for this scene.
 *
 * ---
 * 
 * General Settings
 * 
 *   Status Icon:
 *   - The icon used for the Status command.
 * 
 *   Status Graphic:
 *   - Choose how the actor graphic appears for In-Battle Status.
 * 
 *   Help Description:
 *   - Text displayed when selecting the Status command.
 * 
 * ---
 * 
 * Enemy Settings
 * 
 *   Allow View Enemies?:
 *   - Allows players to view enemy stats (even if limited)?
 * 
 *   Show Level?:
 *   - Shows the enemy's level in the In-Battle Status?
 * 
 *   Hidden Parameter:
 *   - The text that appears if a parameter value is hidden.
 * 
 *     Show Params Always:
 *     - Always show exact enemy parameter values.
 * 
 *     Show Battle Test:
 *     - Show exact enemy parameter values in battle test.
 * 
 *     Show If Defeated:
 *     - Show exact enemy parameter values if enemy has been defeated before.
 * 
 * ---
 * 
 * Page Buttons:
 * 
 *   Show Page Buttons?:
 *   - Shows page buttons to switch between actors?
 *   - Still requires Touch UI option to be on.
 * 
 *   Large UI Position?:
 *   - If using a large resolution, position the page buttons on which side?
 * 
 *  Offset X
 *  - Offsets the page buttons x position.
 *  - Negative: left. Positive: right.
 * 
 *  Offset Y
 *  - Offsets the page buttons y position.
 *  - Negative: up. Positive: down.
 * 
 * ---
 * 
 * Parameter Display
 * 
 *   Increased Value
 *   - How are increased parameter values displayed?
 *   - %1 - Parameter Value
 * 
 *   Decreased Value
 *   - How are increased parameter values displayed?
 *   - %1 - Parameter Value
 * 
 * ---
 * 
 * States Display
 * 
 *   Max Width
 *   - Maximum width of the states list display.
 * 
 *   List States?
 *   - Lists states in the states list display?
 * 
 *   List Buffs?
 *   - Lists buffs in the states list display?
 * 
 *   List Debuffs?
 *   - Lists debuffs in the states list display?
 * 
 *   Buffs/Debuffs Display:
 * 
 *     Buff Name Format
 *     - Text format used to represent buffs.
 *     - %1 - Parameter Name
 * 
 *     Debuff Name Format
 *     - Text format used to represent debuffs.
 *     - %1 - Parameter Name
 * 
 *   Normal State:
 * 
 *     Normal Icon
 *     - Icon used to represent normal state (unaffected by states, buffs, or
 *       debuffs).
 * 
 *     Normal Text
 *     - Text used to represent normal state (unaffected by states, buffs, or
 *       debuffs).
 * 
 * ---
 * 
 * Help Descriptions
 * 
 *   State Help Format:
 *   - Text format used for state help descriptions
 *   - %1 - Description; %2 - Turns/Actions Remaining
 * 
 *   Buff Help Format:
 *   - Text format used for Buff help descriptions
 *   - %1 - Param; %2 - Percent; %3 - Color; %4 - Turns
 * 
 *   Debuff Help Format:
 *   - Text format used for Debuff help descriptions
 *   - %1 - Param; %2 - Percent; %3 - Color; %4 - Turns
 * 
 *   Normal State:
 *   - Help description used to explain normal state (unaffected by states,
 *     buffs, or debuffs).
 * 
 *   Turns/Actions Left:
 * 
 *     Actions Format:
 *     - Text format used to represent actions remaining.
 *     - %1 - Actions; %2 - Color
 * 
 *     Turns Format:
 *     - Text format used to represent turns remaining.
 *     - %1 - Turns; %2 - Color
 * 
 *     Passive Text:
 *     - Text used to represent a passive.
 * 
 * ---
 * 
 * Window Settings
 * 
 *   Background Type:
 *   - Select background type for this window.
 * 
 *   JS: Draw Data:
 *   - Code used to draw battler data.
 * 
 *   JS: X, Y, W, H:
 *   - Code used to determine the dimensions for this window.
 * 
 * 
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Multi-Target Windows Settings
 * ============================================================================
 *
 * Action Sequence Plugin Parameters adjust how the Multi-Target Windows appear
 * in battle. These windows are visible when selecting an enemy or actor while
 * using a skill/item that has the <Single or Multiple Select> notetag.
 * 
 * Those wondering why this isn't regulated to a command left or right of the
 * enemies and actors is because mouse controls and touch controls would not be
 * able to select all enemies or all allies that way.
 *
 * ---
 * 
 * Properties
 * 
 *   Window Width:
 *   - What is the width used for the Multi-Target Window?
 * 
 *   Background Type:
 *   - Select background type for these windows.
 * 
 *   Show Button:
 *   - Shows the keyboard/controller button to press?
 *   - Requires VisuMZ_0_CoreEngine!
 * 
 * ---
 * 
 * Vocab
 * 
 *   All Actors:
 *   - What is the text used for the "All Actors" button?
 * 
 *   All Enemies:
 *   - What is the text used for the "All Enemies" button?
 * 
 * ---
 * 
 * Offsets > Actor Offsets
 * Offsets > Enemy Offsets
 * 
 *   Offset X:
 *   - Offsets the button's x position.
 *   - Negative: left. Positive: right.
 * 
 *   Offset Y:
 *   - Offsets the button's y position.
 *   - Negative: up. Positive: down.
 * 
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Damage Combo Window Settings
 * ============================================================================
 * 
 * If enabled, this window will display updated information about the total
 * amount of hits performed and total damage/healing value executed for HP.
 * 
 * This only applies when HP damage is directly dealt through action effects.
 * It does NOT apply for MP damage, TP damage, states, regeneration, or event
 * commands.
 * 
 * If you would like to adjust the Damage Combo Window mid-action, you can use
 * the following script calls to do so:
 * 
 *     $comboWindowReset()
 *     - Resets the all values found in the damage combo window.
 * 
 *     $comboWindowIncreaseHits(x)
 *     - Increases the current hit counter in the combo window by 'x'.
 *     - Insert a number for 'x'.
 *     - Example: $comboWindowIncreaseHits(2)
 * 
 *     $comboWindowIncreaseDamage(x)
 *     - Increases the current total damage counter in the combo window by 'x'.
 *     - Insert a number for 'x'.
 *     - This will offset any healing added in the damage counter window.
 *     - Example: $comboWindowIncreaseDamage(100)
 * 
 *     $comboWindowIncreaseHealing(x)
 *     - Increases the current total heal counter in the combo window by 'x'.
 *     - Insert a number for 'x'.
 *     - This will offset any damage added in the damage counter window.
 *     - Example: $comboWindowIncreaseHealing(200)
 * 
 * ---
 * 
 * General Settings:
 * 
 *   Enable?:
 *   - Add the Combo Window to show in battle?
 * 
 * ---
 * 
 * Appearance Settings:
 * 
 *   Custom Font:
 *   - Insert the custom font face name here.
 *   - Use VisuMZ_1_MessageCore to register new fonts.
 * 
 *   Text Align:
 *   - Text alignment for this window?
 * 
 *   JS: Draw Data:
 *   - Code used to draw the data in this window.
 * 
 * ---
 * 
 * Vocabulary:
 * 
 *   Damage Combo Format:
 *   - Text format used to display total hits for damage.
 *   - %1 - Total Hits
 * 
 *   Healing Combo Format:
 *   - Text format used to display total hits for healing.
 *   - %1 - Total Hits
 * 
 *   Damage Total Format:
 *   - Text format used to display total value for damage.
 *   - %1 - Total Damage
 * 
 *   Healing Total Format:
 *   - Text format used to display total value for healing.
 *   - %1 - Total Healing
 * 
 * ---
 * 
 * Position Settings:
 * 
 *   Fade Shift X:
 *   - Shifts the windows x position when fading.
 *   - Negative: left. Positive: right.
 * 
 *   Fade Shift Y:
 *   - Shifts the windows y position when fading.
 *   - Negative: up. Positive: down.
 * 
 *   Offset X:
 *   - Offsets the windows x position.
 *   - Negative: left. Positive: right.
 * 
 *   Offset Y:
 *   - Offsets the windows y position.
 *   - Negative: up. Positive: down.
 * 
 *   JS: X, Y, W, H:
 *   - Code used to determine the dimensions for this window.
 * 
 * ---
 * 
 * Updating Settings:
 * 
 *   Number Roll Duration:
 *   - Frame duration to roll damage numbers.
 *   - 60 frames = 1 second.
 * 
 *   Minimum Stay Duration:
 *   - Frame duration to stay visible minimum. 
 *   - 60 frames = 1 second.
 * 
 *   Minimum Hit Visible:
 *   - Minimum hits before combo window becomes visible?
 * 
 *   Opacity Speed:
 *   - Opacity speed when fading in/out.
 * 
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Actor Battler Settings
 * ============================================================================
 *
 * These Plugin Parameter settings adjust how the sideview battlers behave for
 * the actor sprites. Some of these settings are shared with enemies if they
 * use sideview battler graphics.
 *
 * ---
 *
 * Flinch
 * 
 *   Flinch Distance X:
 *   - The normal X distance when flinching.
 * 
 *   Flinch Distance Y:
 *   - The normal Y distance when flinching.
 * 
 *   Flinch Duration:
 *   - The number of frames for a flinch to complete.
 * 
 *   Shake Flinch:
 *   - Perform a shake flinch when taking damage?
 * 
 *     Max Duration:
 *     - Maximum duration a shake flinch can have.
 *     - This is reduced relative to the amount of damage taken.
 * 
 *     Max Power:
 *     - The power rating of a shake flinch at full damage.
 *     - This is reduced relative to the amount of damage taken.
 *
 * ---
 * 
 * Frontview Battlers
 * 
 *   Portrait Animations:
 * 
 *     Each Target:
 *     - Place animations on top for "Each Target" display types?
 *     - Does not apply to MV animations.
 * 
 *     Center of All:
 *     - Place animations on top for "Center of All" display types?
 *     - Does not apply to MV animations.
 * 
 *     Center of Screen:
 *     - Place animations on top for "Center of Screen" display types?
 *     - Does not apply to MV animations.
 * 
 * ---
 *
 * Sideview Battlers
 * 
 *   Anchor:
 * 
 *     Anchor: X:
 *     - Default X anchor for Sideview Battlers.
 * 
 *     Anchor: Y:
 *     - Default Y anchor for Sideview Battlers.
 * 
 *   Chant Style:
 *   - What determines the chant motion?
 *   - Hit type or skill type?
 * 
 *   Motion Speed:
 *   - The number of frames in between each motion.
 * 
 *   Position:
 * 
 *     Offset X:
 *     - Offsets X position where actor is positioned.
 *     - Negative values go left. Positive values go right.
 * 
 *     Offset Y:
 *     - Offsets Y position where actor is positioned.
 *     - Negative values go up. Positive values go down.
 * 
 *   Priority: Active:
 *   - Place the active actor on top of actor and enemy sprites.
 * 
 *   Priority: Actors:
 *   - Prioritize actors over enemies when placing sprites on top of each other
 * 
 *   Shadow Visible:
 *   - Show or hide the shadow for Sideview Battlers.
 * 
 *   Smooth Image:
 *   - Smooth out the battler images or pixelate them?
 * 
 *   State Overlay:
 * 
 *     Offset X:
 *     - Offsets X position for state overlay on actor.
 *     - Negative values go left. Positive values go right.
 * 
 *     Offset Y:
 *     - Offsets Y position for state overlay on actor.
 *     - Negative values go up. Positive values go down.
 * 
 *   JS: Home Position:
 *   - Code used to calculate the home position of actors.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Enemy Battler Settings
 * ============================================================================
 *
 * These Plugin Parameter settings adjust how enemies appear visually in the
 * battle scene. Some of these settings will override the settings used for
 * actors if used as sideview battlers. Other settings include changing up the
 * default attack animation for enemies, how the enemy select window functions,
 * and more.
 *
 * ---
 *
 * Visual
 * 
 *   Attack Animation:
 *   - Default attack animation used for enemies.
 *   - Use <Attack Animation: x> for custom animations.
 * 
 *   Emerge Text:
 *   - Show or hide the 'Enemy emerges!' text at the start of battle.
 * 
 *   Offset X:
 *   - Offsets X position where enemy is positioned.
 *   - Negative values go left. Positive values go right.
 * 
 *   Offset Y:
 *   - Offsets Y position where enemy is positioned.
 *   - Negative values go up. Positive values go down.
 * 
 *   Smooth Image:
 *   - Smooth out the battler images or pixelate them?
 *
 * ---
 *
 * Select Window
 * 
 *   Any: Last Selected:
 *   - Prioritize last selected enemy over front view or sideview settings?
 * 
 *   FV: Right Priority:
 *   - If using frontview, auto select the enemy furthest right.
 * 
 *   SV: Right Priority:
 *   - If using sideview, auto select the enemy furthest right.
 * 
 * ---
 * 
 * Name:
 * 
 *   Legacy Option:
 *   - Use the legacy version (window) or new version (sprite).
 *   - WARNING: Legacy version is no longer supported for bugs.
 *   - Not all settings available here in the Plugin Parameters will be
 *     available to the legacy version (ie Always Visible and Attach States).
 * 
 *   Font Size:
 *   - Font size used for enemy names.
 * 
 *   Name Position:
 * 
 *     Offset X:
 *     Offset Y:
 *     - Offset the enemy name's position by this much.
 *     - For X: Negative goes left. Positive goes right.
 *     - For Y: Negative goes up. Positive goes down.
 * 
 *   Name: Attach States:
 *   - Attach the enemy's state icon to the enemy name?
 * 
 *     Attach: Offset X:
 *     Attach: Offset Y:
 *     - How much to offset the attached icon's X/Y position by?
 *     - For X: Negative goes left. Positive goes right.
 *     - For Y: Negative goes up. Positive goes down.
 * 
 *   Name Visibility:
 * 
 *     Always Hidden:
 *     - Determines if the enemy name will always be visible.
 *     - Highest priority.
 * 
 *     Always Visible:
 *     - Determines if the enemy name will always be visible.
 *     - Medium priority.
 * 
 *     As Target:
 *     - Shows enemy name when enemy is a target.
 *     - Medium priority.
 * 
 *     By Selection?:
 *     - Determines the conditions for enemy name visibility.
 *     - Lowest priority.
 * 
 *     Temporary Visibility:
 *     - Number of frames enemy's name temporarily visible after taking an
 *       action effect in battle.
 *     - 60 frames = 1 second.
 *
 * ---
 *
 * Sideview Battlers
 * 
 *   Allow Collapse:
 *   - Causes defeated enemies with SV Battler graphics to "fade away"
 *     when defeated?
 * 
 *   Anchor: X:
 *   - Default X anchor for Sideview Battlers.
 *   - Use values between 0 and 1 to be safe.
 * 
 *   Anchor: Y:
 *   - Default Y anchor for Sideview Battlers.
 *   - Use values between 0 and 1 to be safe.
 * 
 *   Motion: Idle:
 *   - Sets default idle animation used by Sideview Battlers.
 * 
 *   Shadow Visible:
 *   - Show or hide the shadow for Sideview Battlers.
 * 
 *   Size: Width:
 *   - Default width for enemies that use Sideview Battlers.
 * 
 *   Size: Height:
 *   - Default height for enemies that use Sideview Battlers.
 * 
 *   Weapon Type:
 *   - Sets default weapon type used by Sideview Battlers.
 *   - Use 0 for Bare Hands.
 *
 * ---
 * 
 * Aspect Defaults
 * 
 *   Name Format:
 *   - Default name aspect format.
 *   - %1 - Original Enemy Name
 * 
 *   Name Color:
 *   - Use #rrggbb for custom colors or regular numbers for text colors from
 *     the Window Skin.
 * 
 *   Icon:
 *   - Default icon used for aspect.
 *   - Use <Aspect Icon: x> to change icon.
 * 
 * ---
 *
 * ============================================================================
 * Plugin Parameters: HP Gauge Settings
 * ============================================================================
 *
 * Settings that adjust the visual HP Gauge displayed in battle.
 *
 * ---
 *
 * Show Gauges For
 * 
 *   Actors:
 *   - Show HP Gauges over the actor sprites' heads?
 *   - Requires SV Actors to be visible.
 * 
 *   Enemies:
 *   - Show HP Gauges over the enemy sprites' heads?
 *   - Can be bypassed with <Hide HP Gauge> notetag.
 * 
 *     Requires Defeat?:
 *     - Requires defeating the enemy once to show HP Gauge?
 *     - Can be bypassed with <Show HP Gauge> notetag.
 * 
 *       Battle Test Bypass?:
 *       - Bypass the defeat requirement in battle test?
 *
 * ---
 *
 * Settings
 * 
 *   Animation Duration:
 *   - How many frames should gauges animate themselves?
 *   - Default: 20 frames.
 * 
 *   Anchor X:
 *   Anchor Y:
 *   - Where do you want the HP Gauge sprite's anchor X/Y to be?
 *     Use values between 0 and 1 to be safe.
 * 
 *   Scale:
 *   - How large/small do you want the HP Gauge to be scaled?
 * 
 *   Offset X:
 *   Offset Y:
 *   - How many pixels to offset the HP Gauge's X/Y by?
 *
 * ---
 *
 * Options
 * 
 *   Add Option?:
 *   - Add the 'Show HP Gauge' option to the Options menu?
 * 
 *   Adjust Window Height:
 *   - Automatically adjust the options window height?
 * 
 *   Option Name:
 *   - Command name of the option.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Action Sequence Settings
 * ============================================================================
 *
 * Action Sequence Plugin Parameters allow you to decide if you want automatic
 * Action Sequences to be used for physical attacks, the default casting
 * animations used, how counters and reflects appear visually, and what the
 * default stepping distances are.
 *
 * ---
 *
 * Automatic Sequences
 * 
 *   Melee Single Target:
 *   - Allow this auto sequence for physical, single target actions?
 * 
 *   Melee Multi Target:
 *   - Allow this auto sequence for physical, multi-target actions?
 *
 * ---
 * 
 * Quality of Life
 * 
 *   Auto Notetag:
 *   - Automatically apply the <Custom Action Sequence> notetag effect to any
 *     item or skill that has a Common Event?
 *   - Any item or skill without a Common Event attached to it will use the
 *     Automatic Action Sequences instead.
 *   - The <Auto Action Sequence> notetag will disable this effect for that
 *     particular skill or item.
 * 
 * ---
 *
 * Cast Animations
 * 
 *   Certain Hit:
 *   - Cast animation for Certain Hit skills.
 * 
 *   Physical:
 *   - Cast animation for Physical skills.
 * 
 *   Magical:
 *   - Cast animation for Magical skills.
 *
 * ---
 *
 * Counter/Reflect
 * 
 *   Counter Back:
 *   - Play back the attack animation used?
 * 
 *   Reflect Animation:
 *   - Animation played when an action is reflected.
 * 
 *   Reflect Back:
 *   - Play back the attack animation used?
 *
 * ---
 *
 * Stepping
 * 
 *   Melee Distance:
 *   - Minimum distance in pixels for Movement Action Sequences.
 * 
 *   Step Distance X:
 *   - The normal X distance when stepping forward.
 * 
 *   Step Distance Y:
 *   - The normal Y distance when stepping forward.
 * 
 *   Step Duration:
 *   - The number of frames for a stepping action to complete.
 *
 * ---
 *
 * ============================================================================
 * Terms of Use
 * ============================================================================
 *
 * 1. These plugins may be used in free or commercial games provided that they
 * have been acquired through legitimate means at VisuStella.com and/or any
 * other official approved VisuStella sources. Exceptions and special
 * circumstances that may prohibit usage will be listed on VisuStella.com.
 * 
 * 2. All of the listed coders found in the Credits section of this plugin must
 * be given credit in your games or credited as a collective under the name:
 * "VisuStella".
 * 
 * 3. You may edit the source code to suit your needs, so long as you do not
 * claim the source code belongs to you. VisuStella also does not take
 * responsibility for the plugin if any changes have been made to the plugin's
 * code, nor does VisuStella take responsibility for user-provided custom code
 * used for custom control effects including advanced JavaScript notetags
 * and/or plugin parameters that allow custom JavaScript code.
 * 
 * 4. You may NOT redistribute these plugins nor take code from this plugin to
 * use as your own. These plugins and their code are only to be downloaded from
 * VisuStella.com and other official/approved VisuStella sources. A list of
 * official/approved sources can also be found on VisuStella.com.
 *
 * 5. VisuStella is not responsible for problems found in your game due to
 * unintended usage, incompatibility problems with plugins outside of the
 * VisuStella MZ library, plugin versions that aren't up to date, nor
 * responsible for the proper working of compatibility patches made by any
 * third parties. VisuStella is not responsible for errors caused by any
 * user-provided custom code used for custom control effects including advanced
 * JavaScript notetags and/or plugin parameters that allow JavaScript code.
 *
 * 6. If a compatibility patch needs to be made through a third party that is
 * unaffiliated with VisuStella that involves using code from the VisuStella MZ
 * library, contact must be made with a member from VisuStella and have it
 * approved. The patch would be placed on VisuStella.com as a free download
 * to the public. Such patches cannot be sold for monetary gain, including
 * commissions, crowdfunding, and/or donations.
 *
 * ============================================================================
 * Credits
 * ============================================================================
 * 
 * If you are using this plugin, credit the following people in your game:
 * 
 * Team VisuStella
 * * Yanfly
 * * Arisu
 * * Olivia
 * * Irina
 *
 * ============================================================================
 * Changelog
 * ============================================================================
 * 
 * Version 1.87: June 12, 2025
 * * Bug Fixes!
 * ** Fixed a bug where <JS Accuracy> and related notetags did not work.
 *    Fix made by Arisu.
 * ** Fixed a bug where dual wielding weapons with HP/MP bonuses would cause
 *    the max cache values to fluctuate per hit. Fix made by Olivia.
 * * Compatibility Update!
 * ** Added fail safes for plugins that would sometimes add null battlers to
 *    animation queues. This update prevents crashes for potential checks.
 * ** Added better compatibility with Message Core's text language change.
 *    Enemy names did not convert prior to placing state icons and would cause
 *    misalignment.
 * 
 * Version 1.86: January 16, 2025
 * * Bug Fixes!
 * ** Fixed a bug where during Active TPB, actors were not showing damage
 *    motions. Fix made by Olivia.
 * ** Fixed a bug regarding the in-battle status requiring that the Main Menu
 *    Core to be installed when other plugins are also present. Fix by Olivia.
 * ** Fixed a bug where <Exclude From Status Listing> notetag was not working
 *    properly due to a documentation typo of <Exclude From Status List>. Both
 *    notetags should now work. Fix made by Olivia.
 * * Documentation Update!
 * ** Help file updated for new features.
 * ** Added clarity for Plugin Parameters > Party Command Window Settings >
 *    Help Window
 * ** Added clarity for Plugin Parameters > Actor Command Window Settings >
 *    Help Window
 * *** The Help Window will only appear for 'Border' and 'Frontview Battle UI'
 *     battle layouts.
 * * New Features!
 * ** New notetag added by Irina:
 * *** <Under>
 * **** If this tag is found in an animation's name, the animation will appear
 *      under battlers while in battle.
 * ***** This effect only applies to battlers in the battle scene.
 * ***** Under effect is NOT applied to status window portraits.
 * ***** Under effect is NOT applied to projectile animations.
 * ** Added new Action Sequence Projectile settings:
 * *** Extra Settings > End Animation ID:
 * **** Plays an animation when projectile reaches target.
 * **** Requires VisuMZ_3_ActSeqProjectiles version 1.09+.
 * 
 * Version 1.85: October 17, 2024
 * * Bug Fixes!
 * ** Fixed a bug where the enemy name's visibility would remain after an
 *    action has taken place and before inputting is done. Fix made by Olivia.
 * ** Fixed a bug where the "Name Visibility As Target" plugin parameter did
 *    not work properly. Fix made by Olivia.
 * * Documentation Update!
 * ** Help file updated for new features.
 * ** Updated <Help Description> notetag documentation:
 * *** This is used as a common notetag between Battle Core's state
 *     descriptions and State Tooltips' state descriptions.
 * * New Features!
 * ** New Notetag added by Olivia:
 * *** <In-Battle Status Description>
 * **** A prioritized help description used to separate from the common help
 *      description notetag shared with State Tooltips.
 * ** New Plugin Parameters added by Olivia:
 * *** Actor Battlers > Frontview > Portrait Animations > Each Target
 * *** Actor Battlers > Frontview > Portrait Animations > Center of All
 * *** Actor Battlers > Frontview > Portrait Animations > Center of Screen
 * **** Place animations on top or behind for these display types?
 * *** Battle Log > Action Changes > Show Counter? > Wait Frames
 * *** Battle Log > Action Changes > Show Reflect? > Wait Frames
 * *** Battle Log > Action Changes > Show Substitute? > Wait Frames
 * **** If devs allow the results of counters, reflects, and substitutes, there
 *      wasn't enough time before to allow the text to be visible on screen.
 *      You can now adjust how many frames are now visible if text is shown.
 * **** Default values are left at 0 as to not interrupt currently existing
 *      action sequences.
 * 
 * Version 1.84: September 19, 2024
 * * Bug Fixes!
 * ** Fixed a bug where Action Sequence "MOVE: Change Home By Distance" would
 *    also be affected by the actor and enemy position offsets. Fixed by Irina.
 * ** Fixed a bug where Action Sequence "MECH: STB Exploit Effect" caused a
 *    crash. Fix made by Arisu.
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Plugin Command added by Arisu:
 * *** ANIM: Change Battle Portrait (JS)
 * **** Changes the battle portrait of the actor through JavaScript.
 * **** Can be used outside of battle/action sequences.
 * ** New Plugin Parameters added by Olivia:
 * *** Plugin Parameters > In-Battle Status Window
 * **** This new window allows the player to view the status of the current
 *      active party. If the actors have states and buffs, the player can
 *      scroll through them and read about their effects through the help
 *      window.
 * ** New Notetags added by Olivia:
 * *** <Help Description>
 * **** Assigns a help description for the state that's displayed under the
 *      new "Status" actor command.
 * *** <Exclude From Status Listing>
 * **** Excludes the state from being displayed in the status listing.
 * *** <Aspect Name: x>
 * *** <Aspect Icon: x>
 * *** <Aspect Color: x>
 * *** <Aspect Description>
 * **** Used to define enemy aspect that will show up in the In-Battle Status
 *      as well as other supported plugins.
 * *** <Popup Position: Head>
 * *** <Popup Position: Center>
 * *** <Popup Position: Base>
 * **** Changes the popup starting position for this enemy.
 * *** <Popup Offset X: +x>
 * *** <Popup Offset X: -x>
 * *** <Popup Offset Y: +y>
 * *** <Popup Offset Y: -y>
 * **** Changes the popup X/Y position offset for this enemy.
 * ** New Plugin Parameters added by Olivia:
 * *** Plugin Parameters > Party Command Window > Add Status?
 * **** Add the "Status" command to the Command Window? 
 * *** Plugin Parameters > Actor Command Window > Command List
 * **** Updated to have the "Status" command.
 * *** Plugin Parameters > In-Battle Status Window
 * **** Completely new! View the help file for more information.
 * *** Plugin Parameters > Enemy > Aspects
 * **** Used for the In-Battle Status as well as other supported plugins.
 * 
 * Version 1.83: May 16, 2024
 * * Bug Fixes!
 * ** Fixed a bug where sometimes, a battler in Active TPB would not refresh
 *    their motion after a state has been removed. Fix made by Olivia.
 * * Documentation Update!
 * ** Help file updated for new features.
 * ** Fixed a typo with MP Life Steal notetag entry.
 * * Feature Updates!
 * ** Added fail safes for some plugin parameters in case users outright delete
 *    plugin parameter values without introducing something to replace them.
 *    Update made by Olivia.
 * * New Features!
 * ** New Action Sequence added by Olivia:
 * *** GRID: Add Trigger to Node JS
 * **** Adds JS Trigger to target node. Target node cannot have battler.
 * **** Requires VisuMZ_2_BattleGridSystem!
 * ** New notetags added by Olivia:
 * *** <JS Accuracy>
 * *** <JS Accuracy as User>
 * *** <JS Accuracy as Target>
 * **** Allows usage of JavaScript code to modify accuracy rates of actions in
 *      battle through skills, items, and trait objects.
 * *** <JS Critical Rate as User>
 * *** <JS Critical Rate as Target>
 * **** Allows usage of JavaScript code to modify critical rate of actions in
 *      battle through skills, items, and trait objects.
 * **** <JS Critical Rate> version already exists.
 * ** New Plugin Parameters added by Olivia
 * *** Plugin Parameters > Damage Combo Window
 * **** If enabled, this window will display updated information about the
 *      total amount of hits performed and total damage/healing value executed
 *      for HP.
 * *** Plugin Parameters > Actor Battler Settings > Sideview Battlers >
 *     State Overlay > Offset X/Y
 * **** Offsets X/Y position for state overlay on actor.
 * *** Plugin Parameters > Enemy Battler Settings > Name Visibility >
 *     As Target
 * **** Shows enemy name when enemy is a target.
 * *** Plugin Parameters > Enemy Battler Settings > Name Visibility >
 *     Temporary Visibility
 * **** Number of frames enemy's name temporarily visible after taking an
 *      action effect in battle.
 * 
 * Version 1.82: March 14, 2024
 * * Bug Fixes!
 * ** Home movement changes did not acknowledge actor and enemy offset X/Y
 *    positions. This should now be reflected properly. Fix made by Irina.
 * ** Fixed a bug where in active TPB/ATB, revived actors may not resume normal
 *    motions after collapsing. Fix made by Olivia.
 * 
 * Version 1.81: February 15, 2024
 * * Bug Fixes!
 * ** Fixed a bug that would cause active TPB inputting actors to not show
 *    their damage or evasion motions. Fix made by Olivia.
 * ** Fixed a bug that would cause a crash upon motion changes. Fix by Olivia.
 * ** Fixed an incorrect spelling of "Anger" for "ANIM: Balloon Animation" that
 *    prevented it from working properly.
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins.
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Action Sequences added by Olivia:
 * *** ANIM: Show Animation JS
 * **** Plays the a specific animation on unit(s). Uses JavaScript to determine
 *      animation ID.
 * ** New Action Sequences added for future plugin: VisuMZ_2_BattleGridSystem
 * *** GRID: Action Animation at Node
 * *** GRID: Add Passive State(s) to Node
 * *** GRID: Add Trigger to Node
 * *** GRID: Animation ID at Node
 * *** GRID: Animation JS at Node
 * *** GRID: Animation Type at Node
 * *** GRID: Move Target(s) In Direction
 * *** GRID: Pull To Target Node
 * *** GRID: Push From Target Node
 * *** GRID: Remove All Passive States from Node
 * *** GRID: Remove Passive State(s) from Node
 * *** GRID: Remove Trigger from Node
 * *** GRID: Teleport To Node
 * *** GRID: Traverse To Node
 * **** Requires the future plugin VisuMZ_2_BattleGridSystem!
 * **** Read the help section for more information on these.
 * 
 * Version 1.80: January 18, 2024
 * * Bug Fixes!
 * ** Fixed a crash that would occur with <Disperse Damage> when used outside
 *    of battle. Fix made by Irina.
 * ** Fixed a crash that would occur with certain enemy graphics when images
 *    used for them would disappear. Fix made by Olivia.
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Action Sequences added by Olivia:
 * *** ANIM: Guard Animation
 * *** ANIM: Item Animation
 * *** ANIM: Skill Animation
 * **** Plays the animation associated with the user's guard action (if any),
 *      or a specific item/skill.
 * *** MECH: Emulate Attack Effect
 * *** MECH: Emulate Guard Effect
 * *** MECH: Emulate Item Effect
 * *** MECH: Emulate Skill Effect
 * **** Emulate an "Action Effect" but using a the user's attack skill, guard
 *      skill, specific item, or specific skill instead of the current action.
 * **** Essentially lets you perform the mechanics of another action without
 *      having to use another action or needing to pay that action's costs.
 * *** MECH: Emulate Skill Cost
 * **** Pick a skill for target(s) to emulate paying the cost of.
 * **** Includes cooldowns and limited uses.
 * *** MECH: State Turns Change By
 * *** MECH: State Turns Change To
 * **** Changes target(s) state turns by an amount/to a certain value.
 * **** Requires VisuMZ_1_SkillsStatesCore!
 * *** Projectile action sequences have new Extra Features!
 * **** See v1.08 changes for VisuMZ_3_ActSeqProjectiles.
 * 
 * Version 1.79: December 14, 2023
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Action Sequences added by Arisu:
 * *** ANIM: Balloon Animation
 * **** Plays a balloon animation on target(s).
 * *** ANIM: Balloon Icon (Single)
 * *** ANIM: Balloon Icon (Range)
 * *** ANIM: Balloon Icon (Specific)
 * **** Plays a balloon animation using an icon on target(s).
 * **** Requires VisuMZ_4_IconBalloons!
 * 
 * Version 1.78: October 12, 2023
 * * Bug Fixes!
 * ** Fixed a bug that is caused by using the actor escape command not escaping
 *    properly in battle and causing a freeze. Fix made by Olivia.
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins.
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Plugin Parameter added by Olivia:
 * *** Parameters > Mechanics > Turn End Buffs Expire?
 * **** Normally, buffs expire after all actions end.
 * **** But here, you can have buffs expire on turn end.
 * * Optimization Update!
 * ** Plugin should run more optimized.
 * 
 * Version 1.77: August 17, 2023
 * * Bug Fixes!
 * ** Fixed a bug where for TPB, actions aimed at dead targets would not
 *    redirect to suitable targets. Fix made by Olivia.
 * ** Fixed a bug where dual wielding would not use a weapon if it was equipped
 *    in the second weapon slot if the first weapon slot was empty. Fix made
 *    by Olivia.
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins.
 * ** Added compatibility for VisuStella MZ Battle Voices Action Sequences.
 * * Documentation Update!
 * ** Help file updated for new features.
 * 
 * Version 1.76: July 13, 2023
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Action Sequences added by Olivia and sponsored by NSG:
 * *** MOVE: Change Home To JS Coordinates
 * **** Change home position(s) to specified JS Coordinates. Sideview-only!
 *      Uses JS!
 * *** MOVE: Face JS Coordinates
 * **** Causes the unit(s) to face specified JS Coordinates. Sideview-only!
 *      Uses JS!
 * *** MOVE: Move To JS Coordinates
 * **** Moves unit(s) to specified JS Coordinates. Sideview-only! Uses JS!
 * 
 * Version 1.75: March 16, 2023
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New notetags added by Olivia and sponsored by Anon:
 * *** <HP Life Steal: x%>
 * *** <MP Life Steal: x%>
 * *** <HP Life Steal hitType: +/-x%>
 * *** <MP Life Steal hitType: +/-x%>
 * *** <Cancel Life Steal>
 * *** <Guard Life Steal>
 * *** <Disarm Life Steal>
 * *** <Negative Life Steal>
 * **** Life Steal properties involving HP/MP are now added. They will restore
 *      a portion of the dealt HP/MP damage to the target.
 * **** This is a different mechanic from Drain HP/Drain MP and cannot be used
 *      together to prevent clashing.
 * **** Read the help file for more information.
 * 
 * Version 1.74: February 16, 2023
 * * Bug Fixes!
 * ** Fixed a bug that would cause a crash if your basic attack skill somehow
 *    manages to target neither an enemy nor an actor. Fix made by Olivia.
 * * Documentation Update!
 * ** Help file updated for new features.
 * * Feature Update!
 * ** Auto-action sequence for jumping forward and attacking is now reinstated
 *    so that it's only disabled when the target and user are on the same side.
 *    If there is no target, a jump still occurs for visual player feedback.
 *    Update made by Olivia.
 * * New Features!
 * ** New notetag effect added by Olivia and sponsored by AndyL:
 * *** <Cannot Target User>
 * **** This will cause the action to be unable to select the user as target.
 * **** This is not a targeting scope. Instead, it is used in addition to any
 *      other targeting scopes out there.
 * 
 * Version 1.73: January 20, 2023
 * * Bug Fixes!
 * ** Active TPB custom action sequences will no longer play differently due to
 *    queued inputting actors causing motion refreshes. Fix made by Arisu.
 * ** Corrected and updated Anti-Tint UI animation offsets for MV animations.
 *    Fix made by Irina.
 * ** Fixed a problem with Sideview Battlers not working properly. Fix made
 *    by Irina.
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins.
 * * Documentation Update!
 * ** Help file updated for new features.
 * ** Help file updated for to add the following text to the <Target: x>
 *    notetag entries in order to avoid confusion.
 * *** This will overwrite the existing database scope and ignore the
 *     database's existing scope in favor of this.
 * * Feature Update!
 * ** <Extend: x> Troop Name Tag is now also usable as a Troop Comment Tag.
 * ** Action Sequence targeting has been updated with two new types "special"
 *    and "special x", to be used for future plugins.
 * * New Features!
 * ** New Notetags added by Irina and sponsored by AndyL:
 * *** <Target: Ally or Enemy>
 * *** <Target: Enemy or Ally>
 * **** Allows the player to target allies or enemies with the skill/item.
 * **** See help file for more information.
 * *** <Single or Multiple Select>
 * **** This will allow the skill/item to be able to select either single
 *      targets or multiple targets at once.
 * **** See help file for more information.
 * *** <Disperse Damage>
 * **** This will cause any damage dealt by this skill to be split equally
 *      amongst all targets of the skill including repeats.
 * ** New Plugin Parameters added by Irina and sponsored by AndyL:
 * *** Plugin Parameters > Multi-Target Windows
 * **** Settings that alter the Multi-Target Windows in battle.
 * 
 * Version 1.72: December 15, 2022
 * * Bug Fixes!
 * ** Fixed a transformation of a sideview enemy to a static enemy and back not
 *    working properly. Fix made by Irina.
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Feature!
 * ** New Plugin Parameter added by Irina!
 * *** Plugin Parameters > HP Gauges > Settings > Animation Duration
 * **** How many frames should gauges animate themselves? Default: 20 frames.
 * ** New Plugin Parameters added by Yanfly!
 * *** Plugin Parameters > Actor Battler Settings > Shake Flinch
 * *** Plugin Parameters > Actor Battler Settings > Shake Flinch > Max Power
 * *** Plugin Parameters > Actor Battler Settings > Shake Flinch > Max Duration
 * **** These new plugin parameters will cause targets that take HP damage to
 *      shake (in addition to a regular flinch) to provide better visual
 *      feedback to the player.
 * **** Shake Flinch will be kept disabled by default and only turned on when
 *      you want it to be.
 * * Optimization Update!
 * ** Plugin should run more optimized.
 * 
 * Version 1.71: November 10, 2022
 * ** Fixed a problem with repeating animations from Visual State Effects
 *    causing softlocks. Fix made by Olivia.
 * 
 * Version 1.70: October 6, 2022
 * * Bug Fixes!
 * ** Fixed a problem with the "Border" style where if a battle portrait
 *    changed midway through the battle, the portrait shown didn't actually
 *    update properly. Fix made by Irina.
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Action Sequence added by Olivia:
 * *** MECH: Active Chain Input Disable
 * **** Disables input for Active Chain Skills at this time.
 * **** Requires VisuMZ_3_ActiveChainSkills!
 * ** New Plugin Parameter added by Olivia and sponsored by Anon:
 * *** Plugin Parameters > Damage Settings > Popups > End Battle Show?
 * **** Show or hide popups upon victory or escape?
 * **** Used to hide battle-state removal popups.
 * 
 * Version 1.69: September 7, 2022
 * * Compatibility Update!
 * ** Better compatibility with VisuMZ Active Chain Skills.
 * ** Compatibility will be seen with VisuMZ_3_ActiveChainSkills version 1.02.
 * * Documentation Update!
 * ** Added notes to the following Action Sequences:
 * *** MOTION: Clear Freeze Frame and MOTION: Freeze Motion Frame
 * **** Only applies to sprite sheets.
 * **** Does NOT work with Dragonbones.
 * **** Use "DB: Dragonbones Time Scale" instead.
 * * Feature Update!
 * ** Reduced MV Animation misalignment when Screen Resolution does not match
 *    the UI Area Resolution. Update by Arisu.
 * ** Command Remember will now remember the locations of single skills. Update
 *    made by Olivia.
 * 
 * Version 1.68: August 4, 2022
 * * Feature Update!
 * ** Damage popups are now automatically cleared upon starting battles. This
 *    is to ensure that, if for some reason, residual damage popup requests
 *    will not be retained. Update made by Olivia.
 * 
 * Version 1.67: July 28, 2022
 * * Feature Updates!
 * ** Rounding window coordinates have been added for for 'XP' and 'Portrait'
 *    styles when window sizes happen to land on non-divisible numbers. Update
 *    made by Irina.
 * ** Enemy name position rounding is now enforced. Update made by Irina.
 * 
 * Version 1.66: July 14, 2022
 * * Bug Fixes!
 * ** Fixed a bug that caused the various Battleback Scaling JS custom plugin
 *    parameters to not work properly. Fix made by Irina.
 * 
 * Version 1.65: July 7, 2022
 * * Documentation Update!
 * ** Help file updated for new features.
 * * Feature Updates!
 * ** Automatic action motions for HP and MP Recovery (Certain Hit type) will
 *    now use the "skill" cast SV animation instead of attack animation to
 *    better match the default RPG Maker MZ cast animation. Update by Olivia.
 * * New Features!
 * ** New troop name tag added by Olivia:
 * *** <Extend: x> and <Extend: x, x, x>
 * **** Adds enemies from another troop to the current troop.
 * **** Enemies from another troop will retain their database positions.
 * **** Extended troop members will be added in the order they're listed.
 * **** Be cautious of how many enemies you add as too many will lag the battle
 *      system. We are not responsible for frame drops due to this.
 * 
 * Version 1.64: June 16, 2022
 * * Bug Fixes!
 * ** "All Skills" battle command should now work with the updated version of
 *    VisuMZ Skills & States Core. Fix madde by Olivia.
 * * Compatibility Update
 * ** Plugins should be more compatible with one another.
 * 
 * Version 1.63: May 26, 2022
 * * Documentation Update!
 * ** Help file updated for new features.
 * * Feature Update!
 * ** HP Gauge sprite now properly synchs with battler location.
 * * New Features!
 * ** New Action Sequence Effects added by Irina and sponsored by MirageV:
 * *** INJECT action sequence series
 * **** See the Action Sequence Impact changelog for details.
 * 
 * Version 1.62: April 22, 2022
 * * Bug Fixes!
 * ** RPG Maker MZ Bug Fix!
 * *** Battle Forced End Action Crash
 * **** Depending on various circumstances, currently active battlers can be
 *      cleared from the battle system at will due to a number of reasons.
 *      However, if it just so happens that the targets are cleared, too, with
 *      actions remaining, then a crash will follow up. This plugin will
 *      prevent that change. Fix made by Olivia.
 * 
 * Version 1.61: April 14, 2022
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Impact Effects added by Irina and collaborating with Manu Gaming!
 * *** Impact: Bizarro Inversion
 * *** Impact: Desaturation
 * *** Impact: Negative Inversion
 * *** Impact: Oversaturation
 * *** Impact: Time Scale
 * *** Impact: Time Stop
 * 
 * Version 1.60: April 7, 2022
 * * Bug Fixes!
 * ** <Bypass Soft Damage Cap> notetag should no longer cause crashes. Fix made
 *    by Olivia.
 * * Feature Update!
 * ** Removed one of the forced log window clear events that have made log
 *    window messages impossible to utilize for certain settings. Update made
 *    by Olivia.
 * 
 * Version 1.59: March 31, 2022
 * * Bug Fixes!
 * ** Escape failure will no longer trigger Post-Battle Common Events. Fix
 *    made by Arisu.
 * 
 * Version 1.58: March 24, 2022
 * * Documentation Update:
 * ** Added extra clarity to <Sideview Size: width, height> notetag:
 * *** This does NOT change the image size. This only changes the HITBOX size.
 * * Feature Update!
 * ** Added failsafes to prevent battlers from moving to non-finite coordinates
 *    if calculations are made for non-existent targets. Updated by Olivia.
 * ** Regeneration timing for TPB-based battle systems will now occur based on
 *    individual turn counts instead of global turn counts for initial turn 0
 *    checks. Updated by Olivia.
 * 
 * Version 1.57: February 17, 2022
 * * Feature Update!
 * ** Adjusted the offset properties for the anti-tint UI container to properly
 *    match the UI offsets if the anti-tint were to be off. Update by Irina.
 * 
 * Version 1.56: February 10, 2022
 * * Documentation Update!
 * ** Help file updated for new features.
 * * Feature Update!
 * ** Once Parallels for battle now operate outside of the battle process.
 *    Update made by Olivia.
 * * New Features!
 * ** New Troop Page comment tag added by Olivia and sponsored by Puddor:
 * *** <Once Parallel When Start Battle>
 * **** Causes the troop page to immediately run the moment the battle scene
 *      begins to fade in (not after it fades in). This is faster than a turn 0
 *      condition troop page. Troop page conditions are ignored.
 * **** This can be used for things like the Action Sequence Camera plugin, the
 *      Visual Battle Environment plugin, and/or initial battle poses and such
 *      in order to provide a near seamless battle transition experience.
 * **** This does NOT trigger when coming out of the options menu or party
 *      menu screens.
 * **** This WILL trigger when going from battle to battle nonstop via plugins
 *      like VisuStella MZ's Chain Battles.
 * **** When actors are moving towards their home positions, it will take
 *      around 30 frames by default. Use this information however you like.
 * * Optimization Update!
 * ** Plugin should run more optimized.
 * 
 * Version 1.55: January 27 2022
 * * Compatibility Update!
 * ** RPG Maker MV animations with front view should now play in the correct
 *    area against actor faces. Update made by Olivia.
 * * Documentation Update!
 * ** Help file updated for new features.
 * * Feature Update!
 * ** Animations now play on top of all actor faces/portraits regardless of the
 *    battle layout style. Update made by Olivia.
 * * New Features!
 * ** New notetag added by Arisu.
 * *** <Bypass Auto Action Sequence>
 * **** This notetag is used for the game devs that have the Action Sequence
 *      Plugin Parameter "Auto Notetag" on for applying the notetag
 *      <Custom Action Sequence> to every skill and item with common events.
 * **** This will allow items and skills to be able to launch their common
 *      events from the menu scene regardless of the inherent restriction to
 *      prevent action sequence based skills/items with common events from
 *      launching.
 * **** Ignore this if you have "Auto Notetag" disabled or set to false. By
 *      default, this setting is set to false. Please be aware of the changes
 *      you've made to your game before using it.
 * 
 * Version 1.54: January 13, 2022
 * * Bug Fixes!
 * ** RPG Maker MZ Bug Fix!
 * *** Overly-Protective Substitute
 * *** When an ally with critical health is being targeted by a friendly non-
 *     Certain Hit skill (such as a heal or buff) and another ally has the
 *     substitute state, the other ally would "protect" the originally targeted
 *     ally and take the heal or buff.
 * *** The new changed behavior is that now, substitute will not trigger for
 *     any actions whose scope targets allies.
 * *** Fix made by Olivia.
 * 
 * Version 1.53: December 30, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * ** Help file updated for updated features.
 * * New Features!
 * ** New Plugin Parameter added by Olivia:
 * *** Plugin Parameters > Battle Layout > UI Elements > Anti-Tint UI?
 * **** Prevent UI Elements from being tinted?
 * **** This prevents UI Elements such as HP Gauges, Enemy Names, Battle
 *      Cursor, and Weakness Display from being affected by screen tint.
 * * Updated Feature!
 * ** Updated Plugin Command "PROJECTILE: Animation" by Arisu!
 * *** New Parameter: Wait For Animation?
 * **** Wait for animation to finish before going to the next command?
 * 
 * Version 1.52: December 16, 2021
 * * Compatibility Update!
 * ** RPG Maker MZ 1.4.0 compatibility update!
 * *** MV Animations played on screen level will now show up properly in the
 *     center of the screen.
 * 
 * Version 1.51: December 9, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Action Sequence Plugin Commands added by Arisu:
 * *** MOVE: Change Home By Distance
 * *** MOVE: Change Home To Point
 * *** MOVE: Change Home To Target(s)
 * **** These Plugin Commands allow you to adjust the home position of
 *      battlers in sideview battle.
 * **** This is sideview only!
 * **** This does NOT work with front view!
 * **** For those wondering, going to the options screen, party screen, etc.
 *      won't reset the home positions like regular movement changes do.
 * **** Merry Christmas, Harold-gang!
 * 
 * Version 1.50: November 4, 2021
 * * Bug Fixes!
 * ** <Seal Attack> and <Seal Guard> should no longer be bypassed by
 *    auto-battle status. Fix made by Yanfly.
 * 
 * Version 1.49: October 28, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * * Feature Update!
 * ** Action Sequence: MOTION: Freeze Motion Frame will now only show weapons
 *    when using a motion that is named either "attack", "thrust", "swing", or
 *    "missile". Update made by Irina.
 * ** Fail safe added to prevent Scene_Battle going into unsupported scenes
 *    like Scene_Equip and Scene_Skill. Update made by Olivia.
 * * New Feature!
 * ** New Action Sequence Plugin Command added by Arisu and sponsored by Anon:
 * *** MECH: Once Parallel
 * **** Plays a Common Event parallel to the battle event once without
 *      repeating itself when done.
 * **** When exiting battle scene, all Once Parallels are cleared.
 * **** Once Parallels are not retained upon reentering the scene.
 * **** Once Parallels are not stored in memory and cannot be saved.
 * 
 * Version 1.48: October 21, 2021
 * * Feature Update!
 * ** Animations are now played on top of battlers in the Front View XP Battle
 *    Layout appearance. Update made by Irina.
 * ** Battle Log, if decided to be shown, now updates faster. Update by Irina.
 * ** Default Critical Damage Bonus increase is now updated to account for
 *    HP Healing and MP Recovery. To update this, create a new project, with
 *    the newest version of Battle Core installed. Copy over the Plugin
 *    Parameters for the Damage Settings > Critical Hits > JS: Damage Formula
 *    to your own project's version. Update made by Irina.
 * 
 * Version 1.47: October 14, 2021
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins.
 * * Feature Update!
 * ** Back attachment sprites are now automatically updated with sprite
 *    battlers to be shifted towards the very back.
 * 
 * Version 1.46: September 23, 2021
 * * Bug Fixes!
 * ** Fixed problem with skills and items without action sequences preventing
 *    actions from occurring. Fix made by Yanfly.
 * 
 * Version 1.45: September 17, 2021
 * * Bug Fixes!
 * ** <JS Pre-End Action> and <JS Post-End Action> effects now have multiple
 *    checks to make sure that they don't launch multiple times when a battler
 *    without actions has a turn after one that does. Fix made by Olivia.
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Action Sequence notetags added by Yanfly and Arisu:
 * *** <Common Event Key: name>
 * *** <Common Event Keys: name, name, name>
 * *** <Common Event Keys>
 *      key
 *      key
 *      key
 *     </Common Event Keys>
 * **** Will generate Common Events for the skill/item with a corresponding
 *      key.
 * **** More information will be explained inside of the help file.
 * **** This feature is made for make the process of sharing Action Sequences
 *      to become easier without needing to line up Common Event ID's.
 * 
 * Version 1.44: August 20, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Action Sequence added by Irina and sponsored by Anon.
 * *** "ANIM: Play at Coordinate"
 * **** Plays an animation on the screen at a specific x, y coordinate even if
 *      there is no sprite attached.
 * **** Requires VisuMZ_0_CoreEngine!
 * 
 * Version 1.43: July 23, 2021
 * * Feature Update!
 * ** Immortality now works different with instant death mechanics. Skill
 *    effects that apply instant death or attack states that apply instant
 *    death will now trigger a flag instead of cancelling immortality. The
 *    flag will remain until immortality is manually cancelled via Action
 *    Sequence and then proc the death effect. This way, animations can remain
 *    to the end with instant death mechanics in mind. This does not affect
 *    script calls.
 * 
 * Version 1.42: July 16, 2021
 * * Bug Fixes!
 * ** Added another fail safe for empty common events used for pre-battle
 *    common events. Fix made by Olivia.
 * 
 * Version 1.41: July 2, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * ** Added entries to <Battle Command> notetags and Plugin Parameters for
 *    "Party", "Combat Log", and "Weapon Swap" which weren't updated before.
 * * Optimization Update!
 * ** Plugin should run more optimized.
 * * New Features!
 * ** New Action Sequence added by Arisu:
 * *** MECH: Enemy Escape
 * **** Causes the enemy unit(s) to escape.
 * 
 * Version 1.40: June 25, 2021
 * * Bug Fixes!
 * ** Transformations from static enemies to and from animated SV enemies
 *    should no longer show both sprites. Fix made by Irina.
 * * Compatibility Update
 * ** Compatibility update with RPG Maker MZ 1.3.0+.
 * 
 * Version 1.39: June 18, 2021
 * * Bug Fixes!
 * ** MOVE: Home Reset should no longer trigger an end action function and
 *    cause plugins such as "Boost Action" to malfunction. Fix made by Olivia.
 * * Compatibility Update
 * ** Added compatibility functionality for future plugins.
 * * Documentation Update!
 * ** Help file updated for updated features.
 * * Feature Update!
 * ** <Battle Layout: x> Troop Name tags can now work with comment tags. Update
 *    made by Irina.
 * ** Random encounter lists are now better shuffled for more variety with how
 *    the RNG seed works. Update made by Arisu.
 * 
 * Version 1.38: June 11, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * * Feature Updates!
 * ** Location calculations will now be based off the a battler's base position
 *    in order for animations, popups, and other aspects to line up properly
 *    when scaled. Update made by Irina.
 * ** Plugin Parameters for Enemy Battler Settings > Name have been rearranged
 *    for better organization. Update by Olivia.
 * * New Features!
 * ** New Notetags added by Olivia and sponsored by NSG:
 * *** <Sideview Shadow Scale X: x%>
 * *** <Sideview Shadow Scale X: x.y>
 * *** <Sideview Shadow Scale Y: x%>
 * *** <Sideview Shadow Scale Y: x.y>
 * **** These new notetags allow you to adjust the X and Y scale of the SV
 *      shadow sprite separately.
 * ** New Plugin Parameters added by Olivia and sponsored by NSG:
 * *** Enemy Battler Settings > Name > Name Visibility > Always Hidden
 * *** Enemy Battler Settings > Name > Name Visibility > By Selection?
 * **** Choose to have the names always hidden or by selection.
 * **** These are adjusted on a priority list.
 * 
 * Version 1.37: May 21, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New notetags added by Olivia.
 * *** <Command Require Learn>
 * *** <Command Require Access>
 * **** These two commands determine the visibility of a battle command by
 *      whether or not the skill has been learned or accessible.
 * * Feature Update!
 * ** For those using TPB, each battler's regeneration phase will no longer
 *    tick multiple times in a single frame to prevent irregularities. Update
 *    made by Olivia.
 * 
 * Version 1.36: May 14, 2021
 * * Bug Fixes!
 * ** Reversed an HP/MP regeneration bug that was incorrectly reported for TPB.
 *    Fix made by Olivia.
 * * Documentation Update
 * ** Added "TPB/ATB Active Battle Actor Shifting" to Major Changes section:
 * *** This change has been active since the start of this plugin. It was not
 *     documented until now.
 * *** Pressing cancel on the Actor Command Window no longer switches between
 *     actors with a full TPB/ATB gauge before reaching the Party Command
 *     Window. This is to accomplish a couple of things: 1) reduce the number
 *     of button presses to reach the Party Command Window and 2) to prevent
 *     motion resets and disrupting action sequences. If this feature is vital
 *     to your battle system, we recommend that you do not use this plugin or
 *     any of the Battle Core-required plugins.
 * ** Feature Updates
 * *** Distortion sprite Y calculations will now be rounded upward for better
 *     visuals and prevent odd pixelation effects. Update made by Irina.
 * 
 * Version 1.35: May 7, 2021
 * * Bug Fixes!
 * ** Pre-Battle Common Events without a wait command at the end should no
 *    longer lock up by coincidentally pressing the menu key at the same time.
 *    Fix made by Olivia.
 * * Feature Update!
 * ** Added an extra check for TPB-based battle systems to not run turn end
 *    functions when it's not actually the actual turn end timing. Update made
 *    by Olivia.
 * ** "Damage Styles" plugin parameters are now moved to the top of the
 *    Damage Settings category. This should make it easier to acknowledge the
 *    existence of and not have it be an unknown entity. Update made by Irina.
 * 
 * Version 1.34: April 23, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * * Feature Update!
 * ** Uses a better algorithm for determining shadow positioning. Update made
 *    by Olivia.
 * * New Features!
 * ** New additions made for Projectile action sequences.
 * ** "Start Location" and "Goal Location" now have "Target Location" parameter
 *    to determine which part of the target's body to send the projectile from
 *    or towards. Added by Olivia.
 * ** Requires VisuMZ_1_BattleCore version 1.34 to have affect.
 * 
 * Version 1.33: April 9, 2021
 * * Bug Fixes!
 * ** Skill costs should now be displayed on battle commands again. Bug fix
 *    made by Olivia.
 * ** Pre-Battle Common Events should no longer cause stalling when used with
 *    specific event commands. Bug fix made by Olivia.
 * * Compatibility Update!
 * ** Added "Weapon Swap" to the list of battle commands that can be added.
 * * Documentation Update!
 * ** Added "Weapon Swap" and "Combat Log" to the list of <Battle Commands> in
 *    the notetags section.
 * ** Help file updated for new features.
 * * New Features!
 * ** New notetags added by Olivia:
 * *** <Sideview Shadow Scale: x%> and <Sideview Shadow Scale: x.y>
 * **** Used for: Actor, Enemy Notetags
 * **** Adjusts the scaling size of the sideview battler's shadow.
 * 
 * Version 1.32: April 2, 2021
 * * Feature Update!
 * ** Sideview battler sprites when using front view will now factor in the
 *    window padding and appear properly centered to their focus point. Update
 *    made by Olivia.
 * 
 * Version 1.31: March 26, 2021
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins.
 * * Documentation Update!
 * ** Added "VisuStella MZ Compatibility" section for detailed compatibility
 *    explanations with the VisuMZ_3_BoostAction plugin.
 * 
 * Version 1.30: March 19, 2021
 * * Documentation Update!
 * ** Help file updated for updated features.
 * * Feature Update!
 * ** <JS Targets> is now updated to include the default set of targets
 *    selected by the skill/item's original scope. Update made by Yanfly.
 * *** If you wish to clear it out, simply do 'targets = []' first.
 * 
 * Version 1.29: March 12, 2021
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins.
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Plugin Parameter added by Olivia:
 * *** Plugin Parameters > Enemy Battler Settings > Name > Legacy Option
 * **** Use the legacy version (window) or new version (sprite).
 * **** WARNING: Legacy version is no longer supported for bugs.
 * **** Not all settings available here in the Plugin Parameters will be
 *      available to the legacy version (ie Always Visible and Attach States).
 * 
 * Version 1.28: March 5, 2021
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins.
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Plugin Parameters added by Arisu:
 * *** Plugin Parameters > Actor Command > Show Command Costs
 * **** If you don't want to show skill costs for your commands in the Actor
 *      Command Window, you can now hide them.
 * ** New Plugin Parameters added by Irina:
 * *** Plugin Parameters > Battle Layout Settings > Status Window Elements
 * *** Battle Layout Settings > Status Window Elements > Battler Name
 * *** Battle Layout Settings > Status Window Elements > Gauge 1 (HP)
 * *** Battle Layout Settings > Status Window Elements > Gauge 2 (MP)
 * *** Battle Layout Settings > Status Window Elements > Gauge 3 (TP)
 * *** Battle Layout Settings > Status Window Elements > State Icon
 * *** Battle Layout Settings > Status Window Elements > TPB/ATB Gauge
 * **** These new Plugin Parameters allow you to offset the positions of the
 *      various Battle Status Window elements. Their base positions will be
 *      calculated by the Battle Layout used and then offset from there.
 * *** Battle Layout Settings > Status Window Elements > Window Skin
 * **** These settings allow you to set a specific window skin for the
 *      Battle Status Window or hide it from view completely.
 * *** Battle Layout Settings > Status Window Elements > Selectable Background
 * **** This option allows you to hide the black box that comes with the
 *      majority of selectable elements found in RPG Maker MZ in case it does
 *      not fit with how you want the Battle Status Window to look.
 * *** Battle Layout Settings > Status Window Elements > Back Attachment
 * *** Battle Layout Settings > Status Window Elements > Front Attachment
 * **** These settings allow you to attach images to the back/front of the
 *      Battle Status Window from the img/system/ folder.
 * **** You may offset X and Y positions for them as well.
 * ** New Plugin Parameters added by Olivia:
 * *** Plugin Parameters > Enemy Settings > Name: Always Visible
 * **** Determines if the enemy name will always be visible.
 * *** Plugin Parameters > Enemy Settings > Name: Attach States
 * **** Attach the enemy's state icon to the enemy name?
 * *** Plugin Parameters > Enemy Settings > Attach: Offset X/Y
 * **** Offset the attached state icon's position.
 * * Feature Update!
 * ** Switched drawing enemy names on the screen from window to sprite to
 *    reduce lag and for better screen positioning accuracy especially during
 *    screen zooming. Update by Olivia.
 * 
 * Version 1.27: February 26, 2021
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins.
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Plugin Parameters added by Irina and sponsored by AndyL:
 * *** Plugin Parameters > Mechanics Settings > Switches > Switch: Critical
 * *** Plugin Parameters > Mechanics Settings > Switches > Switch: Miss/Evade
 * **** Turns Switches ON if the action performs a critical hit, misses, or is
 *      evaded at any point.
 * **** Switch reverts to OFF whenever an action starts.
 * **** If multiple targets/hits are struck, as long as one hit respectively
 *      lands a critical hit, fails to land, then the switch will remain ON for
 *      the rest of the action.
 * *** Plugin Parameters > Mechanics Settings > Variables > Variable: Damage
 * *** Plugin Parameters > Mechanics Settings > Variables > Variable: Healing
 * **** Variable records target damage/healing during action.
 * **** Variable reverts to 0 whenever an action starts.
 * **** If multiple targets/hits are struck, the variable will record the total
 *      amount of damage/healing done for the remainder of the action (unless
 *      manually reseting to 0 during an Action Sequence).
 * 
 * Version 1.26: February 19, 2021
 * * Bug Fixes!
 * ** Battles with branching event paths found within a conditional branch or
 *    choice tree will no longer be skipped over. Fix made by Arisu.
 * * Compatibility Update
 * ** Returning to the battle scene from the options scene in a Tpb-base battle
 *    system now links the current actor. Update by Irina.
 * 
 * Version 1.25: February 5, 2021
 * * Compatibility Update
 * ** Added compatibility update with VisuStella MZ Skills and States Core's
 *    Plugin Parameter > State Settings > Action End Update
 * * Feature Update!
 * ** <Common Event: name> notetag no longer requires <Custom Action Sequence>
 *    notetag if the Plugin Parameter: Auto Notetag is enabled.
 * 
 * Version 1.24: January 29, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * * Feature Update!
 * ** MOVE: Move To Point and MOVE: Move To Target(s) Action Sequences'
 *    "Offset Adjustment" normal setting will now factor in Offset X and
 *    Offset Y positions unlike before where it cancels them. Update by Irina.
 * * New Features!
 * ** New notetag added by Arisu:
 * *** <Common Event: name>
 * **** Battle only: calls forth a Common Event of a matching name.
 * **** This is primarily used for users who are reorganizing around their
 *      Common Events and would still like to have their skills/items perform
 *      the correct Action Sequences in case the ID's are different.
 * 
 * Version 1.23: January 22, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * * Feature Update!
 * ** ACSET: All Targets Action Set and ACSET: Each Target Action Set updated
 * *** New parameter added: Dual/Multi Wield?
 * **** Add times struck based on weapon quantity equipped?
 * * New Features!
 * ** Dual Wielding now functions differently. Made by Olivia.
 * *** Previously, RPG Maker MZ had "Dual Wielding" attack using both weapon
 *     animations at once, with the combined ATK of each weapon. It's confusing
 *     to look at and does not portray the nature of "Dual Wielding".
 * *** Dual Wielding, or in the case of users adding in third and fourth
 *     weapons, Multi Wielding is now changed. Each weapon is displayed
 *     individually, each producing its own attack animation, showing each
 *     weapon type, and applying only that weapon's ATK, Traits, and related
 *     effects. It is no longer a combined effect to display everything at once
 *     like RPG Maker MZ default.
 * *** If an actor has multiple weapon slots but some of them are unequipped,
 *     then the action will treat the attack as a single attack. There will be
 *     no barehanded attack to add on top of it. This is to match RPG Maker
 *     MZ's decision to omit a second animation if the same scenario is
 *     applied.
 * ** New Action Sequence Plugin Commands added by Yanfly
 * *** ANIM: Attack Animation 2+
 * **** Plays the animation associated with the user's 2nd weapon.
 *      Plays nothing if there is no 2nd weapon equipped.
 * ** New Action Sequence Plugin Commands added by Olivia
 * *** WEAPON: Clear Weapon Slot
 * *** WEAPON: Next Weapon Slot
 * *** WEAPON: Set Weapon Slot
 * **** These are Action Sequence Plugin Commands for devs who want finer
 *      control over Dual/Multi Wielding weapons.
 * 
 * Version 1.22: January 15, 2021
 * * Compatibility Update
 * ** Compatibility with "All Skills" Actor Command should now work with the
 *    Skills & States Core hide skill notetags.
 * 
 * Version 1.21: January 8, 2021
 * * Bug Fixes!
 * ** "MOVE: Home Reset" Plugin Command Action Sequence should work properly.
 *    Fix made by Yanfly.
 * * Documentation Update!
 * ** Added documentation for new feature(s)!
 * * New Features!
 * ** New Notetag snuck in by Arisu
 * *** <Auto Action Sequence>
 * **** Used for those who have the "Auto Notetag" Plugin Parameter enabled and
 *      just want to use an automatic Action Sequence instead.
 * ** New Plugin Parameter snuck in by Arisu!
 * *** Plugin Parameters > Action Sequences > Quality of Life > Auto Notetag
 * **** Automatically apply the <Custom Action Sequence> notetag effect to any
 *      item or skill that has a Common Event?
 * **** Any item or skill without a Common Event attached to it will use the
 *      Automatic Action Sequences instead.
 * **** The <Auto Action Sequence> notetag will disable this effect for that
 *      particular skill or item.
 * ** Arisu, you're going to be responsible for any bugs these may cause.
 * *** Bring it!!!!
 * **** And handling any bug report emails that are sent because this was
 *      turned on by accident.
 * ***** Please read the documentation, guys!
 * 
 * Version 1.20: January 1, 2021
 * * Bug Fixes!
 * ** For TPB Active or ATB Active, inputting actors that have received damage
 *    will return back to place after flinching. Fix made by Yanfly.
 * * Documentation Update!
 * ** Added documentation for new feature(s)!
 * * New Features!
 * ** New notetags added by Yanfly:
 * *** <Battle Portrait Offset: +x, +y>
 * *** <Battle Portrait Offset X: +x>
 * *** <Battle Portrait Offset Y: +y>
 * **** This is used with the "Portrait" and "Border" Battle Layouts.
 * **** Offsets the X and Y coordinates for the battle portrait.
 * 
 * Version 1.19: December 25, 2020
 * * Bug Fixes!
 * ** Removing a state from a Sideview Enemy during the middle of their a non-
 *    looping motion will no longer reset their motion to neutral.
 *    Fix made by Yanfly.
 * * Compatibility Update!
 * ** Plugins should be more compatible with one another.
 * * Documentation Update!
 * ** Added documentation for updated feature(s)!
 * * Feature Update!
 * ** Action Sequence "PROJECTILE: Icon" now supports code for the "Icon"
 *    parameter. Update made by Yanfly.
 * 
 * Version 1.18: December 18, 2020
 * * Bug Fixes!
 * ** For TPB Active or ATB Active, inputting actors will no longer step back
 *    after an enemy's action is finished. Fix made by Yanfly and Shiro.
 * * Documentation Update!
 * ** Added documentation for new feature(s)!
 * * New Features!
 * ** Action Sequence "BTLOG: Add Text" is updated for the convenience of a new
 *    option to quickly copy the displayed text to the VisuStella MZ Combat Log
 *    if that plugin is installed. Added by Yanfly.
 * 
 * Version 1.17: December 11, 2020
 * * Bug Fixes!
 * ** Common Events in TPB Active that cause forced actions will no longer
 *    cause currently inputting actors that match the forced action battler to
 *    crash the game. Fix made by Yanfly and Shiro.
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins.
 * ** Plugins should be more compatible with one another.
 * * Documentation Update!
 * ** Added documentation for new feature(s)!
 * * Feature Update!
 * ** Action Sequence Impact Action Sequences "Shockwave from Each Target(s)",
 *    "Shockwave from Target(s) Center", and "Zoom Blur at Target(s) Center"
 *    now have "Offset X" and "Offset Y" plugin parameters. Added by Yanfly.
 * ** Action Sequence "MOVE: Move To Target(s)" is now changed so that if the
 *    "Melee Distance" value is set to 0, battlers will no longer stand a half
 *    body distance away. Added by Yanfly.
 * 
 * Version 1.16: December 4, 2020
 * * Bug Fixes!
 * ** Bug fixes made for the RPG Maker MZ base code. If a battler has no
 *    actions, then their action speed will not be Infinity. Fix by Olivia.
 * * Compatibility Update!
 * ** Plugins should be more compatible with one another.
 * * Optimization Update!
 * ** Plugin should run more optimized.
 * 
 * Version 1.15: November 29, 2020
 * * Bug Fixes!
 * ** Completely replacing the whole party at once will no longer cause the
 *    battle system to crash. Fix made by Olivia.
 * ** Pre-Battle Common Events will no longer cancel out any win/lose branches.
 *    Fix made by Arisu.
 * * Feature Update!
 * ** Custom Action Sequences will no longer close the Actor Command Input
 *    window unless absolutely necessary (like for Show Message events) during
 *    Active TPB/ATB. Change made by Arisu.
 * 
 * Version 1.14: November 22, 2020
 * * Feature Update!
 * ** Natural Miss and Evasion motions now have flinch distance.
 *    Added by Yanfly.
 * 
 * Version 1.13: November 15, 2020
 * * Optimization Update!
 * ** Plugin should run more optimized.
 * 
 * Version 1.12: November 8, 2020
 * * Bug Fixes!
 * ** Failsafes added to prevent common events from running if they're empty.
 *    Fix made by Irina.
 * ** Skip Party Command will now work properly with TPB-based battle systems.
 *    Fix made by Yanfly.
 * * Compatibility Update!
 * ** Plugins should be more compatible with one another.
 * * Documentation Update!
 * ** In preparation for upcoming VisuStella MZ plugins.
 * 
 * Version 1.11: November 1, 2020
 * * Compatibility Update!
 * ** Plugins should be more compatible with one another.
 * * Documentation Update!
 * ** Added clarity for the Plugin Parameters for the Common Events settings
 *    found in the mechanics section. The common events are only meant to run
 *    in the map scene and not for the battle scene. Update made by Irina.
 * * Feature Update!
 * ** The Plugin Parameter for Mechanics, Common Events (on Map), Defeat Event
 *    now has updated functionality. If this has a common event attached to it,
 *    then losing to random encounters will no longer send the player to the
 *    Game Over scene, but instead, send the player back to the map scene,
 *    where the Defeat Common Event will run. Update made by Irina.
 * 
 * Version 1.10: October 25, 2020
 * * Documentation Update!
 * ** Added documentation for new feature(s)!
 * * New Features!
 * ** New Action Sequence Plugin Command added by Olivia:
 * *** MECH: Custom Damage Formula
 * **** Changes the current action's damage formula to custom.
 *      This will assume the MANUAL damage style.
 * ** New Notetag added by Irina:
 * ** New Plugin Parameters added by Irina:
 * *** Plugin Parameters > Battleback Scaling Settings
 * **** These settings allow you to adjust how battlebacks scale to the screen
 *      in the game.
 * *** <Battler Sprite Grounded>
 * **** Prevents the enemy from being able to jumping and/or floating due to
 *      Action Sequences but still able to move. Useful for rooted enemies.
 * 
 * Version 1.09: October 18, 2020
 * * Bug Fixes!
 * ** Exiting out of the Options menu scene or Party menu scene will no longer
 *    cause party members to reset their starting position. Fix made by Arisu
 * * Documentation Update!
 * ** Added documentation for new feature(s)!
 * ** There was a documentation error with <JS Pre-Regenerate> and
 *    <JS Post-Regenerate>. Fix made by Yanfly.
 * *** Before, these were written as <JS Pre-Regenerate Turn> and
 *     <JS Post-Regenerate Turn>. The "Turn" part of the notetag has been
 *     removed in the documentation.
 * * Feature Update!
 * ** Damage sprites on actors are now centered relative to the actor's anchor.
 *    Change made by Yanfly.
 * * New Features!
 * ** New Action Sequence Plugin Command added by Yanfly:
 * *** MECH: Variable Popup
 * **** Causes the unit(s) to display a popup using the data stored inside
 *      a variable.
 * 
 * Version 1.08: October 11, 2020
 * * Bug Fixes!
 * ** Dead party members at the start of battle no longer start offscreen.
 *    Fix made by Arisu.
 * ** Removed party members from battle no longer count as moving battlers.
 *    Fix made by Yanfly.
 * ** Using specific motions should now have the weapons showing and not
 *    showing properly. Fix made by Yanfly.
 * 
 * Version 1.07: October 4, 2020
 * * Bug Fixes!
 * ** Adding and removing actors will now refresh the battle status display.
 *    Fix made by Irina.
 * ** Adding new states that would change the affected battler's state motion
 *    will automatically refresh the battler's motion. Fix made by Irina.
 * ** Boss Collapse animation fixed and will sink into the ground.
 *    Fix made by Irina.
 * ** Failsafes added for certain animation types. Fix made by Yanfly.
 * ** Freeze Motion for thrust, swing, and missile animations will now show the
 *    weapons properly. Fix made by Yanfly.
 * ** The Guard command will no longer display the costs of the Attack command.
 *    Fix made by Irina.
 * * Documentation Update!
 * ** Updated help file for newly added plugin parameters.
 * * Feature Updates!
 * ** When using the Change Battleback event command in battle, the game client
 *    will wait until both battlebacks are loaded before changing the both of
 *    them so that the appearance is synched together. Change made by Yanfly.
 * * New Features!
 * ** New plugin parameters added by Irina!
 * *** Plugin Parameters > Actor Battler Settings > Chant Style
 * **** What determines the chant motion? Hit type or skill type?
 * 
 * Version 1.06: September 27, 2020
 * * Bug Fixes!
 * ** Enemy Battler Plugin Parameter "Shadow Visible" should now work again.
 *    Fix made by Irina.
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins. Added by Yanfly.
 * * Documentation Update!
 * ** Updated the help file for all the new plugin parameters.
 * * Feature Update!
 * ** Action Sequence "MECH: HP, MP, TP" will now automatically collapse an
 *    enemy if it has been killed by the effect.
 * ** All battle systems for front view will now have damage popups appear
 *    in front of the status window instead of just the Portrait battle layout.
 *    Update made by Yanfly.
 * * New Features!
 * ** New Action Sequence Plugin Commands from Irina!
 * *** MOTION: Clear Freeze Frame
 * *** MOTION: Freeze Motion Frame
 * **** You can freeze a battler's sprite's motion with a specific frame.
 * ** New notetags for Maps and name tags for Troops added by Yanfly!
 * *** <Battle Layout: type> to change the battle layout style used for
 *     specific maps and/or troops.
 * ** New plugin parameters added by Yanfly!
 * *** Plugin Parameters > Battle Layout Settings > Command Window Width
 * **** This plugin parameter lets you adjust the window width for Party and
 *      Actor Command windows in the Default and List Battle Layout styles.
 * *** Plugin Parameters > Enemy Battler Settings > Name: Offset X
 * *** Plugin Parameters > Enemy Battler Settings > Name: Offset Y
 * **** These plugin parameters allow you to offset the position of the enemy
 *      name positions on the screen by a specific amount.
 * 
 * Version 1.05: September 20, 2020
 * * Bug Fixes!
 * ** Actors now use their casting or charging animations again during TPB/ATB.
 *    Fix made by Yanfly.
 * ** Defeat requirement for enemies will no longer crash the game if turned on
 *    after creating
 * ** Escaping animation no longer has actors stay in place. Fixed by Yanfly.
 * ** Failsafes added for newly added weapon types that have not been adjusted
 *    in the Database > System 2 tab. Fixed by Irina.
 * ** Shadows now appear under the actor sprites. Fix made by Yanfly.
 * ** Victory during TPB will no longer cancel the victory animations of
 *    actors that will have their turn after. Fixed by Yanfly.
 * * Documentation Update!
 * ** All Anchor Plugin Parameter descriptions now state to use values between
 *    0 and 1 to be safe. Update made by Yanfly.
 * * Feature Update!
 * ** During Active TPB / ATB, canceling out of the actor command window will
 *    go directly into the party window without having to sort through all of
 *    the available active actors.
 * ** Going from the Party Command Window's Fight command will immediately
 *    return back to the actor command window that was canceled from.
 * * New Features!
 * ** Action Sequence Plugin Command "MOVE: Spin/Rotate" has been updated.
 * *** A new parameter has been added: "Revert Angle on Finish"
 * *** Added by Yanfly.
 * ** New plugin parameters have been added to Damage Settings.
 * *** Appear Position: Selects where you want popups to appear relative to the
 *     battler. Head, Center, Base. Added by Yanfly.
 * *** Offset X: Sets how much to offset the sprites by vertically.
 *     Added by Yanfly.
 * *** Offset Y: Sets how much to offset the sprites by horizontally.
 *     Added by Yanfly.
 * ** New plugin parameters have been added to Actor Battler Settings.
 * *** Priority: Active - Place the active actor on top of actor and
 *     enemy sprites. Added by Yanfly.
 * *** Priority: Actors - Prioritize actors over enemies when placing 
 *     sprites on top of each other. Added by Yanfly.
 * 
 * Version 1.04: September 13, 2020
 * * Bug Fixes!
 * ** Active Battler Sprites now remain on top and won't be hidden behind
 *    other sprites for better visual clarity. Fix made by Arisu.
 * ** Collapsing battlers will now show the dead motion properly. Fix made by
 *    Olivia.
 * ** Dead battlers can no longer be given immortality. Fix made by Olivia.
 * ** Going into the Options menu with no battleback set will no longer set a
 *    battle snapshot.
 * ** HP Gauges for Sideview Enemies are no longer flipped! Fix made by Yanfly.
 * ** Moving a dead battler would no longer reset their animation. Fix made by
 *    Olivia.
 * ** Pre-Battle Common Events now work with events instead of just random
 *    encounters. Fix made by Yanfly.
 * ** Sideview Enemy shadows no longer twitch. Fix made by Irina.
 * * Documentation Updates!
 * ** Added further explanations for Anchor X and Anchor Y plugin parameters.
 *    This is because there's a lot of confusion for users who aren't familiar
 *    with how sprites work. Added by Irina.
 * ** <Magic Reduction: x> notetag updated to say magical damage instead of
 *    physical damage. Fix made by Yanfly.
 * * New Features!
 * ** Additional Action Sequence Plugin Commands have been added in preparation
 *    of upcoming plugins! Additions made by Irina.
 * *** Action Sequences - Angle (for VisuMZ_3_ActSeqCamera)
 * *** Action Sequences - Camera (for VisuMZ_3_ActSeqCamera)
 * *** Action Sequences - Skew (for VisuMZ_3_ActSeqCamera)
 * *** Action Sequences - Zoom (for VisuMZ_3_ActSeqCamera)
 * ** Additional Action Sequence Plugin Commands have been made available now
 *    and added to Battle Core! Additions made by Irina.
 * *** MOVE: Scale/Grow/Shrink
 * *** MOVE: Skew/Distort
 * *** MOVE: Spin/Rotate
 * *** MOVE: Wait For Scale
 * *** MOVE: Wait For Skew
 * *** MOVE: Wait For Spin
 * ** Plugin Parameters Additions. Additions made by Irina.
 * *** Plugin Params > Actor Battler Settings > Offset X
 * *** Plugin Params > Actor Battler Settings > Offset Y
 * *** Plugin Params > Actor Battler Settings > Smooth Image
 * *** Plugin Params > Enemy Battler Settings > Offset X
 * *** Plugin Params > Enemy Battler Settings > Offset Y
 * *** Plugin Params > Enemy Battler Settings > Smooth Image
 * 
 * Version 1.03: September 6, 2020
 * * Bug Fixes!
 * ** Animated Battlers will refresh their motions from the death motion once
 *    they're revived instead of waiting for their next input phase. Fix made
 *    by Yanfly.
 * ** Battle Log speed sometimes went by too fast for certain enabled messages.
 *    Wait timers are now added to them, like state results, buff results, and
 *    debuff results. Fix made by Yanfly.
 * ** Boss Collapse animation now works properly. Fix made by Yanfly.
 * ** Freeze fix for TPB (Wait) if multiple actors get a turn at the same time.
 *    Fix made by Olivia.
 * ** Pressing cancel on a target window after selecting a single skill no
 *    longer causes the status window to twitch.
 * ** Sideview Enemies had a split frame of being visible if they were to start
 *    off hidden in battle. Fix made by Shaz.
 * * Compatibility Update:
 * ** Battle Core's Sprite_Damage.setup() function is now separated fro the
 *    default to allow for better compatibility. Made by Yanfly.
 * * Documentation Update:
 * ** Inserted more information for "Damage Popups" under "Major Changes"
 * * New Features!
 * ** <Magic Penetration: x>, <Magic Penetration: x%> notetags added.
 * ** <Magic Reduction: x>, <Magic Reduction: x%> notetags added.
 * ** <Battle UI Offset: +x, +y>, <Battle UI Offset X: +x>, and
 *    <Battle UI Offset Y: +y> notetags added for adjusting the positions of
 *    HP Gauges and State Icons.
 * *** Notetags added by Yanfly.
 * 
 * Version 1.02: August 30, 2020
 * * Bug Fixes!
 * ** Failsafes added for parsing battle targets. Fix made by Yanfly.
 * ** Immortality is no longer ignored by skills/items with the Normal Attack
 *    state effect. Fix made by Yanfly.
 * ** Miss and Evasion sound effects work again! Fix made by Yanfly.
 * ** Selecting "Escape" from the Actor Command Window will now have the
 *    Inputting Battler show its escape motion. Fix made by Yanfly.
 * ** Wait for Movement now applies to SV Enemies. Fix made by Yanfly.
 * * New Features!
 * ** Plugin Command "ACSET: Finish Action" now has an option to turn off the
 *    Immortality of targets. Feature added by Yanfly.
 * * Optimization Update
 * ** Uses less resources when making checks for Pre-Battle Battle Start events
 * 
 * Version 1.01: August 23, 2020
 * * Bug Fixes!
 * ** Plugin Parameters > Damage Settings > Damage Formats are now fixed.
 *    Fix made by Olivia.
 * ** TPB Battle System with Disable Party Command fixed. Fix made by Olivia.
 * ** States now show in list format if faces are disabled. Fix made by Yanfly.
 * ** The default damage styles were missing the 'v' variable to allow for
 *    variable data input. These are back now. Fix made by Yanfly.
 * *** Users updating from version 1.00 will need to fix this problem by either
 *     removing the plugin from the Plugin Manager list and reinstalling it, or
 *     going to Plugin Parameters > Damage Settings > Style List > the style
 *     you want, and adding "const v = $gameVariables._data;" to JS: Formula
 * * New Notetags Added:
 * ** <Command Show Switch: x> added by Olivia
 * ** <Command Show All Switches: x,x,x> added by Olivia
 * ** <Command Show Any Switches: x,x,x> added by Olivia
 * ** <Command Hide Switch: x> added by Olivia
 * ** <Command Hide All Switches: x,x,x> added by Olivia
 * ** <Command Hide Any Switches: x,x,x> added by Olivia
 * ** <JS Command Visible> added by Olivia
 *
 * Version 1.00: August 20, 2020
 * * Finished Plugin!
 *
 * ============================================================================
 * End of Helpfile
 * ============================================================================
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceStart
 * @text -
 * @desc The following are Action Sequences commands/sets.
 * These Plugin Commands only work in battle.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakSet
 * @text Action Sequence - Action Sets
 * @desc Action Sequence Action Sets are groups of commonly used
 * Action Sequence Commands put together for more efficient usage.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Set_SetupAction
 * @text ACSET: Setup Action Set
 * @desc The generic start to most actions.
 * 
 * @arg DisplayAction:eval
 * @text Display Action
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg ApplyImmortal:eval
 * @text Immortal: On
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg ActionStart:eval
 * @text Battle Step
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg CastAnimation:eval
 * @text Cast Animation
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Set_WholeActionSet
 * @text ACSET: All Targets Action Set
 * @desc Affects all targets simultaneously performing the following.
 * 
 * @arg DualWield:eval
 * @text Dual/Multi Wield?
 * @type boolean
 * @on Apply
 * @off Don't
 * @desc Add times struck based on weapon quantity equipped?
 * @default false
 * 
 * @arg PerformAction:eval
 * @text Perform Action
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitCount:eval
 * @text Wait Count
 * @desc How many frames should the action sequence wait?
 * You may use JavaScript code.
 * @default Sprite_Battler._motionSpeed
 * 
 * @arg ActionAnimation:eval
 * @text Action Animation
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg ActionEffect:eval
 * @text Action Effect
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg ApplyImmortal:eval
 * @text Immortal: Off
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Set_TargetActionSet
 * @text ACSET: Each Target Action Set
 * @desc Goes through each target one by one to perform the following.
 * 
 * @arg DualWield:eval
 * @text Dual/Multi Wield?
 * @type boolean
 * @on Apply
 * @off Don't
 * @desc Add times struck based on weapon quantity equipped?
 * @default false
 * 
 * @arg PerformAction:eval
 * @text Perform Action
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitCount1:eval
 * @text Wait Count
 * @desc How many frames should the action sequence wait?
 * You may use JavaScript code.
 * @default Sprite_Battler._motionSpeed
 * 
 * @arg ActionAnimation:eval
 * @text Action Animation
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitCount2:eval
 * @text Wait Count
 * @desc How many frames should the action sequence wait?
 * You may use JavaScript code.
 * @default Sprite_Battler._motionSpeed * 2
 * 
 * @arg ActionEffect:eval
 * @text Action Effect
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg ApplyImmortal:eval
 * @text Immortal: Off
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Set_FinishAction
 * @text ACSET: Finish Action
 * @desc The generic ending to most actions.
 * 
 * @arg ApplyImmortal:eval
 * @text Immortal: Off
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitForNewLine:eval
 * @text Wait For New Line
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitForEffect:eval
 * @text Wait For Effects
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg ClearBattleLog:eval
 * @text Clear Battle Log
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg ActionEnd:eval
 * @text Home Reset
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceAngle
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakAngle
 * @text Action Sequences - Angle
 * @desc Allows you to have control over the camera angle.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_ChangeAngle
 * @text ANGLE: Change Angle
 * @desc Changes the camera angle.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg Angle:eval
 * @text Angle
 * @desc Change the camera angle to this many degrees.
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to change camera angle.
 * @default 60
 *
 * @arg EasingType:str
 * @text Angle Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForAngle:eval
 * @text Wait For Angle?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for angle changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Angle_Reset
 * @text ANGLE: Reset Angle
 * @desc Reset any angle settings.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to reset camera angle.
 * @default 60
 *
 * @arg EasingType:str
 * @text Angle Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForAngle:eval
 * @text Wait For Angle?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for angle changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Angle_WaitForAngle
 * @text ANGLE: Wait For Angle
 * @desc Waits for angle changes to complete before performing next command.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceAnimation
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakAnimation
 * @text Action Sequences - Animations
 * @desc These Action Sequences are related to the 'Animations' that
 * can be found in the Animations tab of the Database.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_ActionAnimation
 * @text ANIM: Action Animation
 * @desc Plays the animation associated with the action.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play the animation on.
 * @default ["all targets"]
 * 
 * @arg Mirror:eval
 * @text Mirror Animation
 * @type boolean
 * @on Mirror
 * @off Normal
 * @desc Mirror the animation?
 * @default false
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for animation to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_AttackAnimation
 * @text ANIM: Attack Animation
 * @desc Plays the animation associated with the user's 1st weapon.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play the animation on.
 * @default ["all targets"]
 * 
 * @arg Mirror:eval
 * @text Mirror Animation
 * @type boolean
 * @on Mirror
 * @off Normal
 * @desc Mirror the animation?
 * @default false
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for animation to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_AttackAnimation2
 * @text ANIM: Attack Animation 2+
 * @desc Plays the animation associated with the user's other weapons.
 * Plays nothing if there is no other weapon equipped.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play the animation on.
 * @default ["all targets"]
 * 
 * @arg Slot:eval
 * @text Slot
 * @desc Which weapon slot to get this data from?
 * Main-hand weapon is weapon slot 1.
 * @default 2
 * 
 * @arg Mirror:eval
 * @text Mirror Animation
 * @type boolean
 * @on Mirror
 * @off Normal
 * @desc Mirror the animation?
 * @default true
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for animation to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_BalloonAnimation
 * @text ANIM: Balloon Animation
 * @desc Plays a balloon animation on target(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play the animation on.
 * @default ["user"]
 *
 * @arg Balloon:str
 * @text Balloon Type
 * @type select
 * @option Exclamation
 * @option Question
 * @option Music Note
 * @option Heart
 * @option Anger
 * @option Sweat
 * @option Frustration
 * @option Silence
 * @option Light Bulb
 * @option Zzz
 * @option User-defined 1
 * @option User-defined 2
 * @option User-defined 3
 * @option User-defined 4
 * @option User-defined 5
 * @desc What kind of balloon should be played on target(s)?
 * @default Exclamation
 *
 * @arg WaitComplete:eval
 * @text Wait for Completion
 * @type boolean
 * @on Wait
 * @off Don't Wait
 * @desc Wait for balloon animation completion before continuing?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_BalloonIcon
 * @text ANIM: Balloon Icon (Single)
 * @desc Plays a balloon animation using an icon on target(s).
 * Requires VisuMZ_4_IconBalloons!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play the animation on.
 * @default ["user"]
 *
 * @arg IconIndex:num
 * @text Icon Index
 * @desc Insert the ID of the icon to show.
 * Tip: Right click > Insert Icon Index
 * @default 0
 *
 * @arg WaitComplete:eval
 * @text Wait for Completion
 * @type boolean
 * @on Wait
 * @off Don't Wait
 * @desc Wait for balloon animation completion before continuing?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_BalloonIconRange
 * @text ANIM: Balloon Icon (Range)
 * @desc Plays a balloon animation an icon range on target(s).
 * Requires VisuMZ_4_IconBalloons!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play the animation on.
 * @default ["user"]
 *
 * @arg startIcon:num
 * @text Starting Icon Index
 * @desc Insert the ID of the icon to show.
 * Tip: Right click > Insert Icon Index
 * @default 0
 *
 * @arg endIcon:num
 * @text Ending Icon Index
 * @desc Insert the ID of the icon to show.
 * Tip: Right click > Insert Icon Index
 * @default 0
 *
 * @arg WaitComplete:eval
 * @text Wait for Completion
 * @type boolean
 * @on Wait
 * @off Don't Wait
 * @desc Wait for balloon animation completion before continuing?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_BalloonIconSpecific
 * @text ANIM: Balloon Icon (Specific)
 * @desc Plays a balloon animation with specific icons on target(s).
 * Requires VisuMZ_4_IconBalloons!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play the animation on.
 * @default ["user"]
 *
 * @arg icons:arraynum
 * @text Icons
 * @type string[]
 * @desc Insert the ID(s) of the icon to show.
 * Tip: Right click > Insert Icon Index
 * @default []
 *
 * @arg WaitComplete:eval
 * @text Wait for Completion
 * @type boolean
 * @on Wait
 * @off Don't Wait
 * @desc Wait for balloon animation completion before continuing?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_CastAnimation
 * @text ANIM: Cast Animation
 * @desc Plays the cast animation associated with the action.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play the animation on.
 * @default ["user"]
 * 
 * @arg Mirror:eval
 * @text Mirror Animation
 * @type boolean
 * @on Mirror
 * @off Normal
 * @desc Mirror the animation?
 * @default false
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for animation to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_ChangeBattlePortrait
 * @text ANIM: Change Battle Portrait
 * @desc Changes the battle portrait of the actor (if it's an actor).
 * Can be used outside of battle/action sequences.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to change the portraits for.
 * Valid units can only be actors.
 * @default ["user"]
 * 
 * @arg Filename:str
 * @text Filename
 * @type file
 * @dir img/pictures/
 * @desc Select the file to change the actor's portrait to.
 * @default Untitled
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_ChangeBattlePortrait_JS
 * @text ANIM: Change Battle Portrait (JS)
 * @desc Changes the battle portrait of the actor through JavaScript.
 * Can be used outside of battle/action sequences.
 *
 * @arg ActorJS:func
 * @text JS: Actor ID
 * @type note
 * @desc Enter which Actor ID to affect.
 * Uses JavaScript code.
 * @default "// Get Actor ID here.\nlet actorID = 0;\nactorID = $gameParty.members()[0].actorId();\n\n// Return Actor ID\nreturn actorID;"
 *
 * @arg FilenameJS:func
 * @text JS: Filename
 * @type note
 * @desc Enter the filename you wish to use.
 * Uses JavaScript code.
 * @default "// Get Filename here.\nlet filename = 'Actor1_';\nfilename += String(Math.randomInt(8) + 1);\n\n// Return Filename\nreturn filename;"
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_GuardAnimation
 * @text ANIM: Guard Animation
 * @desc Plays the animation associated with the user's guard action (if any).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play the animation on.
 * @default ["all targets"]
 * 
 * @arg Mirror:eval
 * @text Mirror Animation
 * @type boolean
 * @on Mirror
 * @off Normal
 * @desc Mirror the animation?
 * @default false
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for animation to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_ItemAnimation
 * @text ANIM: Item Animation
 * @desc Plays the animation associated with a specific item.
 * 
 * @arg ItemID:eval
 * @text Item ID
 * @type item
 * @desc Which item ID will the animation come from?
 * @default 7
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play the animation on.
 * @default ["all targets"]
 * 
 * @arg Mirror:eval
 * @text Mirror Animation
 * @type boolean
 * @on Mirror
 * @off Normal
 * @desc Mirror the animation?
 * @default false
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for animation to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_PlayAtCoordinate
 * @text ANIM: Play at Coordinate
 * @desc Plays an animation on the screen at a specific x, y coordinate.
 * Requires VisuMZ_0_CoreEngine!
 *
 * @arg AnimationID:num
 * @text Animation ID
 * @parent Animation
 * @type animation
 * @desc Plays this animation.
 * @default 1
 * 
 * @arg Coordinates
 *
 * @arg pointX:eval
 * @text X
 * @parent Coordinates
 * @desc X coordinate used for the animation.
 * You may use JavaScript code.
 * @default Graphics.width / 2
 *
 * @arg pointY:eval
 * @text Y
 * @parent Coordinates
 * @desc Y coordinate used for the animation.
 * You may use JavaScript code.
 * @default Graphics.height / 2
 *
 * @arg Mirror:eval
 * @text Mirror Animation?
 * @parent Animation
 * @type boolean
 * @on Mirror
 * @off Normal
 * @desc Mirror the animation?
 * @default false
 *
 * @arg Mute:eval
 * @text Mute Animation?
 * @parent Animation
 * @type boolean
 * @on Mute
 * @off Normal
 * @desc Mute the animation?
 * @default false
 *
 * @arg WaitComplete:eval
 * @text Wait for Completion?
 * @parent Animation
 * @type boolean
 * @on Wait
 * @off Normal
 * @desc Wait the animation to finish before continuing?
 * @default false
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_ShowAnimation
 * @text ANIM: Show Animation
 * @desc Plays the a specific animation on unit(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play the animation on.
 * @default ["all targets"]
 * 
 * @arg AnimationID:num
 * @text Animation ID
 * @type animation
 * @desc Select which animation to play on unit(s).
 * @default 1
 * 
 * @arg Mirror:eval
 * @text Mirror Animation
 * @type boolean
 * @on Mirror
 * @off Normal
 * @desc Mirror the animation?
 * @default false
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for animation to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_ShowAnimationJS
 * @text ANIM: Show Animation JS
 * @desc Plays the a specific animation on unit(s).
 * Uses JavaScript to determine animation ID.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play the animation on.
 * @default ["all targets"]
 * 
 * @arg AnimationID:eval
 * @text JS: Animation ID
 * @desc Select which animation to play on unit(s).
 * Uses JavaScript to determine animation ID.
 * @default 1
 * 
 * @arg Mirror:eval
 * @text Mirror Animation
 * @type boolean
 * @on Mirror
 * @off Normal
 * @desc Mirror the animation?
 * @default false
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for animation to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_SkillAnimation
 * @text ANIM: Skill Animation
 * @desc Plays the animation associated with a specific skill.
 * 
 * @arg SkillID:eval
 * @text Skill ID
 * @type skill
 * @desc Which skill ID will the animation come from?
 * @default 99
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play the animation on.
 * @default ["all targets"]
 * 
 * @arg Mirror:eval
 * @text Mirror Animation
 * @type boolean
 * @on Mirror
 * @off Normal
 * @desc Mirror the animation?
 * @default false
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for animation to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_WaitForAnimation
 * @text ANIM: Wait For Animation
 * @desc Causes the interpreter to wait for any animation(s) to finish.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceBattleLog
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakBattleLog
 * @text Action Sequences - Battle Log
 * @desc These Action Sequences are related to the Battle Log Window,
 * the window found at the top of the battle screen.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_AddText
 * @text BTLOG: Add Text
 * @desc Adds a new line of text into the Battle Log.
 * 
 * @arg Text:str
 * @text Text
 * @desc Add this text into the Battle Log.
 * Text codes allowed.
 * @default Insert text here.
 * 
 * @arg CopyCombatLog:eval
 * @text Copy to Combat Log?
 * @type boolean
 * @on Copy Text
 * @off Don't Copy
 * @desc Copies text to the Combat Log.
 * Requires VisuMZ_4_CombatLog
 * @default true
 *
 * @arg CombatLogIcon:num
 * @text Combat Log Icon
 * @parent CopyCombatLog:eval
 * @desc What icon would you like to bind to this entry?
 * Requires VisuMZ_4_CombatLog
 * @default 87
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_Clear
 * @text BTLOG: Clear Battle Log
 * @desc Clears all the text in the Battle Log.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_DisplayAction
 * @text BTLOG: Display Action
 * @desc Displays the current action in the Battle Log.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_PopBaseLine
 * @text BTLOG: Pop Base Line
 * @desc Removes the Battle Log's last added base line and 
 * all text up to its former location.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_PushBaseLine
 * @text BTLOG: Push Base Line
 * @desc Adds a new base line to where the Battle Log currently is at.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_Refresh
 * @text BTLOG: Refresh Battle Log
 * @desc Refreshes the Battle Log.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_UI
 * @text BTLOG: UI Show/Hide
 * @desc Shows or hides the Battle UI (including the Battle Log).
 * 
 * @arg ShowHide:eval
 * @text Show/Hide?
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Shows/hides the Battle UI.
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_WaitForBattleLog
 * @text BTLOG: Wait For Battle Log
 * @desc Causes the interpreter to wait for the Battle Log to finish.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_WaitForNewLine
 * @text BTLOG: Wait For New Line
 * @desc Causes the interpreter to wait for a new line in the Battle Log.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceCamera
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakCamera
 * @text Action Sequences - Camera
 * @desc Allows you to have control over the camera.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Camera_Clamp
 * @text CAMERA: Clamp ON/OFF
 * @desc Turns battle camera clamping on/off.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg Setting:eval
 * @text ON/OFF
 * @type boolean
 * @on ON
 * @off OFF
 * @desc Turns camera clamping on/off.
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Camera_FocusPoint
 * @text CAMERA: Focus Point
 * @desc Focus the battle camera on a certain point in the screen.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg FocusX:eval
 * @text X Coordinate
 * @desc Insert the point to focus the camera on.
 * You may use JavaScript code.
 * @default Graphics.width / 2
 * 
 * @arg FocusY:eval
 * @text Y Coordinate
 * @desc Insert the point to focus the camera on.
 * You may use JavaScript code.
 * @default Graphics.height / 2
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for camera focus change.
 * @default 60
 *
 * @arg EasingType:str
 * @text Camera Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForCamera:eval
 * @text Wait For Camera?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for camera changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Camera_FocusTarget
 * @text CAMERA: Focus Target(s)
 * @desc Focus the battle camera on certain battler target(s).
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to focus the battle camera on.
 * @default ["user"]
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for camera focus change.
 * @default 60
 *
 * @arg EasingType:str
 * @text Camera Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForCamera:eval
 * @text Wait For Camera?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for camera changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Camera_Offset
 * @text CAMERA: Offset
 * @desc Offset the battle camera from the focus target.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg OffsetX:eval
 * @text Offset X
 * @desc How much to offset the camera X by.
 * Negative: left. Positive: right.
 * @default +0
 * 
 * @arg OffsetY:eval
 * @text Offset Y
 * @desc How much to offset the camera Y by.
 * Negative: up. Positive: down.
 * @default +0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for offset change.
 * @default 60
 *
 * @arg EasingType:str
 * @text Camera Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForCamera:eval
 * @text Wait For Camera?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for camera changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Camera_Reset
 * @text CAMERA: Reset
 * @desc Reset the battle camera settings.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg ResetFocus:eval
 * @text Reset Focus?
 * @type boolean
 * @on On
 * @off Off
 * @desc Reset the focus point?
 * @default true
 * 
 * @arg ResetOffset:eval
 * @text Reset Offset?
 * @type boolean
 * @on On
 * @off Off
 * @desc Reset the camera offset?
 * @default true
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for reset change.
 * @default 60
 *
 * @arg EasingType:str
 * @text Camera Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForCamera:eval
 * @text Wait For Camera?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for camera changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Camera_WaitForCamera
 * @text CAMERA: Wait For Camera
 * @desc Waits for camera to complete before performing next command.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceCutin
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakCutin
 * @text Action Sequences - Cutins
 * @desc Allows you to have control over Visual Cutin Effects.
 * Requires VisuMZ_3_VisualCutinEffect!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Cutin_AddVisualCutinEffect
 * @text CUTIN: Add Visual Cutin Effect
 * @desc Adds the Visual Cutin Effect using these desired settings.
 * Requires VisuMZ_3_VisualCutinEffect!
 * 
 * @arg Basic
 * @text Basic Settings
 * 
 * @arg type:str
 * @text Cutin Style Type
 * @parent Basic
 * @type select
 * @option -
 * @option Whole
 * @option -
 * @option Showcase
 * @option -
 * @option LeftHorzSpan
 * @option CenterHorzSpan
 * @option RightHorzSpan
 * @option -
 * @option LeftHorzSlash
 * @option RightHorzSlash
 * @option -
 * @option LeftVertSlash
 * @option RightVertSlash
 * @option -
 * @option LeftMajor
 * @option RightMajor
 * @option -
 * @option LeftMinor
 * @option CenterMinor
 * @option RightMinor
 * @option -
 * @option LeftDiamond
 * @option CenterDiamond
 * @option RightDiamond
 * @option -
 * @option LeftGemstone
 * @option CenterGemstone
 * @option RightGemstone
 * @option -
 * @option TopLeftQuad
 * @option TopRightQuad
 * @option BottomLeftQuad
 * @option BottomRightQuad
 * @option -
 * @option TopLeftCorner
 * @option TopRightCorner
 * @option BottomLeftCorner
 * @option BottomRightCorner
 * @option -
 * @option Row1stThird
 * @option Row2ndThird
 * @option Row3rdThird
 * @option -
 * @option Row1stFourth
 * @option Row2ndFourth
 * @option Row3rdFourth
 * @option Row4thFourth
 * @option -
 * @option Row1stFifth
 * @option Row2ndFifth
 * @option Row3rdFifth
 * @option Row4thFifth
 * @option Row5thFifth
 * @option -
 * @option Col1stThird
 * @option Col2ndThird
 * @option Col3rdThird
 * @option -
 * @option Col1stFourth
 * @option Col2ndFourth
 * @option Col3rdFourth
 * @option Col4thFourth
 * @option -
 * @option Col1stFifth
 * @option Col2ndFifth
 * @option Col3rdFifth
 * @option Col4thFifth
 * @option Col5thFifth
 * @option -
 * @option SixPack1
 * @option SixPack2
 * @option SixPack3
 * @option SixPack4
 * @option SixPack5
 * @option SixPack6
 * @option -
 * @option EightPack1
 * @option EightPack2
 * @option EightPack3
 * @option EightPack4
 * @option EightPack5
 * @option EightPack6
 * @option EightPack7
 * @option EightPack8
 * @option -
 * @option TwelvePack1
 * @option TwelvePack2
 * @option TwelvePack3
 * @option TwelvePack4
 * @option TwelvePack5
 * @option TwelvePack6
 * @option TwelvePack7
 * @option TwelvePack8
 * @option TwelvePack9
 * @option TwelvePack10
 * @option TwelvePack11
 * @option TwelvePack12
 * @option -
 * @desc What Visual Cutin Effect style type do you wish to use?
 * Only one of each cutin-style type can be present.
 * @default CenterHorzSpan
 * 
 * @arg Targets:arraystr
 * @text Portrait Target
 * @parent Basic
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to grab the Visual Cutin Effect portrait
 * data from. First unit will be used to make portrait.
 * @default ["user"]
 *
 * @arg parallaxFilename:str
 * @text Parallax Filename
 * @parent Basic
 * @type file
 * @dir img/parallaxes/
 * @require 1
 * @desc Pick a parallax to use for the Visual Cutin Effect.
 * Pick (None) to not use a parallax.
 * @default >>>ATTENTION<<<
 *
 * @arg bgColor:str
 * @text Background Color
 * @parent Basic
 * @desc Use #rrggbb for custom colors or regular numbers
 * for text colors from the Window Skin.
 * @default #888888
 *
 * @arg ExtraSettings:struct
 * @text Extra Settings
 * @type struct<VisualCutinEffect>
 * @desc Extra Plugin Command settings pertaining to this Visual Cutin Effect.
 * @default {}
 * 
 * @arg WaitForEntrance:eval
 * @text Wait For Entrance
 * @type boolean
 * @on Wait
 * @off Don't Wait
 * @desc Wait until cutin entrance is finished before performing
 * the next event command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Cutin_EndVisualCutinEffectAll
 * @text CUTIN: End Visual Cutin Effect (All)
 * @desc Ends all Visual Cutin Effects currently present.
 * Requires VisuMZ_3_VisualCutinEffect!
 * 
 * @arg WaitForExit:eval
 * @text Wait For Exit
 * @type boolean
 * @on Wait
 * @off Don't Wait
 * @desc Wait until cutin exit is finished before performing
 * the next event command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Cutin_EndVisualCutinEffectType
 * @text CUTIN: End Visual Cutin Effect (Type)
 * @desc Ends the Visual Cutin Effect with the matching type.
 * Requires VisuMZ_3_VisualCutinEffect!
 * 
 * @arg type:str
 * @text Cutin Style Type
 * @type select
 * @option -
 * @option Whole
 * @option -
 * @option Showcase
 * @option -
 * @option LeftHorzSpan
 * @option CenterHorzSpan
 * @option RightHorzSpan
 * @option -
 * @option LeftHorzSlash
 * @option RightHorzSlash
 * @option -
 * @option LeftVertSlash
 * @option RightVertSlash
 * @option -
 * @option LeftMajor
 * @option RightMajor
 * @option -
 * @option LeftMinor
 * @option CenterMinor
 * @option RightMinor
 * @option -
 * @option LeftDiamond
 * @option CenterDiamond
 * @option RightDiamond
 * @option -
 * @option LeftGemstone
 * @option CenterGemstone
 * @option RightGemstone
 * @option -
 * @option TopLeftQuad
 * @option TopRightQuad
 * @option BottomLeftQuad
 * @option BottomRightQuad
 * @option -
 * @option TopLeftCorner
 * @option TopRightCorner
 * @option BottomLeftCorner
 * @option BottomRightCorner
 * @option -
 * @option Row1stThird
 * @option Row2ndThird
 * @option Row3rdThird
 * @option -
 * @option Row1stFourth
 * @option Row2ndFourth
 * @option Row3rdFourth
 * @option Row4thFourth
 * @option -
 * @option Row1stFifth
 * @option Row2ndFifth
 * @option Row3rdFifth
 * @option Row4thFifth
 * @option Row5thFifth
 * @option -
 * @option Col1stThird
 * @option Col2ndThird
 * @option Col3rdThird
 * @option -
 * @option Col1stFourth
 * @option Col2ndFourth
 * @option Col3rdFourth
 * @option Col4thFourth
 * @option -
 * @option Col1stFifth
 * @option Col2ndFifth
 * @option Col3rdFifth
 * @option Col4thFifth
 * @option Col5thFifth
 * @option -
 * @option SixPack1
 * @option SixPack2
 * @option SixPack3
 * @option SixPack4
 * @option SixPack5
 * @option SixPack6
 * @option -
 * @option EightPack1
 * @option EightPack2
 * @option EightPack3
 * @option EightPack4
 * @option EightPack5
 * @option EightPack6
 * @option EightPack7
 * @option EightPack8
 * @option -
 * @option TwelvePack1
 * @option TwelvePack2
 * @option TwelvePack3
 * @option TwelvePack4
 * @option TwelvePack5
 * @option TwelvePack6
 * @option TwelvePack7
 * @option TwelvePack8
 * @option TwelvePack9
 * @option TwelvePack10
 * @option TwelvePack11
 * @option TwelvePack12
 * @option -
 * @desc What Visual Cutin Effect style type do you wish to end?
 * @default CenterHorzSpan
 * 
 * @arg WaitForExit:eval
 * @text Wait For Exit
 * @type boolean
 * @on Wait
 * @off Don't Wait
 * @desc Wait until cutin exit is finished before performing
 * the next event command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Cutin_WaitForEntrance
 * @text CUTIN: Wait for Cutin Entrance
 * @desc Wait until all cutin entrances are finished before performing the next event command. Requires VisuMZ_3_VisualCutinEffect!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Cutin_WaitForExit
 * @text CUTIN: Wait for Cutin Exit
 * @desc Wait until all cutin exits are finished before performing the next event command. Requires VisuMZ_3_VisualCutinEffect!
 *
 * @ --------------------------------------------------------------------------
 *
 *
 * @command ActionSequenceSpaceDragonbones
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreaDragonbones
 * @text Action Sequences - Dragonbones
 * @desc These Action Sequences are Dragonbones-related.
 * Requires VisuMZ_2_DragonbonesUnion!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_DB_DragonbonesMotionAni
 * @text DB: Dragonbones Animation
 * @desc Causes the unit(s) to play a Dragonbones motion animation.
 * Requires VisuMZ_2_DragonbonesUnion!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to perform a motion animation.
 * @default ["user"]
 *
 * @arg MotionAni:str
 * @text Motion Animation
 * @desc What is the name of the Dragonbones motion animation you wish to play?
 * @default attack
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_DB_DragonbonesTimeScale
 * @text DB: Dragonbones Time Scale
 * @desc Causes the unit(s) to change their Dragonbones time scale.
 * Requires VisuMZ_2_DragonbonesUnion!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to perform a motion animation.
 * @default ["user"]
 *
 * @arg TimeScale:num
 * @text Time Scale
 * @desc Change the value of the Dragonbones time scale to this.
 * @default 1.0
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceElements
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakElements
 * @text Action Sequences - Elements
 * @desc These Action Sequences are related to elements.
 * Requires VisuMZ_1_ElementStatusCore!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Element_AddElements
 * @text ELE: Add Elements
 * @desc Adds element(s) to be used when calculating damage.
 * Requires VisuMZ_1_ElementStatusCore!
 *
 * @arg Elements:arraynum
 * @text Elements
 * @type number[]
 * @min 1
 * @max 99
 * @desc Select which element ID to add onto the action.
 * Insert multiple element ID's to add multiple at once.
 * @default ["1"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Element_Clear
 * @text ELE: Clear Element Changes
 * @desc Clears all element changes made through Action Sequences.
 * Requires VisuMZ_1_ElementStatusCore!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Element_ForceElements
 * @text ELE: Force Elements
 * @desc Forces only specific element(s) when calculating damage.
 * Requires VisuMZ_1_ElementStatusCore!
 *
 * @arg Elements:arraynum
 * @text Elements
 * @type number[]
 * @min 1
 * @max 99
 * @desc Select which element ID to force in the action.
 * Insert multiple element ID's to force multiple at once.
 * @default ["1"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Element_NullElements
 * @text ELE: Null Element
 * @desc Forces no element to be used when calculating damage.
 * Requires VisuMZ_1_ElementStatusCore!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceGrid
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakGrid
 * @text Action Sequences - Grid
 * @desc These Action Sequences are Battle Grid System-related.
 * Requires VisuMZ_2_BattleGridSystem!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Grid_ActionAnimationAtNode
 * @text GRID: Action Animation at Node
 * @desc Plays action animation at target node.
 * Requires VisuMZ_2_BattleGridSystem!
 *
 * @arg UseActionSelectNode:eval
 * @text Action-Selected Node?
 * @type boolean
 * @on Action-Selected
 * @off Prioritize Custom
 * @desc Use Action-Selected Node Coordinates if possible?
 * Requires "Empty" or "Any" for <Target: x Grid Node>
 * @default true
 *
 * @arg Unit:str
 * @text Unit
 * @parent UseActionSelectNode:eval
 * @type select
 * @option Actor
 * @option Enemy
 * @option Friend
 * @option Opponent
 * @desc Which unit's Node do you want to play an animation on?
 * @default Enemy
 *
 * @arg Rank:num
 * @text Rank
 * @parent UseActionSelectNode:eval
 * @type number
 * @min 1
 * @max 10
 * @desc Input the number representing the Rank of the Node
 * you want to play an animation on.
 * @default 1
 *
 * @arg Flank:num
 * @text Flank
 * @parent UseActionSelectNode:eval
 * @type number
 * @min 1
 * @max 10
 * @desc Input the number representing the Flank of the Node
 * you want to play an animation on.
 * @default 1
 *
 * @arg OffsetX:num
 * @text Offset X
 * @desc Offsets the animation x position.
 * Negative: left. Positive: right.
 * @default +0
 *
 * @arg OffsetY:num
 * @text Offset Y
 * @desc Offsets the animation y position.
 * Negative: up. Positive: down.
 * @default +0
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Grid_AddPassiveStatesToNode
 * @text GRID: Add Passive State(s) to Node
 * @desc Adds Passive State(s) at target node.
 * Requires VisuMZ_2_BattleGridSystem!
 *
 * @arg StateIDs:arraynum
 * @text State ID(s)
 * @type state[]
 * @desc Select which State ID(s) to add as a Passive State.
 * @default []
 *
 * @arg UseActionSelectNode:eval
 * @text Action-Selected Node?
 * @type boolean
 * @on Action-Selected
 * @off Prioritize Custom
 * @desc Use Action-Selected Node Coordinates if possible?
 * Requires "Empty" or "Any" for <Target: x Grid Node>
 * @default true
 *
 * @arg Unit:str
 * @text Unit
 * @parent UseActionSelectNode:eval
 * @type select
 * @option Actor
 * @option Enemy
 * @option Friend
 * @option Opponent
 * @desc Which unit do you want to add the Passive State Node
 * effect for?
 * @default Actor
 *
 * @arg Rank:eval
 * @text Rank
 * @parent UseActionSelectNode:eval
 * @desc Input the number representing the Rank of the Node
 * you want to add a Passive State(s) to.
 * @default 1
 *
 * @arg Flank:eval
 * @text Flank
 * @parent UseActionSelectNode:eval
 * @desc Input the number representing the Flank of the Node
 * you want to add a Passive State(s) to.
 * @default 1
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Grid_AddTriggerToNode
 * @text GRID: Add Trigger to Node
 * @desc Adds Trigger to target node. Target node cannot have battler.
 * Requires VisuMZ_2_BattleGridSystem!
 *
 * @arg SkillID:num
 * @text Skill ID
 * @type skill
 * @desc Select which Skill ID(s) to add as the trigger.
 * @default 1
 *
 * @arg UseActionSelectNode:eval
 * @text Action-Selected Node?
 * @type boolean
 * @on Action-Selected
 * @off Prioritize Custom
 * @desc Use Action-Selected Node Coordinates if possible?
 * Requires "Empty" or "Any" for <Target: x Grid Node>
 * @default true
 *
 * @arg Unit:str
 * @text Unit
 * @parent UseActionSelectNode:eval
 * @type select
 * @option Actor
 * @option Enemy
 * @option Friend
 * @option Opponent
 * @desc Which unit do you want to add the Trigger Node
 * effect for?
 * @default Actor
 *
 * @arg Rank:eval
 * @text Rank
 * @parent UseActionSelectNode:eval
 * @desc Input the number representing the Rank of the Node
 * you want to add a Trigger to.
 * @default 1
 *
 * @arg Flank:eval
 * @text Flank
 * @parent UseActionSelectNode:eval
 * @desc Input the number representing the Flank of the Node
 * you want to add a Trigger to.
 * @default 1
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Grid_AddTriggerToNodeJS
 * @text GRID: Add Trigger to Node JS
 * @desc Adds Trigger to target node. Target node cannot have battler.
 * Requires VisuMZ_2_BattleGridSystem!
 *
 * @arg SkillID:eval
 * @text JS: Skill ID
 * @desc Use JavaScript to determine what skill ID to add to this node.
 * @default 1
 *
 * @arg UseActionSelectNode:eval
 * @text Action-Selected Node?
 * @type boolean
 * @on Action-Selected
 * @off Prioritize Custom
 * @desc Use Action-Selected Node Coordinates if possible?
 * Requires "Empty" or "Any" for <Target: x Grid Node>
 * @default true
 *
 * @arg Unit:str
 * @text Unit
 * @parent UseActionSelectNode:eval
 * @type select
 * @option Actor
 * @option Enemy
 * @option Friend
 * @option Opponent
 * @desc Which unit do you want to add the Trigger Node
 * effect for?
 * @default Actor
 *
 * @arg Rank:eval
 * @text Rank
 * @parent UseActionSelectNode:eval
 * @desc Input the number representing the Rank of the Node
 * you want to add a Trigger to.
 * @default 1
 *
 * @arg Flank:eval
 * @text Flank
 * @parent UseActionSelectNode:eval
 * @desc Input the number representing the Flank of the Node
 * you want to add a Trigger to.
 * @default 1
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Grid_AnimationIDAtNode
 * @text GRID: Animation ID at Node
 * @desc Plays specific animation ID at target node.
 * Requires VisuMZ_2_BattleGridSystem!
 *
 * @arg AnimationID:num
 * @text Animation ID
 * @type animation
 * @desc Play this animation at target node.
 * @default 1
 *
 * @arg Mirror:eval
 * @text Mirror?
 * @parent AnimationID:num
 * @type boolean
 * @on Mirror Animation
 * @off Don't Mirror
 * @desc Mirror this animation?
 * @default false
 *
 * @arg Mute:eval
 * @text Mute?
 * @parent AnimationID:num
 * @type boolean
 * @on Mute Animation
 * @off Don't Mute
 * @desc Mute this animation?
 * @default false
 *
 * @arg UseActionSelectNode:eval
 * @text Action-Selected Node?
 * @type boolean
 * @on Action-Selected
 * @off Prioritize Custom
 * @desc Use Action-Selected Node Coordinates if possible?
 * Requires "Empty" or "Any" for <Target: x Grid Node>
 * @default true
 *
 * @arg Unit:str
 * @text Unit
 * @parent UseActionSelectNode:eval
 * @type select
 * @option Actor
 * @option Enemy
 * @option Friend
 * @option Opponent
 * @desc Which unit's Node do you want to play an animation on?
 * @default Enemy
 *
 * @arg Rank:num
 * @text Rank
 * @parent UseActionSelectNode:eval
 * @type number
 * @min 1
 * @max 10
 * @desc Input the number representing the Rank of the Node
 * you want to play an animation on.
 * @default 1
 *
 * @arg Flank:num
 * @text Flank
 * @parent UseActionSelectNode:eval
 * @type number
 * @min 1
 * @max 10
 * @desc Input the number representing the Flank of the Node
 * you want to play an animation on.
 * @default 1
 *
 * @arg OffsetX:num
 * @text Offset X
 * @desc Offsets the animation x position.
 * Negative: left. Positive: right.
 * @default +0
 *
 * @arg OffsetY:num
 * @text Offset Y
 * @desc Offsets the animation y position.
 * Negative: up. Positive: down.
 * @default +0
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Grid_AnimationJsAtNode
 * @text GRID: Animation JS at Node
 * @desc Uses JS to calculate which animation to play at target node.
 * Requires VisuMZ_2_BattleGridSystem!
 * 
 * @arg AnimationID:eval
 * @text JS: Animation ID
 * @desc Calculate which animation to play on unit(s).
 * Uses JavaScript to determine animation ID.
 * @default 1
 *
 * @arg Mirror:eval
 * @text Mirror?
 * @parent AnimationID:eval
 * @type boolean
 * @on Mirror Animation
 * @off Don't Mirror
 * @desc Mirror this animation?
 * @default false
 *
 * @arg Mute:eval
 * @text Mute?
 * @parent AnimationID:eval
 * @type boolean
 * @on Mute Animation
 * @off Don't Mute
 * @desc Mute this animation?
 * @default false
 *
 * @arg UseActionSelectNode:eval
 * @text Action-Selected Node?
 * @type boolean
 * @on Action-Selected
 * @off Prioritize Custom
 * @desc Use Action-Selected Node Coordinates if possible?
 * Requires "Empty" or "Any" for <Target: x Grid Node>
 * @default true
 *
 * @arg Unit:str
 * @text Unit
 * @parent UseActionSelectNode:eval
 * @type select
 * @option Actor
 * @option Enemy
 * @option Friend
 * @option Opponent
 * @desc Which unit's Node do you want to play an animation on?
 * @default Enemy
 *
 * @arg Rank:num
 * @text Rank
 * @parent UseActionSelectNode:eval
 * @type number
 * @min 1
 * @max 10
 * @desc Input the number representing the Rank of the Node
 * you want to play an animation on.
 * @default 1
 *
 * @arg Flank:num
 * @text Flank
 * @parent UseActionSelectNode:eval
 * @type number
 * @min 1
 * @max 10
 * @desc Input the number representing the Flank of the Node
 * you want to play an animation on.
 * @default 1
 *
 * @arg OffsetX:num
 * @text Offset X
 * @desc Offsets the animation x position.
 * Negative: left. Positive: right.
 * @default +0
 *
 * @arg OffsetY:num
 * @text Offset Y
 * @desc Offsets the animation y position.
 * Negative: up. Positive: down.
 * @default +0
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Grid_AnimationTypeAtNode
 * @text GRID: Animation Type at Node
 * @desc Plays certain animation type at target node.
 * Requires VisuMZ_2_BattleGridSystem!
 *
 * @arg Type:str
 * @text Animation Type
 * @type select
 * @option Attack
 * @option Guard
 * @option Item
 * @option Skill
 * @desc What is the animation type you would like to play?
 * @default Attack
 * 
 * @arg Slot:eval
 * @text Slot (Attack Type)
 * @parent Type:str
 * @desc Which weapon slot to get this data from?
 * Main-hand weapon is weapon slot 1.
 * @default 1
 * 
 * @arg ItemID:num
 * @text Item ID (Item Type)
 * @parent Type:str
 * @type item
 * @desc Which item ID will the animation come from?
 * @default 7
 * 
 * @arg SkillID:num
 * @text Skill ID (Skill Type)
 * @parent Type:str
 * @type skill
 * @desc Which skill ID will the animation come from?
 * @default 99
 *
 * @arg UseActionSelectNode:eval
 * @text Action-Selected Node?
 * @type boolean
 * @on Action-Selected
 * @off Prioritize Custom
 * @desc Use Action-Selected Node Coordinates if possible?
 * Requires "Empty" or "Any" for <Target: x Grid Node>
 * @default true
 *
 * @arg Unit:str
 * @text Unit
 * @parent UseActionSelectNode:eval
 * @type select
 * @option Actor
 * @option Enemy
 * @option Friend
 * @option Opponent
 * @desc Which unit's Node do you want to play an animation on?
 * @default Enemy
 *
 * @arg Rank:num
 * @text Rank
 * @parent UseActionSelectNode:eval
 * @type number
 * @min 1
 * @max 10
 * @desc Input the number representing the Rank of the Node
 * you want to play an animation on.
 * @default 1
 *
 * @arg Flank:num
 * @text Flank
 * @parent UseActionSelectNode:eval
 * @type number
 * @min 1
 * @max 10
 * @desc Input the number representing the Flank of the Node
 * you want to play an animation on.
 * @default 1
 *
 * @arg OffsetX:num
 * @text Offset X
 * @desc Offsets the animation x position.
 * Negative: left. Positive: right.
 * @default +0
 *
 * @arg OffsetY:num
 * @text Offset Y
 * @desc Offsets the animation y position.
 * Negative: up. Positive: down.
 * @default +0
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Grid_MoveTargetsInDirection
 * @text GRID: Move Target(s) In Direction
 * @desc Moves target(s) in a specific direction to other Nodes.
 * Requires VisuMZ_2_BattleGridSystem!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to move.
 * @default ["all targets"]
 * 
 * @arg MoveType:str
 * @text Movement Type
 * @type select
 * @option -
 * @option Exact
 * @option -
 * @option Mid
 * @option -
 * @option Switch
 * @option Switch Mid
 * @option -
 * @option Crash
 * @option Crash Mid
 * @option -
 * @desc Select the Movement type rulings.
 * See VisuMZ_2_BattleGridSystem help file for details.
 * @default Mid
 * 
 * @arg Direction:str
 * @text Direction
 * @parent MoveType:str
 * @type select
 * @option -
 * @option Upward
 * @option Downward
 * @option -
 * @option Up-Forward
 * @option Forward
 * @option Down-Forward
 * @option -
 * @option Up-Backward
 * @option Backward
 * @option Down-Backward
 * @option -
 * @option Up-Leftward
 * @option Leftward
 * @option Down-Leftward
 * @option -
 * @option Up-Rightward
 * @option Rightward
 * @option Down-Rightward
 * @option -
 * @desc Select the movement direction.
 * @default Backward
 *
 * @arg Distance:eval
 * @text Distance
 * @parent MoveType:str
 * @desc The number of nodes to be moved.
 * You may use JavaScript code.
 * @default 1
 *
 * @arg Duration:eval
 * @text Duration
 * @desc Input the number representing the frames used to move.
 * @default 12
 *
 * @arg SilentMove:eval
 * @text Silent Change?
 * @type boolean
 * @on Silent
 * @off Visual
 * @desc Silent: Discreet changes shown. More apparent later.
 * Visual: Instant changes shown.
 * @default false
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Grid_PullToTargetNode
 * @text GRID: Pull To Target Node
 * @desc Pulls battlers towards target node.
 * Requires VisuMZ_2_BattleGridSystem!
 *
 * @arg UseActionSelectNode:eval
 * @text Action-Selected Node?
 * @type boolean
 * @on Action-Selected
 * @off Prioritize Custom
 * @desc Use Action-Selected Node Coordinates if possible?
 * Requires "Empty" or "Any" for <Target: x Grid Node>
 * @default true
 *
 * @arg Unit:str
 * @text Unit
 * @parent UseActionSelectNode:eval
 * @type select
 * @option Actor
 * @option Enemy
 * @option Friend
 * @option Opponent
 * @desc Which unit do you want to pull on?
 * @default Actor
 *
 * @arg Rank:eval
 * @text Rank
 * @parent UseActionSelectNode:eval
 * @desc Input the number representing the Rank of the Node
 * you want to pull to.
 * @default 1
 *
 * @arg Flank:eval
 * @text Flank
 * @parent UseActionSelectNode:eval
 * @desc Input the number representing the Flank of the Node
 * you want to pull to.
 * @default 1
 *
 * @arg Strength:eval
 * @text Strength
 * @desc Input the strength level of the pull.
 * @default 1
 *
 * @arg Duration:eval
 * @text Duration
 * @desc Input the number representing the frames used to move.
 * @default 12
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Grid_PushFromTargetNode
 * @text GRID: Push From Target Node
 * @desc Pushes battlers away from target node.
 * Requires VisuMZ_2_BattleGridSystem!
 *
 * @arg UseActionSelectNode:eval
 * @text Action-Selected Node?
 * @type boolean
 * @on Action-Selected
 * @off Prioritize Custom
 * @desc Use Action-Selected Node Coordinates if possible?
 * Requires "Empty" or "Any" for <Target: x Grid Node>
 * @default true
 *
 * @arg Unit:str
 * @text Unit
 * @parent UseActionSelectNode:eval
 * @type select
 * @option Actor
 * @option Enemy
 * @option Friend
 * @option Opponent
 * @desc Which unit do you want to push from?
 * @default Actor
 *
 * @arg Rank:eval
 * @text Rank
 * @parent UseActionSelectNode:eval
 * @desc Input the number representing the Rank of the Node
 * you want to push from.
 * @default 1
 *
 * @arg Flank:eval
 * @text Flank
 * @parent UseActionSelectNode:eval
 * @desc Input the number representing the Flank of the Node
 * you want to push from.
 * @default 1
 *
 * @arg Strength:eval
 * @text Strength
 * @desc Input the strength level of the push.
 * @default 1
 *
 * @arg Duration:eval
 * @text Duration
 * @desc Input the number representing the frames used to move.
 * @default 12
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Grid_ClearPassiveStatesFromNode
 * @text GRID: Remove All Passive States from Node
 * @desc Removes all all Passive State effects at target node.
 * Requires VisuMZ_2_BattleGridSystem!
 *
 * @arg UseActionSelectNode:eval
 * @text Action-Selected Node?
 * @type boolean
 * @on Action-Selected
 * @off Prioritize Custom
 * @desc Use Action-Selected Node Coordinates if possible?
 * Requires "Empty" or "Any" for <Target: x Grid Node>
 * @default true
 *
 * @arg Unit:str
 * @text Unit
 * @parent UseActionSelectNode:eval
 * @type select
 * @option Actor
 * @option Enemy
 * @option Friend
 * @option Opponent
 * @desc Which unit do you want to clear the Node for?
 * @default Actor
 *
 * @arg Rank:eval
 * @text Rank
 * @parent UseActionSelectNode:eval
 * @desc Input the number representing the Rank of the Node
 * you want to clear Passive States from.
 * @default 1
 *
 * @arg Flank:eval
 * @text Flank
 * @parent UseActionSelectNode:eval
 * @desc Input the number representing the Flank of the Node
 * you want to clear Passive States from.
 * @default 1
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Grid_RemovePassiveStatesFromNode
 * @text GRID: Remove Passive State(s) from Node
 * @desc Remove Passive State(s) at target node.
 * Requires VisuMZ_2_BattleGridSystem!
 *
 * @arg StateIDs:arraynum
 * @text State ID(s)
 * @type state[]
 * @desc Select which State ID(s) to remove as a Passive State.
 * @default []
 *
 * @arg UseActionSelectNode:eval
 * @text Action-Selected Node?
 * @type boolean
 * @on Action-Selected
 * @off Prioritize Custom
 * @desc Use Action-Selected Node Coordinates if possible?
 * Requires "Empty" or "Any" for <Target: x Grid Node>
 * @default true
 *
 * @arg Unit:str
 * @text Unit
 * @parent UseActionSelectNode:eval
 * @type select
 * @option Actor
 * @option Enemy
 * @option Friend
 * @option Opponent
 * @desc Which unit do you want to remove the Passive State Node
 * effect for?
 * @default Actor
 *
 * @arg Rank:eval
 * @text Rank
 * @parent UseActionSelectNode:eval
 * @desc Input the number representing the Rank of the Node
 * you want to remove a Passive State(s) from.
 * @default 1
 *
 * @arg Flank:eval
 * @text Flank
 * @parent UseActionSelectNode:eval
 * @desc Input the number representing the Flank of the Node
 * you want to remove a Passive State(s) from.
 * @default 1
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Grid_RemoveTriggerFromNode
 * @text GRID: Remove Trigger from Node
 * @desc Removes Trigger from target node.
 * Requires VisuMZ_2_BattleGridSystem!
 *
 * @arg UseActionSelectNode:eval
 * @text Action-Selected Node?
 * @type boolean
 * @on Action-Selected
 * @off Prioritize Custom
 * @desc Use Action-Selected Node Coordinates if possible?
 * Requires "Empty" or "Any" for <Target: x Grid Node>
 * @default true
 *
 * @arg Unit:str
 * @text Unit
 * @parent UseActionSelectNode:eval
 * @type select
 * @option Actor
 * @option Enemy
 * @option Friend
 * @option Opponent
 * @desc Which unit do you want to clear Triggers for?
 * @default Actor
 *
 * @arg Rank:eval
 * @text Rank
 * @parent UseActionSelectNode:eval
 * @desc Input the number representing the Rank of the Node
 * you want to clear Triggers from.
 * @default 1
 *
 * @arg Flank:eval
 * @text Flank
 * @parent UseActionSelectNode:eval
 * @desc Input the number representing the Flank of the Node
 * you want to clear Triggers from.
 * @default 1
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Grid_TeleportToNode
 * @text GRID: Teleport To Node
 * @desc Teleports user/random opponent to target node.
 * Requires VisuMZ_2_BattleGridSystem!
 *
 * @arg UseActionSelectNode:eval
 * @text Action-Selected Node?
 * @type boolean
 * @on Action-Selected
 * @off Prioritize Custom
 * @desc Use Action-Selected Node Coordinates if possible?
 * Requires "Empty" or "Any" for <Target: x Grid Node>
 * @default true
 *
 * @arg Unit:str
 * @text Unit
 * @parent UseActionSelectNode:eval
 * @type select
 * @option Actor
 * @option Enemy
 * @option Friend
 * @option Opponent
 * @desc Which unit do you want to teleport to?
 * @default Actor
 *
 * @arg Rank:eval
 * @text Rank
 * @parent UseActionSelectNode:eval
 * @desc Input the number representing the Rank of the Node
 * you want to teleport to.
 * @default 1
 *
 * @arg Flank:eval
 * @text Flank
 * @parent UseActionSelectNode:eval
 * @desc Input the number representing the Flank of the Node
 * you want to teleport.
 * @default 1
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Grid_TraverseToNode
 * @text GRID: Traverse To Node
 * @desc Traverses user/random opponent to target node.
 * Requires VisuMZ_2_BattleGridSystem!
 *
 * @arg UseActionSelectNode:eval
 * @text Action-Selected Node?
 * @type boolean
 * @on Action-Selected
 * @off Prioritize Custom
 * @desc Use Action-Selected Node Coordinates if possible?
 * Requires "Empty" or "Any" for <Target: x Grid Node>
 * @default true
 *
 * @arg Unit:str
 * @text Unit
 * @parent UseActionSelectNode:eval
 * @type select
 * @option Actor
 * @option Enemy
 * @option Friend
 * @option Opponent
 * @desc Which unit do you want to traverse to?
 * @default Actor
 *
 * @arg Rank:eval
 * @text Rank
 * @parent UseActionSelectNode:eval
 * @desc Input the number representing the Rank of the Node
 * you want to traverse to.
 * @default 1
 *
 * @arg Flank:eval
 * @text Flank
 * @parent UseActionSelectNode:eval
 * @desc Input the number representing the Flank of the Node
 * you want to traverse.
 * @default 1
 *
 * @arg Duration:eval
 * @text Duration
 * @desc Input the number representing the frames used to move.
 * @default 12
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceHorror
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakHorror
 * @text Action Sequences - Horror Effects
 * @desc These Action Sequences are Horror Effects-related.
 * Requires VisuMZ_2_HorrorEffects!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Horror_Clear
 * @text HORROR: Clear All Filters
 * @desc Clear all Horror Effects filters on the target battler(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to remove Horror Effects for.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Horror_GlitchCreate
 * @text HORROR: Glitch Create
 * @desc Creates the glitch effect on the target battler(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to create the Horror Effect for.
 * @default ["user"]
 *
 * @arg slices:num
 * @text Glitch Slices
 * @parent FilterGlitch
 * @type number
 * @min 1
 * @desc Glitch slices to be used with the target.
 * @default 10
 *
 * @arg offset:num
 * @text Glitch Offset
 * @parent FilterGlitch
 * @type number
 * @min 1
 * @desc Default offset value.
 * @default 100
 *
 * @arg animated:eval
 * @text Glitch Animated?
 * @parent FilterGlitch
 * @type boolean
 * @on Animate
 * @off Static
 * @desc Animate the glitch effect?
 * @default true
 *
 * @arg aniFrequency:num
 * @text Glitch Frequency
 * @parent FilterGlitch
 * @type number
 * @min 1
 * @desc If animated, how frequent to make the glitch effect?
 * Lower = often     Higher = rarer
 * @default 300
 *
 * @arg aniStrength:num
 * @text Glitch Strength
 * @parent FilterGlitch
 * @type number
 * @min 1
 * @desc If animated, how strong is the glitch effect?
 * Lower = weaker     Higher = stronger
 * @default 30
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Horror_GlitchRemove
 * @text HORROR: Glitch Remove
 * @desc Removes the glitch effect on the target battler(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to remove the Horror Effect for.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Horror_NoiseCreate
 * @text HORROR: Noise Create
 * @desc Creates the noise effect on the target battler(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to create the Horror Effect for.
 * @default ["user"]
 *
 * @arg noise:num
 * @text Noise Rate
 * @parent FilterNoise
 * @desc Noise rate to be used with the target.
 * @default 0.3
 *
 * @arg animated:eval
 * @text Noise Animated
 * @parent FilterNoise
 * @type boolean
 * @on Animate
 * @off Static
 * @desc Animate the noise for the target?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Horror_NoiseRemove
 * @text HORROR: Noise Remove
 * @desc Removes the noise effect on the target battler(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to remove the Horror Effect for.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Horror_TVCreate
 * @text HORROR: TV Create
 * @desc Creates the TV effect on the target battler(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to create the Horror Effect for.
 * @default ["user"]
 *
 * @arg lineWidth:num
 * @text TV Line Thickness
 * @parent FilterTV
 * @type number
 * @min 1
 * @desc Default TV line thickness
 * Lower = thinner     Higher = thicker
 * @default 5
 *
 * @arg vignetting:num
 * @text TV Corner Size
 * @parent FilterTV
 * @desc Default TV line corner size
 * Lower = smaller     Higher = bigger
 * @default 0.3
 *
 * @arg animated:eval
 * @text TV Animated
 * @parent FilterTV
 * @type boolean
 * @on Animate
 * @off Static
 * @desc Animate the TV?
 * @default true
 *
 * @arg aniSpeed:num
 * @text TV Speed
 * @parent FilterTV
 * @desc Speed used to animate the TV if animated
 * Lower = slower     Higher = faster
 * @default 0.25
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Horror_TVRemove
 * @text HORROR: TV Remove
 * @desc Removes the TV effect on the target battler(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to remove the Horror Effect for.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceImpact
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakImpact
 * @text Action Sequences - Impact
 * @desc These Action Sequences are related to creating impact.
 * Requires VisuMZ_3_ActSeqImpact!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_BlueRedInvert
 * @text IMPACT: Bizarro Inversion
 * @desc Swaps blue/red colors on the battlefield.
 * Requires VisuMZ_3_ActSeqImpact!
 *
 * @arg Enable:eval
 * @text Bizarro?
 * @type boolean
 * @on Enable / Bizarro
 * @off Disable / Normal
 * @desc Enable Bizarro Inversion effect?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_ColorBreak
 * @text IMPACT: Color Break
 * @desc Breaks the colors on the screen before reassembling.
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Intensity:eval
 * @text Intensity
 * @desc What is the intensity of the color break effect?
 * @default 60
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc What is the duration of the color break effect?
 * @default 60
 *
 * @arg EasingType:str
 * @text Easing Type
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * @default OutBack
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_Desaturate
 * @text IMPACT: Desaturation
 * @desc Desaturates all colors on the battlefield.
 * Requires VisuMZ_3_ActSeqImpact! Created by Manu Gaming!
 *
 * @arg Enable:eval
 * @text Desaturate?
 * @type boolean
 * @on Enable / Desaturate
 * @off Disable / Normal
 * @desc Enable Desaturation effect?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_MotionBlurScreen
 * @text IMPACT: Motion Blur Screen
 * @desc Creates a motion blur on the whole screen.
 * Requires VisuMZ_3_ActSeqImpact!
 *
 * @arg Angle:eval
 * @text Angle
 * @desc Determine what angle to make the motion blur at.
 * @default Math.randomInt(360)
 *
 * @arg Rate:eval
 * @text Intensity Rate
 * @desc This determines intensity rate of the motion blur.
 * Use a number between 0 and 1.
 * @default 0.1
 *
 * @arg Duration:num
 * @text Duration
 * @type number
 * @min 1
 * @desc How many frames should the motion blur last?
 * What do you want to be its duration?
 * @default 30
 *
 * @arg EasingType:str
 * @text Easing Type
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * @default InOutSine
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_MotionBlurTarget
 * @text IMPACT: Motion Blur Target(s)
 * @desc Creates a motion blur on selected target(s).
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to create motion blur effects for.
 * @default ["user"]
 *
 * @arg Angle:eval
 * @text Angle
 * @desc Determine what angle to make the motion blur at.
 * @default Math.randomInt(360)
 *
 * @arg Rate:eval
 * @text Intensity Rate
 * @desc This determines intensity rate of the motion blur.
 * Use a number between 0 and 1.
 * @default 0.5
 *
 * @arg Duration:num
 * @text Duration
 * @type number
 * @min 1
 * @desc How many frames should the motion blur last?
 * What do you want to be its duration?
 * @default 30
 *
 * @arg EasingType:str
 * @text Easing Type
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * @default InOutSine
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_MotionTrailCreate
 * @text IMPACT: Motion Trail Create
 * @desc Creates a motion trail effect for the target(s).
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to create motion trail effects for.
 * @default ["user"]
 *
 * @arg delay:num
 * @text Delay
 * @type number
 * @min 1
 * @desc How many frames to delay by when creating a motion trail?
 * The higher the delay, the less after images there are.
 * @default 1
 *
 * @arg duration:num
 * @text Duration
 * @type number
 * @min 1
 * @desc How many frames should the motion trail last?
 * What do you want to be its duration?
 * @default 30
 *
 * @arg hue:num
 * @text Hue
 * @type number
 * @min 0
 * @max 360
 * @desc What do you want to be the hue for the motion trail?
 * @default 0
 *
 * @arg opacityStart:num
 * @text Starting Opacity
 * @type number
 * @min 0
 * @max 255
 * @desc What starting opacity value do you want for the motion
 * trail? Opacity values decrease over time.
 * @default 200
 *
 * @arg tone:eval
 * @text Tone
 * @desc What tone do you want for the motion trail?
 * Format: [Red, Green, Blue, Gray]
 * @default [0, 0, 0, 0]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_MotionTrailRemove
 * @text IMPACT: Motion Trail Remove
 * @desc Removes the motion trail effect from the target(s).
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to clear motion trail effects for.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_Negative
 * @text IMPACT: Negative Inversion
 * @desc Inverts all the colors on the battlefield.
 * Requires VisuMZ_3_ActSeqImpact! Created by Manu Gaming!
 *
 * @arg Enable:eval
 * @text Negative?
 * @type boolean
 * @on Enable / Negative
 * @off Disable / Normal
 * @desc Enable negative inversion effect?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_Oversaturate
 * @text IMPACT: Oversaturation
 * @desc Oversaturates colors on the battlefield.
 * Requires VisuMZ_3_ActSeqImpact!
 *
 * @arg Enable:eval
 * @text Oversaturate?
 * @type boolean
 * @on Enable / Oversaturate
 * @off Disable / Normal
 * @desc Enable Oversaturation effect?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_ShockwavePoint
 * @text IMPACT: Shockwave at Point
 * @desc Creates a shockwave at the designated coordinates.
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Coordinates
 * 
 * @arg X:eval
 * @text Point: X
 * @parent Coordinates
 * @desc What x coordinate do you want to create a shockwave at?
 * You can use JavaScript code.
 * @default Graphics.width / 2
 * 
 * @arg Y:eval
 * @text Point: Y
 * @parent Coordinates
 * @desc What y coordinate do you want to create a shockwave at?
 * You can use JavaScript code.
 * @default (Graphics.height - 200) / 2
 * 
 * @arg Amp:eval
 * @text Amplitude
 * @desc What is the aplitude of the shockwave effect?
 * @default 30
 * 
 * @arg Wave:eval
 * @text Wavelength
 * @desc What is the wavelength of the shockwave effect?
 * @default 160
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc What is the duration of the shockwave?
 * @default 60
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_ShockwaveEachTargets
 * @text IMPACT: Shockwave from Each Target(s)
 * @desc Creates a shockwave at each of the target(s) location(s).
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to start a shockwave from.
 * @default ["all targets"]
 * 
 * @arg TargetLocation:str
 * @text Target Location
 * @parent Targets2:arraystr
 * @type combo
 * @option front head
 * @option front center
 * @option front base
 * @option middle head
 * @option middle center
 * @option middle base
 * @option back head
 * @option back center
 * @option back base
 * @desc Select which part target group to start a shockwave from.
 * @default middle center
 * 
 * @arg OffsetX:eval
 * @text Offset X
 * @parent TargetLocation:str
 * @desc How much to offset the shockwave X point by.
 * Negative: left. Positive: right.
 * @default +0
 * 
 * @arg OffsetY:eval
 * @text Offset Y
 * @parent TargetLocation:str
 * @desc How much to offset the shockwave Y point by.
 * Negative: up. Positive: down.
 * @default +0
 * 
 * @arg Amp:eval
 * @text Amplitude
 * @desc What is the aplitude of the shockwave effect?
 * @default 30
 * 
 * @arg Wave:eval
 * @text Wavelength
 * @desc What is the wavelength of the shockwave effect?
 * @default 160
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc What is the duration of the shockwave?
 * @default 60
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_ShockwaveCenterTargets
 * @text IMPACT: Shockwave from Target(s) Center
 * @desc Creates a shockwave from the center of the target(s).
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to start a shockwave from.
 * @default ["all targets"]
 * 
 * @arg TargetLocation:str
 * @text Target Location
 * @parent Targets2:arraystr
 * @type combo
 * @option front head
 * @option front center
 * @option front base
 * @option middle head
 * @option middle center
 * @option middle base
 * @option back head
 * @option back center
 * @option back base
 * @desc Select which part target group to start a shockwave from.
 * @default middle center
 * 
 * @arg OffsetX:eval
 * @text Offset X
 * @parent TargetLocation:str
 * @desc How much to offset the shockwave X point by.
 * Negative: left. Positive: right.
 * @default +0
 * 
 * @arg OffsetY:eval
 * @text Offset Y
 * @parent TargetLocation:str
 * @desc How much to offset the shockwave Y point by.
 * Negative: up. Positive: down.
 * @default +0
 * 
 * @arg Amp:eval
 * @text Amplitude
 * @desc What is the aplitude of the shockwave effect?
 * @default 30
 * 
 * @arg Wave:eval
 * @text Wavelength
 * @desc What is the wavelength of the shockwave effect?
 * @default 160
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc What is the duration of the shockwave?
 * @default 60
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_TimeScale
 * @text IMPACT: Time Scale
 * @desc Adjust time to go faster or slower!
 * Requires VisuMZ_3_ActSeqImpact! Created by Manu Gaming!
 * 
 * @arg Scale:eval
 * @text Scale
 * @desc Adjusts how fast/slow time goes.
 * 1.00 is normal. Lower is slower. Higher is faster.
 * @default 1.00
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_TimeStop
 * @text IMPACT: Time Stop
 * @desc Stops time for a set amount of milliseconds.
 * Requires VisuMZ_3_ActSeqImpact! Created by Manu Gaming!
 * 
 * @arg ms:eval
 * @text Milliseconds
 * @desc How many milliseconds should time stop for?
 * 1000 milliseconds = 1 second.
 * @default 1000
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_ZoomBlurPoint
 * @text IMPACT: Zoom Blur at Point
 * @desc Creates a zoom blur at the designated coordinates.
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Coordinates
 * 
 * @arg X:eval
 * @text Point: X
 * @parent Coordinates
 * @desc What x coordinate do you want to focus the zoom at?
 * You can use JavaScript code.
 * @default Graphics.width / 2
 * 
 * @arg Y:eval
 * @text Point: Y
 * @parent Coordinates
 * @desc What y coordinate do you want to focus the zoom at?
 * You can use JavaScript code.
 * @default (Graphics.height - 200) / 2
 * 
 * @arg Strength:eval
 * @text Zoom Strength
 * @desc What is the strength of the zoom effect?
 * Use a number between 0 and 1.
 * @default 0.5
 * 
 * @arg Radius:eval
 * @text Visible Radius
 * @desc How much of a radius should be visible from the center?
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc What is the duration of the zoom blur?
 * @default 60
 *
 * @arg EasingType:str
 * @text Easing Type
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * @default OutSine
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_ZoomBlurTargetCenter
 * @text IMPACT: Zoom Blur at Target(s) Center
 * @desc Creates a zoom blur at the center of targets.
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to start a zoom blur from.
 * @default ["user"]
 * 
 * @arg TargetLocation:str
 * @text Target Location
 * @parent Targets2:arraystr
 * @type combo
 * @option front head
 * @option front center
 * @option front base
 * @option middle head
 * @option middle center
 * @option middle base
 * @option back head
 * @option back center
 * @option back base
 * @desc Select which part target group to start a zoom blur from.
 * @default middle center
 * 
 * @arg OffsetX:eval
 * @text Offset X
 * @parent TargetLocation:str
 * @desc How much to offset the zoom blur X point by.
 * Negative: left. Positive: right.
 * @default +0
 * 
 * @arg OffsetY:eval
 * @text Offset Y
 * @parent TargetLocation:str
 * @desc How much to offset the zoom blur Y point by.
 * Negative: up. Positive: down.
 * @default +0
 * 
 * @arg Strength:eval
 * @text Zoom Strength
 * @desc What is the strength of the zoom effect?
 * Use a number between 0 and 1.
 * @default 0.5
 * 
 * @arg Radius:eval
 * @text Visible Radius
 * @desc How much of a radius should be visible from the center?
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc What is the duration of the zoom blur?
 * @default 60
 *
 * @arg EasingType:str
 * @text Easing Type
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * @default OutSine
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceInject
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakInject
 * @text Action Sequences - Inject
 * @desc These Action Sequences are related to injected animations.
 * Requires VisuMZ_3_ActSeqImpact!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Inject_AnimationStart
 * @text INJECT: Animation Begin
 * @desc Injects and plays a whole spritesheet animation.
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to inject the animation on.
 * @default ["user"]
 * 
 * @arg Filename:str
 * @text Filename
 * @type file
 * @dir img/sv_actors/
 * @desc Select the animation spritesheet file.
 * Located in the /img/sv_actors/ folder.
 * @default Untitled
 *
 * @arg horzCells:num
 * @text Horizontal Cells
 * @parent Filename:str
 * @type number
 * @min 1
 * @desc How many horizontal cells (or columns) are there?
 * @default 1
 *
 * @arg vertCells:num
 * @text Vertical Cells
 * @parent Filename:str
 * @type number
 * @min 1
 * @desc How many vertical cells (or rows) are there?
 * @default 1
 *
 * @arg frameDelay:num
 * @text Frame Delay
 * @parent Filename:str
 * @type number
 * @min 1
 * @desc How many frames are played inbetween cells?
 * @default 1
 *
 * @arg smooth:eval
 * @text Smooth Bitmap?
 * @parent Filename:str
 * @type boolean
 * @on Smooth
 * @off Pixelated
 * @desc Smooth the spritesheet graphic?
 * @default false
 * 
 * @arg Offset
 *
 * @arg offsetX:eval
 * @text Offset X
 * @parent Offset
 * @desc Offsets the X position of the injected animation.
 * Negative: left. Positive: right.
 * @default +0
 *
 * @arg offsetY:eval
 * @text Offset Y
 * @parent Offset
 * @desc Offsets the Y position of the injected animation.
 * Negative: up. Positive: down.
 * @default +0
 * 
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Inject_AnimationEnd
 * @text INJECT: Animation End
 * @desc Stops and ends any injected animations on target(s).
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to stop injected animation(s).
 * @default ["user"]
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Inject_AnimationPauseResume
 * @text INJECT: Animation Pause/Resume
 * @desc Pauses/resumes any injected animations on target(s).
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to pause injected animation(s).
 * @default ["user"]
 *
 * @arg pause:eval
 * @text Pause?
 * @parent Filename:str
 * @type boolean
 * @on Pause
 * @off Resume
 * @desc Pause the injected animation?
 * @default true
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Inject_WaitForInjectAni
 * @text INJECT: Wait For Injected Animation
 * @desc Waits for injected animations to complete before performing
 * next command. Requires VisuMZ_3_ActSeqImpact!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceMechanics
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakMechanics
 * @text Action Sequences - Mechanics
 * @desc These Action Sequences are related to various mechanics
 * related to the battle system.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_ActionEffect
 * @text MECH: Action Effect
 * @desc Causes the unit(s) to take damage/healing from action and
 * incurs any changes made such as buffs and states.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to receive the current action's effects.
 * @default ["all targets"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_ActiveChainInputDisable
 * @text MECH: Active Chain Input Disable
 * @desc Disables input for Active Chain Skills at this time.
 * Requires VisuMZ_3_ActiveChainSkills!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_AddBuffDebuff
 * @text MECH: Add Buff/Debuff
 * @desc Adds buff(s)/debuff(s) to unit(s). 
 * Determine which parameters are affected and their durations.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to receive the buff(s) and/or debuff(s).
 * @default ["user"]
 * 
 * @arg Buffs:arraystr
 * @text Buff Parameters
 * @type combo[]
 * @option MaxHP
 * @option MaxMP
 * @option ATK
 * @option DEF
 * @option MAT
 * @option MDF
 * @option AGI
 * @option LUK
 * @desc Select which parameter(s) to buff.
 * Insert a parameter multiple times to raise its stacks.
 * @default ["ATK"]
 *
 * @arg Debuffs:arraystr
 * @text Debuff Parameters
 * @type combo[]
 * @option MaxHP
 * @option MaxMP
 * @option ATK
 * @option DEF
 * @option MAT
 * @option MDF
 * @option AGI
 * @option LUK
 * @desc Select which parameter(s) to debuff.
 * Insert a parameter multiple times to raise its stacks.
 * @default ["DEF"]
 * 
 * @arg Turns:eval
 * @text Turns
 * @desc Number of turns to set the parameter(s) buffs to.
 * You may use JavaScript code.
 * @default 5
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_AddState
 * @text MECH: Add State
 * @desc Adds state(s) to unit(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to receive the buff(s).
 * @default ["user"]
 * 
 * @arg States:arraynum
 * @text States
 * @type state[]
 * @desc Select which state ID(s) to add to unit(s).
 * Insert multiple state ID's to add multiple at once.
 * @default ["4"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_AnalyzeWeakness
 * @text MECH: Analyze Weakness
 * @desc Reveal elemental weakness(es) from target(s).
 * Requires VisuMZ_3_WeaknessDisplay!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to reveal elemental weaknesses for.
 * @default ["all targets"]
 * 
 * @arg Reveal:eval
 * @text Reveal
 * @desc How many elemental weaknesses do you wish to reveal?
 * You may use JavaScript code.
 * @default 1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_ArmorPenetration
 * @text MECH: Armor Penetration
 * @desc Adds an extra layer of defensive penetration/reduction.
 * You may use JavaScript code for any of these.
 *
 * @arg ArmorPenetration
 * @text Armor/Magic Penetration
 * 
 * @arg ArPenRate:eval
 * @text Rate
 * @parent ArmorPenetration
 * @desc Penetrates an extra multiplier of armor by this value.
 * @default 0.00
 * 
 * @arg ArPenFlat:eval
 * @text Flat
 * @parent ArmorPenetration
 * @desc Penetrates a flat amount of armor by this value.
 * @default 0
 *
 * @arg ArmorReduction
 * @text Armor/Magic Reduction
 * 
 * @arg ArRedRate:eval
 * @text Rate
 * @parent ArmorReduction
 * @desc Reduces an extra multiplier of armor by this value.
 * @default 0.00
 * 
 * @arg ArRedFlat:eval
 * @text Flat
 * @parent ArmorReduction
 * @desc Reduces a flat amount of armor by this value.
 * @default 0
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_AtbGauge
 * @text MECH: ATB Gauge
 * @desc Alters the ATB/TPB Gauges.
 * Requires VisuMZ_2_BattleSystemATB!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to alter the ATB/TPB Gauges for.
 * @default ["all targets"]
 *
 * @arg Charging
 * 
 * @arg ChargeRate:eval
 * @text Charge Rate
 * @parent Charging
 * @desc Changes made to the ATB Gauge if it is currently charging.
 * @default -0.00
 * 
 * @arg Casting
 * 
 * @arg CastRate:eval
 * @text Cast Rate
 * @parent Casting
 * @desc Changes made to the ATB Gauge if it is currently casting.
 * @default -0.00
 * 
 * @arg Interrupt:eval
 * @text Interrupt?
 * @parent Casting
 * @type boolean
 * @on Interrupt
 * @off Don't Interrupt
 * @desc Interrupt the ATB Gauge if it is currently casting?
 * @default false
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_BoostPointsChange
 * @text MECH: Boost Points Change
 * @desc Changes Boost Points for target(s).
 * Requires VisuMZ_3_BoostAction!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to alter the Boost Points for.
 * @default ["user"]
 * 
 * @arg BoostPoints:eval
 * @text Alter Boost Points By
 * @desc Alters the unit(s) Boost Points.
 * Positive for gaining points. Negative for losing points.
 * @default +1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_BoostPointsStoreData
 * @text MECH: Boost Store Data
 * @desc Stores the number of Boosts used this action inside a variable.
 * Requires VisuMZ_3_BoostAction!
 * 
 * @arg VariableID:num
 * @text Variable ID
 * @type variable
 * @desc Which variable do you want to store the data inside?
 * @default 1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_BreakShieldChange
 * @text MECH: Break Shield Change
 * @desc Changes Break Shields for target(s) if not Break Stunned.
 * Requires VisuMZ_4_BreakShields!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to alter the Break Shields for.
 * @default ["all targets"]
 * 
 * @arg BreakShields:eval
 * @text Alter Break Shields By
 * @desc Alters the unit(s) Break Shields.
 * Positive for gaining shields. Negative for losing shields.
 * @default -1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_BreakShieldReset
 * @text MECH: Break Shield Reset
 * @desc Resets Break Shields for target(s) if not Break Stunned.
 * Requires VisuMZ_4_BreakShields!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to reset the Break Shields for.
 * @default ["all targets"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_BtbGain
 * @text MECH: BTB Brave Points
 * @desc Alters the target(s) Brave Points to an exact value.
 * Requires VisuMZ_2_BattleSystemBTB!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to alter the ATB/TPB Gauges for.
 * @default ["all targets"]
 * 
 * @arg BravePoints:eval
 * @text Alter Brave Points By
 * @desc Alters the target(s) Brave Points.
 * Positive for gaining BP. Negative for losing BP.
 * @default +1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_Collapse
 * @text MECH: Collapse
 * @desc Causes the unit(s) to perform its collapse animation
 * if the unit(s) has died.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to process a death collapse.
 * @default ["all targets"]
 * 
 * @arg ForceDeath:eval
 * @text Force Death
 * @type boolean
 * @on On
 * @off Off
 * @desc Force death even if the unit has not reached 0 HP?
 * This will remove immortality.
 * @default false
 * 
 * @arg WaitForEffect:eval
 * @text Wait For Effect?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for the collapse effect to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_CtbOrder
 * @text MECH: CTB Order
 * @desc Alters the CTB Turn Order.
 * Requires VisuMZ_2_BattleSystemCTB!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to alter the CTB Turn Order for.
 * @default ["all targets"]
 *
 * @arg ChangeOrderBy:eval
 * @text Change Order By
 * @parent Charging
 * @desc Changes turn order for target(s) by this amount.
 * Positive increases wait. Negative decreases wait.
 * @default +1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_CtbSpeed
 * @text MECH: CTB Speed
 * @desc Alters the CTB Speed.
 * Requires VisuMZ_2_BattleSystemCTB!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to alter the CTB Speed for.
 * @default ["all targets"]
 *
 * @arg ChargeRate:eval
 * @text Charge Rate
 * @parent Charging
 * @desc Changes made to the CTB Speed if it is currently charging.
 * @default -0.00
 * 
 * @arg CastRate:eval
 * @text Cast Rate
 * @parent Casting
 * @desc Changes made to the CTB Speed if it is currently casting.
 * @default -0.00
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_CustomDmgFormula
 * @text MECH: Custom Damage Formula
 * @desc Changes the current action's damage formula to custom.
 * This will assume the MANUAL damage style.
 * 
 * @arg Formula:str
 * @text Formula
 * @desc Changes the current action's damage formula to custom.
 * Use 'default' to revert the damage formula.
 * @default default
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_DamagePopup
 * @text MECH: Damage Popup
 * @desc Causes the unit(s) to display the current state of
 * damage received or healed.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to prompt a damage popup.
 * @default ["all targets"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_DeathBreak
 * @text MECH: Dead Label Jump
 * @desc If the active battler is dead, jump to a specific label in the common event.
 * 
 * @arg JumpToLabel:str
 * @text Jump To Label
 * @desc If the active battler is dead, jump to this specific label in the common event.
 * @default Untitled
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_EmulateAttackEffect
 * @text MECH: Emulate Attack Effect
 * @desc Emulate an "Action Effect" but using a the user's
 * attack skill instead of the current action.
 * 
 * @arg Users:arraystr
 * @text User(s)
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to perform the action's effects.
 * @default ["user"]
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to receive the current action's effects.
 * @default ["all targets"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_EmulateGuardEffect
 * @text MECH: Emulate Guard Effect
 * @desc Emulate an "Action Effect" but using a the user's
 * guard skill instead of the current action.
 * 
 * @arg Users:arraystr
 * @text User(s)
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to perform the action's effects.
 * @default ["user"]
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to receive the current action's effects.
 * @default ["all targets"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_EmulateItemEffect
 * @text MECH: Emulate Item Effect
 * @desc Emulate an "Action Effect" but using a specific item
 * instead of the current action.
 * 
 * @arg ItemID:eval
 * @text Item ID
 * @type item
 * @desc Which item ID will be emulated?
 * @default 7
 * 
 * @arg Users:arraystr
 * @text User(s)
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to perform the action's effects.
 * @default ["user"]
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to receive the current action's effects.
 * @default ["all targets"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_EmulateSkillCost
 * @text MECH: Emulate Skill Cost
 * @desc Pick a skill for target(s) to emulate paying the cost of.
 * Includes cooldowns and limited uses.
 * 
 * @arg SkillID:eval
 * @text Skill ID
 * @type skill
 * @desc Which skill ID will have its cost paid for?
 * Use 0 for current action's skill.
 * @default 0
 * 
 * @arg Users:arraystr
 * @text User(s)
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to perform the action's effects.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_EmulateSkillEffect
 * @text MECH: Emulate Skill Effect
 * @desc Emulate an "Action Effect" but using a specific skill
 * instead of the current action.
 * 
 * @arg SkillID:eval
 * @text Skill ID
 * @type skill
 * @desc Which skill ID will be emulated?
 * @default 99
 * 
 * @arg Users:arraystr
 * @text User(s)
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to perform the action's effects.
 * @default ["user"]
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to receive the current action's effects.
 * @default ["all targets"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_EnemyEscape
 * @text MECH: Enemy Escape
 * @desc Causes the enemy unit(s) to escape.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to escape.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_EtbAction
 * @text MECH: ETB Energy Count
 * @desc Alters the subject team's available Energy Count.
 * Requires VisuMZ_2_BattleSystemETB!
 * 
 * @arg ActionCount:eval
 * @text Energy Count
 * @desc Alters the subject team's available Energy Count.
 * Positive for gaining energy. Negative for losing energy.
 * @default +1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_FtbAction
 * @text MECH: FTB Action Count
 * @desc Alters the subject team's available Action Count.
 * Requires VisuMZ_2_BattleSystemFTB!
 * 
 * @arg ActionCount:eval
 * @text Action Count
 * @desc Alters the subject team's available Action Count.
 * Positive for gaining actions. Negative for losing actions.
 * @default +1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_HpMpTp
 * @text MECH: HP, MP, TP
 * @desc Alters the HP, MP, and TP values for unit(s).
 * Positive values for healing. Negative values for damage.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to receive the current action's effects.
 * @default ["user"]
 *
 * @arg HP
 * 
 * @arg HP_Rate:eval
 * @text HP Rate
 * @parent HP
 * @desc Changes made to HP based on rate.
 * Positive values for healing. Negative values for damage.
 * @default +0.00
 * 
 * @arg HP_Flat:eval
 * @text HP Flat
 * @parent HP
 * @desc Flat changes made to HP.
 * Positive values for healing. Negative values for damage.
 * @default +0
 * 
 * @arg MP
 * 
 * @arg MP_Rate:eval
 * @text MP Rate
 * @parent MP
 * @desc Changes made to MP based on rate.
 * Positive values for healing. Negative values for damage.
 * @default +0.00
 * 
 * @arg MP_Flat:eval
 * @text MP Flat
 * @parent MP
 * @desc Flat changes made to MP.
 * Positive values for healing. Negative values for damage.
 * @default +0
 *
 * @arg TP
 * 
 * @arg TP_Rate:eval
 * @text TP Rate
 * @parent TP
 * @desc Changes made to TP based on rate.
 * Positive values for healing. Negative values for damage.
 * @default +0.00
 * 
 * @arg TP_Flat:eval
 * @text TP Flat
 * @parent TP
 * @desc Flat changes made to TP.
 * Positive values for healing. Negative values for damage.
 * @default +0
 * 
 * @arg ShowPopup:eval
 * @text Damage Popup?
 * @type boolean
 * @on On
 * @off Off
 * @desc Display a damage popup after?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_Immortal
 * @text MECH: Immortal
 * @desc Changes the immortal flag of targets. If immortal flag is
 * removed and a unit would die, collapse that unit.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Alter the immortal flag of these groups. If immortal flag
 * is removed and a unit would die, collapse that unit.
 * @default ["user","all targets"]
 * 
 * @arg Immortal:eval
 * @text Immortal
 * @type boolean
 * @on On
 * @off Off
 * @desc Turn immortal flag for unit(s) on/off?
 * @default false
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_Multipliers
 * @text MECH: Multipliers
 * @desc Changes the multipliers for the current action.
 * You may use JavaScript code for any of these.
 *
 * @arg CriticalHit
 * @text Critical Hit%
 * 
 * @arg CriticalHitRate:eval
 * @text Rate
 * @parent CriticalHit
 * @desc Affects chance to land a critical hit by this multiplier.
 * @default 1.00
 * 
 * @arg CriticalHitFlat:eval
 * @text Flat
 * @parent CriticalHit
 * @desc Affects chance to land a critical hit by this flat bonus.
 * @default +0.00
 *
 * @arg CriticalDmg
 * @text Critical Damage
 * 
 * @arg CriticalDmgRate:eval
 * @text Rate
 * @parent CriticalDmg
 * @desc Affects critical damage by this multiplier.
 * @default 1.00
 * 
 * @arg CriticalDmgFlat:eval
 * @text Flat
 * @parent CriticalDmg
 * @desc Affects critical damage by this flat bonus.
 * @default +0.00
 *
 * @arg Damage
 * @text Damage/Healing
 * 
 * @arg DamageRate:eval
 * @text Rate
 * @parent Damage
 * @desc Sets the damage/healing multiplier for current action.
 * @default 1.00
 * 
 * @arg DamageFlat:eval
 * @text Flat
 * @parent Damage
 * @desc Sets the damage/healing bonus for current action.
 * @default +0.00
 *
 * @arg HitRate
 * @text Hit Rate
 * 
 * @arg HitRate:eval
 * @text Rate
 * @parent HitRate
 * @desc Affects chance to connect attack by this multiplier.
 * @default 1.00
 * 
 * @arg HitFlat:eval
 * @text Flat
 * @parent HitRate
 * @desc Affects chance to connect attack by this flat bonus.
 * @default +0.00
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_OnceParallel
 * @text MECH: Once Parallel
 * @desc Plays a Common Event parallel to the battle event once
 * without repeating itself when done.
 *
 * @arg CommonEventID:num
 * @text Common Event ID
 * @type common_event
 * @desc The ID of the parallel Common Event to play.
 * Does NOT repeat itself when finished.
 * @default 1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_OtbOrder
 * @text MECH: OTB Order
 * @desc Alters the OTB Turn Order. Best used with single targets.
 * Requires VisuMZ_2_BattleSystemOTB!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to alter the OTB Turn Order for.
 * @default ["all targets"]
 *
 * @arg CurrentTurn:eval
 * @text Current Turn By
 * @parent Charging
 * @desc Changes turn order for target(s) by this amount.
 * Positive increases wait. Negative decreases wait.
 * @default +0
 *
 * @arg NextTurn:eval
 * @text Next Turn By
 * @parent Charging
 * @desc Changes turn order for target(s) by this amount.
 * Positive increases wait. Negative decreases wait.
 * @default +1
 *
 * @arg FollowTurn:eval
 * @text Follow Turn By
 * @parent Charging
 * @desc Changes turn order for target(s) by this amount.
 * Positive increases wait. Negative decreases wait.
 * @default +0
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_PtbAlterCost
 * @text MECH: PTB Alter Cost
 * @desc Alters the action's cost settings.
 * Requires VisuMZ_2_BattleSystemPTB!
 *
 * @arg Override:eval
 * @text Override?
 * @type boolean
 * @on Override Permanent
 * @off Require Temporary
 * @desc Overrides any 'permanent' settings for Changeability?
 * @default false
 *
 * @arg alterChange:str
 * @text Alter Changeability
 * @type select
 * @option Unchanged - Cost type is unchanged after this effect
 * @value unchanged
 * @option Permanent - Cost type can no longer be changed after
 * @value permanent
 * @option Temporary - Cost type can still be changed after
 * @value temporary
 * @desc Allow the cost type and value to be changeable?
 * @default unchanged
 *
 * @arg alterType:str
 * @text Alter Cost Type
 * @type select
 * @option Unchanged - No changes are made
 * @value unchanged
 * @option Consume - Removes half, otherwise consumes full
 * @value consume
 * @option Convert - Converts full => half, otherwise consumes half
 * @value convert
 * @option Compress - Consumes half, otherwise converts full => half
 * @value compress
 * @desc Change the cost type to this scenario.
 * Use 'Unchanged' for no changes.
 * @default convert
 *
 * @arg alterCost:eval
 * @text Alter Cost Value
 * @desc What is the default action cost for this scenario?
 * @default +0
 *
 * @arg alterPriority:eval
 * @text Priority
 * @desc What is this scenario's priority? Scenario outcomes with
 * equal or lower priorities cannot override types and costs.
 * @default 50
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_PtbConvert
 * @text MECH: PTB Conversion
 * @desc Converts full actions into half actions.
 * Requires VisuMZ_2_BattleSystemPTB!
 * 
 * @arg ConvertCount:eval
 * @text Conversion Count
 * @desc Converts full actions into half actions.
 * If not enough, consume half actions.
 * @default 1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_PtbFullHalfAction
 * @text MECH: PTB Full/Half Action(s)
 * @desc Alters the subject team's available Full/Half Actions.
 * Requires VisuMZ_2_BattleSystemPTB!
 * 
 * @arg FullActions:eval
 * @text Full Actions
 * @desc Alters the subject team's available Full Actions.
 * Positive for gaining. Negative for losing.
 * @default +0
 * 
 * @arg HalfActions:eval
 * @text Half Actions
 * @desc Alters the subject team's available Half Actions.
 * Positive for gaining. Negative for losing.
 * @default +0
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_RemoveBuffDebuff
 * @text MECH: Remove Buff/Debuff
 * @desc Removes buff(s)/debuff(s) from unit(s). 
 * Determine which parameters are removed.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to have the buff(s) and/or debuff(s) removed.
 * @default ["user"]
 * 
 * @arg Buffs:arraystr
 * @text Buff Parameters
 * @type combo[]
 * @option MaxHP
 * @option MaxMP
 * @option ATK
 * @option DEF
 * @option MAT
 * @option MDF
 * @option AGI
 * @option LUK
 * @desc Select which buffed parameter(s) to remove.
 * @default ["MaxHP","MaxMP","ATK","DEF","MAT","MDF","AGI","LUK"]
 *
 * @arg Debuffs:arraystr
 * @text Debuff Parameters
 * @type combo[]
 * @option MaxHP
 * @option MaxMP
 * @option ATK
 * @option DEF
 * @option MAT
 * @option MDF
 * @option AGI
 * @option LUK
 * @desc Select which debuffed parameter(s) to remove.
 * @default ["MaxHP","MaxMP","ATK","DEF","MAT","MDF","AGI","LUK"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_RemoveState
 * @text MECH: Remove State
 * @desc Remove state(s) from unit(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to have states removed from.
 * @default ["user"]
 * 
 * @arg States:arraynum
 * @text States
 * @type state[]
 * @desc Select which state ID(s) to remove from unit(s).
 * Insert multiple state ID's to remove multiple at once.
 * @default ["4"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_StateTurnsChangeBy
 * @text MECH: State Turns Change By
 * @desc Changes target(s) state turns by an amount.
 * Requires VisuMZ_1_SkillsStatesCore!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to affect state turns for.
 * @default ["all targets"]
 *
 * @arg StateID:num
 * @text State ID
 * @type state
 * @desc What is the ID of the state you wish to change turns for?
 * Only works on states that can have turns.
 * @default 5
 *
 * @arg Turns:eval
 * @text Change Turns By
 * @desc How many turns should the state be changed to?
 * You may use JavaScript code.
 * @default +1
 *
 * @arg AutoAddState:eval
 * @text Auto-Add State?
 * @type boolean
 * @on Auto-Add
 * @off Don't Add
 * @desc Automatically adds state if actor(s) does not have it applied?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_StateTurnsChangeTo
 * @text MECH: State Turns Change To
 * @desc Changes target(s) state turns to a specific value.
 * Requires VisuMZ_1_SkillsStatesCore!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to affect state turns for.
 * @default ["all targets"]
 *
 * @arg StateID:num
 * @text State ID
 * @type state
 * @desc What is the ID of the state you wish to change turns for?
 * Only works on states that can have turns.
 * @default 5
 *
 * @arg Turns:eval
 * @text Change Turns To
 * @desc How many turns should the state be changed to?
 * You may use JavaScript code.
 * @default 10
 *
 * @arg AutoAddState:eval
 * @text Auto-Add State?
 * @type boolean
 * @on Auto-Add
 * @off Don't Add
 * @desc Automatically adds state if target(s) does not have it applied?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_StbExploit
 * @text MECH: STB Exploit Effect
 * @desc Utilize the STB Exploitation mechanics!
 * Requires VisuMZ_2_BattleSystemSTB!
 * 
 * @arg Exploited:eval
 * @text Target(s) Exploited?
 * @type boolean
 * @on Exploit
 * @off Don't
 * @desc Exploit the below targets?
 * @default true
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to become exploited.
 * @default ["all targets"]
 * 
 * @arg ForceExploited:eval
 * @text Force Exploitation
 * @type boolean
 * @on Force
 * @off Don't
 * @desc Force the exploited status?
 * @default false
 * 
 * @arg Exploiter:eval
 * @text User Exploiter?
 * @type boolean
 * @on Exploit
 * @off Don't
 * @desc Allow the user to become the exploiter?
 * @default true
 * 
 * @arg ForceExploited:eval
 * @text Force Exploitation
 * @type boolean
 * @on Force
 * @off Don't
 * @desc Force the exploiter status?
 * @default false
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_StbExtraAction
 * @text MECH: STB Extra Action
 * @desc Adds an extra action for the currently active battler.
 * Requires VisuMZ_2_BattleSystemSTB!
 * 
 * @arg Actions:eval
 * @text Extra Actions
 * @parent Charging
 * @desc How many extra actions should the active battler gain?
 * You may use JavaScript code.
 * @default 1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_StbRemoveExcessActions
 * @text MECH: STB Remove Excess Actions
 * @desc Removes excess actions from the active battler.
 * Requires VisuMZ_2_BattleSystemSTB!
 * 
 * @arg Actions:eval
 * @text Remove Actions
 * @parent Charging
 * @desc How many actions to remove from the active battler?
 * You may use JavaScript code.
 * @default 99
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_SwapWeapon
 * @text MECH: Swap Weapon
 * @desc Causes the unit(s) to swap their weapon for another.
 * Requires VisuMZ_2_WeaponSwapSystem!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to swap weapons for.
 * @default ["user"]
 * 
 * @arg WeaponTypeID:eval
 * @text Weapon Type ID
 * @desc Which weapon type to swap to?
 * This is NOT the weapon's ID. It's the weapon TYPE.
 * @default 1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_TextPopup
 * @text MECH: Text Popup
 * @desc Causes the unit(s) to display a text popup.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to prompt a text popup.
 * @default ["target"]
 * 
 * @arg Text:str
 * @text Text
 * @desc What text do you wish to display?
 * @default Text
 * 
 * @arg TextColor:str
 * @text Text Color
 * @parent Text:str
 * @desc Use #rrggbb for custom colors or regular numbers
 * for text colors from the Window Skin.
 * @default #ffffff
 *
 * @arg FlashColor:eval
 * @text Flash Color
 * @parent Popups
 * @desc Adjust the popup's flash color.
 * Format: [red, green, blue, alpha]
 * @default [255, 0, 0, 160]
 * 
 * @arg FlashDuration:num
 * @text Flash Duration
 * @parent FlashColor:eval
 * @type number
 * @desc What is the frame duration of the flash effect?
 * @default 60
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_VariablePopup
 * @text MECH: Variable Popup
 * @desc Causes the unit(s) to display a popup using the data
 * stored inside a variable.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to prompt a text popup.
 * @default ["target"]
 * 
 * @arg Variable:num
 * @text Variable ID
 * @type variable
 * @desc Get data from which variable to display as a popup?
 * @default 1
 * 
 * @arg DigitGrouping:eval
 * @text Digit Grouping
 * @parent Variable:num
 * @type boolean
 * @on Group Digits
 * @off Don't Group
 * @desc Use digit grouping to separate numbers?
 * Requires VisuMZ_0_CoreEngine!
 * @default true
 * 
 * @arg TextColor:str
 * @text Text Color
 * @parent Variable:num
 * @desc Use #rrggbb for custom colors or regular numbers
 * for text colors from the Window Skin.
 * @default #ffffff
 *
 * @arg FlashColor:eval
 * @text Flash Color
 * @parent Popups
 * @desc Adjust the popup's flash color.
 * Format: [red, green, blue, alpha]
 * @default [0, 0, 0, 0]
 * 
 * @arg FlashDuration:num
 * @text Flash Duration
 * @parent FlashColor:eval
 * @type number
 * @desc What is the frame duration of the flash effect?
 * @default 60
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_WaitForEffect
 * @text MECH: Wait For Effect
 * @desc Waits for the effects to complete before performing next command.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceMotion
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakMotion
 * @text Action Sequences - Motion
 * @desc These Action Sequences allow you the ability to control
 * the motions of sideview sprites.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Motion_ClearFreezeFrame
 * @text MOTION: Clear Freeze Frame
 * @desc Clears any freeze frames from the unit(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to clear freeze frames for.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Motion_FreezeMotionFrame
 * @text MOTION: Freeze Motion Frame
 * @desc Forces a freeze frame instantly at the selected motion.
 * Automatically clears with a new motion.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to freeze motions for.
 * @default ["user"]
 *
 * @arg MotionType:str
 * @text Motion Type
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option attack
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Freeze this motion for the unit(s).
 * @default attack
 * 
 * @arg Frame:num
 * @text Frame Index
 * @desc Which frame do you want to freeze the motion on?
 * Frame index values start at 0.
 * @default 2
 *
 * @arg ShowWeapon:eval
 * @text Show Weapon?
 * @type combo
 * @type boolean
 * @on Show
 * @off Hide
 * @desc If using 'attack', 'thrust', 'swing', or 'missile',
 * display the weapon sprite?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Motion_MotionType
 * @text MOTION: Motion Type
 * @desc Causes the unit(s) to play the selected motion.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to perform a motion.
 * @default ["user"]
 *
 * @arg MotionType:str
 * @text Motion Type
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option attack
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Play this motion for the unit(s).
 * @default attack
 *
 * @arg ShowWeapon:eval
 * @text Show Weapon?
 * @type combo
 * @type boolean
 * @on Show
 * @off Hide
 * @desc If using 'attack', 'thrust', 'swing', or 'missile',
 * display the weapon sprite?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Motion_PerformAction
 * @text MOTION: Perform Action
 * @desc Causes the unit(s) to play the proper motion based
 * on the current action.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to perform a motion.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Motion_RefreshMotion
 * @text MOTION: Refresh Motion
 * @desc Cancels any set motions unit(s) has to do and use
 * their most natural motion at the moment.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to refresh their motion state.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Motion_WaitMotionFrame
 * @text MOTION: Wait By Motion Frame
 * @desc Creates a wait equal to the number of motion frames passing.
 * Time is based on Plugin Parameters => Actors => Motion Speed.
 *
 * @arg MotionFrameWait:num
 * @text Motion Frames to Wait?
 * @type number
 * @min 1
 * @desc Each "frame" is equal to the value found in
 * Plugin Parameters => Actors => Motion Speed
 * @default 1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceMovement
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakMovement
 * @text Action Sequences - Movement
 * @desc These Action Sequences allow you the ability to control
 * the sprites of actors and enemies in battle.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_BattleStep
 * @text MOVE: Battle Step
 * @desc Causes the unit(s) to move forward past their home position
 * to prepare for action.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to move.
 * @default ["user"]
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for movement to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_HomeMoveBy
 * @text MOVE: Change Home By Distance
 * @desc Change unit(s)'s home position by a distance from their
 * current home position(s). Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change home position(s) for.
 * @default ["user"]
 *
 * @arg DistanceAdjust:str
 * @text Distance Adjustment
 * @type select
 * @option Normal - No adjustments made
 * @value none
 * @option Horizontal - Actors adjust left, Enemies adjust right
 * @value horz
 * @option Vertical - Actors adjust Up, Enemies adjust down
 * @value vert
 * @option Both - Applies both Horizontal and Vertical
 * @value horz + vert
 * @desc Makes adjustments to distance values to determine
 * which direction to change by.
 * @default horz
 * 
 * @arg DistanceX:eval
 * @text Distance: X
 * @parent DistanceAdjust:str
 * @desc Horizontal distance to change home by.
 * You may use JavaScript code.
 * @default 48
 * 
 * @arg DistanceY:eval
 * @text Distance: Y
 * @parent DistanceAdjust:str
 * @desc Vertical distance to change home by.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for total change amount.
 * @default 12
 * 
 * @arg FaceDirection:eval
 * @text Face Destination?
 * @type boolean
 * @on Turn
 * @off Don't
 * @desc Turn and face the destination?
 * @default true
 *
 * @arg EasingType:str
 * @text Movement Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 *
 * @arg MotionType:str
 * @text Movement Motion
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Play this motion for the unit(s).
 * @default walk
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for movement to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_HomeMoveToJsPoint
 * @text MOVE: Change Home To JS Coordinates
 * @desc Change home position(s) to specified JS Coordinates.
 * Sideview-only! Uses JavaScript!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change home position(s) for.
 * @default ["user"]
 *
 * @arg DestinationJS:func
 * @text JS: Coordinates
 * @type note
 * @desc Code used to determine the coordinates for the
 * target(s)'s new home position.
 * @default "// Declare Variables\nconst target = arguments[0];\nlet goalX = 0;\nlet goalY = 0;\n\n// Calculations\ngoalX = Graphics.width / 2;\ngoalY = Graphics.height / 2;\n\n// Return Data\nreturn new Point(goalX, goalY);"
 *
 * @arg OffsetAdjust:str
 * @text Offset Adjustment
 * @parent Destination:str
 * @type select
 * @option Normal - No adjustments made
 * @value none
 * @option Horizontal - Actors adjust left, Enemies adjust right
 * @value horz
 * @option Vertical - Actors adjust Up, Enemies adjust down
 * @value vert
 * @option Both - Applies both Horizontal and Vertical
 * @value horz + vert
 * @desc Makes adjustments to offset values to determine
 * which direction to adjust the destination by.
 * @default horz
 * 
 * @arg OffsetX:eval
 * @text Offset: X
 * @parent OffsetAdjust:str
 * @desc Horizontal offset to change home by.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg OffsetY:eval
 * @text Offset: Y
 * @parent OffsetAdjust:str
 * @desc Vertical offset to change home by.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for total change amount.
 * @default 12
 * 
 * @arg FaceDirection:eval
 * @text Face Destination?
 * @type boolean
 * @on Turn
 * @off Don't
 * @desc Turn and face the destination?
 * @default true
 *
 * @arg EasingType:str
 * @text Movement Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 *
 * @arg MotionType:str
 * @text Movement Motion
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Play this motion for the unit(s).
 * @default walk
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for movement to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_HomeMoveToPoint
 * @text MOVE: Change Home To Point
 * @desc Change home position(s) to a target point on the screen.
 * Sideview-only! Points based off Graphics.boxWidth/Height.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change home position(s) for.
 * @default ["user"]
 * 
 * @arg Destination:str
 * @text Destination Point
 * @type combo
 * @option center
 * @option point x, y
 * @desc Select which point to face.
 * Replace 'x' and 'y' with coordinates
 * @default center
 *
 * @arg OffsetAdjust:str
 * @text Offset Adjustment
 * @parent Destination:str
 * @type select
 * @option Normal - No adjustments made
 * @value none
 * @option Horizontal - Actors adjust left, Enemies adjust right
 * @value horz
 * @option Vertical - Actors adjust Up, Enemies adjust down
 * @value vert
 * @option Both - Applies both Horizontal and Vertical
 * @value horz + vert
 * @desc Makes adjustments to offset values to determine
 * which direction to adjust the destination by.
 * @default horz
 * 
 * @arg OffsetX:eval
 * @text Offset: X
 * @parent OffsetAdjust:str
 * @desc Horizontal offset to change home by.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg OffsetY:eval
 * @text Offset: Y
 * @parent OffsetAdjust:str
 * @desc Vertical offset to change home by.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for total change amount.
 * @default 12
 * 
 * @arg FaceDirection:eval
 * @text Face Destination?
 * @type boolean
 * @on Turn
 * @off Don't
 * @desc Turn and face the destination?
 * @default true
 *
 * @arg EasingType:str
 * @text Movement Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 *
 * @arg MotionType:str
 * @text Movement Motion
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Play this motion for the unit(s).
 * @default walk
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for movement to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_HomeMoveToTarget
 * @text MOVE: Change Home To Target(s)
 * @desc Moves unit(s) to another unit(s) on the battle field.
 * Sideview-only!
 * 
 * @arg Targets1:arraystr
 * @text Targets (Moving)
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change home position(s) for.
 * @default ["user"]
 * 
 * @arg Targets2:arraystr
 * @text Targets (Destination)
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change home position to.
 * @default ["all targets"]
 * 
 * @arg TargetLocation:str
 * @text Target Location
 * @parent Targets2:arraystr
 * @type combo
 * @option front head
 * @option front center
 * @option front base
 * @option middle head
 * @option middle center
 * @option middle base
 * @option back head
 * @option back center
 * @option back base
 * @desc Select which part target group to change home position to.
 * @default front base
 * 
 * @arg MeleeDistance:eval
 * @text Melee Distance
 * @parent TargetLocation:str
 * @desc The melee distance away from the target location
 * in addition to the battler's width.
 * @default 24
 *
 * @arg OffsetAdjust:str
 * @text Offset Adjustment
 * @parent Targets2:arraystr
 * @type select
 * @option Normal - No adjustments made
 * @value none
 * @option Horizontal - Actors adjust left, Enemies adjust right
 * @value horz
 * @option Vertical - Actors adjust Up, Enemies adjust down
 * @value vert
 * @option Both - Applies both Horizontal and Vertical
 * @value horz + vert
 * @desc Makes adjustments to offset values to determine
 * which direction to adjust the destination by.
 * @default horz
 * 
 * @arg OffsetX:eval
 * @text Offset: X
 * @parent OffsetAdjust:str
 * @desc Horizontal offset to change home by.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg OffsetY:eval
 * @text Offset: Y
 * @parent OffsetAdjust:str
 * @desc Vertical offset to change home by.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for total change amount.
 * @default 12
 * 
 * @arg FaceDirection:eval
 * @text Face Destination?
 * @type boolean
 * @on Turn
 * @off Don't
 * @desc Turn and face the destination?
 * @default true
 *
 * @arg EasingType:str
 * @text Movement Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 *
 * @arg MotionType:str
 * @text Movement Motion
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Play this motion for the unit(s).
 * @default walk
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for movement to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_FaceDirection
 * @text MOVE: Face Direction
 * @desc Causes the unit(s) to face forward or backward.
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change direction.
 * @default ["user"]
 * 
 * @arg Direction:str
 * @text Direction
 * @type combo
 * @option forward
 * @option backward
 * @option random
 * @desc Select which direction to face.
 * @default forward
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_FaceJsPoint
 * @text MOVE: Face JS Coordinates
 * @desc Causes the unit(s) to face specified JS Coordinates.
 * Sideview-only! Uses JavaScript!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change direction.
 * @default ["user"]
 *
 * @arg PointJS:func
 * @text JS: Coordinates
 * @type note
 * @desc Code used to determine the coordinates for the
 * target(s) to face towards.
 * @default "// Declare Variables\nconst target = arguments[0];\nlet goalX = 0;\nlet goalY = 0;\n\n// Calculations\ngoalX = Graphics.width / 2;\ngoalY = Graphics.height / 2;\n\n// Return Data\nreturn new Point(goalX, goalY);"
 * 
 * @arg FaceAway:eval
 * @text Face Away From?
 * @type boolean
 * @on Turn Away
 * @off Face Directly
 * @desc Face away from the point instead?
 * @default false
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_FacePoint
 * @text MOVE: Face Point
 * @desc Causes the unit(s) to face a point on the screen.
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change direction.
 * @default ["user"]
 * 
 * @arg Point:str
 * @text Point
 * @type combo
 * @option home
 * @option center
 * @option point x, y
 * @desc Select which point to face.
 * Replace 'x' and 'y' with coordinates
 * @default home
 * 
 * @arg FaceAway:eval
 * @text Face Away From?
 * @type boolean
 * @on Turn Away
 * @off Face Directly
 * @desc Face away from the point instead?
 * @default false
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_FaceTarget
 * @text MOVE: Face Target(s)
 * @desc Causes the unit(s) to face other targets on the screen.
 * Sideview-only!
 * 
 * @arg Targets1:arraystr
 * @text Targets (facing)
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change direction.
 * @default ["user"]
 * 
 * @arg Targets2:arraystr
 * @text Targets (destination)
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) for the turning unit(s) to face.
 * @default ["current target"]
 * 
 * @arg FaceAway:eval
 * @text Face Away From?
 * @type boolean
 * @on Turn Away
 * @off Face Directly
 * @desc Face away from the unit(s) instead?
 * @default false
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_Float
 * @text MOVE: Float
 * @desc Causes the unit(s) to float above the ground.
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to make float.
 * @default ["user"]
 * 
 * @arg Height:eval
 * @text Desired Height
 * @desc Vertical distance to float upward.
 * You may use JavaScript code.
 * @default 100
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for total float amount.
 * @default 12
 *
 * @arg EasingType:str
 * @text Float Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 * 
 * @arg WaitForFloat:eval
 * @text Wait For Float?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for floating to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_HomeReset
 * @text MOVE: Home Reset
 * @desc Causes the unit(s) to move back to their home position(s)
 * and face back to their original direction(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to move.
 * @default ["alive battlers"]
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for movement to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_Jump
 * @text MOVE: Jump
 * @desc Causes the unit(s) to jump into the air.
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to make jump.
 * @default ["user"]
 * 
 * @arg Height:eval
 * @text Desired Height
 * @desc Max jump height to go above the ground
 * You may use JavaScript code.
 * @default 100
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for total jump amount.
 * @default 12
 * 
 * @arg WaitForJump:eval
 * @text Wait For Jump?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for jumping to complete before performing next command?
 * @default false
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_MoveBy
 * @text MOVE: Move Distance
 * @desc Moves unit(s) by a distance from their current position(s).
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to move.
 * @default ["user"]
 *
 * @arg DistanceAdjust:str
 * @text Distance Adjustment
 * @type select
 * @option Normal - No adjustments made
 * @value none
 * @option Horizontal - Actors adjust left, Enemies adjust right
 * @value horz
 * @option Vertical - Actors adjust Up, Enemies adjust down
 * @value vert
 * @option Both - Applies both Horizontal and Vertical
 * @value horz + vert
 * @desc Makes adjustments to distance values to determine
 * which direction to move unit(s).
 * @default horz
 * 
 * @arg DistanceX:eval
 * @text Distance: X
 * @parent DistanceAdjust:str
 * @desc Horizontal distance to move.
 * You may use JavaScript code.
 * @default 48
 * 
 * @arg DistanceY:eval
 * @text Distance: Y
 * @parent DistanceAdjust:str
 * @desc Vertical distance to move.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for total movement amount.
 * @default 12
 * 
 * @arg FaceDirection:eval
 * @text Face Destination?
 * @type boolean
 * @on Turn
 * @off Don't
 * @desc Turn and face the destination?
 * @default true
 *
 * @arg EasingType:str
 * @text Movement Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 *
 * @arg MotionType:str
 * @text Movement Motion
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Play this motion for the unit(s).
 * @default walk
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for movement to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_MoveToJsPoint
 * @text MOVE: Move To JS Coordinates
 * @desc Moves unit(s) to specified JS Coordinates.
 * Sideview-only! Uses JavaScript!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to move.
 * @default ["user"]
 *
 * @arg DestinationJS:func
 * @text JS: Coordinates
 * @type note
 * @desc Code used to determine the coordinates for the
 * target(s) to move to.
 * @default "// Declare Variables\nconst target = arguments[0];\nlet goalX = 0;\nlet goalY = 0;\n\n// Calculations\ngoalX = Graphics.width / 2;\ngoalY = Graphics.height / 2;\n\n// Return Data\nreturn new Point(goalX, goalY);"
 *
 * @arg OffsetAdjust:str
 * @text Offset Adjustment
 * @parent Destination:str
 * @type select
 * @option Normal - No adjustments made
 * @value none
 * @option Horizontal - Actors adjust left, Enemies adjust right
 * @value horz
 * @option Vertical - Actors adjust Up, Enemies adjust down
 * @value vert
 * @option Both - Applies both Horizontal and Vertical
 * @value horz + vert
 * @desc Makes adjustments to offset values to determine
 * which direction to adjust the destination by.
 * @default horz
 * 
 * @arg OffsetX:eval
 * @text Offset: X
 * @parent OffsetAdjust:str
 * @desc Horizontal offset to move.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg OffsetY:eval
 * @text Offset: Y
 * @parent OffsetAdjust:str
 * @desc Vertical offset to move.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for total movement amount.
 * @default 12
 * 
 * @arg FaceDirection:eval
 * @text Face Destination?
 * @type boolean
 * @on Turn
 * @off Don't
 * @desc Turn and face the destination?
 * @default true
 *
 * @arg EasingType:str
 * @text Movement Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 *
 * @arg MotionType:str
 * @text Movement Motion
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Play this motion for the unit(s).
 * @default walk
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for movement to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_MoveToPoint
 * @text MOVE: Move To Point
 * @desc Moves unit(s) to a designated point on the screen.
 * Sideview-only! Points based off Graphics.boxWidth/Height.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to move.
 * @default ["user"]
 * 
 * @arg Destination:str
 * @text Destination Point
 * @type combo
 * @option home
 * @option center
 * @option point x, y
 * @desc Select which point to face.
 * Replace 'x' and 'y' with coordinates
 * @default home
 *
 * @arg OffsetAdjust:str
 * @text Offset Adjustment
 * @parent Destination:str
 * @type select
 * @option Normal - No adjustments made
 * @value none
 * @option Horizontal - Actors adjust left, Enemies adjust right
 * @value horz
 * @option Vertical - Actors adjust Up, Enemies adjust down
 * @value vert
 * @option Both - Applies both Horizontal and Vertical
 * @value horz + vert
 * @desc Makes adjustments to offset values to determine
 * which direction to adjust the destination by.
 * @default horz
 * 
 * @arg OffsetX:eval
 * @text Offset: X
 * @parent OffsetAdjust:str
 * @desc Horizontal offset to move.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg OffsetY:eval
 * @text Offset: Y
 * @parent OffsetAdjust:str
 * @desc Vertical offset to move.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for total movement amount.
 * @default 12
 * 
 * @arg FaceDirection:eval
 * @text Face Destination?
 * @type boolean
 * @on Turn
 * @off Don't
 * @desc Turn and face the destination?
 * @default true
 *
 * @arg EasingType:str
 * @text Movement Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 *
 * @arg MotionType:str
 * @text Movement Motion
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Play this motion for the unit(s).
 * @default walk
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for movement to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_MoveToTarget
 * @text MOVE: Move To Target(s)
 * @desc Moves unit(s) to another unit(s) on the battle field.
 * Sideview-only!
 * 
 * @arg Targets1:arraystr
 * @text Targets (Moving)
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to move.
 * @default ["user"]
 * 
 * @arg Targets2:arraystr
 * @text Targets (Destination)
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to move to.
 * @default ["all targets"]
 * 
 * @arg TargetLocation:str
 * @text Target Location
 * @parent Targets2:arraystr
 * @type combo
 * @option front head
 * @option front center
 * @option front base
 * @option middle head
 * @option middle center
 * @option middle base
 * @option back head
 * @option back center
 * @option back base
 * @desc Select which part target group to move to.
 * @default front base
 * 
 * @arg MeleeDistance:eval
 * @text Melee Distance
 * @parent TargetLocation:str
 * @desc The melee distance away from the target location
 * in addition to the battler's width.
 * @default 24
 *
 * @arg OffsetAdjust:str
 * @text Offset Adjustment
 * @parent Targets2:arraystr
 * @type select
 * @option Normal - No adjustments made
 * @value none
 * @option Horizontal - Actors adjust left, Enemies adjust right
 * @value horz
 * @option Vertical - Actors adjust Up, Enemies adjust down
 * @value vert
 * @option Both - Applies both Horizontal and Vertical
 * @value horz + vert
 * @desc Makes adjustments to offset values to determine
 * which direction to adjust the destination by.
 * @default horz
 * 
 * @arg OffsetX:eval
 * @text Offset: X
 * @parent OffsetAdjust:str
 * @desc Horizontal offset to move.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg OffsetY:eval
 * @text Offset: Y
 * @parent OffsetAdjust:str
 * @desc Vertical offset to move.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for total movement amount.
 * @default 12
 * 
 * @arg FaceDirection:eval
 * @text Face Destination?
 * @type boolean
 * @on Turn
 * @off Don't
 * @desc Turn and face the destination?
 * @default true
 *
 * @arg EasingType:str
 * @text Movement Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 *
 * @arg MotionType:str
 * @text Movement Motion
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Play this motion for the unit(s).
 * @default walk
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for movement to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_Opacity
 * @text MOVE: Opacity
 * @desc Causes the unit(s) to change opacity.
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change opacity.
 * @default ["user"]
 * 
 * @arg Opacity:eval
 * @text Desired Opacity
 * @desc Change to this opacity value.
 * You may use JavaScript code.
 * @default 255
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for opacity change.
 * @default 12
 *
 * @arg EasingType:str
 * @text Opacity Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 * 
 * @arg WaitForOpacity:eval
 * @text Wait For Opacity?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for opacity changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_Scale
 * @text MOVE: Scale/Grow/Shrink
 * @desc Causes the unit(s) to scale, grow, or shrink?.
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change the scale of.
 * @default ["user"]
 * 
 * @arg ScaleX:eval
 * @text Scale X
 * @desc What target scale value do you want?
 * 1.0 is normal size.
 * @default 1.00
 * 
 * @arg ScaleY:eval
 * @text Scale Y
 * @desc What target scale value do you want?
 * 1.0 is normal size.
 * @default 1.00
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to scale for.
 * @default 12
 *
 * @arg EasingType:str
 * @text Scale Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 * 
 * @arg WaitForScale:eval
 * @text Wait For Scale?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for scaling to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_Skew
 * @text MOVE: Skew/Distort
 * @desc Causes the unit(s) to skew.
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to skew.
 * @default ["user"]
 * 
 * @arg SkewX:eval
 * @text Skew X
 * @desc X variance to skew?
 * Use small values for the best results.
 * @default 0.00
 * 
 * @arg SkewY:eval
 * @text Skew Y
 * @desc Y variance to skew?
 * Use small values for the best results.
 * @default 0.00
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to skew for.
 * @default 12
 *
 * @arg EasingType:str
 * @text Skew Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 * 
 * @arg WaitForSkew:eval
 * @text Wait For Skew?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for skew to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_Spin
 * @text MOVE: Spin/Rotate
 * @desc Causes the unit(s) to spin.
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to spin.
 * @default ["user"]
 * 
 * @arg Angle:eval
 * @text Angle
 * @desc How many degrees to spin?
 * @default 360
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to spin for.
 * @default 12
 *
 * @arg EasingType:str
 * @text Spin Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 * 
 * @arg RevertAngle:eval
 * @text Revert Angle on Finish
 * @type boolean
 * @on Revert
 * @off Don't
 * @desc Revert angle after spinning?
 * @default true
 * 
 * @arg WaitForSpin:eval
 * @text Wait For Spin?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for spin to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_WaitForFloat
 * @text MOVE: Wait For Float
 * @desc Waits for floating to complete before performing next command.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_WaitForJump
 * @text MOVE: Wait For Jump
 * @desc Waits for jumping to complete before performing next command.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_WaitForMovement
 * @text MOVE: Wait For Movement
 * @desc Waits for movement to complete before performing next command.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_WaitForOpacity
 * @text MOVE: Wait For Opacity
 * @desc Waits for opacity changes to complete before performing next command.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_WaitForScale
 * @text MOVE: Wait For Scale
 * @desc Waits for scaling to complete before performing next command.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_WaitForSkew
 * @text MOVE: Wait For Skew
 * @desc Waits for skewing to complete before performing next command.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_WaitForSpin
 * @text MOVE: Wait For Spin
 * @desc Waits for spinning to complete before performing next command.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceProjectile
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakProjectile
 * @text Action Sequences - Projectiles
 * @desc Create projectiles on the screen and fire them off at a target.
 * Requires VisuMZ_3_ActSeqProjectiles!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Projectile_Animation
 * @text PROJECTILE: Animation
 * @desc Create an animation projectile and fire it at a target.
 * Requires VisuMZ_3_ActSeqProjectiles!
 * 
 * @arg Coordinates
 *
 * @arg Start:struct
 * @text Start Location
 * @parent Coordinates
 * @type struct<ProjectileStart>
 * @desc Settings to determine where the projectile(s) start from.
 * @default {"Type:str":"target","Targets:arraystr":"[\"user\"]","TargetCenter:eval":"false","PointX:eval":"Graphics.width / 2","PointY:eval":"Graphics.height / 2","OffsetX:eval":"+0","OffsetY:eval":"+0"}
 *
 * @arg Goal:struct
 * @text Goal Location
 * @parent Coordinates
 * @type struct<ProjectileGoal>
 * @desc Settings to determine where the projectile(s) start from.
 * @default {"Type:str":"target","Targets:arraystr":"[\"all targets\"]","TargetCenter:eval":"false","PointX:eval":"Graphics.width / 2","PointY:eval":"Graphics.height / 2","OffsetX:eval":"+0","OffsetY:eval":"+0"}
 * 
 * @arg Settings
 *
 * @arg AnimationID:num
 * @text Animation ID
 * @parent Settings
 * @type animation
 * @desc Determine which animation to use as a projectile.
 * @default 77
 * 
 * @arg Duration:eval
 * @text Duration
 * @parent Settings
 * @desc Duration for the projectile(s) to travel.
 * @default 20
 * 
 * @arg WaitForProjectile:eval
 * @text Wait For Projectile?
 * @parent Settings
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for projectile(s) to reach their destination before
 * going onto the next command?
 * @default true
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation?
 * @parent Settings
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for animation to finish before going to the next command?
 * @default false
 * 
 * @arg Extra:struct
 * @text Extra Settings
 * @type struct<ProjectileExAni>
 * @desc Add extra settings to the projectile?
 * @default {"AutoAngle:eval":"true","AngleOffset:eval":"+0","Arc:eval":"0","EasingType:str":"Linear","Spin:eval":"+0.0"}
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Projectile_Icon
 * @text PROJECTILE: Icon
 * @desc Create an icon projectile and fire it at a target.
 * Requires VisuMZ_3_ActSeqProjectiles!
 * 
 * @arg Coordinates
 *
 * @arg Start:struct
 * @text Start Location
 * @parent Coordinates
 * @type struct<ProjectileStart>
 * @desc Settings to determine where the projectile(s) start from.
 * @default {"Type:str":"target","Targets:arraystr":"[\"user\"]","TargetCenter:eval":"false","PointX:eval":"Graphics.width / 2","PointY:eval":"Graphics.height / 2","OffsetX:eval":"+0","OffsetY:eval":"+0"}
 *
 * @arg Goal:struct
 * @text Goal Location
 * @parent Coordinates
 * @type struct<ProjectileGoal>
 * @desc Settings to determine where the projectile(s) start from.
 * @default {"Type:str":"target","Targets:arraystr":"[\"all targets\"]","TargetCenter:eval":"false","PointX:eval":"Graphics.width / 2","PointY:eval":"Graphics.height / 2","OffsetX:eval":"+0","OffsetY:eval":"+0"}
 * 
 * @arg Settings
 *
 * @arg Icon:eval
 * @text Icon Index
 * @parent Settings
 * @desc Determine which icon to use as a projectile.
 * You may use JavaScript code.
 * @default 118
 * 
 * @arg Duration:eval
 * @text Duration
 * @parent Settings
 * @desc Duration for the projectile(s) to travel.
 * @default 20
 * 
 * @arg WaitForProjectile:eval
 * @text Wait For Projectile?
 * @parent Settings
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for projectile(s) to reach their destination before
 * going onto the next command?
 * @default true
 * 
 * @arg Extra:struct
 * @text Extra Settings
 * @type struct<ProjectileExtra>
 * @desc Add extra settings to the projectile?
 * @default {"AutoAngle:eval":"true","AngleOffset:eval":"+0","Arc:eval":"0","BlendMode:num":"0","EasingType:str":"Linear","Hue:eval":"0","Scale:eval":"1.0","Spin:eval":"+0.0"}
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Projectile_Picture
 * @text PROJECTILE: Picture
 * @desc Create a picture projectile and fire it at a target.
 * Requires VisuMZ_3_ActSeqProjectiles!
 * 
 * @arg Coordinates
 *
 * @arg Start:struct
 * @text Start Location
 * @parent Coordinates
 * @type struct<ProjectileStart>
 * @desc Settings to determine where the projectile(s) start from.
 * @default {"Type:str":"target","Targets:arraystr":"[\"user\"]","TargetCenter:eval":"false","PointX:eval":"Graphics.width / 2","PointY:eval":"Graphics.height / 2","OffsetX:eval":"+0","OffsetY:eval":"+0"}
 *
 * @arg Goal:struct
 * @text Goal Location
 * @parent Coordinates
 * @type struct<ProjectileGoal>
 * @desc Settings to determine where the projectile(s) start from.
 * @default {"Type:str":"target","Targets:arraystr":"[\"all targets\"]","TargetCenter:eval":"false","PointX:eval":"Graphics.width / 2","PointY:eval":"Graphics.height / 2","OffsetX:eval":"+0","OffsetY:eval":"+0"}
 * 
 * @arg Settings
 *
 * @arg Picture:str
 * @text Picture Filename
 * @parent Settings
 * @type file
 * @dir img/pictures/
 * @desc Determine which picture to use as a projectile.
 * @default Untitled
 * 
 * @arg Duration:eval
 * @text Duration
 * @parent Settings
 * @desc Duration for the projectile(s) to travel.
 * @default 20
 * 
 * @arg WaitForProjectile:eval
 * @text Wait For Projectile?
 * @parent Settings
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for projectile(s) to reach their destination before
 * going onto the next command?
 * @default true
 * 
 * @arg Extra:struct
 * @text Extra Settings
 * @type struct<ProjectileExtra>
 * @desc Add extra settings to the projectile?
 * @default {"AutoAngle:eval":"true","AngleOffset:eval":"+0","Arc:eval":"0","BlendMode:num":"0","EasingType:str":"Linear","Hue:eval":"0","Scale:eval":"1.0","Spin:eval":"+0.0"}
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceSkew
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakSkew
 * @text Action Sequences - Skew
 * @desc Allows you to have control over the camera skew.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_ChangeSkew
 * @text SKEW: Change Skew
 * @desc Changes the camera skew.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg SkewX:eval
 * @text Skew X
 * @desc Change the camera skew X to this value.
 * @default 0
 * 
 * @arg SkewY:eval
 * @text Skew Y
 * @desc Change the camera skew Y to this value.
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to change camera skew.
 * @default 60
 *
 * @arg EasingType:str
 * @text Skew Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForSkew:eval
 * @text Wait For Skew?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for skew changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Skew_Reset
 * @text SKEW: Reset Skew
 * @desc Reset any skew settings.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to reset camera skew.
 * @default 60
 *
 * @arg EasingType:str
 * @text Skew Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForSkew:eval
 * @text Wait For Skew?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for skew changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Skew_WaitForSkew
 * @text SKEW: Wait For Skew
 * @desc Waits for skew changes to complete before performing next command.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceTarget
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakTarget
 * @text Action Sequences - Target
 * @desc If using a manual target by target Action Sequence,
 * these commands will give you full control over its usage.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Target_CurrentIndex
 * @text TARGET: Current Index
 * @desc Sets the current index to this value.
 * Then decide to jump to a label (optional).
 * 
 * @arg Index:eval
 * @text Set Index To
 * @desc Sets current targeting index to this value.
 * 0 is the starting index of a target group.
 * @default 0
 * 
 * @arg JumpToLabel:str
 * @text Jump To Label
 * @desc If a target is found after the index change,
 * jump to this label in the Common Event.
 * @default Untitled
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Target_NextTarget
 * @text TARGET: Next Target
 * @desc Moves index forward by 1 to select a new current target.
 * Then decide to jump to a label (optional).
 * 
 * @arg JumpToLabel:str
 * @text Jump To Label
 * @desc If a target is found after the index change,
 * jump to this label in the Common Event.
 * @default Untitled
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Target_PrevTarget
 * @text TARGET: Previous Target
 * @desc Moves index backward by 1 to select a new current target.
 * Then decide to jump to a label (optional).
 * 
 * @arg JumpToLabel:str
 * @text Jump To Label
 * @desc If a target is found after the index change,
 * jump to this label in the Common Event.
 * @default Untitled
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Target_RandTarget
 * @text TARGET: Random Target
 * @desc Sets index randomly to determine new currernt target.
 * Then decide to jump to a label (optional).
 * 
 * @arg ForceRandom:eval
 * @text Force Random?
 * @type boolean
 * @on On
 * @off Off
 * @desc Index cannot be its previous index amount after random.
 * @default false
 * 
 * @arg JumpToLabel:str
 * @text Jump To Label
 * @desc If a target is found after the index change,
 * jump to this label in the Common Event.
 * @default Untitled
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceVoice
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakVoice
 * @text Action Sequences - Voice
 * @desc Allows you to play battle voices.
 * Requires VisuMZ_3_BattleVoices!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleVoice_PlayCommonLine
 * @text VOICE: Play Common Line
 * @desc Plays a common voice line from target battler(s).
 * Requires VisuMZ_3_BattleVoices!
 * 
 * @arg Targets:arraystr
 * @text Speaker Target(s)
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play voice lines from.
 * @default ["user"]
 *
 * @arg VoiceLine:str
 * @text Voice Line
 * @type select
 * @option -
 * @value -
 * @option ---Battle Phase---
 * @value -
 * @option On Battle Start
 * @value BattleStart
 * @option On Battle Input
 * @value BattleInput
 * @option On Battle Victory
 * @value BattleVictory
 * @option Victory => Level Up
 * @value BattleVictoryLevelUp
 * @option Escape => Success
 * @value BattleEscapeSuccess
 * @option Escape => Failure
 * @value BattleEscapeFailure
 * @option -
 * @value -
 * @option ---On Action Start---
 * @value -
 * @option Basic Action => Regular Attack
 * @value ActionStartBasicAttack
 * @option Basic Action => Regular Guard
 * @value ActionStartBasicGuard
 * @option Skill Usage For Allies => Certain Hit
 * @value ActionStartSkillAllyCertainHit
 * @option Skill Usage For Allies => Physical
 * @value ActionStartSkillAllyPhysical
 * @option Skill Usage For Allies => Magical
 * @value ActionStartSkillAllyMagical
 * @option Skill Usage For Enemies => Certain Hit
 * @value ActionStartSkillEnemyCertainHit
 * @option Skill Usage For Enemies => Physical
 * @value ActionStartSkillEnemyPhysical
 * @option Skill Usage For Enemies => Magical
 * @value ActionStartSkillEnemyMagical
 * @option Item Usage For Allies
 * @value ActionStartItemAlly
 * @option Item Usage For Enemies
 * @value ActionStartItemEnemy
 * @option -
 * @value -
 * @option ---Perform Action---
 * @value -
 * @option Basic Action => Attack Motion
 * @value PerformActionBasicAttack
 * @option Basic Action => Critical Action
 * @value PerformActionCritical
 * @option Basic Action => Defeat Opponent
 * @value PerformActionDefeatFoe
 * @option Basic Action => Missed Action
 * @value PerformActionMiss
 * @option Skill Usage => Certain Hit
 * @value PerformActionSkillCertainHit
 * @option Skill Usage => Physical
 * @value PerformActionSkillPhysical
 * @option Skill Usage => Magical
 * @value PerformActionSkillMagical
 * @option -
 * @value -
 * @option ---On HP Change---
 * @value -
 * @option Life State => On Death
 * @value HpChangeDeath
 * @option Life State => On Revive
 * @value HpChangeRevive
 * @option On Damage => Damage <= 0%
 * @value HpChangeDamageNone
 * @option On Damage => Damage < 25%
 * @value HpChangeDamageLight
 * @option On Damage => Damage < 50%
 * @value HpChangeDamageMedium
 * @option On Damage => Damage >= 50%
 * @value HpChangeDamageHeavy
 * @option On Damage => Guarding Damage
 * @value HpChangeDamageGuard
 * @option On Recovery => Recovery < 25%
 * @value HpChangeRecoverLight
 * @option On Recovery => Recovery < 50%
 * @value HpChangeRecoverMedium
 * @option On Recovery => Recovery >= 50%
 * @value HpChangeRecoverHeavy
 * @option -
 * @value -
 * @option ---On Action Result---
 * @value -
 * @option On Miss/Evasion
 * @value ActionResultEvasion
 * @option On Magic Evasion
 * @value ActionResultMagicEvasion
 * @option On Counter
 * @value ActionResultCounter
 * @option On Reflection
 * @value ActionResultReflection
 * @option On Substitute
 * @value ActionResultSubstitute
 * @option -
 * @value -
 * @option ---Buff/Debuff Related---
 * @value -
 * @option On Buff Apply
 * @value BuffAdd
 * @option On Buff Remove
 * @value BuffRemove
 * @option On Debuff Apply
 * @value DebuffAdd
 * @option On Debuff Remove
 * @value DebuffRemove
 * @option -
 * @value -
 * @option ---State Related---
 * @value -
 * @option Positive States => On State Apply
 * @value StatePositiveAdd
 * @option Positive States => text On State Remove
 * @value StatePositiveRemove
 * @option Negative States => On State Apply
 * @value StateNegativeAdd
 * @option Negative States => On State Remove
 * @value StateNegativeRemove
 * @option Neutral States => On State Apply
 * @value StateNeutralAdd
 * @option Neutral States => On State Remove
 * @value StateNeutralRemove
 * @option -
 * @value -
 * @option ---Miscellaneous---
 * @value -
 * @option Voice Preview
 * @value CharaCreatePreview
 * @option -
 * @value -
 * @desc What voice line do you wish to play?
 * @default ActionStartBasicAttack
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleVoice_PlaySpecialLine
 * @text VOICE: Play Special Line
 * @desc Plays a special voice line from target battler(s).
 * Requires VisuMZ_3_BattleVoices!
 * 
 * @arg Targets:arraystr
 * @text Speaker Target(s)
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play voice lines from.
 * @default ["user"]
 *
 * @arg VoiceLineType:str
 * @text Voice Line Type
 * @type select
 * @option Action Name
 * @value ActionName
 * @option Chant Line
 * @value ChantLine
 * @option Item Name
 * @value ItemName
 * @option Skill Name
 * @value SkillName
 * @option Spell Name
 * @value SpellName
 * @option Unique Lines
 * @value UniqueLine
 * @desc What voice line type do you wish to play?
 * @default ActionName
 *
 * @arg Letter:str
 * @text Name / Letter
 * @type select
 * @option A
 * @option B
 * @option C
 * @option D
 * @option E
 * @option F
 * @option G
 * @option H
 * @option I
 * @option J
 * @option K
 * @option L
 * @option M
 * @option N
 * @option O
 * @option P
 * @option Q
 * @option R
 * @option S
 * @option T
 * @option U
 * @option V
 * @option W
 * @option X
 * @option Y
 * @option Z
 * @desc What voice letter/name do you want to play?
 * @default A
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceWeapon
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakWeapon
 * @text Action Sequences - Weapon
 * @desc Allows for finer control over Dual/Multi Wielding actors.
 * Only works for Actors.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Weapon_ClearActiveWeapon
 * @text WEAPON: Clear Weapon Slot
 * @desc Clears the active weapon slot (making others valid again).
 * Only works for Actors.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @desc Select unit(s) to clear the active weapon slot for.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Weapon_NextActiveWeapon
 * @text WEAPON: Next Weapon Slot
 * @desc Goes to next active weapon slot (making others invalid).
 * If next slot is weaponless, don't label jump.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @desc Select unit(s) to change the next active weapon slot for.
 * @default ["user"]
 * 
 * @arg JumpToLabel:str
 * @text Jump To Label
 * @desc If a weapon is found after the index change,
 * jump to this label in the Common Event.
 * @default Untitled
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Weapon_SetActiveWeapon
 * @text WEAPON: Set Weapon Slot
 * @desc Sets the active weapon slot (making others invalid).
 * Only works for Actors.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @desc Select unit(s) to change the active weapon slot for.
 * @default ["user"]
 * 
 * @arg SlotID:eval
 * @text Weapon Slot ID
 * @desc Select weapon slot to make active (making others invalid).
 * Use 0 to clear and normalize. You may use JavaScript code.
 * @default 1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceZoom
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakZoom
 * @text Action Sequences - Zoom
 * @desc Allows you to have control over the screen zoom.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Zoom_Scale
 * @text ZOOM: Change Scale
 * @desc Changes the zoom scale.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg Scale:eval
 * @text Scale
 * @desc The zoom scale to change to.
 * @default 1.0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to change battle zoom.
 * @default 60
 *
 * @arg EasingType:str
 * @text Zoom Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForZoom:eval
 * @text Wait For Zoom?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for zoom changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Zoom_Reset
 * @text ZOOM: Reset Zoom
 * @desc Reset any zoom settings.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to reset battle zoom.
 * @default 60
 *
 * @arg EasingType:str
 * @text Zoom Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForZoom:eval
 * @text Wait For Zoom?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for zoom changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Zoom_WaitForZoom
 * @text ZOOM: Wait For Zoom
 * @desc Waits for zoom to complete before performing next command.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceEnd
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @ ==========================================================================
 * @ Plugin Parameters
 * @ ==========================================================================
 *
 * @param BreakHead
 * @text --------------------------
 * @default ----------------------------------
 *
 * @param BattleCore
 * @default Plugin Parameters
 *
 * @param ATTENTION
 * @default READ THE HELP FILE
 *
 * @param BreakSettings
 * @text --------------------------
 * @default ----------------------------------
 *
 * @param AutoBattle:struct
 * @text Auto Battle Settings
 * @type struct<AutoBattle>
 * @desc Settings pertaining to Auto Battle.
 * @default {"BattleDisplay":"","AutoBattleMsg:str":"Press %1 or %2 to stop Auto Battle","AutoBattleOK:str":"OK","AutoBattleCancel:str":"Cancel","AutoBattleBgType:num":"1","AutoBattleRect:func":"\"const width = Graphics.width;\\nconst height = this.calcWindowHeight(1, false);\\nconst x = 0;\\nconst y = (Graphics.height - height) / 2;\\nreturn new Rectangle(x, y, width, height);\"","Options":"","AddOption:eval":"true","AdjustRect:eval":"true","StartName:str":"Auto Battle Start","StyleName:str":"Auto Battle Style","StyleOFF:str":"Attack","StyleON:str":"Skills"}
 *
 * @param Damage:struct
 * @text Damage Settings
 * @type struct<Damage>
 * @desc Settings pertaining to damage calculations.
 * @default {"DamageStyles":"","DefaultDamageStyle:str":"Standard","DamageStyleList:arraystruct":"[\"{\\\"Name:str\\\":\\\"Standard\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Declare Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Replace Formula\\\\\\\\nlet formula = item.damage.formula;\\\\\\\\nif (SceneManager.isSceneBattle() && !this.isCertainHit()) {\\\\\\\\n    const fmt = 'Math.max(this.applyArmorModifiers(b, %1), 0)';\\\\\\\\n    formula = formula.replace(/b.def/g, fmt.format('b.def'));\\\\\\\\n    formula = formula.replace(/b.mdf/g, fmt.format('b.mdf'));\\\\\\\\n    formula = formula.replace(/b.agi/g, fmt.format('b.agi'));\\\\\\\\n    formula = formula.replace(/b.luk/g, fmt.format('b.luk'));\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Calculate Damage\\\\\\\\nlet value = Math.max(eval(formula), 0);\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"return this.getItemDamageAmountTextOriginal();\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"Armor Scaling\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Declare Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Replace Formula\\\\\\\\nlet formula = item.damage.formula;\\\\\\\\nif (SceneManager.isSceneBattle() && !this.isCertainHit()) {\\\\\\\\n    const fmt = 'Math.max(this.applyArmorModifiers(b, %1), 1)';\\\\\\\\n    formula = formula.replace(/b.def/g, fmt.format('b.def'));\\\\\\\\n    formula = formula.replace(/b.mdf/g, fmt.format('b.mdf'));\\\\\\\\n    formula = formula.replace(/b.agi/g, fmt.format('b.agi'));\\\\\\\\n    formula = formula.replace(/b.luk/g, fmt.format('b.luk'));\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Calculate Damage\\\\\\\\nlet value = Math.max(eval(formula), 0);\\\\\\\\n\\\\\\\\n// Apply Defender's Defense Parameter\\\\\\\\nif (this.isDamage() && !this.isCertainHit()) {\\\\\\\\n\\\\\\\\n    // Calculate Base Armor\\\\\\\\n    let armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\n    armor = this.applyArmorModifiers(target, armor);\\\\\\\\n\\\\\\\\n    // Apply Armor to Damage\\\\\\\\n    if (armor >= 0) {\\\\\\\\n        value *= 100 / (100 + armor);\\\\\\\\n    } else {\\\\\\\\n        value *= 2 - (100 / (100 - armor));\\\\\\\\n    }\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"return this.getItemDamageAmountTextOriginal();\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"CT\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Multiplier\\\\\\\\nconst multiplier = Math.max(eval(item.damage.formula), 0);\\\\\\\\n\\\\\\\\n// Declare Values\\\\\\\\nlet value = 0;\\\\\\\\nlet level = Math.max(a.level || a.luk, 1);\\\\\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\narmor = Math.max(this.applyArmorModifiers(target, armor), 0);\\\\\\\\nlet attackStat = 0;\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    attackStat = a.atk;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    attackStat =  a.mat;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    attackStat =  a.def;\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    attackStat =  a.mdf;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Calculate Damage\\\\\\\\nattackStat = (attackStat * 1.75) + (level ** 2 / 45.5);\\\\\\\\nvalue = attackStat * 4;\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value *= Math.max(256 - armor, 0) / 256;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value *= Math.max(102.4 - armor, 0) / 128;\\\\\\\\n}\\\\\\\\nvalue *= multiplier;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    const value = Math.max(eval(formula), 0);\\\\\\\\n    return '%1%'.format(Math.round(value * 100));\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"D4\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Multiplier\\\\\\\\nconst multiplier = Math.max(eval(item.damage.formula), 0);\\\\\\\\n\\\\\\\\n// Declare Values\\\\\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\narmor = this.applyArmorModifiers(target, armor);\\\\\\\\nlet stat = 0;\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    stat = a.atk;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    stat = a.mat;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    stat = a.def;\\\\\\\\n    armor = 0;\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    stat = a.mdf;\\\\\\\\n    armor = 0;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Calculate Damage \\\\\\\\nlet value = 1.5 * Math.max(2 * stat * multiplier - armor, 1) * multiplier / 5;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    const value = Math.max(eval(formula), 0);\\\\\\\\n    return '%1%'.format(Math.round(value * 100));\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"DQ\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Multiplier\\\\\\\\nlet multiplier = Math.max(eval(item.damage.formula), 0);\\\\\\\\nif (this.isCertainHit()) {\\\\\\\\n    let value = multiplier * Math.max(a.atk, a.mat);\\\\\\\\n    return (isNaN(value) ? 0 : value) * sign;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Get Primary Stats\\\\\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\narmor = this.applyArmorModifiers(b, armor);\\\\\\\\nlet stat = 1;\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    stat = a.atk;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    stat = a.mat;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    stat = a.def;\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    stat = a.mdf;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Check for Recovery\\\\\\\\nif (this.isRecover()) {\\\\\\\\n    let value = stat * multiplier * sign;\\\\\\\\n    return isNaN(value) ? 0 : value;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Calculate Damage\\\\\\\\nlet value = 0;\\\\\\\\nif (stat < ((2 + armor) / 2)) {\\\\\\\\n    // Plink Damage\\\\\\\\n    let baseline = Math.max(stat - ((12 * (armor - stat + 1)) / stat), 5);\\\\\\\\n    value = baseline / 3;\\\\\\\\n} else {\\\\\\\\n    // Normal Damage\\\\\\\\n    let baseline = Math.max(stat - (armor / 2), 1);\\\\\\\\n    value = baseline / 2;\\\\\\\\n}\\\\\\\\nvalue *= multiplier;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn isNaN(value) ? 0 : value;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    const value = Math.max(eval(formula), 0);\\\\\\\\n    return '%1%'.format(Math.round(value * 100));\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"FF7\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Power\\\\\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\\\\\n\\\\\\\\n// Declare base Damage\\\\\\\\nlet baseDamage = 0;\\\\\\\\nlet level = Math.max(a.level || a.luk, 1);\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    baseDamage = a.atk + ((a.atk + level) / 32) * ((a.atk * level) / 32);\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    baseDamage = 6 * (a.mat + level);\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    baseDamage = 6 * (a.def + level);\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    baseDamage = 6 * (a.mdf + level);\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Calculate Final Damage\\\\\\\\nlet value = baseDamage;\\\\\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\narmor = this.applyArmorModifiers(target, armor);\\\\\\\\nif (this.isRecover()) {\\\\\\\\n    value += 22 * power;\\\\\\\\n} else {\\\\\\\\n    value = (power * Math.max(512 - armor, 1) * baseDamage) / (16 * 512);\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Power\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Power\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    return formula;\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"FF8\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Power\\\\\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\\\\\n\\\\\\\\n// Declare Damage\\\\\\\\nlet Value = 0;\\\\\\\\nlet level = Math.max(a.level || a.luk, 1);\\\\\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\narmor = this.applyArmorModifiers(target, armor);\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value = a.atk ** 2 / 16 + a.atk;\\\\\\\\n    value *= Math.max(265 - armor, 1) / 256;\\\\\\\\n    value *= power / 16;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value = a.mat + power;\\\\\\\\n    value *= Math.max(265 - armor, 1) / 4;\\\\\\\\n    value *= power / 256;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    value = (power + a.def) * power / 2;\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    value = (power + a.mdf) * power / 2;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Power\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Power\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    return formula;\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"FF9\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Damage Constant\\\\\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\\\\\nif (this.isCertainHit()) {\\\\\\\\n    return (isNaN(power) ? 0 : power) * sign;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Declare Main Stats\\\\\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\narmor = this.applyArmorModifiers(b, armor);\\\\\\\\nlet stat = 1;\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    stat = a.atk;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    stat = a.mat;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    stat = a.def;\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    stat = a.mdf;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Declare Base Damage\\\\\\\\nlet baseDamage = power;\\\\\\\\nif (this.isPhysical()) {\\\\\\\\n    baseDamage += stat;\\\\\\\\n}\\\\\\\\nif (this.isDamage() || this.isDrain()) {\\\\\\\\n    baseDamage -= armor;\\\\\\\\n    baseDamage = Math.max(1, baseDamage);\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Declare Bonus Damage\\\\\\\\nlet bonusDamage = stat + (((a.level || a.luk) + stat) / 8);\\\\\\\\n\\\\\\\\n// Declare Final Damage\\\\\\\\nlet value = baseDamage * bonusDamage * sign;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn isNaN(value) ? 0 : value;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Power\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Power\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    return formula;\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"FF10\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Damage Constant\\\\\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\\\\\nif (this.isCertainHit()) {\\\\\\\\n    return (isNaN(power) ? 0 : power) * sign;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Create Damage Offense Value\\\\\\\\nlet value = power;\\\\\\\\n\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value = (((a.atk ** 3) / 32) + 32) * power / 16;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value = power * ((a.mat ** 2 / 6) + power) / 4;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    value = power * ((a.def + power) / 2);\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    value = power * ((a.mdf + power) / 2);\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Apply Damage Defense Value\\\\\\\\nif (this.isDamage() || this.isDrain()) {\\\\\\\\n    let armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\n    armor = this.applyArmorModifiers(b, armor);\\\\\\\\n    armor = Math.max(armor, 1);\\\\\\\\n    value *= ((((armor - 280.4) ** 2) / 110) / 16) / 730;\\\\\\\\n    value *= (730 - (armor * 51 - (armor ** 2) / 11) / 10) / 730;\\\\\\\\n} else if (this.isRecover()) {\\\\\\\\n    value *= -1;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn isNaN(value) ? 0 : value;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Power\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Power\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    return formula;\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"MK\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Multiplier\\\\\\\\nconst multiplier = Math.max(eval(item.damage.formula), 0);\\\\\\\\n\\\\\\\\n// Declare Values\\\\\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\narmor = this.applyArmorModifiers(target, armor);\\\\\\\\nconst denominator = Math.max(200 + armor, 1);\\\\\\\\n\\\\\\\\n// Calculate Damage \\\\\\\\nlet value = 0;\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value = 200 * a.atk / denominator;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value = 200 * a.mat / denominator;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    value = 200 * a.def / 200;\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    value = 200 * a.mdf / 200;\\\\\\\\n}\\\\\\\\nvalue *= multiplier;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    const value = Math.max(eval(formula), 0);\\\\\\\\n    return '%1%'.format(Math.round(value * 100));\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"MOBA\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Damage Value\\\\\\\\nlet value = Math.max(eval(item.damage.formula), 0) * sign;\\\\\\\\n\\\\\\\\n// Apply Attacker's Offense Parameter\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value *= a.atk;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value *= a.mat;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    value *= a.def;\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    value *= a.mdf;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Apply Defender's Defense Parameter\\\\\\\\nif (this.isDamage() && !this.isCertainHit()) {\\\\\\\\n\\\\\\\\n    // Calculate Base Armor\\\\\\\\n    let armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\n    armor = this.applyArmorModifiers(target, armor);\\\\\\\\n\\\\\\\\n    // Apply Armor to Damage\\\\\\\\n    if (armor >= 0) {\\\\\\\\n        value *= 100 / (100 + armor);\\\\\\\\n    } else {\\\\\\\\n        value *= 2 - (100 / (100 - armor));\\\\\\\\n    }\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn isNaN(value) ? 0 : value;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    const value = Math.max(eval(formula), 0);\\\\\\\\n    return '%1%'.format(Math.round(value * 100));\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"PKMN\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Power\\\\\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\\\\\n\\\\\\\\n// Declare Values\\\\\\\\nlet value = 0;\\\\\\\\nlet level = Math.max(a.level || a.luk, 1);\\\\\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\narmor = Math.max(this.applyArmorModifiers(target, armor), 0);\\\\\\\\nlet attackStat = 0;\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    attackStat = a.atk;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    attackStat =  a.mat;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    attackStat =  a.def;\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    attackStat =  a.mdf;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Calculate Damage\\\\\\\\nvalue = (((((2 * level) / 5) + 2) * power * (attackStat / armor)) / 50) + 2;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Power\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Power\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    return formula;\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\"]","Cap":"","EnableDamageCap:eval":"false","DefaultHardCap:num":"9999","EnableSoftCap:eval":"false","DefaultSoftCap:num":"0.80","DefaultSoftScaler:num":"0.1275","Popups":"","PopupDuration:num":"128","NewPopupBottom:eval":"true","PopupPosition:str":"base","PopupOffsetX:num":"0","PopupOffsetY:num":"0","PopupShiftX:num":"8","PopupShiftY:num":"-28","hpDamageFmt:str":"-%1","hpHealingFmt:str":"+%1","mpDamageFmt:str":"-%1 %2","mpHealingFmt:str":"+%1 %2","CriticalColor:eval":"[255, 0, 0, 160]","CriticalDuration:num":"128","Formulas":"","OverallFormulaJS:func":"\"// Declare Constants\\nconst target = arguments[0];\\nconst critical = arguments[1];\\nconst item = this.item();\\n\\n// Get Base Damage\\nconst baseValue = this.evalDamageFormula(target);\\n\\n// Calculate Element Modifiers\\nlet value = baseValue * this.calcElementRate(target);\\n\\n// Calculate Physical and Magical Modifiers\\nif (this.isPhysical()) {\\n    value *= target.pdr;\\n}\\nif (this.isMagical()) {\\n    value *= target.mdr;\\n}\\n\\n// Apply Healing Modifiers\\nif (baseValue < 0) {\\n    value *= target.rec;\\n}\\n\\n// Apply Critical Modifiers\\nif (critical) {\\n    value = this.applyCritical(value);\\n}\\n\\n// Apply Variance and Guard Modifiers\\nvalue = this.applyVariance(value, item.damage.variance);\\nvalue = this.applyGuard(value, target);\\n\\n// Finalize Damage\\nvalue = Math.round(value);\\nreturn value;\"","VarianceFormulaJS:func":"\"// Declare Constants\\nconst damage = arguments[0];\\nconst variance = arguments[1];\\n\\n// Calculate Variance\\nconst amp = Math.floor(Math.max((Math.abs(damage) * variance) / 100, 0));\\nconst v = Math.randomInt(amp + 1) + Math.randomInt(amp + 1) - amp;\\n\\n// Return Damage\\nreturn damage >= 0 ? damage + v : damage - v;\"","GuardFormulaJS:func":"\"// Declare Constants\\nconst damage = arguments[0];\\nconst target = arguments[1];\\n\\n// Return Damage Early\\nconst note = this.item().note;\\nif (note.match(/<UNBLOCKABLE>/i)) return damage;\\nif (!target.isGuard()) return damage;\\nif (damage < 0) return damage;\\n\\n// Declare Guard Rate\\nlet guardRate = 0.5;\\nguardRate /= target.grd;\\n\\n// Return Damage\\nreturn damage * guardRate;\"","Critical":"","CriticalHitRateJS:func":"\"// Declare Constants\\nconst user = this.subject();\\nconst target = arguments[0];\\n\\n// Create Base Critical Rate\\nlet rate = this.subject().cri * (1 - target.cev);\\n\\n// Apply Notetags\\nconst note = this.item().note;\\nif (note.match(/<ALWAYS CRITICAL>/i)) {\\n    return 1;\\n}\\nif (note.match(/<SET CRITICAL RATE:[ ](\\\\d+)([%％])>/i)) {\\n    return Number(RegExp.$1) / 100;\\n}\\nif (note.match(/<MODIFY CRITICAL RATE:[ ](\\\\d+)([%％])>/i)) {\\n    rate *= Number(RegExp.$1) / 100;\\n}\\nif (note.match(/<MODIFY CRITICAL RATE:[ ]([\\\\+\\\\-]\\\\d+)([%％])>/i)) {\\n    rate += Number(RegExp.$1) / 100;\\n}\\nif (note.match(/<JS CRITICAL RATE>\\\\s*([\\\\s\\\\S]*)\\\\s*<\\\\/JS CRITICAL RATE>/i)) {\\n    const code = String(RegExp.$1);\\n    try {\\n        eval(code);\\n    } catch (e) {\\n        if ($gameTemp.isPlaytest()) console.log(e);\\n    }\\n}\\n\\n// Apply LUK Buffs/Debuffs\\nconst lukStack = this.subject().buff(7);\\nrate *= 2 ** lukStack;\\n\\n// Return Rate\\nreturn rate;\"","CriticalHitMultiplier:func":"\"// Declare Constants\\nconst user = this.subject();\\nlet damage = arguments[0];\\nlet multiplier = 2.0;\\nlet bonusDamage = this.subject().luk * this.subject().cri;\\nif (this.isHpRecover() || this.isMpRecover()) {\\n    bonusDamage *= -1;\\n}\\n\\n// Apply Notetags\\nconst note = this.item().note;\\nif (note.match(/<MODIFY CRITICAL MULTIPLIER:[ ](\\\\d+)([%％])>/i)) {\\n    multiplier = Number(RegExp.$1) / 100;\\n}\\nif (note.match(/<MODIFY CRITICAL MULTIPLIER:[ ]([\\\\+\\\\-]\\\\d+)([%％])>/i)) {\\n    multiplier += Number(RegExp.$1) / 100;\\n}\\nif (note.match(/<MODIFY CRITICAL BONUS DAMAGE:[ ](\\\\d+)([%％])>/i)) {\\n    bonusDamage *= Number(RegExp.$1) / 100;\\n}\\nif (note.match(/<MODIFY CRITICAL BONUS DAMAGE:[ ]([\\\\+\\\\-]\\\\d+)([%％])>/i)) {\\n    bonusDamage += bonusDamage * (RegExp.$1) / 100;\\n}\\nif (note.match(/<JS CRITICAL DAMAGE>\\\\s*([\\\\s\\\\S]*)\\\\s*<\\\\/JS CRITICAL DAMAGE>/i)) {\\n    const code = String(RegExp.$1);\\n    try {\\n        eval(code);\\n    } catch (e) {\\n        if ($gameTemp.isPlaytest()) console.log(e);\\n    }\\n}\\n\\n// Return Damage\\nreturn damage * multiplier + bonusDamage;\""}
 *
 * @param Mechanics:struct
 * @text Mechanics Settings
 * @type struct<Mechanics>
 * @desc Settings pertaining to various game mechanics.
 * @default {"ActionSpeed":"","AllowRandomSpeed:eval":"false","CalcActionSpeedJS:func":"\"// Declare Constants\\nconst agi = this.subject().agi;\\n\\n// Create Speed\\nlet speed = agi;\\nif (this.allowRandomSpeed()) {\\n    speed += Math.randomInt(Math.floor(5 + agi / 4));\\n}\\nif (this.item()) {\\n    speed += this.item().speed;\\n}\\nif (this.isAttack()) {\\n    speed += this.subject().attackSpeed();\\n}\\n\\n// Return Speed\\nreturn speed;\"","BaseTroop":"","BaseTroopIDs:arraynum":"[\"1\"]","CommonEvents":"","BattleStartEvent:num":"0","BattleEndEvent:num":"0","VictoryEvent:num":"0","DefeatEvent:num":"0","EscapeSuccessEvent:num":"0","EscapeFailEvent:num":"0","Escape":"","CalcEscapeRatioJS:func":"\"// Calculate Escape Ratio\\nlet ratio = 0.5;\\nratio *= $gameParty.agility();\\nratio /= $gameTroop.agility();\\n\\n// Return Ratio\\nreturn ratio;\"","CalcEscapeRaiseJS:func":"\"// Calculate Escape Ratio\\nlet value = 0.1;\\nvalue += $gameParty.aliveMembers().length;\\n\\n// Return Value\\nreturn value;\"","BattleJS":"","PreStartBattleJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","PostStartBattleJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","BattleVictoryJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","EscapeSuccessJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","EscapeFailureJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","BattleDefeatJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","PreEndBattleJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","PostEndBattleJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","TurnJS":"","PreStartTurnJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","PostStartTurnJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","PreEndTurnJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","PostEndTurnJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","PreRegenerateJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","PostRegenerateJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","ActionJS":"","PreStartActionJS:func":"\"// Declare Constants\\nconst value = arguments[0];\\nconst user = this.subject();\\nconst target = user;\\nconst a = user;\\nconst b = user;\\nconst action = this;\\nconst item = this.item();\\nconst skill = this.item();\\n\\n// Perform Actions\\n\"","PostStartActionJS:func":"\"// Declare Constants\\nconst value = arguments[0];\\nconst user = this.subject();\\nconst target = user;\\nconst a = user;\\nconst b = user;\\nconst action = this;\\nconst item = this.item();\\nconst skill = this.item();\\n\\n// Perform Actions\\n\"","PreApplyJS:func":"\"// Declare Constants\\nconst value = arguments[0];\\nconst target = arguments[1];\\nconst user = this.subject();\\nconst a = user;\\nconst b = target;\\nconst action = this;\\nconst item = this.item();\\nconst skill = this.item();\\n\\n// Perform Actions\\n\\n// Return Value\\nreturn value;\"","PreDamageJS:func":"\"// Declare Constants\\nconst value = arguments[0];\\nconst target = arguments[1];\\nconst user = this.subject();\\nconst a = user;\\nconst b = target;\\nconst action = this;\\nconst item = this.item();\\nconst skill = this.item();\\n\\n// Perform Actions\\n\\n// Return Value\\nreturn value;\"","PostDamageJS:func":"\"// Declare Constants\\nconst value = arguments[0];\\nconst target = arguments[1];\\nconst user = this.subject();\\nconst a = user;\\nconst b = target;\\nconst action = this;\\nconst item = this.item();\\nconst skill = this.item();\\n\\n// Perform Actions\\n\\n// Return Value\\nreturn value;\"","PostApplyJS:func":"\"// Declare Constants\\nconst value = arguments[0];\\nconst target = arguments[1];\\nconst user = this.subject();\\nconst a = user;\\nconst b = target;\\nconst action = this;\\nconst item = this.item();\\nconst skill = this.item();\\n\\n// Perform Actions\\n\\n// Return Value\\nreturn value;\"","PreEndActionJS:func":"\"// Declare Constants\\nconst value = arguments[0];\\nconst user = this.subject();\\nconst target = user;\\nconst a = user;\\nconst b = user;\\nconst action = this;\\nconst item = this.item();\\nconst skill = this.item();\\n\\n// Perform Actions\\n\"","PostEndActionJS:func":"\"// Declare Constants\\nconst value = arguments[0];\\nconst user = this.subject();\\nconst target = user;\\nconst a = user;\\nconst b = user;\\nconst action = this;\\nconst item = this.item();\\nconst skill = this.item();\\n\\n// Perform Actions\\n\""}
 *
 * @param CmdWindows
 * @text --------------------------
 * @default ----------------------------------
 *
 * @param BattleLayout:struct
 * @text Battle Layout Settings
 * @type struct<BattleLayout>
 * @desc Settings that adjust how the battle layout appears.
 * @default {"Style:str":"default","ListStyle":"","ShowFacesListStyle:eval":"true","CommandWidth:num":"192","XPStyle":"","XPActorCommandLines:num":"4","XPActorDefaultHeight:num":"64","XPSpriteYLocation:str":"name","PotraitStyle":"","ShowPortraits:eval":"true","PortraitScale:num":"0.5","BorderStyle":"","SkillItemBorderCols:num":"1","ShowPortraitsBorderStyle:eval":"true","PortraitScaleBorderStyle:num":"1.25","SkillItemWindows":"","SkillItemMiddleLayout:eval":"false","SkillItemStandardCols:num":"2"}
 *
 * @param BattleLog:struct
 * @text Battle Log Settings
 * @type struct<BattleLog>
 * @desc Settings that adjust how Window_BattleLog behaves.
 * @default {"General":"","BackColor:str":"#000000","MaxLines:num":"10","MessageWait:num":"16","TextAlign:str":"center","BattleLogRectJS:func":"\"const wx = 0;\\nconst wy = 0;\\nconst ww = Graphics.boxWidth;\\nconst wh = this.calcWindowHeight(10, false);\\nreturn new Rectangle(wx, wy, ww, wh);\"","StartTurn":"","StartTurnShow:eval":"true","StartTurnMsg:str":"Turn %1","StartTurnWait:num":"40","DisplayAction":"","ActionCenteredName:eval":"true","ActionSkillMsg1:eval":"false","ActionSkillMsg2:eval":"true","ActionItemMsg:eval":"false","ActionChanges":"","ShowCounter:eval":"true","ShowReflect:eval":"true","ShowSubstitute:eval":"true","ActionResults":"","ShowFailure:eval":"false","ShowCritical:eval":"false","ShowMissEvasion:eval":"false","ShowHpDmg:eval":"false","ShowMpDmg:eval":"false","ShowTpDmg:eval":"false","DisplayStates":"","ShowAddedState:eval":"false","ShowRemovedState:eval":"false","ShowCurrentState:eval":"false","ShowAddedBuff:eval":"false","ShowAddedDebuff:eval":"false","ShowRemovedBuff:eval":"false"}
 *
 * @param BattlebackScale:struct
 * @text Battleback Scaling
 * @type struct<Battleback>
 * @desc Settings that adjust how battlebacks scale.
 * @default {"DefaultStyle:str":"MZ","jsOneForOne:func":"\"// Adjust Size\\nthis.width = Graphics.width;\\nthis.height = Graphics.height;\\n\\n// Adjust Scale\\nconst scale = 1.0;\\nthis.scale.x = scale;\\nthis.scale.y = scale;\\n\\n// Adjust Coordinates\\nthis.x = 0;\\nthis.y = 0;\"","jsScaleToFit:func":"\"// Adjust Size\\nthis.width = Graphics.width;\\nthis.height = Graphics.height;\\n\\n// Adjust Scale\\nconst ratioX = this.width / this.bitmap.width;\\nconst ratioY = this.height / this.bitmap.height;\\nconst scale = Math.max(ratioX, ratioY);\\nthis.scale.x = scale;\\nthis.scale.y = scale;\\n\\n// Adjust Coordinates\\nthis.x = (Graphics.width - this.width) / 2;\\nthis.y = Graphics.height - this.height;\"","jsScaleDown:func":"\"// Adjust Size\\nthis.width = Graphics.width;\\nthis.height = Graphics.height;\\n\\n// Adjust Scale\\nconst ratioX = Math.min(1, this.width / this.bitmap.width);\\nconst ratioY = Math.min(1, this.height / this.bitmap.height);\\nconst scale = Math.max(ratioX, ratioY);\\nthis.scale.x = scale;\\nthis.scale.y = scale;\\n\\n// Adjust Coordinates\\nthis.x = (Graphics.width - this.width) / 2;\\nthis.y = Graphics.height - this.height;\"","jsScale Up:func":"\"// Adjust Size\\nthis.width = Graphics.width;\\nthis.height = Graphics.height;\\n\\n// Adjust Scale\\nconst ratioX = Math.max(1, this.width / this.bitmap.width);\\nconst ratioY = Math.max(1, this.height / this.bitmap.height);\\nconst scale = Math.max(ratioX, ratioY);\\nthis.scale.x = scale;\\nthis.scale.y = scale;\\n\\n// Adjust Coordinates\\nthis.x = (Graphics.width - this.width) / 2;\\nthis.y = Graphics.height - this.height;\""}
 *
 * @param PartyCmd:struct
 * @text Party Command Window
 * @type struct<PartyCmd>
 * @desc Settings that alter the Party Command Window in battle.
 * @default {"Cmd":"","CmdStyle:str":"auto","CmdTextAlign:str":"left","CmdIconFight:num":"76","CommandAddAutoBattle:eval":"true","CmdIconAutoBattle:num":"78","CmdTextAutoBattle:str":"Auto","CommandAddOptions:eval":"true","CmdIconOptions:num":"83","ActiveTpbOptionsMessage:str":"Options Menu queued after action is complete.","CmdIconEscape:num":"82","Access":"","SkipPartyCmd:eval":"true","DisablePartyCmd:eval":"false","HelpWindow":"","HelpFight:str":"Select actions to fight.","HelpAutoBattle:str":"Sets party to Auto Battle mode.","HelpOptions:str":"Opens up the Options Menu.","HelpEscape:str":"Attempt to escape the battle."}
 *
 * @param ActorCmd:struct
 * @text Actor Command Window
 * @type struct<ActorCmd>
 * @desc Settings that alter the Actor Command Window in battle.
 * @default {"Cmd":"","CmdStyle:str":"auto","CmdTextAlign:str":"left","CmdIconItem:num":"176","IconStypeNorm:num":"78","IconStypeMagic:num":"79","BattleCmd":"","BattleCmdList:arraystr":"[\"attack\",\"skills\",\"guard\",\"item\",\"escape\"]","ShowCosts:eval":"true","HelpWindow":"","HelpSkillType:str":"Opens up a list of skills under the \\C[16]%1\\C[0] category.","HelpItem:str":"Opens up a list of items that you can use.","HelpEscape:str":"Attempt to escape the battle.","HelpAutoBattle:str":"Automatically choose an action suitable for combat.","HelpParty:str":"Automatically choose an action suitable for combat."}
 *
 * @param InBattleStatus:struct
 * @text In-Battle Status Window
 * @type struct<InBattleStatus>
 * @desc Settings that alter the In-Battle Status window accessed
 * through the "Status" command.
 * @default {"General":"","CmdIconStatus:num":"87","StatusGraphic:str":"face","HelpStatus:str":"View battle member status.","Enemy":"","enemyStatus:eval":"true","enemyShowLevel:eval":"true","enemyHiddenParameter:str":"???","enemyShowParametersAlways:eval":"false","enemyShowParametersIfBattleTest:eval":"true","enemyShowParametersIfDefeated:eval":"true","PageButtons":"","pageOffsetX:num":"+0","pageOffsetY:num":"+0","pageButtons:eval":"true","Parameters":"","buffValueFmt:str":"▲%1","debuffValueFmt:str":"▼%1","States":"","statesMaxWidth:num":"384","drawStates:eval":"true","drawBuffs:eval":"true","drawDebuffs:eval":"true","BuffsDebuffs":"","buffNameFmt:str":"%1▲","debuffNameFmt:str":"%1▼","NormalState":"","normalIcon:num":"84","normalText:str":"Normal","HelpDesc":"","stateHelpFmt:json":"\"%1 %2\"","buffHelpFmt:json":"\"Increases %1 to %3%2\\\\C[0]. %4\"","debuffHelpFmt:json":"\"Decreases %1 to %3%2\\\\C[0]. %4\"","normalHelp:json":"\"Status is currently normal.\"","TurnHelpDesc":"","actionsFmt:str":"\\C[6](Actions %2%1\\C[6])\\C[0]","TurnsFmt:str":"\\C[5](Turns %2%1\\C[5])\\C[0]","passiveText:str":"\\C[4](Passive)\\C[0]","Window":"","StatusWindow_BgType:num":"0","StatusWindow_DrawJS:func":"\"{ // Draw Face and Simple Status\\n    const x = this.colSpacing() / 2;\\n    const h = ImageManager.faceHeight;\\n    const y = h / 2 - this.lineHeight() * 1.5;\\n    this.drawActorGraphic(this._battler, x + 1, 0, ImageManager.faceWidth, h);\\n    this.drawActorSimpleStatus(this._battler, x + 180, y);\\n}\\n{ // Draw Actor Parameters\\n    let maxWidth = this.drawingAreaWidth();\\n    let x1 = 0;\\n    let x2 = Math.ceil(this.drawingAreaWidth() / 2);\\n\\n    let counter = 0;\\n    const params = this.displayedParams();\\n\\n    let px = x1;\\n    const availableHeight = this.innerHeight - ImageManager.faceHeight;\\n    const paramHeight = Math.ceil(params.length / 2) * this.lineHeight();\\n    let py = Math.ceil((availableHeight - paramHeight) / 2) + ImageManager.faceHeight;\\n    let pw = Math.floor(maxWidth / 2);\\n\\n    if (this._statesWindow.y !== 0) {\\n        this._statesWindow.y = py;\\n    }\\n\\n    for (const param of params) {\\n        this.drawDarkRect(px, py, pw, this.lineHeight());\\n        this.drawParamData(param, px, py, pw);\\n        counter++;\\n        if (counter % 2 === 0) {\\n            px = x1;\\n            py += this.lineHeight();\\n        } else {\\n            px = x2;\\n        }\\n    }\\n}\"","StatusWindow_RectJS:func":"\"const wx = Graphics.boxWidth > 1000 ? 120 : 0;\\nconst wy = this._helpWindow.y + this._helpWindow.height;\\nconst ww = Graphics.boxWidth - (wx * 2);\\nconst wh = Graphics.boxHeight - wy - this.windowAreaHeight();\\nreturn new Rectangle(wx, wy, ww, wh);\""}
 * 
 * @param MultiTarget:struct
 * @text Multi-Target Windows
 * @type struct<MultiTarget>
 * @desc Settings that alter the Multi-Target Windows in battle.
 * @default {"Properties":"","WindowWidth:num":"280","BgType:num":"2","ShowButton:eval":"true","Vocab":"","AllActorsText:str":"All Allies","AllEnemiesText:str":"All Enemies","Offsets":"","ActorOffsets":"","ActorOffsetX:num":"+0","ActorOffsetY:num":"+0","EnemyOffsets":"","EnemyOffsetX:num":"+0","EnemyOffsetY:num":"+0"}
 * 
 * @param ComboWindow:struct
 * @text Damage Combo Window
 * @type struct<ComboWindow>
 * @desc Settings that alter the damage/healing combo window displayed in battle.
 * @default {"General":"","Enable:eval":"true","Appearance":"","CustomFontFace:str":"Arial","TextAlign:str":"left","ComboWindow_DrawJS:func":"\"// Declare Coordinates\\nlet x = 0;\\nlet y = 0;\\n\\n// Hit Text\\nconst hitText = this.hitText();\\nconst hitTextSize = this.textSizeEx(hitText);\\nif (this.textAlignment() === 'right') {\\n    x = this.innerWidth - this.itemPadding() - hitTextSize.width;\\n} else if (this.textAlignment() === 'center') {\\n    x = Math.floor((this.innerWidth - hitTextSize.width) / 2);\\n} else {\\n    x = this.itemPadding();\\n}\\nthis.drawTextEx(hitText, x, y);\\n\\n// New Line\\ny += Math.ceil(this.lineHeight() * 2/3);\\n\\n// Damage Text\\nconst dmgText = this.damageText();\\nconst dmgTextSize = this.textSizeEx(dmgText);\\nif (this.textAlignment() === 'right') {\\n    x = this.innerWidth - this.itemPadding() - dmgTextSize.width;\\n} else if (this.textAlignment() === 'center') {\\n    x = Math.floor((this.innerWidth - dmgTextSize.width) / 2);\\n} else {\\n    x = this.itemPadding();\\n}\\nthis.drawTextEx(dmgText, x, y);\"","Vocab":"","hitsDmgFmt:str":"\\C[6]%1\\} \\C[4]Hit Combo\\C[0]\\{","hitsHealFmt:str":"\\C[6]%1\\} \\C[4]Heal Combo\\C[0]\\{","totalDmgFmt:str":"\\}\\C[21]Total Damage: \\{\\C[0]%1","totalHealFmt:str":"\\}\\C[21]Total Healing: \\{\\C[24]+%1\\C[0]","Position":"","fadeShiftX:num":"-2","fadeShiftY:num":"+0","PosOffsetX:num":"+0","PosOffsetY:num":"+0","ComboWindow_RectJS:func":"\"const ww = Math.ceil(Graphics.width / 4);\\nconst wh = this.calcWindowHeight(2, true);\\nconst wx = 0 + this.comboWindowOffsetX();\\nconst wy = Math.round(Graphics.boxHeight * 1 / 3) + this.comboWindowOffsetY();\\nreturn new Rectangle(wx, wy, ww, wh);\"","Update":"","updateDuration:num":"20","minimumStayDuration:num":"40","minimumHits:num":"1","opacitySpeed:num":"16"}
 *
 * @param VisualBreak
 * @text --------------------------
 * @default ----------------------------------
 *
 * @param Actor:struct
 * @text Actor Battler Settings
 * @type struct<Actor>
 * @desc Settings that alter various properties for actors.
 * @default {"Flinch":"","FlinchDistanceX:num":"12","FlinchDistanceY:num":"0","FlinchDuration:num":"6","SvBattlers":"","AnchorX:num":"0.5","AnchorY:num":"1.0","ChantStyle:eval":"true","OffsetX:num":"0","OffsetY:num":"0","MotionSpeed:num":"12","PrioritySortActive:eval":"true","PrioritySortActors:eval":"false","Shadow:eval":"true","SmoothImage:eval":"true","HomePosJS:func":"\"// Declare Constants\\nconst sprite = this;\\nconst actor = this._actor;\\nconst index = arguments[0];\\n\\n// Make Calculations\\nlet x = Math.round((Graphics.width / 2) + 192)\\nx -= Math.floor((Graphics.width - Graphics.boxWidth) / 2);\\nx += index * 32;\\nlet y = (Graphics.height - 200) - ($gameParty.maxBattleMembers() * 48);\\ny -= Math.floor((Graphics.height - Graphics.boxHeight) / 2);\\ny += index * 48;\\n\\n// Home Position Offsets\\nconst offsetNote = /<SIDEVIEW HOME OFFSET:[ ]([\\\\+\\\\-]\\\\d+),[ ]([\\\\+\\\\-]\\\\d+)>/i;\\nconst xOffsets = actor.traitObjects().map((obj) => (obj && obj.note.match(offsetNote) ? Number(RegExp.$1) : 0));\\nconst yOffsets = actor.traitObjects().map((obj) => (obj && obj.note.match(offsetNote) ? Number(RegExp.$2) : 0));\\nx = xOffsets.reduce((r, offset) => r + offset, x);\\ny = yOffsets.reduce((r, offset) => r + offset, y);\\n\\n// Set Home Position\\nthis.setHome(x, y);\""}
 *
 * @param Enemy:struct
 * @text Enemy Battler Settings
 * @type struct<Enemy>
 * @desc Settings that alter various properties for enemies.
 * @default {"Visual":"","AttackAnimation:num":"1","EmergeText:eval":"false","OffsetX:num":"0","OffsetY:num":"0","SmoothImage:eval":"true","SelectWindow":"","FrontViewSelect:eval":"false","SideviewSelect:eval":"true","NameFontSize:num":"22","SvBattlers":"","AllowCollapse:eval":"false","AnchorX:num":"0.5","AnchorY:num":"1.0","MotionIdle:str":"walk","Shadow:eval":"true","Width:num":"64","Height:num":"64","WtypeId:num":"0"}
 *
 * @param HpGauge:struct
 * @text HP Gauge Settings
 * @type struct<HpGauge>
 * @desc Settings that adjust the visual HP Gauge displayed in battle.
 * @default {"Display":"","ShowActorGauge:eval":"false","ShowEnemyGauge:eval":"true","RequiresDefeat:eval":"false","BTestBypass:eval":"true","Settings":"","AnchorX:num":"0.5","AnchorY:num":"1.0","Scale:num":"0.5","OffsetX:num":"0","OffsetY:num":"-3","Options":"","AddHpGaugeOption:eval":"true","AdjustRect:eval":"true","Name:str":"Show HP Gauge"}
 *
 * @param ActionSequence:struct
 * @text Action Sequence Settings
 * @type struct<ActionSequence>
 * @desc Settings that adjust how certain Action Sequences work.
 * @default {"AutoSequences":"","AutoMeleeSolo:eval":"true","AutoMeleeAoE:eval":"true","CastAnimations":"","CastCertain:num":"120","CastPhysical:num":"52","CastMagical:num":"51","CounterReflection":"","CounterPlayback:eval":"true","ReflectAnimation:num":"53","ReflectPlayback:eval":"true","Stepping":"","MeleeDistance:num":"24","StepDistanceX:num":"48","StepDistanceY:num":"0","StepDuration:num":"12"}
 *
 * @param BreakEnd1
 * @text --------------------------
 * @default ----------------------------------
 *
 * @param End Of
 * @default Plugin Parameters
 *
 * @param BreakEnd2
 * @text --------------------------
 * @default ----------------------------------
 *
 */
/* ----------------------------------------------------------------------------
 * Auto Battle Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~AutoBattle:
 *
 * @param BattleDisplay
 * @text Battle Display
 *
 * @param AutoBattleMsg:str
 * @text Message
 * @parent BattleDisplay
 * @desc Message that's displayed when Auto Battle is on.
 * Text codes allowed. %1 - OK button, %2 - Cancel button
 * @default Press %1 or %2 to stop Auto Battle
 *
 * @param AutoBattleOK:str
 * @text OK Button
 * @parent BattleDisplay
 * @desc Text used to represent the OK button.
 * If VisuMZ_0_CoreEngine is present, ignore this.
 * @default OK
 *
 * @param AutoBattleCancel:str
 * @text Cancel Button
 * @parent BattleDisplay
 * @desc Text used to represent the Cancel button.
 * If VisuMZ_0_CoreEngine is present, ignore this.
 * @default Cancel
 *
 * @param AutoBattleBgType:num
 * @text Background Type
 * @parent BattleDisplay
 * @type select
 * @option 0 - Window
 * @value 0
 * @option 1 - Dim
 * @value 1
 * @option 2 - Transparent
 * @value 2
 * @desc Select background type for Auto Battle window.
 * @default 1
 *
 * @param AutoBattleRect:func
 * @text JS: X, Y, W, H
 * @parent BattleDisplay
 * @type note
 * @desc Code used to determine the dimensions for this window.
 * @default "const width = Graphics.width;\nconst height = this.calcWindowHeight(1, false);\nconst x = 0;\nconst y = (Graphics.height - height) / 2;\nreturn new Rectangle(x, y, width, height);"
 *
 * @param Options
 *
 * @param AddOption:eval
 * @text Add Option?
 * @parent Options
 * @type boolean
 * @on Add
 * @off Don't Add
 * @desc Add the Auto Battle options to the Options menu?
 * @default true
 *
 * @param AdjustRect:eval
 * @text Adjust Window Height
 * @parent Options
 * @type boolean
 * @on Adjust
 * @off Don't
 * @desc Automatically adjust the options window height?
 * @default true
 *
 * @param StartName:str
 * @text Startup Name
 * @parent Options
 * @desc Command name of the option.
 * @default Auto Battle Start
 *
 * @param StyleName:str
 * @text Style Name
 * @parent Options
 * @desc Command name of the option.
 * @default Auto Battle Style
 *
 * @param StyleOFF:str
 * @text OFF
 * @parent StyleName:str
 * @desc Text displayed when Auto Battle Style is OFF.
 * @default Attack
 *
 * @param StyleON:str
 * @text ON
 * @parent StyleName:str
 * @desc Text displayed when Auto Battle Style is ON.
 * @default Skills
 *
 */
/* ----------------------------------------------------------------------------
 * Damage Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~Damage:
 *
 * @param DamageStyles
 * @text Damage Styles
 *
 * @param DefaultDamageStyle:str
 * @text Default Style
 * @parent DamageStyles
 * @desc Which Damage Style do you want to set as default?
 * Use 'Manual' to not use any styles at all.
 * @default Standard
 *
 * @param DamageStyleList:arraystruct
 * @text Style List
 * @parent DamageStyles
 * @type struct<DamageStyle>[]
 * @desc A list of the damage styles available.
 * These are used to calculate base damage.
 * @default ["{\"Name:str\":\"Standard\",\"Formula:func\":\"\\\"// Declare Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Replace Formula\\\\nlet formula = item.damage.formula;\\\\nif (SceneManager.isSceneBattle() && !this.isCertainHit()) {\\\\n    const fmt = 'Math.max(this.applyArmorModifiers(b, %1), 0)';\\\\n    formula = formula.replace(/b.def/g, fmt.format('b.def'));\\\\n    formula = formula.replace(/b.mdf/g, fmt.format('b.mdf'));\\\\n    formula = formula.replace(/b.agi/g, fmt.format('b.agi'));\\\\n    formula = formula.replace(/b.luk/g, fmt.format('b.luk'));\\\\n}\\\\n\\\\n// Calculate Damage\\\\nlet value = Math.max(eval(formula), 0);\\\\n\\\\n// Return Value\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Multiplier\",\"DamageType2:str\":\"%1 Damage Multiplier\",\"DamageType3:str\":\"%1 Recovery Multiplier\",\"DamageType4:str\":\"%1 Recovery Multiplier\",\"DamageType5:str\":\"%1 Drain Multiplier\",\"DamageType6:str\":\"%1 Drain Multiplier\",\"DamageDisplay:func\":\"\\\"return this.getItemDamageAmountTextOriginal();\\\"\"}","{\"Name:str\":\"Armor Scaling\",\"Formula:func\":\"\\\"// Declare Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Replace Formula\\\\nlet formula = item.damage.formula;\\\\nif (SceneManager.isSceneBattle() && !this.isCertainHit()) {\\\\n    const fmt = 'Math.max(this.applyArmorModifiers(b, %1), 1)';\\\\n    formula = formula.replace(/b.def/g, fmt.format('b.def'));\\\\n    formula = formula.replace(/b.mdf/g, fmt.format('b.mdf'));\\\\n    formula = formula.replace(/b.agi/g, fmt.format('b.agi'));\\\\n    formula = formula.replace(/b.luk/g, fmt.format('b.luk'));\\\\n}\\\\n\\\\n// Calculate Damage\\\\nlet value = Math.max(eval(formula), 0);\\\\n\\\\n// Apply Defender's Defense Parameter\\\\nif (this.isDamage() && !this.isCertainHit()) {\\\\n\\\\n    // Calculate Base Armor\\\\n    let armor = this.isPhysical() ? b.def : b.mdf;\\\\n    armor = this.applyArmorModifiers(target, armor);\\\\n\\\\n    // Apply Armor to Damage\\\\n    if (armor >= 0) {\\\\n        value *= 100 / (100 + armor);\\\\n    } else {\\\\n        value *= 2 - (100 / (100 - armor));\\\\n    }\\\\n}\\\\n\\\\n// Return Value\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Multiplier\",\"DamageType2:str\":\"%1 Damage Multiplier\",\"DamageType3:str\":\"%1 Recovery Multiplier\",\"DamageType4:str\":\"%1 Recovery Multiplier\",\"DamageType5:str\":\"%1 Drain Multiplier\",\"DamageType6:str\":\"%1 Drain Multiplier\",\"DamageDisplay:func\":\"\\\"return this.getItemDamageAmountTextOriginal();\\\"\"}","{\"Name:str\":\"CT\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Multiplier\\\\nconst multiplier = Math.max(eval(item.damage.formula), 0);\\\\n\\\\n// Declare Values\\\\nlet value = 0;\\\\nlet level = Math.max(a.level || a.luk, 1);\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\narmor = Math.max(this.applyArmorModifiers(target, armor), 0);\\\\nlet attackStat = 0;\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    attackStat = a.atk;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    attackStat =  a.mat;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    attackStat =  a.def;\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    attackStat =  a.mdf;\\\\n}\\\\n\\\\n// Calculate Damage\\\\nattackStat = (attackStat * 1.75) + (level ** 2 / 45.5);\\\\nvalue = attackStat * 4;\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    value *= Math.max(256 - armor, 0) / 256;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    value *= Math.max(102.4 - armor, 0) / 128;\\\\n}\\\\nvalue *= multiplier;\\\\n\\\\n// Return Value\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Multiplier\",\"DamageType2:str\":\"%1 Damage Multiplier\",\"DamageType3:str\":\"%1 Recovery Multiplier\",\"DamageType4:str\":\"%1 Recovery Multiplier\",\"DamageType5:str\":\"%1 Drain Multiplier\",\"DamageType6:str\":\"%1 Drain Multiplier\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    const value = Math.max(eval(formula), 0);\\\\n    return '%1%'.format(Math.round(value * 100));\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"D4\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Multiplier\\\\nconst multiplier = Math.max(eval(item.damage.formula), 0);\\\\n\\\\n// Declare Values\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\narmor = this.applyArmorModifiers(target, armor);\\\\nlet stat = 0;\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    stat = a.atk;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    stat = a.mat;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    stat = a.def;\\\\n    armor = 0;\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    stat = a.mdf;\\\\n    armor = 0;\\\\n}\\\\n\\\\n// Calculate Damage \\\\nlet value = 1.5 * Math.max(2 * stat * multiplier - armor, 1) * multiplier / 5;\\\\n\\\\n// Return Value\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Multiplier\",\"DamageType2:str\":\"%1 Damage Multiplier\",\"DamageType3:str\":\"%1 Recovery Multiplier\",\"DamageType4:str\":\"%1 Recovery Multiplier\",\"DamageType5:str\":\"%1 Drain Multiplier\",\"DamageType6:str\":\"%1 Drain Multiplier\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    const value = Math.max(eval(formula), 0);\\\\n    return '%1%'.format(Math.round(value * 100));\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"DQ\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Multiplier\\\\nlet multiplier = Math.max(eval(item.damage.formula), 0);\\\\nif (this.isCertainHit()) {\\\\n    let value = multiplier * Math.max(a.atk, a.mat);\\\\n    return (isNaN(value) ? 0 : value) * sign;\\\\n}\\\\n\\\\n// Get Primary Stats\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\narmor = this.applyArmorModifiers(b, armor);\\\\nlet stat = 1;\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    stat = a.atk;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    stat = a.mat;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    stat = a.def;\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    stat = a.mdf;\\\\n}\\\\n\\\\n// Check for Recovery\\\\nif (this.isRecover()) {\\\\n    let value = stat * multiplier * sign;\\\\n    return isNaN(value) ? 0 : value;\\\\n}\\\\n\\\\n// Calculate Damage\\\\nlet value = 0;\\\\nif (stat < ((2 + armor) / 2)) {\\\\n    // Plink Damage\\\\n    let baseline = Math.max(stat - ((12 * (armor - stat + 1)) / stat), 5);\\\\n    value = baseline / 3;\\\\n} else {\\\\n    // Normal Damage\\\\n    let baseline = Math.max(stat - (armor / 2), 1);\\\\n    value = baseline / 2;\\\\n}\\\\nvalue *= multiplier;\\\\n\\\\n// Return Value\\\\nreturn isNaN(value) ? 0 : value;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Multiplier\",\"DamageType2:str\":\"%1 Damage Multiplier\",\"DamageType3:str\":\"%1 Recovery Multiplier\",\"DamageType4:str\":\"%1 Recovery Multiplier\",\"DamageType5:str\":\"%1 Drain Multiplier\",\"DamageType6:str\":\"%1 Drain Multiplier\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    const value = Math.max(eval(formula), 0);\\\\n    return '%1%'.format(Math.round(value * 100));\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"FF7\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Power\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\n\\\\n// Declare base Damage\\\\nlet baseDamage = 0;\\\\nlet level = Math.max(a.level || a.luk, 1);\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    baseDamage = a.atk + ((a.atk + level) / 32) * ((a.atk * level) / 32);\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    baseDamage = 6 * (a.mat + level);\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    baseDamage = 6 * (a.def + level);\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    baseDamage = 6 * (a.mdf + level);\\\\n}\\\\n\\\\n// Calculate Final Damage\\\\nlet value = baseDamage;\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\narmor = this.applyArmorModifiers(target, armor);\\\\nif (this.isRecover()) {\\\\n    value += 22 * power;\\\\n} else {\\\\n    value = (power * Math.max(512 - armor, 1) * baseDamage) / (16 * 512);\\\\n}\\\\n\\\\n// Return Value\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Power\",\"DamageType2:str\":\"%1 Damage Power\",\"DamageType3:str\":\"%1 Recovery Power\",\"DamageType4:str\":\"%1 Recovery Power\",\"DamageType5:str\":\"%1 Drain Power\",\"DamageType6:str\":\"%1 Drain Power\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    return formula;\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"FF8\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Power\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\n\\\\n// Declare Damage\\\\nlet Value = 0;\\\\nlet level = Math.max(a.level || a.luk, 1);\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\narmor = this.applyArmorModifiers(target, armor);\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    value = a.atk ** 2 / 16 + a.atk;\\\\n    value *= Math.max(265 - armor, 1) / 256;\\\\n    value *= power / 16;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    value = a.mat + power;\\\\n    value *= Math.max(265 - armor, 1) / 4;\\\\n    value *= power / 256;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    value = (power + a.def) * power / 2;\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    value = (power + a.mdf) * power / 2;\\\\n}\\\\n\\\\n// Return Value\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Power\",\"DamageType2:str\":\"%1 Damage Power\",\"DamageType3:str\":\"%1 Recovery Power\",\"DamageType4:str\":\"%1 Recovery Power\",\"DamageType5:str\":\"%1 Drain Power\",\"DamageType6:str\":\"%1 Drain Power\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    return formula;\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"FF9\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Damage Constant\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\nif (this.isCertainHit()) {\\\\n    return (isNaN(power) ? 0 : power) * sign;\\\\n}\\\\n\\\\n// Declare Main Stats\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\narmor = this.applyArmorModifiers(b, armor);\\\\nlet stat = 1;\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    stat = a.atk;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    stat = a.mat;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    stat = a.def;\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    stat = a.mdf;\\\\n}\\\\n\\\\n// Declare Base Damage\\\\nlet baseDamage = power;\\\\nif (this.isPhysical()) {\\\\n    baseDamage += stat;\\\\n}\\\\nif (this.isDamage() || this.isDrain()) {\\\\n    baseDamage -= armor;\\\\n    baseDamage = Math.max(1, baseDamage);\\\\n}\\\\n\\\\n// Declare Bonus Damage\\\\nlet bonusDamage = stat + (((a.level || a.luk) + stat) / 8);\\\\n\\\\n// Declare Final Damage\\\\nlet value = baseDamage * bonusDamage * sign;\\\\n\\\\n// Return Value\\\\nreturn isNaN(value) ? 0 : value;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Power\",\"DamageType2:str\":\"%1 Damage Power\",\"DamageType3:str\":\"%1 Recovery Power\",\"DamageType4:str\":\"%1 Recovery Power\",\"DamageType5:str\":\"%1 Drain Power\",\"DamageType6:str\":\"%1 Drain Power\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    return formula;\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"FF10\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Damage Constant\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\nif (this.isCertainHit()) {\\\\n    return (isNaN(power) ? 0 : power) * sign;\\\\n}\\\\n\\\\n// Create Damage Offense Value\\\\nlet value = power;\\\\n\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    value = (((a.atk ** 3) / 32) + 32) * power / 16;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    value = power * ((a.mat ** 2 / 6) + power) / 4;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    value = power * ((a.def + power) / 2);\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    value = power * ((a.mdf + power) / 2);\\\\n}\\\\n\\\\n// Apply Damage Defense Value\\\\nif (this.isDamage() || this.isDrain()) {\\\\n    let armor = this.isPhysical() ? b.def : b.mdf;\\\\n    armor = this.applyArmorModifiers(b, armor);\\\\n    armor = Math.max(armor, 1);\\\\n    value *= ((((armor - 280.4) ** 2) / 110) / 16) / 730;\\\\n    value *= (730 - (armor * 51 - (armor ** 2) / 11) / 10) / 730;\\\\n} else if (this.isRecover()) {\\\\n    value *= -1;\\\\n}\\\\n\\\\n// Return Value\\\\nreturn isNaN(value) ? 0 : value;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Power\",\"DamageType2:str\":\"%1 Damage Power\",\"DamageType3:str\":\"%1 Recovery Power\",\"DamageType4:str\":\"%1 Recovery Power\",\"DamageType5:str\":\"%1 Drain Power\",\"DamageType6:str\":\"%1 Drain Power\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    return formula;\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"MK\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Multiplier\\\\nconst multiplier = Math.max(eval(item.damage.formula), 0);\\\\n\\\\n// Declare Values\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\narmor = this.applyArmorModifiers(target, armor);\\\\nconst denominator = Math.max(200 + armor, 1);\\\\n\\\\n// Calculate Damage \\\\nlet value = 0;\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    value = 200 * a.atk / denominator;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    value = 200 * a.mat / denominator;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    value = 200 * a.def / 200;\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    value = 200 * a.mdf / 200;\\\\n}\\\\nvalue *= multiplier;\\\\n\\\\n// Return Value\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Multiplier\",\"DamageType2:str\":\"%1 Damage Multiplier\",\"DamageType3:str\":\"%1 Recovery Multiplier\",\"DamageType4:str\":\"%1 Recovery Multiplier\",\"DamageType5:str\":\"%1 Drain Multiplier\",\"DamageType6:str\":\"%1 Drain Multiplier\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    const value = Math.max(eval(formula), 0);\\\\n    return '%1%'.format(Math.round(value * 100));\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"MOBA\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Damage Value\\\\nlet value = Math.max(eval(item.damage.formula), 0) * sign;\\\\n\\\\n// Apply Attacker's Offense Parameter\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    value *= a.atk;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    value *= a.mat;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    value *= a.def;\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    value *= a.mdf;\\\\n}\\\\n\\\\n// Apply Defender's Defense Parameter\\\\nif (this.isDamage() && !this.isCertainHit()) {\\\\n\\\\n    // Calculate Base Armor\\\\n    let armor = this.isPhysical() ? b.def : b.mdf;\\\\n    armor = this.applyArmorModifiers(target, armor);\\\\n\\\\n    // Apply Armor to Damage\\\\n    if (armor >= 0) {\\\\n        value *= 100 / (100 + armor);\\\\n    } else {\\\\n        value *= 2 - (100 / (100 - armor));\\\\n    }\\\\n}\\\\n\\\\n// Return Value\\\\nreturn isNaN(value) ? 0 : value;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Multiplier\",\"DamageType2:str\":\"%1 Damage Multiplier\",\"DamageType3:str\":\"%1 Recovery Multiplier\",\"DamageType4:str\":\"%1 Recovery Multiplier\",\"DamageType5:str\":\"%1 Drain Multiplier\",\"DamageType6:str\":\"%1 Drain Multiplier\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    const value = Math.max(eval(formula), 0);\\\\n    return '%1%'.format(Math.round(value * 100));\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"PKMN\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Power\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\n\\\\n// Declare Values\\\\nlet value = 0;\\\\nlet level = Math.max(a.level || a.luk, 1);\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\narmor = Math.max(this.applyArmorModifiers(target, armor), 0);\\\\nlet attackStat = 0;\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    attackStat = a.atk;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    attackStat =  a.mat;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    attackStat =  a.def;\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    attackStat =  a.mdf;\\\\n}\\\\n\\\\n// Calculate Damage\\\\nvalue = (((((2 * level) / 5) + 2) * power * (attackStat / armor)) / 50) + 2;\\\\n\\\\n// Return Value\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Power\",\"DamageType2:str\":\"%1 Damage Power\",\"DamageType3:str\":\"%1 Recovery Power\",\"DamageType4:str\":\"%1 Recovery Power\",\"DamageType5:str\":\"%1 Drain Power\",\"DamageType6:str\":\"%1 Drain Power\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    return formula;\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}"]
 *
 * @param Cap
 * @text Damage Cap
 *
 * @param EnableDamageCap:eval
 * @text Enable Damage Cap?
 * @parent Cap
 * @type boolean
 * @on Enable
 * @off Disable
 * @desc Put a maximum hard damage cap on how far damage can go?
 * This can be broken through the usage of notetags.
 * @default false
 *
 * @param DefaultHardCap:num
 * @text Default Hard Cap
 * @parent EnableDamageCap:eval
 * @type number
 * @min 1
 * @desc The default hard damage cap used before applying damage.
 * @default 9999
 *
 * @param EnableSoftCap:eval
 * @text Enable Soft Cap?
 * @parent Cap
 * @type boolean
 * @on Enable
 * @off Disable
 * @desc Soft caps ease in the damage values leading up to the 
 * hard damage cap. Requires hard Damage Cap enabled.
 * @default false
 *
 * @param DefaultSoftCap:num
 * @text Base Soft Cap Rate
 * @parent EnableSoftCap:eval
 * @desc The default soft damage cap used before applying damage.
 * @default 0.80
 *
 * @param DefaultSoftScaler:num
 * @text Soft Scale Constant
 * @parent EnableSoftCap:eval
 * @desc The default soft damage cap used before applying damage.
 * @default 0.1275
 *
 * @param Popups
 *
 * @param PopupDuration:num
 * @text Popup Duration
 * @parent Popups
 * @type number
 * @min 1
 * @desc Adjusts how many frames a popup stays visible.
 * @default 128
 *
 * @param NewPopupBottom:eval
 * @text Newest Popups Bottom
 * @parent Popups
 * @type boolean
 * @on Bottom
 * @off Top
 * @desc Puts the newest popups at the bottom.
 * @default true
 *
 * @param PopupPosition:str
 * @text Appear Position
 * @parent Popups
 * @type select
 * @option Head - At the top of the battler.
 * @value head
 * @option Center - At the center of the battler.
 * @value center
 * @option Base - At the foot of the battler.
 * @value base
 * @desc Selects where you want popups to appear relative to the battler.
 * @default base
 *
 * @param EndBattlePopups:eval
 * @text End Battle Show?
 * @parent Popups
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Show or hide popups upon victory or escape?
 * Used to hide battle-state removal popups.
 * @default true
 *
 * @param PopupOffsetX:num
 * @text Offset X
 * @parent Popups
 * @desc Sets how much to offset the sprites by horizontally.
 * Negative values go left. Positive values go right.
 * @default 0
 *
 * @param PopupOffsetY:num
 * @text Offset Y
 * @parent Popups
 * @desc Sets how much to offset the sprites by vertically.
 * Negative values go up. Positive values go down.
 * @default 0
 *
 * @param PopupShiftX:num
 * @text Shift X
 * @parent Popups
 * @desc Sets how much to shift the sprites by horizontally.
 * Negative values go left. Positive values go right.
 * @default 8
 *
 * @param PopupShiftY:num
 * @text Shift Y
 * @parent Popups
 * @desc Sets how much to shift the sprites by vertically.
 * Negative values go up. Positive values go down.
 * @default -28
 *
 * @param hpDamageFmt:str
 * @text HP Damage Format
 * @parent Popups
 * @desc Determines HP damage format for popup.
 * %1 - Value, %2 - HP Text
 * @default -%1
 *
 * @param hpHealingFmt:str
 * @text HP Healing Format
 * @parent Popups
 * @desc Determines HP healing format for popup.
 * %1 - Value, %2 - HP Text
 * @default +%1
 *
 * @param mpDamageFmt:str
 * @text MP Damage Format
 * @parent Popups
 * @desc Determines MP damage format for popup.
 * %1 - Value, %2 - MP Text
 * @default -%1 %2
 *
 * @param mpHealingFmt:str
 * @text MP Healing Format
 * @parent Popups
 * @desc Determines MP healing format for popup.
 * %1 - Value, %2 - MP Text
 * @default +%1 %2
 *
 * @param CriticalColor:eval
 * @text Critical Flash Color
 * @parent Popups
 * @desc Adjust the popup's flash color.
 * Format: [red, green, blue, alpha]
 * @default [255, 0, 0, 160]
 *
 * @param CriticalDuration:num
 * @text Critical Duration
 * @parent Popups
 * @type number
 * @min 1
 * @desc Adjusts how many frames a the flash lasts.
 * @default 128
 *
 * @param Formulas
 *
 * @param OverallFormulaJS:func
 * @text JS: Overall Formula
 * @parent Formulas
 * @type note
 * @desc The overall formula used when calculating damage.
 * @default "// Declare Constants\nconst target = arguments[0];\nconst critical = arguments[1];\nconst item = this.item();\n\n// Get Base Damage\nconst baseValue = this.evalDamageFormula(target);\n\n// Calculate Element Modifiers\nlet value = baseValue * this.calcElementRate(target);\n\n// Calculate Physical and Magical Modifiers\nif (this.isPhysical()) {\n    value *= target.pdr;\n}\nif (this.isMagical()) {\n    value *= target.mdr;\n}\n\n// Apply Healing Modifiers\nif (baseValue < 0) {\n    value *= target.rec;\n}\n\n// Apply Critical Modifiers\nif (critical) {\n    value = this.applyCritical(value);\n}\n\n// Apply Variance and Guard Modifiers\nvalue = this.applyVariance(value, item.damage.variance);\nvalue = this.applyGuard(value, target);\n\n// Finalize Damage\nvalue = Math.round(value);\nreturn value;"
 *
 * @param VarianceFormulaJS:func
 * @text JS: Variance Formula
 * @parent Formulas
 * @type note
 * @desc The formula used when damage variance.
 * @default "// Declare Constants\nconst damage = arguments[0];\nconst variance = arguments[1];\n\n// Calculate Variance\nconst amp = Math.floor(Math.max((Math.abs(damage) * variance) / 100, 0));\nconst v = Math.randomInt(amp + 1) + Math.randomInt(amp + 1) - amp;\n\n// Return Damage\nreturn damage >= 0 ? damage + v : damage - v;"
 *
 * @param GuardFormulaJS:func
 * @text JS: Guard Formula
 * @parent Formulas
 * @type note
 * @desc The formula used when damage is guarded.
 * @default "// Declare Constants\nconst damage = arguments[0];\nconst target = arguments[1];\n\n// Return Damage Early\nconst note = this.item().note;\nif (note.match(/<UNBLOCKABLE>/i)) return damage;\nif (!target.isGuard()) return damage;\nif (damage < 0) return damage;\n\n// Declare Guard Rate\nlet guardRate = 0.5;\nguardRate /= target.grd;\n\n// Return Damage\nreturn damage * guardRate;"
 *
 * @param Critical
 * @text Critical Hits
 *
 * @param CriticalHitRateJS:func
 * @text JS: Rate Formula
 * @parent Critical
 * @type note
 * @desc The formula used to calculate Critical Hit Rates.
 * @default "// Declare Constants\nconst user = this.subject();\nconst target = arguments[0];\n\n// Create Base Critical Rate\nlet rate = this.subject().cri * (1 - target.cev);\n\n// Apply Notetags\nconst note = this.item().note;\nif (note.match(/<ALWAYS CRITICAL>/i)) {\n    return 1;\n}\nif (note.match(/<SET CRITICAL RATE:[ ](\\d+)([%％])>/i)) {\n    return Number(RegExp.$1) / 100;\n}\nif (note.match(/<MODIFY CRITICAL RATE:[ ](\\d+)([%％])>/i)) {\n    rate *= Number(RegExp.$1) / 100;\n}\nif (note.match(/<MODIFY CRITICAL RATE:[ ]([\\+\\-]\\d+)([%％])>/i)) {\n    rate += Number(RegExp.$1) / 100;\n}\nif (note.match(/<JS CRITICAL RATE>\\s*([\\s\\S]*)\\s*<\\/JS CRITICAL RATE>/i)) {\n    const code = String(RegExp.$1);\n    try {\n        eval(code);\n    } catch (e) {\n        if ($gameTemp.isPlaytest()) console.log(e);\n    }\n}\n\n// Apply LUK Buffs/Debuffs\nconst lukStack = this.subject().buff(7);\nrate *= 2 ** lukStack;\n\n// Return Rate\nreturn rate;"
 *
 * @param CriticalHitMultiplier:func
 * @text JS: Damage Formula
 * @parent Critical
 * @type note
 * @desc The formula used to calculate Critical Hit Damage modification.
 * @default "// Declare Constants\nconst user = this.subject();\nlet damage = arguments[0];\nlet multiplier = 2.0;\nlet bonusDamage = this.subject().luk * this.subject().cri;\n\n// Apply Notetags\nconst note = this.item().note;\nif (note.match(/<MODIFY CRITICAL MULTIPLIER:[ ](\\d+)([%％])>/i)) {\n    multiplier = Number(RegExp.$1) / 100;\n}\nif (note.match(/<MODIFY CRITICAL MULTIPLIER:[ ]([\\+\\-]\\d+)([%％])>/i)) {\n    multiplier += Number(RegExp.$1) / 100;\n}\nif (note.match(/<MODIFY CRITICAL BONUS DAMAGE:[ ](\\d+)([%％])>/i)) {\n    bonusDamage *= Number(RegExp.$1) / 100;\n}\nif (note.match(/<MODIFY CRITICAL BONUS DAMAGE:[ ]([\\+\\-]\\d+)([%％])>/i)) {\n    bonusDamage += bonusDamage * (RegExp.$1) / 100;\n}\nif (note.match(/<JS CRITICAL DAMAGE>\\s*([\\s\\S]*)\\s*<\\/JS CRITICAL DAMAGE>/i)) {\n    const code = String(RegExp.$1);\n    try {\n        eval(code);\n    } catch (e) {\n        if ($gameTemp.isPlaytest()) console.log(e);\n    }\n}\n\n// Return Damage\nreturn damage * multiplier + bonusDamage;"
 *
 */
/* ----------------------------------------------------------------------------
 * Damage Formula Style
 * ----------------------------------------------------------------------------
 */
/*~struct~DamageStyle:
 *
 * @param Name:str
 * @text Name
 * @desc Name of this Damage Style.
 * Used for notetags and such.
 * @default Untitled
 *
 * @param Formula:func
 * @text JS: Formula
 * @parent Name:str
 * @type note
 * @desc The base formula for this Damage Style.
 * @default "// Define Constants\nconst item = this.item();\nconst a = this.subject();\nconst b = target;\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\n\n// Create Damage Value\nlet value = Math.max(eval(item.damage.formula), 0) * sign;\n\n// Return Value\nreturn isNaN(value) ? 0 : value;"
 *
 * @param ItemsEquipsCore
 * @text Items & Equips Core
 *
 * @param DamageType
 * @text Damage Label
 * @parent ItemsEquipsCore
 *
 * @param DamageType1:str
 * @text HP Damage
 * @parent DamageType
 * @desc Vocabulary used for this data entry.
 * @default %1 Damage Multiplier
 *
 * @param DamageType2:str
 * @text MP Damage
 * @parent DamageType
 * @desc Vocabulary used for this data entry.
 * @default %1 Damage Multiplier
 *
 * @param DamageType3:str
 * @text HP Recovery
 * @parent DamageType
 * @desc Vocabulary used for this data entry.
 * @default %1 Recovery Multiplier
 *
 * @param DamageType4:str
 * @text MP Recovery
 * @parent DamageType
 * @desc Vocabulary used for this data entry.
 * @default %1 Recovery Multiplier
 *
 * @param DamageType5:str
 * @text HP Drain
 * @parent DamageType
 * @desc Vocabulary used for this data entry.
 * @default %1 Drain Multiplier
 *
 * @param DamageType6:str
 * @text MP Drain
 * @parent DamageType
 * @desc Vocabulary used for this data entry.
 * @default %1 Drain Multiplier
 *
 * @param DamageDisplay:func
 * @text JS: Damage Display
 * @parent ItemsEquipsCore
 * @type note
 * @desc Code used the data displayed for this category.
 * @default "// Define Constants\nconst item = this._item;\nconst formula = item.damage.formula;\nconst a = this._tempActorA;\nconst b = this._tempActorB;\nconst user = a;\nconst target = b;\n\n// Return Value\ntry {\n    const value = Math.max(eval(formula), 0);\n    return '%1%'.format(Math.round(value * 100));\n} catch (e) {\n    if ($gameTemp.isPlaytest()) {\n        console.log('Damage Formula Error for %1'.format(this._item.name));\n    }\n    return '?????';\n}"
 *
 */
/* ----------------------------------------------------------------------------
 * Mechanics Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~Mechanics:
 *
 * @param ActionSpeed
 * @text Action Speed
 *
 * @param AllowRandomSpeed:eval
 * @text Allow Random Speed?
 * @parent ActionSpeed
 * @type boolean
 * @on Allow
 * @off Disable
 * @desc Allow speed to be randomized base off the user's AGI?
 * @default false
 *
 * @param SyncBuffExpire:eval
 * @text Turn End Buffs Expire
 * @parent ActionSpeed
 * @type boolean
 * @on Expire
 * @off Don't Expire
 * @desc Normally, buffs expire after all actions end.
 * But here, you can have buffs expire on turn end.
 * @default false
 *
 * @param CalcActionSpeedJS:func
 * @text JS: Calculate
 * @parent ActionSpeed
 * @type note
 * @desc Code used to calculate action speed.
 * @default "// Declare Constants\nconst agi = this.subject().agi;\n\n// Create Speed\nlet speed = agi;\nif (this.allowRandomSpeed()) {\n    speed += Math.randomInt(Math.floor(5 + agi / 4));\n}\nif (this.item()) {\n    speed += this.item().speed;\n}\nif (this.isAttack()) {\n    speed += this.subject().attackSpeed();\n}\n\n// Return Speed\nreturn speed;"
 *
 * @param BaseTroop
 * @text Base Troop
 *
 * @param BaseTroopIDs:arraynum
 * @text Base Troop ID's
 * @parent BaseTroop
 * @type troop[]
 * @desc Select the Troop ID(s) to duplicate page events from for all other troops.
 * @default ["1"]
 *
 * @param CommonEvents
 * @text Common Events (on Map)
 *
 * @param BattleStartEvent:num
 * @text Pre-Battle Event
 * @parent CommonEvents
 * @type common_event
 * @desc Common Event to run before each battle on map.
 * Use to 0 to not run any Common Event at all.
 * @default 0
 *
 * @param BattleEndEvent:num
 * @text Post-Battle Event
 * @parent CommonEvents
 * @type common_event
 * @desc Queued Common Event to run after each battle on map.
 * Use to 0 to not run any Common Event at all.
 * @default 0
 *
 * @param VictoryEvent:num
 * @text Victory Event
 * @parent CommonEvents
 * @type common_event
 * @desc Queued Common Event to run upon victory on map.
 * Use to 0 to not run any Common Event at all.
 * @default 0
 *
 * @param DefeatEvent:num
 * @text Defeat Event
 * @parent CommonEvents
 * @type common_event
 * @desc Queued Common Event to run upon defeat on map.
 * Use to 0 to not run any Common Event at all.
 * @default 0
 *
 * @param EscapeSuccessEvent:num
 * @text Escape Success Event
 * @parent CommonEvents
 * @type common_event
 * @desc Queued Common Event to run upon escape success on map.
 * Use to 0 to not run any Common Event at all.
 * @default 0
 *
 * @param EscapeFailEvent:num
 * @text Escape Fail Event
 * @parent CommonEvents
 * @type common_event
 * @desc Queued Common Event to run upon escape failure on map.
 * Use to 0 to not run any Common Event at all.
 * @default 0
 *
 * @param Escape
 *
 * @param CalcEscapeRatioJS:func
 * @text JS: Calc Escape Ratio
 * @parent Escape
 * @type note
 * @desc Code used to calculate the escape success ratio.
 * @default "// Calculate Escape Ratio\nlet ratio = 0.5;\nratio *= $gameParty.agility();\nratio /= $gameTroop.agility();\n\n// Return Ratio\nreturn ratio;"
 *
 * @param CalcEscapeRaiseJS:func
 * @text JS: Calc Escape Raise
 * @parent Escape
 * @type note
 * @desc Code used to calculate how much the escape success ratio raises upon each failure.
 * @default "// Calculate Escape Ratio\nlet value = 0.1;\nvalue += $gameParty.aliveMembers().length;\n\n// Return Value\nreturn value;"
 *
 * @param Switches
 *
 * @param SwitchCritical:num
 * @text Switch: Critical
 * @parent Switches
 * @type switch
 * @desc Turns switch ON if the action performs a critical hit.
 * Switch reverts to OFF whenever an action starts.
 * @default 0
 *
 * @param SwitchMissEvade:num
 * @text Switch: Miss/Evade
 * @parent Switches
 * @type switch
 * @desc Turns switch ON if the action misses/is evaded.
 * Switch reverts to OFF whenever an action starts.
 * @default 0
 *
 * @param Variables
 *
 * @param VariableDmg:num
 * @text Variable: Damage
 * @parent Variables
 * @type variable
 * @desc Variable records target damage during action.
 * Variable reverts to 0 whenever an action starts.
 * @default 0
 *
 * @param VariableHeal:num
 * @text Variable: Healing
 * @parent Variables
 * @type variable
 * @desc Variable records target healing during action.
 * Variable reverts to 0 whenever an action starts.
 * @default 0
 *
 * @param BattleJS
 * @text JS: Battle-Related
 * 
 * @param PreStartBattleJS:func
 * @text JS: Pre-Start Battle
 * @parent BattleJS
 * @type note
 * @desc Target function: BattleManager.startBattle()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param PostStartBattleJS:func
 * @text JS: Post-Start Battle
 * @parent BattleJS
 * @type note
 * @desc Target function: BattleManager.startBattle()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 * 
 * @param BattleVictoryJS:func
 * @text JS: Battle Victory
 * @parent BattleJS
 * @type note
 * @desc Target function: BattleManager.processVictory()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param EscapeSuccessJS:func
 * @text JS: Escape Success
 * @parent BattleJS
 * @type note
 * @desc Target function: BattleManager.onEscapeSuccess()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param EscapeFailureJS:func
 * @text JS: Escape Failure
 * @parent BattleJS
 * @type note
 * @desc Target function: BattleManager.onEscapeFailure()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 * 
 * @param BattleDefeatJS:func
 * @text JS: Battle Defeat
 * @parent BattleJS
 * @type note
 * @desc Target function: BattleManager.processDefeat()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 * 
 * @param PreEndBattleJS:func
 * @text JS: Pre-End Battle
 * @parent BattleJS
 * @type note
 * @desc Target function: BattleManager.endBattle()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param PostEndBattleJS:func
 * @text JS: Post-End Battle
 * @parent BattleJS
 * @type note
 * @desc Target function: BattleManager.endBattle()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param TurnJS
 * @text JS: Turn-Related
 *
 * @param PreStartTurnJS:func
 * @text JS: Pre-Start Turn
 * @parent TurnJS
 * @type note
 * @desc Target function: BattleManager.startTurn()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param PostStartTurnJS:func
 * @text JS: Post-Start Turn
 * @parent TurnJS
 * @type note
 * @desc Target function: BattleManager.startTurn()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param PreEndTurnJS:func
 * @text JS: Pre-End Turn
 * @parent TurnJS
 * @type note
 * @desc Target function: Game_Battler.prototype.onTurnEnd()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param PostEndTurnJS:func
 * @text JS: Post-End Turn
 * @parent TurnJS
 * @type note
 * @desc Target function: Game_Battler.prototype.onTurnEnd()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param PreRegenerateJS:func
 * @text JS: Pre-Regenerate
 * @parent TurnJS
 * @type note
 * @desc Target function: Game_Battler.prototype.regenerateAll()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param PostRegenerateJS:func
 * @text JS: Post-Regenerate
 * @parent TurnJS
 * @type note
 * @desc Target function: Game_Battler.prototype.regenerateAll()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param ActionJS
 * @text JS: Action-Related
 *
 * @param PreStartActionJS:func
 * @text JS: Pre-Start Action
 * @parent ActionJS
 * @type note
 * @desc Target function: BattleManager.startAction()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst value = arguments[0];\nconst user = this.subject();\nconst target = user;\nconst a = user;\nconst b = user;\nconst action = this;\nconst item = this.item();\nconst skill = this.item();\n\n// Perform Actions\n"
 *
 * @param PostStartActionJS:func
 * @text JS: Post-Start Action
 * @parent ActionJS
 * @type note
 * @desc Target function: BattleManager.startAction()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst value = arguments[0];\nconst user = this.subject();\nconst target = user;\nconst a = user;\nconst b = user;\nconst action = this;\nconst item = this.item();\nconst skill = this.item();\n\n// Perform Actions\n"
 *
 * @param PreApplyJS:func
 * @text JS: Pre-Apply
 * @parent ActionJS
 * @type note
 * @desc Target function: Game_Action.prototype.apply()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst value = arguments[0];\nconst target = arguments[1];\nconst user = this.subject();\nconst a = user;\nconst b = target;\nconst action = this;\nconst item = this.item();\nconst skill = this.item();\n\n// Perform Actions\n\n// Return Value\nreturn value;"
 *
 * @param PreDamageJS:func
 * @text JS: Pre-Damage
 * @parent ActionJS
 * @type note
 * @desc Target function: Game_Action.prototype.executeDamage()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst value = arguments[0];\nconst target = arguments[1];\nconst user = this.subject();\nconst a = user;\nconst b = target;\nconst action = this;\nconst item = this.item();\nconst skill = this.item();\n\n// Perform Actions\n\n// Return Value\nreturn value;"
 *
 * @param PostDamageJS:func
 * @text JS: Post-Damage
 * @parent ActionJS
 * @type note
 * @desc Target function: Game_Action.prototype.executeDamage()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst value = arguments[0];\nconst target = arguments[1];\nconst user = this.subject();\nconst a = user;\nconst b = target;\nconst action = this;\nconst item = this.item();\nconst skill = this.item();\n\n// Perform Actions\n\n// Return Value\nreturn value;"
 *
 * @param PostApplyJS:func
 * @text JS: Post-Apply
 * @parent ActionJS
 * @type note
 * @desc Target function: Game_Action.prototype.apply()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst value = arguments[0];\nconst target = arguments[1];\nconst user = this.subject();\nconst a = user;\nconst b = target;\nconst action = this;\nconst item = this.item();\nconst skill = this.item();\n\n// Perform Actions\n\n// Return Value\nreturn value;"
 *
 * @param PreEndActionJS:func
 * @text JS: Pre-End Action
 * @parent ActionJS
 * @type note
 * @desc Target function: BattleManager.endAction()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst value = arguments[0];\nconst user = this.subject();\nconst target = user;\nconst a = user;\nconst b = user;\nconst action = this;\nconst item = this.item();\nconst skill = this.item();\n\n// Perform Actions\n"
 *
 * @param PostEndActionJS:func
 * @text JS: Post-End Action
 * @parent ActionJS
 * @type note
 * @desc Target function: BattleManager.endAction()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst value = arguments[0];\nconst user = this.subject();\nconst target = user;\nconst a = user;\nconst b = user;\nconst action = this;\nconst item = this.item();\nconst skill = this.item();\n\n// Perform Actions\n"
 *
 */
/* ----------------------------------------------------------------------------
 * Battle Layout Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~BattleLayout:
 *
 * @param Style:str
 * @text Battle Layout Style
 * @type select
 * @option Default - Shows actor faces in Battle Status.
 * @value default
 * @option List - Lists actors in Battle Status.
 * @value list
 * @option XP - Shows actor battlers in a stretched Battle Status.
 * @value xp
 * @option Portrait - Shows portraits in a stretched Battle Status.
 * @value portrait
 * @option Border - Displays windows around the screen border.
 * @value border
 * @option Frontview Battle UI - Requires VisuMZ_3_FrontviewBattleUI
 * @value frontview_ui
 * @option Sideview Battle UI - Requires VisuMZ_3_SideviewBattleUI
 * @value sideview_ui
 * @desc The style used for the battle layout.
 * @default default
 *
 * @param ListStyle
 * @text List Style
 * @parent Style:str
 *
 * @param ShowFacesListStyle:eval
 * @text Show Faces
 * @parent ListStyle
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Shows faces in List Style?
 * @default true
 *
 * @param CommandWidth:num
 * @text Command Window Width
 * @parent ListStyle
 * @type number
 * @min 1
 * @desc Determine the window width for the Party and Actor Command
 * Windows. Affects Default and List Battle Layout styles.
 * @default 192
 *
 * @param XPStyle
 * @text XP Style
 * @parent Style:str
 *
 * @param XPActorCommandLines:num
 * @text Command Lines
 * @parent XPStyle
 * @type number
 * @min 1
 * @desc Number of action lines in the Actor Command Window for the XP Style.
 * @default 4
 *
 * @param XPActorDefaultHeight:num
 * @text Sprite Height
 * @parent XPStyle
 * @type number
 * @min 1
 * @desc Default sprite height used when if the sprite's height has not been determined yet.
 * @default 64
 *
 * @param XPSpriteYLocation:str
 * @text Sprite Base Location
 * @parent XPStyle
 * @type select
 * @option Above Name - Sprite is located above the name.
 * @value name
 * @option Bottom - Sprite is located at the bottom of the window.
 * @value bottom
 * @option Centered - Sprite is centered in the window.
 * @value center
 * @option Top - Sprite is located at the top of the window.
 * @value top
 * @desc Determine where the sprite is located on the Battle Status Window.
 * @default name
 *
 * @param PotraitStyle
 * @text Portrait Style
 * @parent Style:str
 *
 * @param ShowPortraits:eval
 * @text Show Portraits?
 * @parent PotraitStyle
 * @type boolean
 * @on Portraits
 * @off Faces
 * @desc Requires VisuMZ_1_MainMenuCore.
 * Shows the actor's portrait instead of a face.
 * @default true
 *
 * @param PortraitScale:num
 * @text Portrait Scaling
 * @parent PotraitStyle
 * @desc If portraits are used, scale them by this much.
 * @default 0.5
 *
 * @param BorderStyle
 * @text Border Style
 * @parent Style:str
 *
 * @param SkillItemBorderCols:num
 * @text Columns
 * @parent BorderStyle
 * @type number
 * @min 1
 * @desc The total number of columns for Skill & Item Windows
 * in the battle scene.
 * @default 1
 *
 * @param ShowPortraitsBorderStyle:eval
 * @text Show Portraits?
 * @parent BorderStyle
 * @type boolean
 * @on Portraits
 * @off Faces
 * @desc Requires VisuMZ_1_MainMenuCore.
 * Shows the actor's portrait at the edge of the screen.
 * @default true
 *
 * @param PortraitScaleBorderStyle:num
 * @text Portrait Scaling
 * @parent BorderStyle
 * @desc If portraits are used, scale them by this much.
 * @default 1.0
 *
 * @param SkillItemWindows
 * @text Skill & Item Windows
 *
 * @param SkillItemMiddleLayout:eval
 * @text Middle Layout
 * @parent SkillItemWindows
 * @type boolean
 * @on Middle
 * @off Bottom
 * @desc Shows the Skill & Item Windows in mid-screen?
 * @default false
 *
 * @param SkillItemStandardCols:num
 * @text Columns
 * @parent SkillItemWindows
 * @type number
 * @min 1
 * @desc The total number of columns for Skill & Item Windows
 * in the battle scene.
 * @default 2
 *
 * @param StatusWindow
 * @text Status Window Elements
 *
 * @param StatusWindowName
 * @text Battler Name
 * @parent StatusWindow
 *
 * @param NameOffsetX:num
 * @text Offset: X
 * @parent StatusWindowName
 * @desc Offset this Battle Status Window element's X.
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param NameOffsetY:num
 * @text Offset: Y
 * @parent StatusWindowName
 * @desc Offset this Battle Status Window element's Y.
 * Negative goes up. Positive goes down.
 * @default +0
 *
 * @param StatusWindowHpGauge
 * @text Gauge 1 (HP)
 * @parent StatusWindow
 *
 * @param HpGaugeOffsetX:num
 * @text Offset: X
 * @parent StatusWindowHpGauge
 * @desc Offset this Battle Status Window element's X.
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param HpGaugeOffsetY:num
 * @text Offset: Y
 * @parent StatusWindowHpGauge
 * @desc Offset this Battle Status Window element's Y.
 * Negative goes up. Positive goes down.
 * @default +0
 *
 * @param StatusWindowMpGauge
 * @text Gauge 2 (MP)
 * @parent StatusWindow
 *
 * @param MpGaugeOffsetX:num
 * @text Offset: X
 * @parent StatusWindowMpGauge
 * @desc Offset this Battle Status Window element's X.
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param MpGaugeOffsetY:num
 * @text Offset: Y
 * @parent StatusWindowMpGauge
 * @desc Offset this Battle Status Window element's Y.
 * Negative goes up. Positive goes down.
 * @default +0
 *
 * @param StatusWindowTpGauge
 * @text Gauge 3 (TP)
 * @parent StatusWindow
 *
 * @param TpGaugeOffsetX:num
 * @text Offset: X
 * @parent StatusWindowTpGauge
 * @desc Offset this Battle Status Window element's X.
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param TpGaugeOffsetY:num
 * @text Offset: Y
 * @parent StatusWindowTpGauge
 * @desc Offset this Battle Status Window element's Y.
 * Negative goes up. Positive goes down.
 * @default +0
 *
 * @param StatusWindowStateIcon
 * @text State Icon
 * @parent StatusWindow
 *
 * @param StateIconOffsetX:num
 * @text Offset: X
 * @parent StatusWindowStateIcon
 * @desc Offset this Battle Status Window element's X.
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param StateIconOffsetY:num
 * @text Offset: Y
 * @parent StatusWindowStateIcon
 * @desc Offset this Battle Status Window element's Y.
 * Negative goes up. Positive goes down.
 * @default +0
 *
 * @param StatusWindowTpbGauge
 * @text TPB/ATB Gauge
 * @parent StatusWindow
 *
 * @param TpbGaugeOffsetX:num
 * @text Offset: X
 * @parent StatusWindowTpbGauge
 * @desc Offset this Battle Status Window element's X.
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param TpbGaugeOffsetY:num
 * @text Offset: Y
 * @parent StatusWindowTpbGauge
 * @desc Offset this Battle Status Window element's Y.
 * Negative goes up. Positive goes down.
 * @default +0
 *
 * @param StatusWindowSkin
 * @text Window Skin
 * @parent StatusWindow
 *
 * @param StatusWindowSkinFilename:str
 * @text Filename
 * @parent StatusWindowSkin
 * @type file
 * @dir img/system/
 * @desc Filename used for the Battle Status Window skin.
 * Leave this empty to use the default window skin.
 * @default 
 *
 * @param StatusWindowSkinHide:eval
 * @text Hide Window Skin?
 * @parent StatusWindowSkin
 * @type boolean
 * @on No Window Skin
 * @off Default Skin
 * @desc Show/Hide the window skin for the Battle Status Window?
 * @default false
 *
 * @param StatusWindowSelectBack
 * @text Selectable Background
 * @parent StatusWindow
 *
 * @param StatusWindowSelectableBackHide:eval
 * @text Hide Selectable BG?
 * @parent StatusWindowSelectBack
 * @type boolean
 * @on No Selectable BG
 * @off Default Selectable BG
 * @desc Show/Hide the selectable background box for the Battle Status Window?
 * @default false
 *
 * @param StatusWindowAttachments
 * @text Attachments
 * @parent StatusWindow
 *
 * @param StatusWindowBackAttachment
 * @text Back Attachment
 * @parent StatusWindowAttachments
 *
 * @param StatusWindowAttachmentBack:str
 * @text Filename
 * @parent StatusWindowBackAttachment
 * @type file
 * @dir img/system/
 * @desc Filename used for an image to attach to the back of the
 * Battle Status Window. Leave empty for none.
 * @default 
 *
 * @param StatusWindowAttachmentBackOffsetX:num
 * @text Offset: X
 * @parent StatusWindowBackAttachment
 * @desc Offset this Battle Status Window element's X.
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param StatusWindowAttachmentBackOffsetY:num
 * @text Offset: Y
 * @parent StatusWindowBackAttachment
 * @desc Offset this Battle Status Window element's Y.
 * Negative goes up. Positive goes down.
 * @default +0
 *
 * @param StatusWindowFrontAttachment
 * @text Front Attachment
 * @parent StatusWindowAttachments
 *
 * @param StatusWindowAttachmentFront:str
 * @text Filename
 * @parent StatusWindowFrontAttachment
 * @type file
 * @dir img/system/
 * @desc Filename used for an image to attach to the front of the
 * Battle Status Window. Leave empty for none.
 * @default 
 *
 * @param StatusWindowAttachmentFrontOffsetX:num
 * @text Offset: X
 * @parent StatusWindowFrontAttachment
 * @desc Offset this Battle Status Window element's X.
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param StatusWindowAttachmentFrontOffsetY:num
 * @text Offset: Y
 * @parent StatusWindowFrontAttachment
 * @desc Offset this Battle Status Window element's Y.
 * Negative goes up. Positive goes down.
 * @default +0
 *
 * @param UiElements
 * @text UI Elements
 *
 * @param AntiTintUiElements:eval
 * @text Anti-Tint UI?
 * @parent UiElements
 * @type boolean
 * @on Prevent Tint
 * @off Allow Tint
 * @desc Prevent UI Elements from being tinted?
 * @default true
 *
 */
/* ----------------------------------------------------------------------------
 * Battle Log Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~BattleLog:
 *
 * @param General
 *
 * @param BackColor:str
 * @text Back Color
 * @parent General
 * @desc Use #rrggbb for a hex color.
 * @default #000000
 *
 * @param MaxLines:num
 * @text Max Lines
 * @parent General
 * @type number
 * @min 1
 * @desc Maximum number of lines to be displayed.
 * @default 10
 *
 * @param MessageWait:num
 * @text Message Wait
 * @parent General
 * @type number
 * @min 1
 * @desc Number of frames for a usual message wait.
 * @default 16
 *
 * @param TextAlign:str
 * @text Text Align
 * @parent General
 * @type combo
 * @option left
 * @option center
 * @option right
 * @desc Text alignment for the Window_BattleLog.
 * @default center
 *
 * @param BattleLogRectJS:func
 * @text JS: X, Y, W, H
 * @parent General
 * @type note
 * @desc Code used to determine the dimensions for the battle log.
 * @default "const wx = 0;\nconst wy = 0;\nconst ww = Graphics.boxWidth;\nconst wh = this.calcWindowHeight(10, false);\nreturn new Rectangle(wx, wy, ww, wh);"
 *
 * @param StartTurn
 * @text Start Turn
 *
 * @param StartTurnShow:eval
 * @text Show Start Turn?
 * @parent StartTurn
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display turn changes at the start of the turn?
 * @default false
 *
 * @param StartTurnMsg:str
 * @text Start Turn Message
 * @parent StartTurn
 * @desc Message displayed at turn start.
 * %1 - Turn Count
 * @default Turn %1
 *
 * @param StartTurnWait:num
 * @text Start Turn Wait
 * @parent StartTurn
 * @type number
 * @min 1
 * @desc Number of frames to wait after a turn started.
 * @default 40
 *
 * @param DisplayAction
 * @text Display Action
 *
 * @param ActionCenteredName:eval
 * @text Show Centered Action?
 * @parent DisplayAction
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display a centered text of the action name?
 * @default true
 *
 * @param ActionSkillMsg1:eval
 * @text Show Skill Message 1?
 * @parent DisplayAction
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display the 1st skill message?
 * @default false
 *
 * @param ActionSkillMsg2:eval
 * @text Show Skill Message 2?
 * @parent DisplayAction
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display the 2nd skill message?
 * @default true
 *
 * @param ActionItemMsg:eval
 * @text Show Item Message?
 * @parent DisplayAction
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display the item use message?
 * @default false
 *
 * @param ActionChanges
 * @text Action Changes
 *
 * @param ShowCounter:eval
 * @text Show Counter?
 * @parent ActionChanges
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display counter text?
 * @default true
 *
 * @param ShowCounterWait:eval
 * @text Wait Frames
 * @parent ShowCounter:eval
 * @type number
 * @desc How many frames should the battle log wait after text?
 * 60 frames = 1 second.
 * @default 0
 *
 * @param ShowReflect:eval
 * @text Show Reflect?
 * @parent ActionChanges
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display magic reflection text?
 * @default true
 *
 * @param ShowReflectWait:eval
 * @text Wait Frames
 * @parent ShowReflect:eval
 * @type number
 * @desc How many frames should the battle log wait after text?
 * 60 frames = 1 second.
 * @default 0
 *
 * @param ShowSubstitute:eval
 * @text Show Substitute?
 * @parent ActionChanges
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display substitute text?
 * @default true
 *
 * @param ShowSubstituteWait:eval
 * @text Wait Frames
 * @parent ShowSubstitute:eval
 * @type number
 * @desc How many frames should the battle log wait after text?
 * 60 frames = 1 second.
 * @default 0
 *
 * @param ActionResults
 * @text Action Results
 *
 * @param ShowFailure:eval
 * @text Show No Effect?
 * @parent ActionResults
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display no effect text?
 * @default false
 *
 * @param ShowCritical:eval
 * @text Show Critical?
 * @parent ActionResults
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display critical text?
 * @default false
 *
 * @param ShowMissEvasion:eval
 * @text Show Miss/Evasion?
 * @parent ActionResults
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display miss/evasion text?
 * @default false
 *
 * @param ShowHpDmg:eval
 * @text Show HP Damage?
 * @parent ActionResults
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display HP Damage text?
 * @default false
 *
 * @param ShowMpDmg:eval
 * @text Show MP Damage?
 * @parent ActionResults
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display MP Damage text?
 * @default false
 *
 * @param ShowTpDmg:eval
 * @text Show TP Damage?
 * @parent ActionResults
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display TP Damage text?
 * @default false
 *
 * @param DisplayStates
 * @text Display States
 *
 * @param ShowAddedState:eval
 * @text Show Added States?
 * @parent DisplayStates
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display added states text?
 * @default false
 *
 * @param ShowRemovedState:eval
 * @text Show Removed States?
 * @parent DisplayStates
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display removed states text?
 * @default false
 *
 * @param ShowCurrentState:eval
 * @text Show Current States?
 * @parent DisplayStates
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display the currently affected state text?
 * @default false
 *
 * @param ShowAddedBuff:eval
 * @text Show Added Buffs?
 * @parent DisplayStates
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display added buffs text?
 * @default false
 *
 * @param ShowAddedDebuff:eval
 * @text Show Added Debuffs?
 * @parent DisplayStates
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display added debuffs text?
 * @default false
 *
 * @param ShowRemovedBuff:eval
 * @text Show Removed Buffs?
 * @parent DisplayStates
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display removed de/buffs text?
 * @default false
 *
 */
/* ----------------------------------------------------------------------------
 * Battleback Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~Battleback:
 *
 * @param DefaultStyle:str
 * @text Default Style
 * @type select
 * @option MZ (MZ's default style)
 * @value MZ
 * @option 1:1 (No Scaling)
 * @value 1:1
 * @option Scale To Fit (Scale to screen size)
 * @value ScaleToFit
 * @option Scale Down (Scale Downward if Larger than Screen)
 * @value ScaleDown
 * @option Scale Up (Scale Upward if Smaller than Screen)
 * @value ScaleUp
 * @desc The default scaling style used for battlebacks.
 * @default MZ
 *
 * @param jsOneForOne:func
 * @text JS: 1:1
 * @type note
 * @desc This code gives you control over the scaling for this style.
 * @default "// Adjust Size\nthis.width = Graphics.width;\nthis.height = Graphics.height;\n\n// Adjust Scale\nconst scale = 1.0;\nthis.scale.x = scale;\nthis.scale.y = scale;\n\n// Adjust Coordinates\nthis.x = 0;\nthis.y = 0;"
 *
 * @param jsScaleToFit:func
 * @text JS: Scale To Fit
 * @type note
 * @desc This code gives you control over the scaling for this style.
 * @default "// Adjust Size\nthis.width = Graphics.width;\nthis.height = Graphics.height;\n\n// Adjust Scale\nconst ratioX = this.width / this.bitmap.width;\nconst ratioY = this.height / this.bitmap.height;\nconst scale = Math.max(ratioX, ratioY);\nthis.scale.x = scale;\nthis.scale.y = scale;\n\n// Adjust Coordinates\nthis.x = (Graphics.width - this.width) / 2;\nthis.y = Graphics.height - this.height;"
 *
 * @param jsScaleDown:func
 * @text JS: Scale Down
 * @type note
 * @desc This code gives you control over the scaling for this style.
 * @default "// Adjust Size\nthis.width = Graphics.width;\nthis.height = Graphics.height;\n\n// Adjust Scale\nconst ratioX = Math.min(1, this.width / this.bitmap.width);\nconst ratioY = Math.min(1, this.height / this.bitmap.height);\nconst scale = Math.max(ratioX, ratioY);\nthis.scale.x = scale;\nthis.scale.y = scale;\n\n// Adjust Coordinates\nthis.x = (Graphics.width - this.width) / 2;\nthis.y = Graphics.height - this.height;"
 *
 * @param jsScaleUp:func
 * @text JS: Scale Up
 * @type note
 * @desc This code gives you control over the scaling for this style.
 * @default "// Adjust Size\nthis.width = Graphics.width;\nthis.height = Graphics.height;\n\n// Adjust Scale\nconst ratioX = Math.max(1, this.width / this.bitmap.width);\nconst ratioY = Math.max(1, this.height / this.bitmap.height);\nconst scale = Math.max(ratioX, ratioY);\nthis.scale.x = scale;\nthis.scale.y = scale;\n\n// Adjust Coordinates\nthis.x = (Graphics.width - this.width) / 2;\nthis.y = Graphics.height - this.height;"
 *
 */
/* ----------------------------------------------------------------------------
 * Party Command Window Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~PartyCmd:
 *
 * @param Cmd
 * @text Command Window
 *
 * @param CmdStyle:str
 * @text Style
 * @parent Cmd
 * @type select
 * @option Text Only
 * @value text
 * @option Icon Only
 * @value icon
 * @option Icon + Text
 * @value iconText
 * @option Automatic
 * @value auto
 * @desc How do you wish to draw commands in the Party Command Window?
 * @default auto
 *
 * @param CmdTextAlign:str
 * @text Text Align
 * @parent Cmd
 * @type combo
 * @option left
 * @option center
 * @option right
 * @desc Text alignment for the Party Command Window.
 * @default left
 *
 * @param CmdIconFight:num
 * @text Fight Icon
 * @parent Cmd
 * @desc The icon used for the Fight command.
 * @default 76
 *
 * @param CommandAddAutoBattle:eval
 * @text Add Auto Battle?
 * @parent Cmd
 * @type boolean
 * @on Add
 * @off Don't
 * @desc Add the "Auto Battle" command to the Command Window?
 * @default true
 *
 * @param CmdIconAutoBattle:num
 * @text Auto Battle Icon
 * @parent CommandAddAutoBattle:eval
 * @desc The icon used for the Auto Battle command.
 * @default 78
 *
 * @param CmdTextAutoBattle:str
 * @text Auto Battle Text
 * @parent CommandAddAutoBattle:eval
 * @desc The text used for the Auto Battle command.
 * @default Auto
 *
 * @param CommandAddStatus:eval
 * @text Add Status?
 * @parent Cmd
 * @type boolean
 * @on Add
 * @off Don't
 * @desc Add the "Status" command to the Command Window?
 * @default true
 *
 * @param CmdIconStatus:num
 * @text Status Icon
 * @parent CommandAddStatus:eval
 * @desc The icon used for the Status command.
 * @default 87
 *
 * @param CommandAddOptions:eval
 * @text Add Options?
 * @parent Cmd
 * @type boolean
 * @on Add
 * @off Don't
 * @desc Add the "Options" command to the Command Window?
 * @default true
 *
 * @param CmdIconOptions:num
 * @text Options Icon
 * @parent CommandAddOptions:eval
 * @desc The icon used for the Options command.
 * @default 83
 *
 * @param ActiveTpbOptionsMessage:str
 * @text Active TPB Message
 * @parent CommandAddOptions:eval
 * @desc Message that will be displayed when selecting options during the middle of an action.
 * @default Options Menu queued after action is complete.
 *
 * @param CmdIconEscape:num
 * @text Escape Icon
 * @parent Cmd
 * @desc The icon used for the Escape command.
 * @default 82
 *
 * @param Access
 *
 * @param SkipPartyCmd:eval
 * @text Skip Party Command
 * @parent Access
 * @type boolean
 * @on Skip
 * @off Don't
 * @desc DTB: Skip Party Command selection on turn start.
 * TPB: Skip Party Command selection at battle start.
 * @default true
 *
 * @param DisablePartyCmd:eval
 * @text Disable Party Command
 * @parent Access
 * @type boolean
 * @on Disable
 * @off Don't
 * @desc Disable the Party Command Window entirely?
 * @default false
 *
 * @param HelpWindow
 * @text Help Window
 *
 * @param HelpFight:str
 * @text Fight
 * @parent HelpWindow
 * @desc Text displayed when selecting a skill type.
 * %1 - Skill Type Name
 * @default Select actions to fight.
 *
 * @param HelpAutoBattle:str
 * @text Auto Battle
 * @parent HelpWindow
 * @desc Text displayed when selecting the Auto Battle command.
 * @default Sets party to Auto Battle mode.
 *
 * @param HelpOptions:str
 * @text Options
 * @parent HelpWindow
 * @desc Text displayed when selecting the Options command.
 * @default Opens up the Options Menu.
 *
 * @param HelpEscape:str
 * @text Escape
 * @parent HelpWindow
 * @desc Text displayed when selecting the escape command.
 * @default Attempt to escape the battle.
 *
 */
/* ----------------------------------------------------------------------------
 * Actor Command Window Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~ActorCmd:
 *
 * @param Cmd
 * @text Command Window
 *
 * @param CmdStyle:str
 * @text Style
 * @parent Cmd
 * @type select
 * @option Text Only
 * @value text
 * @option Icon Only
 * @value icon
 * @option Icon + Text
 * @value iconText
 * @option Automatic
 * @value auto
 * @desc How do you wish to draw commands in the Actor Command Window?
 * @default auto
 *
 * @param CmdTextAlign:str
 * @text Text Align
 * @parent Cmd
 * @type combo
 * @option left
 * @option center
 * @option right
 * @desc Text alignment for the Actor Command Window.
 * @default left
 *
 * @param CmdIconItem:num
 * @text Item Icon
 * @parent Cmd
 * @desc The icon used for the Item command.
 * @default 176
 *
 * @param IconStypeNorm:num
 * @text Normal SType Icon
 * @parent Cmd
 * @desc Icon used for normal skill types that aren't assigned any
 * icons. Ignore if VisuMZ_1_SkillsStatesCore is installed.
 * @default 78
 *
 * @param IconStypeMagic:num
 * @text Magic SType Icon
 * @parent Cmd
 * @desc Icon used for magic skill types that aren't assigned any
 * icons. Ignore if VisuMZ_1_SkillsStatesCore is installed.
 * @default 79
 *
 * @param BattleCmd
 * @text Battle Commands
 *
 * @param BattleCmdList:arraystr
 * @text Command List
 * @parent BattleCmd
 * @type combo[]
 * @option attack
 * @option skills
 * @option guard
 * @option item
 * @option status
 * @option party
 * @option escape
 * @option auto battle
 * @option stypes
 * @option stype: x
 * @option stype: name
 * @option all skills
 * @option skill: x
 * @option skill: name
 * @option combat log
 * @option talk
 * @option weapon swap
 * @desc List of battle commands that appear by default
 * if the <Battle Commands> notetag isn't present.
 * @default ["attack","skills","guard","party","item"]
 *
 * @param ShowCosts:eval
 * @text Show Command Costs
 * @parent BattleCmd
 * @type boolean
 * @on Show Costs
 * @off Hide Costs
 * @desc If a battle command has a resource cost, show it?
 * @default true
 *
 * @param HelpWindow
 * @text Help Window
 *
 * @param HelpSkillType:str
 * @text Skill Types
 * @parent HelpWindow
 * @desc Text displayed when selecting a skill type.
 * %1 - Skill Type Name
 * @default Opens up a list of skills under the \C[16]%1\C[0] category.
 *
 * @param HelpItem:str
 * @text Items
 * @parent HelpWindow
 * @desc Text displayed when selecting the item command.
 * @default Opens up a list of items that you can use.
 *
 * @param HelpEscape:str
 * @text Escape
 * @parent HelpWindow
 * @desc Text displayed when selecting the escape command.
 * @default Attempt to escape the battle.
 *
 * @param HelpAutoBattle:str
 * @text Auto Battle
 * @parent HelpWindow
 * @desc Text displayed when selecting the Auto Battle command.
 * @default Automatically choose an action suitable for combat.
 *
 * @param HelpParty:str
 * @text Party
 * @parent HelpWindow
 * @desc Text displayed when selecting the Party command.
 * Requires 
 * @default Automatically choose an action suitable for combat.
 *
 */
/* ----------------------------------------------------------------------------
 * In_Battle Status Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~InBattleStatus:
 *
 * @param General
 * @text General Settings
 *
 * @param CmdIconStatus:num
 * @text Status Icon
 * @parent General
 * @desc The icon used for the Status command.
 * @default 87
 *
 * @param StatusGraphic:str
 * @text Status Graphic
 * @parent General
 * @type select
 * @option None
 * @value none
 * @option Face
 * @value face
 * @option Map Sprite
 * @value sprite
 * @option Sideview Battler
 * @value svbattler
 * @desc Choose how the actor graphic appears for In-Battle Status.
 * @default face
 *
 * @param HelpStatus:str
 * @text Help Description
 * @parent General
 * @desc Text displayed when selecting the Status command.
 * @default View battle member status.
 *
 * @param Enemy
 * @text Enemy Settings
 *
 * @param enemyStatus:eval
 * @text Allow View Enemies?
 * @parent Enemy
 * @type boolean
 * @on Allow
 * @off Forbid
 * @desc Allows players to view enemy stats (even if limited)?
 * @default true
 *
 * @param enemyShowLevel:eval
 * @text Show Level?
 * @parent Enemy
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Shows the enemy's level in the In-Battle Status?
 * @default true
 *
 * @param enemyHiddenParameter:str
 * @text Hidden Parameter
 * @parent Enemy
 * @desc The text that appears if a parameter value is hidden.
 * @default ???
 *
 * @param enemyShowParametersAlways:eval
 * @text Show Params Always
 * @parent enemyHiddenParameter:str
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Always show exact enemy parameter values.
 * @default false
 *
 * @param enemyShowParametersIfBattleTest:eval
 * @text Show Battle Test
 * @parent enemyHiddenParameter:str
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Show exact enemy parameter values in battle test.
 * @default true
 *
 * @param enemyShowParametersIfDefeated:eval
 * @text Show If Defeated
 * @parent enemyHiddenParameter:str
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Show exact enemy parameter values if enemy has been defeated before.
 * @default true
 *
 * @param PageButtons
 * @text Page Buttons
 *
 * @param pageButtons:eval
 * @text Show Page Buttons?
 * @parent PageButtons
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Shows page buttons to switch between actors?
 * Still requires Touch UI option to be on.
 * @default true
 *
 * @param pageButtonPosition:str
 * @text Large UI Position?
 * @parent pageButtons:eval
 * @type select
 * @option left
 * @option right
 * @desc If using a large resolution, position the page buttons on which side?
 * @default left
 *
 * @param pageOffsetX:num
 * @text Offset X
 * @parent PageButtons
 * @desc Offsets the page buttons x position.
 * Negative: left. Positive: right.
 * @default +0
 *
 * @param pageOffsetY:num
 * @text Offset Y
 * @parent PageButtons
 * @desc Offsets the page buttons y position.
 * Negative: up. Positive: down.
 * @default +0
 *
 * @param Parameters
 * @text Parameter Display
 *
 * @param buffValueFmt:str
 * @text Increased Value
 * @parent Parameters
 * @desc How are increased parameter values displayed?
 * %1 - Parameter Value
 * @default ▲%1
 *
 * @param debuffValueFmt:str
 * @text Decreased Value
 * @parent Parameters
 * @desc How are increased parameter values displayed?
 * %1 - Parameter Value
 * @default ▼%1
 *
 * @param States
 * @text States Display
 *
 * @param statesMaxWidth:num
 * @text Max Width
 * @parent States
 * @desc Maximum width of the states list display.
 * @default 384
 *
 * @param drawStates:eval
 * @text List States?
 * @parent States
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Lists states in the states list display?
 * @default true
 *
 * @param drawBuffs:eval
 * @text List Buffs?
 * @parent States
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Lists buffs in the states list display?
 * @default true
 *
 * @param drawDebuffs:eval
 * @text List Debuffs?
 * @parent States
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Lists debuffs in the states list display?
 * @default true
 *
 * @param BuffsDebuffs
 * @text Buffs/Debuffs Display
 * @parent States
 *
 * @param buffNameFmt:str
 * @text Buff Name Format
 * @parent BuffsDebuffs
 * @desc Text format used to represent buffs.
 * %1 - Parameter Name
 * @default %1▲
 *
 * @param debuffNameFmt:str
 * @text Debuff Name Format
 * @parent BuffsDebuffs
 * @desc Text format used to represent debuffs.
 * %1 - Parameter Name
 * @default %1▼
 *
 * @param NormalState
 * @text Normal State
 * @parent States
 *
 * @param normalIcon:num
 * @text Normal Icon
 * @parent NormalState
 * @desc Icon used to represent normal state (unaffected by states, buffs, or debuffs).
 * @default 84
 *
 * @param normalText:str
 * @text Normal Text
 * @parent NormalState
 * @desc Text used to represent normal state (unaffected by states, buffs, or debuffs).
 * @default Normal
 *
 * @param HelpDesc
 * @text Help Descriptions
 *
 * @param stateHelpFmt:json
 * @text State Help Format
 * @parent HelpDesc
 * @type note
 * @desc Text format used for state help descriptions
 * %1 - Description; %2 - Turns/Actions Remaining
 * @default "%1 %2"
 *
 * @param buffHelpFmt:json
 * @text Buff Help Format
 * @parent HelpDesc
 * @type note
 * @desc Text format used for Buff help descriptions
 * %1 - Param; %2 - Percent; %3 - Color; %4 - Turns
 * @default "Increases %1 to %3%2\\C[0]. %4"
 *
 * @param debuffHelpFmt:json
 * @text Debuff Help Format
 * @parent HelpDesc
 * @type note
 * @desc Text format used for Debuff help descriptions
 * %1 - Param; %2 - Percent; %3 - Color; %4 - Turns
 * @default "Decreases %1 to %3%2\\C[0]. %4"
 *
 * @param normalHelp:json
 * @text Normal State
 * @parent HelpDesc
 * @type note
 * @desc Help description used to explain normal state (unaffected by states, buffs, or debuffs).
 * @default "Status is currently normal."
 *
 * @param TurnHelpDesc
 * @text Turns/Actions Left
 * @parent HelpDesc
 *
 * @param actionsFmt:str
 * @text Actions Format
 * @parent TurnHelpDesc
 * @desc Text format used to represent actions remaining.
 * %1 - Actions; %2 - Color
 * @default \C[6](Actions %2%1\C[6])\C[0]
 *
 * @param TurnsFmt:str
 * @text Turns Format
 * @parent TurnHelpDesc
 * @desc Text format used to represent turns remaining.
 * %1 - Turns; %2 - Color
 * @default \C[5](Turns %2%1\C[5])\C[0]
 *
 * @param passiveText:str
 * @text Passive Text
 * @parent TurnHelpDesc
 * @desc Text used to represent a passive.
 * @default \C[4](Passive)\C[0]
 *
 * @param Window
 * @text Window Settings
 *
 * @param StatusWindow_BgType:num
 * @text Background Type
 * @parent Window
 * @type select
 * @option 0 - Window
 * @value 0
 * @option 1 - Dim
 * @value 1
 * @option 2 - Transparent
 * @value 2
 * @desc Select background type for this window.
 * @default 0
 *
 * @param StatusWindow_DrawJS:func
 * @text JS: Draw Data
 * @parent Window
 * @type note
 * @desc Code used to draw battler data.
 * @default "{ // Draw Face and Simple Status\n    const x = this.colSpacing() / 2;\n    const h = ImageManager.faceHeight;\n    const y = h / 2 - this.lineHeight() * 1.5;\n    this.drawActorGraphic(this._battler, x + 1, 0, ImageManager.faceWidth, h);\n    this.drawActorSimpleStatus(this._battler, x + 180, y);\n}\n{ // Draw Actor Parameters\n    let maxWidth = this.drawingAreaWidth();\n    let x1 = 0;\n    let x2 = Math.ceil(this.drawingAreaWidth() / 2);\n\n    let counter = 0;\n    const params = this.displayedParams();\n\n    let px = x1;\n    const availableHeight = this.innerHeight - ImageManager.faceHeight;\n    const paramHeight = Math.ceil(params.length / 2) * this.lineHeight();\n    let py = Math.ceil((availableHeight - paramHeight) / 2) + ImageManager.faceHeight;\n    let pw = Math.floor(maxWidth / 2);\n\n    if (this._statesWindow.y !== 0) {\n        this._statesWindow.y = py;\n    }\n\n    for (const param of params) {\n        this.drawDarkRect(px, py, pw, this.lineHeight());\n        this.drawParamData(param, px, py, pw);\n        counter++;\n        if (counter % 2 === 0) {\n            px = x1;\n            py += this.lineHeight();\n        } else {\n            px = x2;\n        }\n    }\n}"
 *
 * @param StatusWindow_RectJS:func
 * @text JS: X, Y, W, H
 * @parent Window
 * @type note
 * @desc Code used to determine the dimensions for this window.
 * @default "const wx = Graphics.boxWidth > 1000 ? 120 : 0;\nconst wy = this._helpWindow.y + this._helpWindow.height;\nconst ww = Graphics.boxWidth - (wx * 2);\nconst wh = Graphics.boxHeight - wy - this.windowAreaHeight();\nreturn new Rectangle(wx, wy, ww, wh);"
 *
 */
/* ----------------------------------------------------------------------------
 * Multi-Target Window Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~MultiTarget:
 *
 * @param Properties
 * 
 * @param WindowWidth:num
 * @text Window Width
 * @parent Properties
 * @type number
 * @min 1
 * @desc What is the width used for the Multi-Target Window?
 * @default 280
 *
 * @param BgType:num
 * @text Background Type
 * @parent Properties
 * @type select
 * @option 0 - Window
 * @value 0
 * @option 1 - Dim
 * @value 1
 * @option 2 - Transparent
 * @value 2
 * @desc Select background type for these windows.
 * @default 2
 *
 * @param ShowButton:eval
 * @text Show Button
 * @parent Properties
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Shows the keyboard/controller button to press?
 * Requires VisuMZ_0_CoreEngine!
 * @default true
 * 
 * @param Vocab
 *
 * @param AllActorsText:str
 * @text All Actors
 * @parent Vocab
 * @desc What is the text used for the "All Actors" button?
 * @default All Allies
 *
 * @param AllEnemiesText:str
 * @text All Enemies
 * @parent Vocab
 * @desc What is the text used for the "All Enemies" button?
 * @default All Enemies
 * 
 * @param Offsets
 * 
 * @param ActorOffsets
 * @text Actor Offsets
 * @parent Offsets
 *
 * @param ActorOffsetX:num
 * @text Offset X
 * @parent ActorOffsets
 * @desc Offsets the button's x position.
 * Negative: left. Positive: right.
 * @default +0
 *
 * @param ActorOffsetY:num
 * @text Offset Y
 * @parent ActorOffsets
 * @desc Offsets the button's y position.
 * Negative: up. Positive: down.
 * @default +0
 * 
 * @param EnemyOffsets
 * @text Enemy Offsets
 * @parent Offsets
 *
 * @param EnemyOffsetX:num
 * @text Offset X
 * @parent EnemyOffsets
 * @desc Offsets the button's x position.
 * Negative: left. Positive: right.
 * @default +0
 *
 * @param EnemyOffsetY:num
 * @text Offset Y
 * @parent EnemyOffsets
 * @desc Offsets the button's y position.
 * Negative: up. Positive: down.
 * @default +0
 *
 */
/* ----------------------------------------------------------------------------
 * Combo Window Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~ComboWindow:
 *
 * @param General
 * @text General Settings
 *
 * @param Enable:eval
 * @text Enable?
 * @parent General
 * @type boolean
 * @on Enable
 * @off Disable
 * @desc Add the Combo Window to show in battle?
 * @default true
 *
 * @param Appearance
 * @text Appearance Settings
 *
 * @param CustomFontFace:str
 * @text Custom Font
 * @parent Appearance
 * @desc Insert the custom font face name here.
 * Use VisuMZ_1_MessageCore to register new fonts.
 * @default Arial
 *
 * @param TextAlign:str
 * @text Text Align
 * @parent Appearance
 * @type combo
 * @option left
 * @option center
 * @option right
 * @desc Text alignment for this window?
 * @default left
 *
 * @param ComboWindow_DrawJS:func
 * @text JS: Draw Data
 * @parent Appearance
 * @type note
 * @desc Code used to draw the data in this window.
 * @default ""
 * 
 * @param Vocab
 * @text Vocabulary
 *
 * @param hitsDmgFmt:str
 * @text Damage Combo Format
 * @parent Vocab
 * @desc Text format used to display total hits for damage.
 * %1 - Total Hits
 * @default \C[6]%1\} \C[4]Hit Combo\C[0]\{
 *
 * @param hitsHealFmt:str
 * @text Healing Combo Format
 * @parent Vocab
 * @desc Text format used to display total hits for healing.
 * %1 - Total Hits
 * @default \C[6]%1\} \C[4]Heal Combo\C[0]\{
 *
 * @param totalDmgFmt:str
 * @text Damage Total Format
 * @parent Vocab
 * @desc Text format used to display total value for damage.
 * %1 - Total Damage
 * @default \}\C[21]Total Damage: \{\C[0]%1
 *
 * @param totalHealFmt:str
 * @text Healing Total Format
 * @parent Vocab
 * @desc Text format used to display total value for healing.
 * %1 - Total Healing
 * @default \}\C[21]Total Healing: \{\C[24]+%1\C[0]
 *
 * @param Position
 * @text Position Settings
 *
 * @param fadeShiftX:num
 * @text Fade Shift X
 * @parent Position
 * @desc Shifts the windows x position when fading.
 * Negative: left. Positive: right.
 * @default -2
 *
 * @param fadeShiftY:num
 * @text Fade Shift Y
 * @parent Position
 * @desc Shifts the windows y position when fading.
 * Negative: up. Positive: down.
 * @default +0
 *
 * @param PosOffsetX:num
 * @text Offset X
 * @parent Position
 * @desc Offsets the windows x position.
 * Negative: left. Positive: right.
 * @default +0
 *
 * @param PosOffsetY:num
 * @text Offset Y
 * @parent Position
 * @desc Offsets the windows y position.
 * Negative: up. Positive: down.
 * @default +0
 *
 * @param ComboWindow_RectJS:func
 * @text JS: X, Y, W, H
 * @parent Position
 * @type note
 * @desc Code used to determine the dimensions for this window.
 * @default "const ww = Math.ceil(Graphics.width / 4);\nconst wh = this.calcWindowHeight(2, true);\nconst wx = 0 + this.comboWindowOffsetX();\nconst wy = Math.round(Graphics.boxHeight * 1 / 3) + this.comboWindowOffsetY();\nreturn new Rectangle(wx, wy, ww, wh);"
 * 
 * @param Update
 * @text Updating Settings
 *
 * @param updateDuration:num
 * @text Number Roll Duration
 * @parent Update
 * @type number
 * @min 1
 * @desc Frame duration to roll damage numbers.
 * 60 frames = 1 second.
 * @default 20
 *
 * @param minimumStayDuration:num
 * @text Minimum Stay Duration
 * @parent Update
 * @type number
 * @desc Frame duration to stay visible minimum.
 * 60 frames = 1 second.
 * @default 40
 *
 * @param minimumHits:num
 * @text Minimum Hit Visible
 * @parent Update
 * @type number
 * @min 1
 * @desc Minimum hits before combo window becomes visible?
 * @default 1
 *
 * @param opacitySpeed:num
 * @text Opacity Speed
 * @parent Update
 * @type number
 * @min 1
 * @desc Opacity speed when fading in/out.
 * @default 16
 *
 */
/* ----------------------------------------------------------------------------
 * Actor Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~Actor:
 *
 * @param Flinch
 *
 * @param FlinchDistanceX:num
 * @text Flinch Distance X
 * @parent Flinch
 * @desc The normal X distance when flinching.
 * @default 12
 *
 * @param FlinchDistanceY:num
 * @text Flinch Distance Y
 * @parent Flinch
 * @desc The normal Y distance when flinching.
 * @default 0
 *
 * @param FlinchDuration:num
 * @text Flinch Duration
 * @parent Flinch
 * @desc The number of frames for a flinch to complete.
 * @default 6
 *
 * @param ShakeFlinch:eval
 * @text Shake Flinch
 * @parent Flinch
 * @type boolean
 * @on Enable
 * @off Disable
 * @desc Perform a shake flinch when taking damage?
 * @default false
 *
 * @param ShakeFlinchDuration:num
 * @text Max Duration
 * @parent ShakeFlinch:eval
 * @type number
 * @min 1
 * @desc Maximum duration a shake flinch can have.
 * This is reduced relative to the amount of damage taken.
 * @default 24
 *
 * @param ShakeFlinchPower:num
 * @text Max Power
 * @parent ShakeFlinch:eval
 * @type number
 * @min 1
 * @desc The power rating of a shake flinch at full damage.
 * This is reduced relative to the amount of damage taken.
 * @default 48
 *
 * @param FvBattlers
 * @text Frontview Battlers
 * 
 * @param FvPortraitAni
 * @text Portrait Animations
 * @parent FvBattlers
 *
 * @param FvAniEachTarget:eval
 * @text Each Target
 * @parent FvPortraitAni
 * @type boolean
 * @on On Top
 * @off Behind
 * @desc Place animations on top for "Each Target" display types?
 * Does not apply to MV animations.
 * @default true
 *
 * @param FvAniCenterAll:eval
 * @text Center of All
 * @parent FvPortraitAni
 * @type boolean
 * @on On Top
 * @off Behind
 * @desc Place animations on top for "Center of All" display types?
 * Does not apply to MV animations.
 * @default true
 *
 * @param FvAniCenterScreen:eval
 * @text Center of Screen
 * @parent FvPortraitAni
 * @type boolean
 * @on On Top
 * @off Behind
 * @desc Place animations on top for "Center of Screen" display types?
 * Does not apply to MV animations.
 * @default false
 *
 * @param SvBattlers
 * @text Sideview Battlers
 * 
 * @param SvAnchor
 * @text Anchor
 * @parent SvBattlers
 *
 * @param AnchorX:num
 * @text Anchor: X
 * @parent SvAnchor
 * @desc Default X anchor for Sideview Battlers.
 * Use values between 0 and 1 to be safe.
 * @default 0.5
 *
 * @param AnchorY:num
 * @text Anchor: Y
 * @parent SvAnchor
 * @desc Default Y anchor for Sideview Battlers.
 * Use values between 0 and 1 to be safe.
 * @default 1.0
 *
 * @param ChantStyle:eval
 * @text Chant Style
 * @parent SvBattlers
 * @type boolean
 * @on Magical Hit Type
 * @off Magical Skill Type
 * @desc What determines the chant motion?
 * Hit type or skill type?
 * @default true
 *
 * @param MotionSpeed:num
 * @text Motion Speed
 * @parent SvBattlers
 * @type number
 * @min 1
 * @desc The number of frames in between each motion.
 * @default 12
 * 
 * @param SvPosition
 * @text Position
 * @parent SvBattlers
 *
 * @param OffsetX:num
 * @text Offset: X
 * @parent SvPosition
 * @desc Offsets X position where actor is positioned.
 * Negative values go left. Positive values go right.
 * @default 0
 *
 * @param OffsetY:num
 * @text Offset: Y
 * @parent SvPosition
 * @desc Offsets Y position where actor is positioned.
 * Negative values go up. Positive values go down.
 * @default 0
 *
 * @param PrioritySortActive:eval
 * @text Priority: Active
 * @parent SvBattlers
 * @type boolean
 * @on Active Actor over All Else
 * @off Active Actor is Sorted Normally
 * @desc Place the active actor on top of actor and enemy sprites.
 * @default false
 *
 * @param PrioritySortActors:eval
 * @text Priority: Actors
 * @parent SvBattlers
 * @type boolean
 * @on Actors over Enemies
 * @off Sort by Y Position
 * @desc Prioritize actors over enemies when placing sprites on top
 * of each other.
 * @default true
 *
 * @param Shadow:eval
 * @text Shadow Visible
 * @parent SvBattlers
 * @type boolean
 * @on Visible
 * @off Hidden
 * @desc Show or hide the shadow for Sideview Battlers.
 * @default true
 * 
 * @param SvStateOverlay
 * @text State Overlay
 * @parent SvBattlers
 *
 * @param StateOverlayOffsetX:num
 * @text Offset: X
 * @parent SvStateOverlay
 * @desc Offsets X position for state overlay on actor.
 * Negative values go left. Positive values go right.
 * @default 0
 *
 * @param StateOverlayOffsetY:num
 * @text Offset: Y
 * @parent SvStateOverlay
 * @desc Offsets Y position for state overlay on actor.
 * Negative values go up. Positive values go down.
 * @default 0
 *
 * @param SmoothImage:eval
 * @text Smooth Image
 * @parent SvBattlers
 * @type boolean
 * @on Smooth
 * @off Pixelated
 * @desc Smooth out the battler images or pixelate them?
 * @default false
 *
 * @param HomePosJS:func
 * @text JS: Home Position
 * @parent SvBattlers
 * @type note
 * @desc Code used to calculate the home position of actors.
 * @default "// Declare Constants\nconst sprite = this;\nconst actor = this._actor;\nconst index = arguments[0];\n\n// Make Calculations\nlet x = Math.round((Graphics.width / 2) + 192)\nx -= Math.floor((Graphics.width - Graphics.boxWidth) / 2);\nx += index * 32;\nlet y = (Graphics.height - 200) - ($gameParty.maxBattleMembers() * 48);\ny -= Math.floor((Graphics.height - Graphics.boxHeight) / 2);\ny += index * 48;\n\n// Home Position Offsets\nconst offsetNote = /<SIDEVIEW HOME OFFSET:[ ]([\\+\\-]\\d+),[ ]([\\+\\-]\\d+)>/i;\nconst xOffsets = actor.traitObjects().map((obj) => (obj && obj.note.match(offsetNote) ? Number(RegExp.$1) : 0));\nconst yOffsets = actor.traitObjects().map((obj) => (obj && obj.note.match(offsetNote) ? Number(RegExp.$2) : 0));\nx = xOffsets.reduce((r, offset) => r + offset, x);\ny = yOffsets.reduce((r, offset) => r + offset, y);\n\n// Set Home Position\nthis.setHome(x, y);"
 *
 */
/* ----------------------------------------------------------------------------
 * Enemy Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~Enemy:
 *
 * @param Visual
 *
 * @param AttackAnimation:num
 * @text Attack Animation
 * @parent Visual
 * @type animation
 * @desc Default attack animation used for enemies.
 * Use <Attack Animation: x> for custom animations.
 * @default 1
 *
 * @param EmergeText:eval
 * @text Emerge Text
 * @parent Visual
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Show or hide the 'Enemy emerges!' text at the start of battle.
 * @default false
 *
 * @param OffsetX:num
 * @text Offset: X
 * @parent Visual
 * @desc Offsets X position where enemy is positioned.
 * Negative values go left. Positive values go right.
 * @default 0
 *
 * @param OffsetY:num
 * @text Offset: Y
 * @parent Visual
 * @desc Offsets Y position where enemy is positioned.
 * Negative values go up. Positive values go down.
 * @default 0
 *
 * @param SmoothImage:eval
 * @text Smooth Image
 * @parent Visual
 * @type boolean
 * @on Smooth
 * @off Pixelated
 * @desc Smooth out the battler images or pixelate them?
 * @default true
 *
 * @param SelectWindow
 * @text Select Window
 *
 * @param LastSelected:eval
 * @text Any: Last Selected
 * @parent SelectWindow
 * @type boolean
 * @on Last Selected
 * @off FV/SV Priority
 * @desc Prioritize last selected enemy over front view or sideview settings?
 * @default true
 *
 * @param FrontViewSelect:eval
 * @text FV: Right Priority
 * @parent SelectWindow
 * @type boolean
 * @on Right
 * @off Normal
 * @desc If using frontview, auto select the enemy furthest right.
 * @default false
 *
 * @param SideviewSelect:eval
 * @text SV: Right Priority
 * @parent SelectWindow
 * @type boolean
 * @on Right
 * @off Normal
 * @desc If using sideview, auto select the enemy furthest right.
 * @default true
 * 
 * @param Name
 *
 * @param NameLegacy:eval
 * @text Legacy Option
 * @parent Name
 * @type boolean
 * @on Legacy Version
 * @off New Version (Sprite)
 * @desc Use the legacy version (window) or new version (sprite).
 * WARNING: Legacy version is no longer supported for bugs.
 * @default false
 *
 * @param NameFontSize:num
 * @text Font Size
 * @parent Name
 * @desc Font size used for enemy names.
 * @default 22
 * 
 * @param NamePosition
 * @text Name Position
 * @parent Name
 *
 * @param NameOffsetX:num
 * @text Offset X
 * @parent NamePosition
 * @desc Offset the enemy name's X position by this much.
 * Negative goes left. Positive goes right.
 * @default 0
 *
 * @param NameOffsetY:num
 * @text Offset Y
 * @parent NamePosition
 * @desc Offset the enemy name's Y position by this much.
 * Negative goes up. Positive goes down.
 * @default 0
 *
 * @param NameAttachStateIcon:eval
 * @text Attach States
 * @parent Name
 * @type boolean
 * @on Attach
 * @off Normal Position
 * @desc Attach the enemy's state icon to the enemy name?
 * @default false
 *
 * @param AttachStateOffsetX:num
 * @text Attach: Offset X
 * @parent NameAttachStateIcon:eval
 * @desc How much to offset the attached icon's X position by?
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param AttachStateOffsetY:num
 * @text Attach: Offset Y
 * @parent NameAttachStateIcon:eval
 * @desc How much to offset the attached icon's Y position by?
 * Negative goes up. Positive goes down.
 * @default +0
 * 
 * @param NameVisibility
 * @text Name Visibility
 * @parent Name
 *
 * @param NameAlwaysHidden:eval
 * @text Always Hidden
 * @parent NameVisibility
 * @type boolean
 * @on Always Hidden
 * @off No Priority
 * @desc Determines if the enemy name will always be visible.
 * Highest priority.
 * @default false
 *
 * @param NameAlwaysVisible:eval
 * @text Always Visible
 * @parent NameVisibility
 * @type boolean
 * @on Always Visible
 * @off Hide when Unselected
 * @desc Determines if the enemy name will always be visible.
 * Medium priority.
 * @default false
 *
 * @param NameAsTarget:eval
 * @text As Target
 * @parent NameVisibility
 * @type boolean
 * @on Visible As Target
 * @off No Priority
 * @desc Shows enemy name when enemy is a target.
 * Medium priority.
 * @default true
 *
 * @param NameAlwaysSelectOnly:eval
 * @text By Selection?
 * @parent NameVisibility
 * @type boolean
 * @on Visible when Selected
 * @off Visible when Targeting
 * @desc Determines the conditions for enemy name visibility.
 * Lowest priority.
 * @default false
 *
 * @param NameDamageVisibility:num
 * @text Temporary Visibility
 * @parent NameVisibility
 * @type number
 * @desc Number of frames enemy's name temporarily visible after
 * taking an action effect in battle. 60 frames = 1 second.
 * @default 0
 *
 * @param SvBattlers
 * @text Sideview Battlers
 *
 * @param AllowCollapse:eval
 * @text Allow Collapse
 * @parent SvBattlers
 * @type boolean
 * @on Allow
 * @off Don't
 * @desc Causes defeated enemies with SV Battler graphics
 * to "fade away" when defeated?
 * @default false
 *
 * @param AnchorX:num
 * @text Anchor: X
 * @parent SvBattlers
 * @desc Default X anchor for Sideview Battlers.
 * Use values between 0 and 1 to be safe.
 * @default 0.5
 *
 * @param AnchorY:num
 * @text Anchor: Y
 * @parent SvBattlers
 * @desc Default Y anchor for Sideview Battlers.
 * Use values between 0 and 1 to be safe.
 * @default 1.0
 *
 * @param MotionIdle:str
 * @text Motion: Idle
 * @parent SvBattlers
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Sets default idle animation used by Sideview Battlers.
 * @default walk
 *
 * @param Shadow:eval
 * @text Shadow Visible
 * @parent SvBattlers
 * @type boolean
 * @on Visible
 * @off Hidden
 * @desc Show or hide the shadow for Sideview Battlers.
 * @default true
 *
 * @param Width:num
 * @text Size: Width
 * @parent SvBattlers
 * @type number
 * @min 1
 * @desc Default width for enemies that use Sideview Battlers.
 * @default 64
 *
 * @param Height:num
 * @text Size: Height
 * @parent SvBattlers
 * @type number
 * @min 1
 * @desc Default height for enemies that use Sideview Battlers.
 * @default 64
 *
 * @param WtypeId:num
 * @text Weapon Type
 * @parent SvBattlers
 * @type number
 * @min 0
 * @desc Sets default weapon type used by Sideview Battlers.
 * Use 0 for Bare Hands.
 * @default 0
 *
 * @param Aspect
 * @text Aspect Defaults
 *
 * @param AspectNameFmt:str
 * @text Name Format
 * @parent Aspect
 * @desc Default name aspect format.
 * %1 - Original Enemy Name
 * @default %1 Aspect
 *
 * @param AspectColor:str
 * @text Name Color
 * @parent Aspect
 * @desc Use #rrggbb for custom colors or regular numbers
 * for text colors from the Window Skin.
 * @default 2
 *
 * @param AspectIcon:num
 * @text Icon
 * @parent Aspect
 * @desc Default icon used for aspect.
 * Use <Aspect Icon: x> to change icon.
 * @default 26
 *
 */
/* ----------------------------------------------------------------------------
 * HP Gauge Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~HpGauge:
 *
 * @param Display
 * @text Show Gauges For
 *
 * @param ShowActorGauge:eval
 * @text Actors
 * @parent Display
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Show HP Gauges over the actor sprites' heads?
 * Requires SV Actors to be visible.
 * @default true
 *
 * @param ShowEnemyGauge:eval
 * @text Enemies
 * @parent Display
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Show HP Gauges over the enemy sprites' heads?
 * Can be bypassed with <Hide HP Gauge> notetag.
 * @default true
 *
 * @param RequiresDefeat:eval
 * @text Requires Defeat?
 * @parent ShowEnemyGauge:eval
 * @type boolean
 * @on Require Defeat First
 * @off No Requirement
 * @desc Requires defeating the enemy once to show HP Gauge?
 * Can be bypassed with <Show HP Gauge> notetag.
 * @default true
 *
 * @param BTestBypass:eval
 * @text Battle Test Bypass?
 * @parent RequiresDefeat:eval
 * @type boolean
 * @on Bypass
 * @off Don't Bypass
 * @desc Bypass the defeat requirement in battle test?
 * @default true
 *
 * @param Settings
 *
 * @param AniDuration:num
 * @text Animation Duration
 * @parent Settings
 * @type number
 * @min 1
 * @desc How many frames should gauges animate themselves?
 * Default: 20 frames.
 * @default 20
 *
 * @param AnchorX:num
 * @text Anchor X
 * @parent Settings
 * @desc Where do you want the HP Gauge sprite's anchor X to be?
 * Use values between 0 and 1 to be safe.
 * @default 0.5
 *
 * @param AnchorY:num
 * @text Anchor Y
 * @parent Settings
 * @desc Where do you want the HP Gauge sprite's anchor Y to be?
 * Use values between 0 and 1 to be safe.
 * @default 1.0
 *
 * @param Scale:num
 * @text Scale
 * @parent Settings
 * @desc How large/small do you want the HP Gauge to be scaled?
 * @default 0.5
 *
 * @param OffsetX:num
 * @text Offset X
 * @parent Settings
 * @desc How many pixels to offset the HP Gauge's X by?
 * @default 0
 *
 * @param OffsetY:num
 * @text Offset Y
 * @parent Settings
 * @desc How many pixels to offset the HP Gauge's Y by?
 * @default -3
 *
 * @param Options
 * @text Options
 *
 * @param AddHpGaugeOption:eval
 * @text Add Option?
 * @parent Options
 * @type boolean
 * @on Add
 * @off Don't Add
 * @desc Add the 'Show HP Gauge' option to the Options menu?
 * @default true
 *
 * @param AdjustRect:eval
 * @text Adjust Window Height
 * @parent Options
 * @type boolean
 * @on Adjust
 * @off Don't
 * @desc Automatically adjust the options window height?
 * @default true
 *
 * @param Name:str
 * @text Option Name
 * @parent Options
 * @desc Command name of the option.
 * @default Show HP Gauge
 *
 */
/* ----------------------------------------------------------------------------
 * Action Sequence Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~ActionSequence:
 *
 * @param AutoSequences
 * @text Automatic Sequences
 *
 * @param AutoMeleeSolo:eval
 * @text Melee Single Target
 * @parent AutoSequences
 * @type boolean
 * @on Allow
 * @off Ignore
 * @desc Allow this auto sequence for physical, single target actions?
 * @default true
 *
 * @param AutoMeleeAoE:eval
 * @text Melee Multi Target
 * @parent AutoSequences
 * @type boolean
 * @on Allow
 * @off Ignore
 * @desc Allow this auto sequence for physical, multi-target actions?
 * @default true
 *
 * @param QoL
 * @text Quality of Life
 *
 * @param AutoNotetag:eval
 * @text Auto Notetag
 * @parent QoL
 * @type boolean
 * @on Automatic
 * @off Manual
 * @desc Automatically apply the <Custom Action Sequence> notetag
 * effect to any item or skill that has a Common Event?
 * @default false
 *
 * @param CastAnimations
 * @text Cast Animations
 *
 * @param CastCertain:num
 * @text Certain Hit
 * @parent CastAnimations
 * @type animation
 * @desc Cast animation for Certain Hit skills.
 * @default 120
 *
 * @param CastPhysical:num
 * @text Physical
 * @parent CastAnimations
 * @type animation
 * @desc Cast animation for Physical skills.
 * @default 52
 *
 * @param CastMagical:num
 * @text Magical
 * @parent CastAnimations
 * @type animation
 * @desc Cast animation for Magical skills.
 * @default 51
 *
 * @param CounterReflection
 * @text Counter/Reflect
 *
 * @param CounterPlayback:eval
 * @text Counter Back
 * @parent CounterReflection
 * @type boolean
 * @on Play Back
 * @off Ignore
 * @desc Play back the attack animation used?
 * @default true
 *
 * @param ReflectAnimation:num
 * @text Reflect Animation
 * @parent CounterReflection
 * @type animation
 * @desc Animation played when an action is reflected.
 * @default 53
 *
 * @param ReflectPlayback:eval
 * @text Reflect Back
 * @parent CounterReflection
 * @type boolean
 * @on Play Back
 * @off Ignore
 * @desc Play back the attack animation used?
 * @default true
 *
 * @param Stepping
 *
 * @param MeleeDistance:num
 * @text Melee Distance
 * @parent Stepping
 * @desc Minimum distance in pixels for Movement Action Sequences.
 * @default 24
 *
 * @param StepDistanceX:num
 * @text Step Distance X
 * @parent Stepping
 * @desc The normal X distance when stepping forward.
 * @default 48
 *
 * @param StepDistanceY:num
 * @text Step Distance Y
 * @parent Stepping
 * @desc The normal Y distance when stepping forward.
 * @default 0
 *
 * @param StepDuration:num
 * @text Step Duration
 * @parent Stepping
 * @desc The number of frames for a stepping action to complete.
 * @default 12
 *
 */
/* ----------------------------------------------------------------------------
 * Projectile Start Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~ProjectileStart:
 * 
 * @param Type:str
 * @text Type
 * @type select
 * @option Target - Start from battler target(s)
 * @value target
 * @option Point - Start from a point on the screen
 * @value point
 * @desc Select where the projectile should start from.
 * @default target
 * 
 * @param Targets:arraystr
 * @text Target(s)
 * @parent Type:str
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to start the projectile from.
 * @default ["user"]
 * 
 * @param TargetCenter:eval
 * @text Centralize
 * @parent Targets:arraystr
 * @type boolean
 * @on Center Projectile
 * @off Create Each
 * @desc Create one projectile at the center of the targets?
 * Or create a projectile for each target?
 * @default false
 * 
 * @param TargetLocation:str
 * @text Target Location
 * @parent Targets:arraystr
 * @type combo
 * @option front head
 * @option front center
 * @option front base
 * @option middle head
 * @option middle center
 * @option middle base
 * @option back head
 * @option back center
 * @option back base
 * @desc Select which part of the target to send the projectile from.
 * @default middle center
 * 
 * @param PointX:eval
 * @text Point X
 * @parent Type:str
 * @desc Insert the X coordinate to start the projectile at.
 * You may use JavaScript code.
 * @default Graphics.width / 2
 * 
 * @param PointY:eval
 * @text Point Y
 * @parent Type:str
 * @desc Insert the Y coordinate to start the projectile at.
 * You may use JavaScript code.
 * @default Graphics.height / 2
 * 
 * @param OffsetX:eval
 * @text Offset X
 * @desc Insert how many pixels to offset the X coordinate by.
 * You may use JavaScript code.
 * @default +0
 * 
 * @param OffsetY:eval
 * @text Offset Y
 * @desc Insert how many pixels to offset the Y coordinate by.
 * You may use JavaScript code.
 * @default +0
 *
 */
/* ----------------------------------------------------------------------------
 * Projectile Goal Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~ProjectileGoal:
 * 
 * @param Type:str
 * @text Type
 * @type select
 * @option Target - Goal is battler target(s)
 * @value target
 * @option Point - Goal is a point on the screen
 * @value point
 * @desc Select where the projectile should go to.
 * @default target
 * 
 * @param Targets:arraystr
 * @text Target(s)
 * @parent Type:str
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) for projectile to go to.
 * @default ["all targets"]
 * 
 * @param TargetCenter:eval
 * @text Centralize
 * @parent Targets:arraystr
 * @type boolean
 * @on Center Projectile
 * @off Create Each
 * @desc Set goal in the center of targets?
 * Or create a projectile to go to each target?
 * @default false
 * 
 * @param TargetLocation:str
 * @text Target Location
 * @parent Targets:arraystr
 * @type combo
 * @option front head
 * @option front center
 * @option front base
 * @option middle head
 * @option middle center
 * @option middle base
 * @option back head
 * @option back center
 * @option back base
 * @desc Select which part of the target to send the projectile at.
 * @default middle center
 * 
 * @param PointX:eval
 * @text Point X
 * @parent Type:str
 * @desc Insert the X coordinate to send the projectile to.
 * You may use JavaScript code.
 * @default Graphics.width / 2
 * 
 * @param PointY:eval
 * @text Point Y
 * @parent Type:str
 * @desc Insert the Y coordinate to send the projectile to.
 * You may use JavaScript code.
 * @default Graphics.height / 2
 * 
 * @param OffsetX:eval
 * @text Offset X
 * @desc Insert how many pixels to offset the X coordinate by.
 * You may use JavaScript code.
 * @default +0
 * 
 * @param OffsetY:eval
 * @text Offset Y
 * @desc Insert how many pixels to offset the Y coordinate by.
 * You may use JavaScript code.
 * @default +0
 *
 */
/* ----------------------------------------------------------------------------
 * Projectile Extra Animation Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~ProjectileExAni:
 * 
 * @param AutoAngle:eval
 * @text Auto Angle?
 * @parent Settings
 * @type boolean
 * @on Automatically Angle
 * @off Normal
 * @desc Automatically angle the projectile to tilt the direction it's moving?
 * @default true
 * 
 * @param AngleOffset:eval
 * @text Angle Offset
 * @desc Alter the projectile's tilt by this many degrees.
 * @default +0
 * 
 * @param Arc:eval
 * @text Arc Peak
 * @parent Settings
 * @desc This is the height of the projectile's trajectory arc
 * in pixels.
 * @default 0
 *
 * @param EasingType:str
 * @text Easing
 * @parent Settings
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type to apply to the projectile's trajectory.
 * @default Linear
 * 
 * @param Spin:eval
 * @text Spin Speed
 * @parent Settings
 * @desc Determine how much angle the projectile spins per frame.
 * Does not work well with "Auto Angle".
 * @default +0.0
 * 
 * @param Emulate
 * @text Effect Emulation
 * 
 * @param EmulateActionEffect:eval
 * @text Action Effect?
 * @parent Emulate
 * @type boolean
 * @on Emulate
 * @off Don't Emulate
 * @desc Emulate current Action Effect when projectile reaches
 * target? Only works with start/goal targets.
 * @default false
 * 
 * @param EmulateItemEffect:eval
 * @text Item Effect ID
 * @parent Emulate
 * @type item
 * @desc Emulate an Item Effect when projectile reaches target?
 * Use 0 to not use. Only works with start/goal targets.
 * @default 0
 * 
 * @param EmulateSkillEffect:eval
 * @text Skill Effect ID
 * @parent Emulate
 * @type skill
 * @desc Emulate a Skill Effect when projectile reaches target?
 * Use 0 to not use. Only works with start/goal targets.
 * @default 0
 *
 * @param OnceParallel:num
 * @text Common Event ID
 * @parent Emulate
 * @type common_event
 * @desc Plays a Once Parallel Common Event upon reaching target.
 * Use 0 to not use. Works regardless of start/goal targets.
 * @default 0
 * 
 * @param EndAnimationID:eval
 * @text End Animation ID
 * @type animation
 * @desc Plays an animation when projectile reaches target.
 * Use 0 to not use. Requires ActSeqProjectiles v1.09+.
 * @default 0
 *
 * @param EndAnimationMirror:eval
 * @text Mirror Animation
 * @parent EndAnimationID:eval
 * @type boolean
 * @on Mirror
 * @off Normal
 * @desc Mirror the effect animation?
 * Requires VisuMZ_3_ActSeqProjectiles version 1.09+.
 * @default false
 *
 * @param EndAnimationMute:eval
 * @text Mute Animation
 * @parent EndAnimationID:eval
 * @type boolean
 * @on Mute
 * @off Normal
 * @desc Mute the effect animation?
 * Requires VisuMZ_3_ActSeqProjectiles version 1.09+.
 * @default false
 *
 */
/* ----------------------------------------------------------------------------
 * Projectile Extra Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~ProjectileExtra:
 * 
 * @param AutoAngle:eval
 * @text Auto Angle?
 * @parent Settings
 * @type boolean
 * @on Automatically Angle
 * @off Normal
 * @desc Automatically angle the projectile to tilt the direction it's moving?
 * @default true
 * 
 * @param AngleOffset:eval
 * @text Angle Offset
 * @desc Alter the projectile's tilt by this many degrees.
 * @default +0
 * 
 * @param Arc:eval
 * @text Arc Peak
 * @parent Settings
 * @desc This is the height of the projectile's trajectory arc
 * in pixels.
 * @default 0
 *
 * @param BlendMode:num
 * @text Blend Mode
 * @type select
 * @option 0 - Normal
 * @value 0
 * @option 1 - Additive
 * @value 1
 * @option 2 - Multiply
 * @value 2
 * @option 3 - Screen
 * @value 3
 * @desc What kind of blend mode do you wish to apply to the projectile?
 * @default 0
 *
 * @param EasingType:str
 * @text Easing
 * @parent Settings
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type to apply to the projectile's trajectory.
 * @default Linear
 * 
 * @param Hue:eval
 * @text Hue
 * @parent Settings
 * @desc Adjust the hue of the projectile.
 * Insert a number between 0 and 360.
 * @default 0
 * 
 * @param Scale:eval
 * @text Scale
 * @parent Settings
 * @desc Adjust the size scaling of the projectile.
 * Use decimals for exact control.
 * @default 1.0
 * 
 * @param Spin:eval
 * @text Spin Speed
 * @parent Settings
 * @desc Determine how much angle the projectile spins per frame.
 * Does not work well with "Auto Angle".
 * @default +0.0
 * 
 * @param Emulate
 * @text Effect Emulation
 * 
 * @param EmulateActionEffect:eval
 * @text Action Effect?
 * @parent Emulate
 * @type boolean
 * @on Emulate
 * @off Don't Emulate
 * @desc Emulate current Action Effect when projectile reaches
 * target? Only works with start/goal targets.
 * @default false
 * 
 * @param EmulateItemEffect:eval
 * @text Item Effect ID
 * @parent Emulate
 * @type item
 * @desc Emulate an Item Effect when projectile reaches target?
 * Use 0 to not use. Only works with start/goal targets.
 * @default 0
 * 
 * @param EmulateSkillEffect:eval
 * @text Skill Effect ID
 * @parent Emulate
 * @type skill
 * @desc Emulate a Skill Effect when projectile reaches target?
 * Use 0 to not use. Only works with start/goal targets.
 * @default 0
 *
 * @param OnceParallel:num
 * @text Common Event ID
 * @parent Emulate
 * @type common_event
 * @desc Plays a Once Parallel Common Event upon reaching target.
 * Use 0 to not use. Works regardless of start/goal targets.
 * @default 0
 * 
 * @param EndAnimationID:eval
 * @text End Animation ID
 * @type animation
 * @desc Plays an animation when projectile reaches target.
 * Use 0 to not use. Requires ActSeqProjectiles v1.09+.
 * @default 0
 *
 * @param EndAnimationMirror:eval
 * @text Mirror Animation
 * @parent EndAnimationID:eval
 * @type boolean
 * @on Mirror
 * @off Normal
 * @desc Mirror the effect animation?
 * Requires VisuMZ_3_ActSeqProjectiles version 1.09+.
 * @default false
 *
 * @param EndAnimationMute:eval
 * @text Mute Animation
 * @parent EndAnimationID:eval
 * @type boolean
 * @on Mute
 * @off Normal
 * @desc Mute the effect animation?
 * Requires VisuMZ_3_ActSeqProjectiles version 1.09+.
 * @default false
 *
 */
/* ----------------------------------------------------------------------------
 * Visual Cutin Effect Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~VisualCutinEffect:
 *
 * @param Transition
 * 
 * @param enterDuration:num
 * @text Entrance Duration
 * @parent Transition
 * @type number
 * @desc How many frames does it take to fully enter?
 * Used when a Visual Cutin Effect starts.
 * @default 12
 * 
 * @param exitDuration:num
 * @text Exit Duration
 * @parent Transition
 * @type number
 * @desc How many frames does it take to fully exit?
 * Used when a Visual Cutin Effect ends.
 * @default 12
 *
 * @param Cutin
 * @text Cutin Settings
 *
 * @param bgShow:eval
 * @text Show BG Color?
 * @parent Cutin
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Add a background color for this cutin?
 * Background colors appear behind the parallax.
 * @default true
 *
 * @param outlineShow:eval
 * @text Show Outline?
 * @parent Cutin
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Show the cutin outline?
 * @default true
 *
 * @param Portrait
 * @text Portrait Settings
 *
 * @param PortraitBase
 * @text Base Properties
 * @parent Portrait
 * 
 * @param portraitAnchorX:num
 * @text Anchor X
 * @parent PortraitBase
 * @desc Determines the sprite anchor X alignment.
 * 0.0: Left, 0.5: Center, 1.0: Right.
 * @default 0.5
 * 
 * @param portraitAnchorY:num
 * @text Anchor Y
 * @parent PortraitBase
 * @desc Determines the sprite anchor Y alignment.
 * 0.0: Top, 0.5: Middle, 1.0: Bottom.
 * @default 0.5
 *
 * @param portraitHue:num
 * @text Hue
 * @parent PortraitBase
 * @type number
 * @min 0
 * @max 360
 * @desc Do you wish to adjust this cutin's portrait hue?
 * @default 0
 * 
 * @param portraitOpacity:num
 * @text Opacity
 * @parent PortraitBase
 * @type number
 * @max 255
 * @desc What is the opacity level of this cutin's portrait?
 * @default 255
 * 
 * @param portraitOffsetX:num
 * @text Offset X
 * @parent PortraitBase
 * @desc Offsets the cutin portrait's X location.
 * Negative: left. Positive: right.
 * @default +0
 * 
 * @param portraitOffsetY:num
 * @text Offset Y
 * @parent PortraitBase
 * @desc Offsets the cutin portrait's Y location.
 * Negative: up. Positive: down.
 * @default +0
 *
 * @param PortraitEnter
 * @text Entrance Properties
 * @parent Portrait
 * 
 * @param portraitEnterX:num
 * @text Entrance X
 * @parent PortraitEnter
 * @desc Sets the cutin portrait's X entrance.
 * Negative: from left. Positive: from right.
 * @default +0
 * 
 * @param portraitEnterY:num
 * @text Entrance Y
 * @parent PortraitEnter
 * @desc Sets the cutin portrait's Y entrance.
 * Negative: from up. Positive: from down.
 * @default +0
 *
 * @param portraitEnterEasingType:str
 * @text Entrance Easing
 * @parent PortraitEnter
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * @default InOutSine
 *
 * @param PortraitExit
 * @text Exit Properties
 * @parent Portrait
 * 
 * @param portraitExitX:num
 * @text Exit X
 * @parent PortraitExit
 * @desc Sets the cutin portrait's X exit.
 * Negative: to left. Positive: to right.
 * @default +0
 * 
 * @param portraitExitY:num
 * @text Exit Y
 * @parent PortraitExit
 * @desc Sets the cutin portrait's Y exit.
 * Negative: to up. Positive: to down.
 * @default +0
 *
 * @param portraitExitEasingType:str
 * @text Exit Easing
 * @parent PortraitExit
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * @default InOutSine
 *
 * @param PortraitFlip
 * @text Flip Properties
 * @parent Portrait
 *
 * @param portraitFlipHorz:eval
 * @text Flip Horizontally?
 * @parent PortraitFlip
 * @type boolean
 * @on Flip
 * @off Don't Flip
 * @desc Flip the cutin portrait horizontally?
 * @default false
 *
 * @param portraitFlipVert:eval
 * @text Flip Vertically?
 * @parent PortraitFlip
 * @type boolean
 * @on Flip
 * @off Don't Flip
 * @desc Flip the cutin portrait vertically?
 * @default false
 *
 * @param PortraitScale
 * @text Scaling Properties
 * @parent Portrait
 * 
 * @param portraitForcedScale:num
 * @text Forced Scaling
 * @parent PortraitScale
 * @desc Do you want to force a scaling ratio?
 * Leave as 0 for none. Disables "Fit to Scale?".
 * @default 0.0
 *
 * @param portraitScaleToFit:eval
 * @text Fit to Scale?
 * @parent PortraitScale
 * @type boolean
 * @on Fit to Scale
 * @off Don't Scale
 * @desc Scale the cutin portrait to fit the cutin style?
 * Cannot be used with "Forced Scaling".
 * @default true
 *
 * @param portraitScaleMax:eval
 * @text Scale Max?
 * @parent portraitScaleToFit:eval
 * @type boolean
 * @on Scale Maximum
 * @off Scale Minimum
 * @desc Scale the cutin portrait to the maximum fit or
 * scale the cutin portrait to the minimum fit.
 * @default false
 *
 * @param PortraitAni
 * @text Animated Portraits
 * @parent Portrait
 *
 * @param animatedPortraitLooping:eval
 * @text Loop?
 * @parent PortraitAni
 * @type boolean
 * @on ON
 * @off OFF
 * @desc Will loop back to beginning once ended.
 * Requires VisuMZ_4_AnimatedPictures!
 * @default true
 *
 * @param animatedPortraitWaitFrames:num
 * @text Wait Frames
 * @parent PortraitAni
 * @type number
 * @min 1
 * @desc Frames to wait before moving to next cell.
 * Requires VisuMZ_4_AnimatedPictures!
 * @default 4
 *
 * @param Parallax
 * @text Parallax Settings
 *
 * @param ParallaxBase
 * @text Base Settings
 * @parent Parallax
 *
 * @param parallaxBlendMode:num
 * @text Blend Mode
 * @parent ParallaxBase
 * @type select
 * @option 0 - Normal
 * @value 0
 * @option 1 - Additive
 * @value 1
 * @option 2 - Multiply
 * @value 2
 * @option 3 - Screen
 * @value 3
 * @desc What kind of blend mode do you wish to apply to the cutin?
 * @default 0
 *
 * @param parallaxHue:num
 * @text Hue
 * @parent ParallaxBase
 * @type number
 * @min 0
 * @max 360
 * @desc Do you wish to adjust this cutin's parallax hue?
 * @default 0
 *
 * @param parallaxHueEnemyModifier:num
 * @text Enemy Modifier
 * @parent parallaxHue:num
 * @desc Adjust the hue value by this if the cutin target is an enemy.
 * @default +0
 * 
 * @param parallaxOpacity:num
 * @text Opacity
 * @parent ParallaxBase
 * @type number
 * @max 255
 * @desc What is the opacity level of this cutin's parallax?
 * @default 255
 *
 * @param ParallaxScroll
 * @text Scrolling Settings
 * @parent Parallax
 * 
 * @param parallaxOffsetX:num
 * @text Offset X
 * @parent ParallaxScroll
 * @desc Offsets the cutin parallax's X location.
 * Negative: left. Positive: right.
 * @default +0.0
 * 
 * @param parallaxOffsetY:num
 * @text Offset Y
 * @parent ParallaxScroll
 * @desc Offsets the cutin parallax's Y location.
 * Negative: up. Positive: down.
 * @default +0.0
 * 
 * @param parallaxScrollX:num
 * @text Scroll X
 * @parent ParallaxScroll
 * @desc How many pixels does the parallax scroll horizontally?
 * Negative: Scroll to right. Positive: Scroll to left.
 * @default +0.0
 *
 * @param parallaxScrollXinvertEnemy:eval
 * @text Invert for Enemy?
 * @parent parallaxScrollX:num
 * @type boolean
 * @on Invert
 * @off Don't Invert
 * @desc Invert the X scroll direction if the cutin target is an enemy?
 * @default false
 * 
 * @param parallaxScrollY:num
 * @text Scroll Y
 * @parent ParallaxScroll
 * @desc How many pixels does the parallax scroll vertically?
 * Negative: Scroll to down. Positive: Scroll to up.
 * @default +0.0
 *
 * @param parallaxScrollYinvertEnemy:eval
 * @text Invert for Enemy?
 * @parent parallaxScrollY:num
 * @type boolean
 * @on Invert
 * @off Don't Invert
 * @desc Invert the Y scroll direction if the cutin target is an enemy?
 * @default false
 *
 */
//=============================================================================

const _0x33ee77=_0x5d49;(function(_0x430a33,_0x5a7845){const _0x2dd3c3=_0x5d49,_0x5becd9=_0x430a33();while(!![]){try{const _0x1f4334=parseInt(_0x2dd3c3(0x6d5))/0x1+parseInt(_0x2dd3c3(0x8f7))/0x2+-parseInt(_0x2dd3c3(0xa40))/0x3*(parseInt(_0x2dd3c3(0x82c))/0x4)+-parseInt(_0x2dd3c3(0xb45))/0x5*(parseInt(_0x2dd3c3(0x450))/0x6)+parseInt(_0x2dd3c3(0xbd7))/0x7*(parseInt(_0x2dd3c3(0x91f))/0x8)+-parseInt(_0x2dd3c3(0x6ba))/0x9+parseInt(_0x2dd3c3(0x688))/0xa;if(_0x1f4334===_0x5a7845)break;else _0x5becd9['push'](_0x5becd9['shift']());}catch(_0x55d812){_0x5becd9['push'](_0x5becd9['shift']());}}}(_0x129d,0x30572));var label=_0x33ee77(0x993),tier=tier||0x0,dependencies=[],pluginData=$plugins['filter'](function(_0x22df6c){const _0x4b706d=_0x33ee77;return _0x22df6c[_0x4b706d(0xc0d)]&&_0x22df6c[_0x4b706d(0x263)][_0x4b706d(0x741)]('['+label+']');})[0x0];VisuMZ[label][_0x33ee77(0x12b)]=VisuMZ[label]['Settings']||{},VisuMZ[_0x33ee77(0x9ef)]=function(_0x48e3da,_0x8c67c0){const _0x2c5a5a=_0x33ee77;for(const _0x2952ec in _0x8c67c0){if(_0x2952ec[_0x2c5a5a(0x7c1)](/(.*):(.*)/i)){const _0x5216df=String(RegExp['$1']),_0xf1ffbb=String(RegExp['$2'])[_0x2c5a5a(0x46b)]()[_0x2c5a5a(0xaf2)]();let _0x25f826,_0x53ceb5,_0x33bf62;switch(_0xf1ffbb){case _0x2c5a5a(0x6a8):_0x25f826=_0x8c67c0[_0x2952ec]!==''?Number(_0x8c67c0[_0x2952ec]):0x0;break;case _0x2c5a5a(0x3e8):_0x53ceb5=_0x8c67c0[_0x2952ec]!==''?JSON[_0x2c5a5a(0x33b)](_0x8c67c0[_0x2952ec]):[],_0x25f826=_0x53ceb5['map'](_0x1e262c=>Number(_0x1e262c));break;case'EVAL':_0x25f826=_0x8c67c0[_0x2952ec]!==''?eval(_0x8c67c0[_0x2952ec]):null;break;case _0x2c5a5a(0x18e):_0x53ceb5=_0x8c67c0[_0x2952ec]!==''?JSON[_0x2c5a5a(0x33b)](_0x8c67c0[_0x2952ec]):[],_0x25f826=_0x53ceb5[_0x2c5a5a(0x6f2)](_0x1ab705=>eval(_0x1ab705));break;case'JSON':_0x25f826=_0x8c67c0[_0x2952ec]!==''?JSON['parse'](_0x8c67c0[_0x2952ec]):'';break;case'ARRAYJSON':_0x53ceb5=_0x8c67c0[_0x2952ec]!==''?JSON[_0x2c5a5a(0x33b)](_0x8c67c0[_0x2952ec]):[],_0x25f826=_0x53ceb5[_0x2c5a5a(0x6f2)](_0x19f92c=>JSON[_0x2c5a5a(0x33b)](_0x19f92c));break;case'FUNC':_0x25f826=_0x8c67c0[_0x2952ec]!==''?new Function(JSON[_0x2c5a5a(0x33b)](_0x8c67c0[_0x2952ec])):new Function(_0x2c5a5a(0x34c));break;case'ARRAYFUNC':_0x53ceb5=_0x8c67c0[_0x2952ec]!==''?JSON[_0x2c5a5a(0x33b)](_0x8c67c0[_0x2952ec]):[],_0x25f826=_0x53ceb5[_0x2c5a5a(0x6f2)](_0x9c39cc=>new Function(JSON['parse'](_0x9c39cc)));break;case _0x2c5a5a(0x753):_0x25f826=_0x8c67c0[_0x2952ec]!==''?String(_0x8c67c0[_0x2952ec]):'';break;case _0x2c5a5a(0x296):_0x53ceb5=_0x8c67c0[_0x2952ec]!==''?JSON['parse'](_0x8c67c0[_0x2952ec]):[],_0x25f826=_0x53ceb5[_0x2c5a5a(0x6f2)](_0x228418=>String(_0x228418));break;case'STRUCT':_0x33bf62=_0x8c67c0[_0x2952ec]!==''?JSON['parse'](_0x8c67c0[_0x2952ec]):{},_0x48e3da[_0x5216df]={},VisuMZ['ConvertParams'](_0x48e3da[_0x5216df],_0x33bf62);continue;case _0x2c5a5a(0x42a):_0x53ceb5=_0x8c67c0[_0x2952ec]!==''?JSON[_0x2c5a5a(0x33b)](_0x8c67c0[_0x2952ec]):[],_0x25f826=_0x53ceb5[_0x2c5a5a(0x6f2)](_0x2eaa76=>VisuMZ[_0x2c5a5a(0x9ef)]({},JSON[_0x2c5a5a(0x33b)](_0x2eaa76)));break;default:continue;}_0x48e3da[_0x5216df]=_0x25f826;}}return _0x48e3da;},(_0x4825a3=>{const _0xe60792=_0x33ee77,_0x3eff1a=_0x4825a3[_0xe60792(0xac3)];for(const _0x28d158 of dependencies){if(!Imported[_0x28d158]){alert(_0xe60792(0x3d0)[_0xe60792(0x23d)](_0x3eff1a,_0x28d158)),SceneManager[_0xe60792(0x41d)]();break;}}const _0x549e85=_0x4825a3[_0xe60792(0x263)];if(_0x549e85['match'](/\[Version[ ](.*?)\]/i)){const _0x283956=Number(RegExp['$1']);_0x283956!==VisuMZ[label][_0xe60792(0x71e)]&&(alert(_0xe60792(0x34b)[_0xe60792(0x23d)](_0x3eff1a,_0x283956)),SceneManager[_0xe60792(0x41d)]());}if(_0x549e85[_0xe60792(0x7c1)](/\[Tier[ ](\d+)\]/i)){const _0x4119a4=Number(RegExp['$1']);_0x4119a4<tier?(alert(_0xe60792(0x5da)[_0xe60792(0x23d)](_0x3eff1a,_0x4119a4,tier)),SceneManager[_0xe60792(0x41d)]()):tier=Math['max'](_0x4119a4,tier);}VisuMZ[_0xe60792(0x9ef)](VisuMZ[label][_0xe60792(0x12b)],_0x4825a3[_0xe60792(0x98e)]);})(pluginData),VisuMZ[_0x33ee77(0xb6b)]=function(_0x40d5e8){const _0x4c2b16=_0x33ee77;let _0x571486=[];for(const _0x12f89c of _0x40d5e8){_0x571486=_0x571486[_0x4c2b16(0x770)](VisuMZ[_0x4c2b16(0x8c0)](_0x12f89c));}return _0x571486[_0x4c2b16(0x313)](_0x16fc47=>_0x16fc47);},VisuMZ[_0x33ee77(0x8c0)]=function(_0x3d274b){const _0x3930a1=_0x33ee77,_0x438d5c=BattleManager[_0x3930a1(0x1ac)]()[_0x3930a1(0x313)](_0x5877a6=>_0x5877a6&&_0x5877a6[_0x3930a1(0xbdf)]()),_0x229e4=BattleManager[_0x3930a1(0x7c0)],_0x34ca54=BattleManager[_0x3930a1(0x608)],_0x2a5d83=BattleManager[_0x3930a1(0x901)]?BattleManager[_0x3930a1(0x901)][_0x3930a1(0x9fd)](0x0):_0x438d5c;_0x3d274b=_0x3d274b[_0x3930a1(0x172)]()[_0x3930a1(0xaf2)]();if(_0x3d274b==='user')return[_0x229e4];else{if(_0x3d274b==='current\x20target')return[_0x34ca54];else{if(_0x3d274b===_0x3930a1(0x42d)){if(_0x34ca54){const _0x15b128=_0x2a5d83[_0x3930a1(0xba4)](_0x34ca54);return _0x15b128>=0x0?[_0x2a5d83[_0x15b128-0x1]||_0x34ca54]:[_0x34ca54];}}else{if(_0x3d274b==='next\x20target'){if(_0x34ca54){const _0x12b225=_0x2a5d83[_0x3930a1(0xba4)](_0x34ca54);return _0x12b225>=0x0?[_0x2a5d83[_0x12b225+0x1]||_0x34ca54]:[_0x34ca54];}}else{if(_0x3d274b==='all\x20targets')return _0x2a5d83;else{if(_0x3d274b===_0x3930a1(0x4a9))return[_0x229e4]['concat'](_0x2a5d83);else{if(_0x3d274b===_0x3930a1(0x6f6))return _0x438d5c[_0x3930a1(0x313)](_0x1356e2=>_0x1356e2!==_0x229e4&&!_0x2a5d83['includes'](_0x1356e2)&&_0x1356e2['notFocusValid']());else{if(_0x3d274b==='special')return[VisuMZ[_0x3930a1(0x354)]()];else{if(_0x3d274b[_0x3930a1(0x7c1)](/SPECIAL (.*)>/i)){const _0x40f0a4=String(RegExp['$1'])[_0x3930a1(0x22d)](',')[_0x3930a1(0x6f2)](_0x28f38b=>_0x28f38b[_0x3930a1(0xaf2)]());return[VisuMZ['GetActionSequenceSpecialTargetWithFlags'](_0x40f0a4)];}}}}}}}}}if(_0x229e4){if(_0x3d274b===_0x3930a1(0x961))return _0x229e4['friendsUnit']()[_0x3930a1(0x373)]();else{if(_0x3d274b===_0x3930a1(0xa2d))return _0x229e4[_0x3930a1(0x95f)]()[_0x3930a1(0x373)]()[_0x3930a1(0x313)](_0x32d17e=>_0x32d17e!==_0x229e4);else{if(_0x3d274b===_0x3930a1(0x281))return _0x229e4['friendsUnit']()['aliveMembers']()[_0x3930a1(0x313)](_0x2bb652=>_0x2bb652!==_0x34ca54);else{if(_0x3d274b==='dead\x20friends')return _0x229e4[_0x3930a1(0x95f)]()['deadMembers']();else{if(_0x3d274b['match'](/FRIEND INDEX (\d+)/i)){const _0x491220=Number(RegExp['$1']);return[_0x229e4[_0x3930a1(0x95f)]()[_0x3930a1(0x32f)]()[_0x491220]];}}}}}if(_0x3d274b==='alive\x20opponents')return _0x229e4[_0x3930a1(0x20d)]()['aliveMembers']();else{if(_0x3d274b===_0x3930a1(0x839))return _0x229e4['opponentsUnit']()[_0x3930a1(0x373)]()['filter'](_0x27d231=>_0x27d231!==_0x34ca54);else{if(_0x3d274b===_0x3930a1(0xc1b))return _0x229e4[_0x3930a1(0x20d)]()['deadMembers']();else{if(_0x3d274b[_0x3930a1(0x7c1)](/OPPONENT INDEX (\d+)/i)){const _0x24a415=Number(RegExp['$1']);return[_0x229e4['opponentsUnit']()[_0x3930a1(0x32f)]()[_0x24a415]];}}}}}if(_0x3d274b===_0x3930a1(0xc29))return $gameParty[_0x3930a1(0x373)]();else{if(_0x3d274b===_0x3930a1(0xc15))return $gameParty[_0x3930a1(0x373)]()[_0x3930a1(0x313)](_0x244d1b=>_0x244d1b!==_0x229e4);else{if(_0x3d274b===_0x3930a1(0x217))return $gameParty[_0x3930a1(0x373)]()[_0x3930a1(0x313)](_0x29d562=>_0x29d562!==_0x34ca54);else{if(_0x3d274b==='dead\x20actors')return $gameParty['deadMembers']();else{if(_0x3d274b[_0x3930a1(0x7c1)](/ACTOR INDEX (\d+)/i)){const _0x1493f9=Number(RegExp['$1']);return[$gameParty['members']()[_0x1493f9]];}else{if(_0x3d274b['match'](/ACTOR ID (\d+)/i)){const _0x700653=Number(RegExp['$1']);return[$gameActors[_0x3930a1(0x2b0)](_0x700653)];}}}}}}if(_0x3d274b==='alive\x20enemies')return $gameTroop[_0x3930a1(0x373)]();else{if(_0x3d274b===_0x3930a1(0x37e))return $gameTroop[_0x3930a1(0x373)]()[_0x3930a1(0x313)](_0x3bca8c=>_0x3bca8c!==_0x229e4);else{if(_0x3d274b===_0x3930a1(0xc20))return $gameTroop[_0x3930a1(0x373)]()[_0x3930a1(0x313)](_0x36b665=>_0x36b665!==_0x34ca54);else{if(_0x3d274b==='dead\x20enemies')return $gameTroop[_0x3930a1(0x85b)]();else{if(_0x3d274b[_0x3930a1(0x7c1)](/ENEMY INDEX (\d+)/i)){const _0x5b6903=Number(RegExp['$1']);return[$gameTroop['members']()[_0x5b6903]];}else{if(_0x3d274b['match'](/ENEMY ID (\d+)/i)){const _0x30fb36=Number(RegExp['$1']);return $gameTroop[_0x3930a1(0x373)]()[_0x3930a1(0x313)](_0x4a1a6f=>_0x4a1a6f[_0x3930a1(0x486)]()===_0x30fb36);}}}}}}if(_0x3d274b===_0x3930a1(0x1e5))return _0x438d5c[_0x3930a1(0x313)](_0x29aeac=>_0x29aeac[_0x3930a1(0x4ad)]());else{if(_0x3d274b===_0x3930a1(0xaea))return _0x438d5c[_0x3930a1(0x313)](_0x4537d0=>_0x4537d0[_0x3930a1(0x4ad)]()&&_0x4537d0!==_0x229e4);else{if(_0x3d274b==='alive\x20battlers\x20not\x20target')return _0x438d5c[_0x3930a1(0x313)](_0x17e1c6=>_0x17e1c6[_0x3930a1(0x4ad)]()&&_0x17e1c6!==_0x34ca54);else{if(_0x3d274b==='dead\x20battlers')return _0x438d5c[_0x3930a1(0x313)](_0x32c567=>_0x32c567[_0x3930a1(0x385)]());}}}return[];},VisuMZ[_0x33ee77(0x354)]=function(){return BattleManager['_target'];},VisuMZ[_0x33ee77(0x2d8)]=function(_0x39f6c3){const _0x52f340=_0x33ee77;return BattleManager[_0x52f340(0x608)];},PluginManager[_0x33ee77(0x274)](pluginData[_0x33ee77(0xac3)],'ActSeq_Set_SetupAction',_0x44eb0c=>{const _0x22753a=_0x33ee77;if(!SceneManager[_0x22753a(0x5d9)]())return;VisuMZ['ConvertParams'](_0x44eb0c,_0x44eb0c);const _0x2cd69c=$gameTemp[_0x22753a(0x87a)](),_0x1daee4=BattleManager[_0x22753a(0xac6)],_0x1e2b05=BattleManager['_subject'],_0xcabfea=BattleManager[_0x22753a(0x901)]?BattleManager['_allTargets']['slice'](0x0):[],_0x571639=BattleManager['_logWindow'];if(!_0x2cd69c||!_0x1daee4||!_0x1e2b05)return;if(!_0x1daee4[_0x22753a(0x5b0)]())return;if(_0x44eb0c[_0x22753a(0x728)])_0x571639[_0x22753a(0x66f)](_0x1e2b05,_0x1daee4[_0x22753a(0x5b0)]());_0x44eb0c[_0x22753a(0x193)]&&_0x571639['push'](_0x22753a(0x1f5),_0x1e2b05,_0xcabfea,!![]);if(_0x44eb0c[_0x22753a(0x2be)])_0x571639[_0x22753a(0x7ab)](_0x22753a(0x49b),_0x1e2b05,_0x1daee4);if(_0x44eb0c[_0x22753a(0xbba)])_0x571639[_0x22753a(0x7ab)](_0x22753a(0x5b7));if(_0x44eb0c['CastAnimation'])_0x571639[_0x22753a(0x7ab)](_0x22753a(0x351),_0x1e2b05,_0x1daee4);if(_0x44eb0c['WaitForAnimation'])_0x571639['push'](_0x22753a(0xc2a));_0x2cd69c['setWaitMode'](_0x22753a(0xa7c));}),PluginManager[_0x33ee77(0x274)](pluginData['name'],_0x33ee77(0x2ff),_0x56dc9b=>{const _0x551ca5=_0x33ee77;if(!SceneManager[_0x551ca5(0x5d9)]())return;VisuMZ[_0x551ca5(0x9ef)](_0x56dc9b,_0x56dc9b);const _0x3b7d91=$gameTemp['getLastPluginCommandInterpreter'](),_0x118b9a=BattleManager[_0x551ca5(0xac6)],_0x209dc8=BattleManager[_0x551ca5(0x7c0)],_0x1bf3f6=BattleManager[_0x551ca5(0x901)]?BattleManager[_0x551ca5(0x901)][_0x551ca5(0x9fd)](0x0):[],_0x95862f=BattleManager['_logWindow'],_0x5cebf0=_0x56dc9b[_0x551ca5(0xab5)]??![];if(!_0x3b7d91||!_0x118b9a||!_0x209dc8)return;if(!_0x118b9a[_0x551ca5(0x5b0)]())return;let _0x531462=_0x5cebf0?_0x95862f[_0x551ca5(0xb53)](_0x209dc8):0x1;for(let _0x10c165=0x0;_0x10c165<_0x531462;_0x10c165++){_0x5cebf0&&_0x209dc8['isActor']()&&_0x95862f[_0x551ca5(0x7ab)]('setActiveWeaponSet',_0x209dc8,_0x10c165);if(_0x56dc9b[_0x551ca5(0xa86)])_0x95862f[_0x551ca5(0x7ab)](_0x551ca5(0x805),_0x209dc8,_0x118b9a);if(_0x56dc9b[_0x551ca5(0x986)]>0x0)_0x95862f[_0x551ca5(0x7ab)](_0x551ca5(0xb93),_0x56dc9b[_0x551ca5(0x986)]);if(_0x56dc9b['ActionAnimation'])_0x95862f[_0x551ca5(0x7ab)](_0x551ca5(0xab9),_0x209dc8,_0x1bf3f6,_0x118b9a[_0x551ca5(0x5b0)]()['animationId']);if(_0x56dc9b['WaitForAnimation'])_0x95862f['push']('waitForAnimation');for(const _0x1ead87 of _0x1bf3f6){if(!_0x1ead87)continue;if(_0x56dc9b[_0x551ca5(0x582)])_0x95862f[_0x551ca5(0x7ab)]('actionEffect',_0x209dc8,_0x1ead87);}}_0x5cebf0&&_0x209dc8[_0x551ca5(0x6c3)]()&&_0x95862f[_0x551ca5(0x7ab)](_0x551ca5(0x9e5),_0x209dc8);if(_0x56dc9b[_0x551ca5(0x193)])_0x95862f[_0x551ca5(0x7ab)](_0x551ca5(0x1f5),_0x209dc8,_0x1bf3f6,![]);_0x3b7d91[_0x551ca5(0xa7e)]('battlelog');}),PluginManager['registerCommand'](pluginData['name'],'ActSeq_Set_TargetActionSet',_0x3fb8e1=>{const _0x5a0c11=_0x33ee77;if(!SceneManager[_0x5a0c11(0x5d9)]())return;VisuMZ['ConvertParams'](_0x3fb8e1,_0x3fb8e1);const _0x284dc4=$gameTemp['getLastPluginCommandInterpreter'](),_0xec3fe6=BattleManager['_action'],_0x2b09d6=BattleManager['_subject'],_0x599d17=BattleManager[_0x5a0c11(0x901)]?BattleManager[_0x5a0c11(0x901)][_0x5a0c11(0x9fd)](0x0):[],_0x50f1f1=BattleManager[_0x5a0c11(0xb43)],_0xa3171b=_0x3fb8e1[_0x5a0c11(0xab5)]??![];if(!_0x284dc4||!_0xec3fe6||!_0x2b09d6)return;if(!_0xec3fe6[_0x5a0c11(0x5b0)]())return;let _0x52df52=_0xa3171b?_0x50f1f1['getDualWieldTimes'](_0x2b09d6):0x1;for(let _0x154c60=0x0;_0x154c60<_0x52df52;_0x154c60++){for(const _0x23c2ae of _0x599d17){if(!_0x23c2ae)continue;_0xa3171b&&_0x2b09d6[_0x5a0c11(0x6c3)]()&&_0x50f1f1['push'](_0x5a0c11(0x9fa),_0x2b09d6,_0x154c60);if(_0x3fb8e1['PerformAction'])_0x50f1f1[_0x5a0c11(0x7ab)](_0x5a0c11(0x805),_0x2b09d6,_0xec3fe6);if(_0x3fb8e1[_0x5a0c11(0x965)]>0x0)_0x50f1f1[_0x5a0c11(0x7ab)]('waitCount',_0x3fb8e1[_0x5a0c11(0x965)]);if(_0x3fb8e1[_0x5a0c11(0x580)])_0x50f1f1[_0x5a0c11(0x7ab)](_0x5a0c11(0xab9),_0x2b09d6,[_0x23c2ae],_0xec3fe6[_0x5a0c11(0x5b0)]()['animationId']);if(_0x3fb8e1[_0x5a0c11(0x8c6)]>0x0)_0x50f1f1['push'](_0x5a0c11(0xb93),_0x3fb8e1[_0x5a0c11(0x8c6)]);if(_0x3fb8e1[_0x5a0c11(0x582)])_0x50f1f1[_0x5a0c11(0x7ab)](_0x5a0c11(0x1d5),_0x2b09d6,_0x23c2ae);}}_0xa3171b&&_0x2b09d6[_0x5a0c11(0x6c3)]()&&_0x50f1f1[_0x5a0c11(0x7ab)]('clearActiveWeaponSet',_0x2b09d6);if(_0x3fb8e1[_0x5a0c11(0x193)])_0x50f1f1[_0x5a0c11(0x7ab)](_0x5a0c11(0x1f5),_0x2b09d6,_0x599d17,![]);_0x284dc4['setWaitMode'](_0x5a0c11(0xa7c));}),PluginManager['registerCommand'](pluginData[_0x33ee77(0xac3)],_0x33ee77(0x1b9),_0x1ba5c4=>{const _0x5b2c78=_0x33ee77;if(!SceneManager[_0x5b2c78(0x5d9)]())return;VisuMZ['ConvertParams'](_0x1ba5c4,_0x1ba5c4);const _0x1ea70e=$gameTemp[_0x5b2c78(0x87a)](),_0x58b8cb=BattleManager[_0x5b2c78(0xac6)],_0x142870=BattleManager[_0x5b2c78(0x7c0)],_0x4c15ab=BattleManager[_0x5b2c78(0x901)]?BattleManager[_0x5b2c78(0x901)][_0x5b2c78(0x9fd)](0x0):[],_0x2b31a4=BattleManager[_0x5b2c78(0xb43)];if(!_0x1ea70e||!_0x58b8cb||!_0x142870)return;if(!_0x58b8cb[_0x5b2c78(0x5b0)]())return;if(_0x1ba5c4['ApplyImmortal'])_0x2b31a4['push'](_0x5b2c78(0x1f5),_0x142870,_0x4c15ab,![]);if(_0x1ba5c4[_0x5b2c78(0x464)])_0x2b31a4['push'](_0x5b2c78(0x14a));if(_0x1ba5c4[_0x5b2c78(0x8af)])_0x2b31a4[_0x5b2c78(0x7ab)](_0x5b2c78(0x8a6));if(_0x1ba5c4[_0x5b2c78(0x9e2)])_0x2b31a4['push'](_0x5b2c78(0x7aa));if(_0x1ba5c4['ActionEnd'])_0x2b31a4[_0x5b2c78(0x7ab)](_0x5b2c78(0x73c),_0x142870);if(_0x1ba5c4[_0x5b2c78(0xbba)])_0x2b31a4[_0x5b2c78(0x7ab)](_0x5b2c78(0x5b7));_0x1ea70e[_0x5b2c78(0xa7e)](_0x5b2c78(0xa7c));}),PluginManager[_0x33ee77(0x274)](pluginData[_0x33ee77(0xac3)],_0x33ee77(0x90f),_0x20eee3=>{const _0x31c2b0=_0x33ee77;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x31c2b0(0x596)])return;VisuMZ[_0x31c2b0(0x9ef)](_0x20eee3,_0x20eee3);const _0x114898=$gameTemp['getLastPluginCommandInterpreter'](),_0x346b60=_0x20eee3[_0x31c2b0(0x419)];if(!_0x114898)return;$gameScreen[_0x31c2b0(0x1a5)](_0x20eee3['Angle'],_0x20eee3[_0x31c2b0(0x642)],_0x20eee3[_0x31c2b0(0x943)]);if(_0x346b60)_0x114898[_0x31c2b0(0xa7e)](_0x31c2b0(0x605));}),PluginManager['registerCommand'](pluginData[_0x33ee77(0xac3)],_0x33ee77(0x3aa),_0x3cd3b8=>{const _0x1b3da4=_0x33ee77;if(!SceneManager[_0x1b3da4(0x5d9)]())return;if(!Imported['VisuMZ_3_ActSeqCamera'])return;VisuMZ['ConvertParams'](_0x3cd3b8,_0x3cd3b8);const _0xbcab1a=$gameTemp['getLastPluginCommandInterpreter'](),_0x41ee9c=_0x3cd3b8['WaitForAngle'];if(!_0xbcab1a)return;$gameScreen['setBattleAngle'](0x0,_0x3cd3b8[_0x1b3da4(0x642)],_0x3cd3b8[_0x1b3da4(0x943)]);if(_0x41ee9c)_0xbcab1a[_0x1b3da4(0xa7e)](_0x1b3da4(0x605));}),PluginManager[_0x33ee77(0x274)](pluginData['name'],_0x33ee77(0xb55),_0x5add50=>{const _0x2243bf=_0x33ee77;if(!SceneManager[_0x2243bf(0x5d9)]())return;if(!Imported['VisuMZ_3_ActSeqCamera'])return;const _0x4860fc=$gameTemp[_0x2243bf(0x87a)]();if(!_0x4860fc)return;_0x4860fc[_0x2243bf(0xa7e)](_0x2243bf(0x605));}),PluginManager[_0x33ee77(0x274)](pluginData[_0x33ee77(0xac3)],'ActSeq_Animation_ActionAnimation',_0xd774f2=>{const _0x3553e7=_0x33ee77;if(!SceneManager[_0x3553e7(0x5d9)]())return;VisuMZ[_0x3553e7(0x9ef)](_0xd774f2,_0xd774f2);const _0x32abd7=$gameTemp[_0x3553e7(0x87a)](),_0x5a83f3=BattleManager[_0x3553e7(0xac6)],_0x51912b=BattleManager[_0x3553e7(0x7c0)],_0x1ab23a=VisuMZ[_0x3553e7(0xb6b)](_0xd774f2[_0x3553e7(0x312)]),_0x76ffd=_0xd774f2[_0x3553e7(0x17f)],_0x4af7f1=BattleManager[_0x3553e7(0xb43)];if(!_0x32abd7||!_0x5a83f3||!_0x51912b)return;if(!_0x5a83f3[_0x3553e7(0x5b0)]())return;let _0x2e4713=_0x5a83f3[_0x3553e7(0x5b0)]()[_0x3553e7(0xc12)];if(_0x2e4713<0x0)_0x2e4713=_0x51912b[_0x3553e7(0x3b3)]();$gameTemp['requestAnimation'](_0x1ab23a,_0x2e4713,_0x76ffd),_0xd774f2[_0x3553e7(0x277)]&&_0x32abd7['setWaitMode'](_0x3553e7(0x5cf));}),PluginManager[_0x33ee77(0x274)](pluginData[_0x33ee77(0xac3)],_0x33ee77(0x117),_0x386834=>{const _0x296899=_0x33ee77;if(!SceneManager[_0x296899(0x5d9)]())return;VisuMZ['ConvertParams'](_0x386834,_0x386834);const _0x33abc4=$gameTemp[_0x296899(0x87a)](),_0x382643=BattleManager[_0x296899(0x7c0)],_0x37519d=VisuMZ[_0x296899(0xb6b)](_0x386834[_0x296899(0x312)]),_0x2421a8=_0x386834['Mirror'],_0x241b24=BattleManager[_0x296899(0xb43)];if(!_0x33abc4||!_0x382643)return;const _0x143d65=_0x382643['attackAnimationId1']();$gameTemp[_0x296899(0x84d)](_0x37519d,_0x143d65,_0x2421a8),_0x386834[_0x296899(0x277)]&&_0x33abc4['setWaitMode'](_0x296899(0x5cf));}),PluginManager[_0x33ee77(0x274)](pluginData[_0x33ee77(0xac3)],_0x33ee77(0x15f),_0x5d5177=>{const _0x45e8ea=_0x33ee77;if(!SceneManager[_0x45e8ea(0x5d9)]())return;VisuMZ['ConvertParams'](_0x5d5177,_0x5d5177);const _0x3cc968=_0x2494f6[_0x45e8ea(0x940)](_0x5d5177[_0x45e8ea(0xa7a)]);if(_0x3cc968<=0x0)return;const _0x45443e=$gameTemp['getLastPluginCommandInterpreter'](),_0x2494f6=BattleManager['_subject'],_0x183210=VisuMZ[_0x45e8ea(0xb6b)](_0x5d5177['Targets']),_0x5358b0=_0x5d5177[_0x45e8ea(0x17f)],_0xd54075=BattleManager[_0x45e8ea(0xb43)];if(!_0x45443e||!_0x2494f6)return;$gameTemp[_0x45e8ea(0x84d)](_0x183210,_0x3cc968,_0x5358b0),_0x5d5177['WaitForAnimation']&&_0x45443e[_0x45e8ea(0xa7e)](_0x45e8ea(0x5cf));}),PluginManager[_0x33ee77(0x274)](pluginData['name'],_0x33ee77(0x698),_0x386695=>{const _0x2f2635=_0x33ee77;if(!SceneManager[_0x2f2635(0x5d9)]())return;VisuMZ[_0x2f2635(0x9ef)](_0x386695,_0x386695);const _0x2dcaec=$gameTemp[_0x2f2635(0x87a)](),_0x167d4d=VisuMZ[_0x2f2635(0xb6b)](_0x386695['Targets']),_0x733c4a=_0x386695['Balloon'];let _0xb3e755=0x0;switch(_0x733c4a[_0x2f2635(0x46b)]()[_0x2f2635(0xaf2)]()){case'!':case'EXCLAMATION':_0xb3e755=0x1;break;case'?':case'QUESTION':_0xb3e755=0x2;break;case _0x2f2635(0x588):case _0x2f2635(0x959):case _0x2f2635(0x670):case _0x2f2635(0x56c):case _0x2f2635(0x7ea):_0xb3e755=0x3;break;case _0x2f2635(0x500):case'LOVE':_0xb3e755=0x4;break;case _0x2f2635(0x4a7):case _0x2f2635(0x5ec):_0xb3e755=0x5;break;case _0x2f2635(0x9cc):_0xb3e755=0x6;break;case _0x2f2635(0xb0c):case _0x2f2635(0x878):case'FRUSTRATION':_0xb3e755=0x7;break;case'SILENCE':case _0x2f2635(0x1a8):_0xb3e755=0x8;break;case'LIGHT':case _0x2f2635(0x89e):case _0x2f2635(0x735):case _0x2f2635(0x775):case'LIGHTBULB':_0xb3e755=0x9;break;case'Z':case'ZZ':case _0x2f2635(0x5a0):case _0x2f2635(0x69e):_0xb3e755=0xa;break;case _0x2f2635(0x95a):_0xb3e755=0xb;break;case'USER-DEFINED\x202':_0xb3e755=0xc;break;case _0x2f2635(0xb76):_0xb3e755=0xd;break;case'USER-DEFINED\x204':_0xb3e755=0xe;break;case _0x2f2635(0x8e8):_0xb3e755=0xf;break;}for(const _0x250b33 of _0x167d4d){if(!_0x250b33)continue;$gameTemp[_0x2f2635(0x60a)](_0x250b33,_0xb3e755);}_0x386695[_0x2f2635(0x214)]&&_0x2dcaec&&(_0x2dcaec['wait'](0x1),_0x2dcaec[_0x2f2635(0xa7e)](_0x2f2635(0x62c)));}),PluginManager['registerCommand'](pluginData['name'],_0x33ee77(0x9b5),_0x34ae3e=>{const _0x5dba6f=_0x33ee77;if(!SceneManager[_0x5dba6f(0x5d9)]())return;if(!Imported[_0x5dba6f(0x188)])return;VisuMZ[_0x5dba6f(0x9ef)](_0x34ae3e,_0x34ae3e);const _0x1f71a5=$gameTemp['getLastPluginCommandInterpreter'](),_0x3688ea=VisuMZ['CreateActionSequenceTargets'](_0x34ae3e['Targets']),_0x2a88d3=_0x34ae3e['IconIndex'];for(const _0x46fadc of _0x3688ea){if(!_0x46fadc)continue;$gameTemp[_0x5dba6f(0x60a)](_0x46fadc,[_0x2a88d3]);}_0x34ae3e['WaitComplete']&&_0x1f71a5&&(_0x1f71a5[_0x5dba6f(0xc10)](0x1),_0x1f71a5[_0x5dba6f(0xa7e)](_0x5dba6f(0x62c)));}),PluginManager['registerCommand'](pluginData['name'],_0x33ee77(0x37a),_0x129c02=>{const _0x4b76fe=_0x33ee77;if(!SceneManager[_0x4b76fe(0x5d9)]())return;if(!Imported[_0x4b76fe(0x188)])return;VisuMZ[_0x4b76fe(0x9ef)](_0x129c02,_0x129c02);const _0x57ab49=$gameTemp[_0x4b76fe(0x87a)](),_0x32e869=VisuMZ[_0x4b76fe(0xb6b)](_0x129c02[_0x4b76fe(0x312)]),_0x48a57d=Math['min'](Number(_0x129c02['startIcon']||0x0),Number(_0x129c02['endIcon']||0x0)),_0x16e9d4=Math[_0x4b76fe(0x657)](Number(_0x129c02[_0x4b76fe(0x1b0)]||0x0),Number(_0x129c02[_0x4b76fe(0xc17)]||0x0)),_0x516f4b=[];for(let _0x172d28=_0x48a57d;_0x172d28<=_0x16e9d4;_0x172d28++){_0x516f4b[_0x4b76fe(0x7ab)](_0x172d28);}for(const _0x146415 of _0x32e869){if(!_0x146415)continue;$gameTemp[_0x4b76fe(0x60a)](_0x146415,_0x516f4b);}_0x129c02[_0x4b76fe(0x214)]&&_0x57ab49&&(_0x57ab49[_0x4b76fe(0xc10)](0x1),_0x57ab49['setWaitMode'](_0x4b76fe(0x62c)));}),PluginManager[_0x33ee77(0x274)](pluginData[_0x33ee77(0xac3)],_0x33ee77(0x49e),_0xa54232=>{const _0x7fb79e=_0x33ee77;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x7fb79e(0x188)])return;VisuMZ[_0x7fb79e(0x9ef)](_0xa54232,_0xa54232);const _0x292f59=$gameTemp[_0x7fb79e(0x87a)](),_0xe1ca9a=VisuMZ[_0x7fb79e(0xb6b)](_0xa54232[_0x7fb79e(0x312)]),_0x4f74d6=_0xa54232[_0x7fb79e(0x447)];for(const _0x231bbc of _0xe1ca9a){if(!_0x231bbc)continue;$gameTemp[_0x7fb79e(0x60a)](_0x231bbc,_0x4f74d6);}_0xa54232[_0x7fb79e(0x214)]&&_0x292f59&&(_0x292f59[_0x7fb79e(0xc10)](0x1),_0x292f59['setWaitMode'](_0x7fb79e(0x62c)));}),PluginManager[_0x33ee77(0x274)](pluginData[_0x33ee77(0xac3)],_0x33ee77(0x3ca),_0x4cf7e2=>{const _0x1b5863=_0x33ee77;if(!SceneManager[_0x1b5863(0x5d9)]())return;VisuMZ[_0x1b5863(0x9ef)](_0x4cf7e2,_0x4cf7e2);const _0x26aea8=$gameTemp[_0x1b5863(0x87a)](),_0x93363a=BattleManager[_0x1b5863(0xac6)],_0x3d9fc0=_0x4cf7e2[_0x1b5863(0x17f)],_0x1da3c1=VisuMZ[_0x1b5863(0xb6b)](_0x4cf7e2[_0x1b5863(0x312)]);if(!_0x26aea8||!_0x93363a)return;if(!_0x93363a['item']())return;for(const _0x38513b of _0x1da3c1){if(!_0x38513b)continue;_0x38513b[_0x1b5863(0x351)](_0x93363a,_0x3d9fc0);}if(_0x4cf7e2[_0x1b5863(0x277)])_0x26aea8[_0x1b5863(0xa7e)](_0x1b5863(0x5cf));}),PluginManager[_0x33ee77(0x274)](pluginData[_0x33ee77(0xac3)],_0x33ee77(0xa87),_0xec2816=>{const _0x3d1b74=_0x33ee77;VisuMZ['ConvertParams'](_0xec2816,_0xec2816);const _0x3c115a=$gameTemp['getLastPluginCommandInterpreter'](),_0x321ca1=VisuMZ[_0x3d1b74(0xb6b)](_0xec2816[_0x3d1b74(0x312)]),_0x573ea0=_0xec2816[_0x3d1b74(0x84a)];if(!_0x573ea0)return;for(const _0x4d4b68 of _0x321ca1){if(!_0x4d4b68)continue;if(!_0x4d4b68[_0x3d1b74(0x6c3)]())continue;_0x4d4b68[_0x3d1b74(0xa04)](_0x573ea0);}}),PluginManager[_0x33ee77(0x274)](pluginData[_0x33ee77(0xac3)],_0x33ee77(0x555),_0x1f5a7c=>{const _0x3a77d2=_0x33ee77;VisuMZ[_0x3a77d2(0x9ef)](_0x1f5a7c,_0x1f5a7c);const _0xddba8c=_0x1f5a7c['ActorJS'](),_0x1340cd=$gameActors[_0x3a77d2(0x2b0)](_0xddba8c)||null;if(!_0x1340cd){console[_0x3a77d2(0x950)](_0x3a77d2(0x9ad));return;}const _0x4328d6=_0x1f5a7c[_0x3a77d2(0x70d)]();_0x1340cd[_0x3a77d2(0xa04)](_0x4328d6);}),PluginManager[_0x33ee77(0x274)](pluginData[_0x33ee77(0xac3)],_0x33ee77(0x923),_0x5e4bf3=>{const _0x3235c3=_0x33ee77;if(!SceneManager[_0x3235c3(0x5d9)]())return;VisuMZ['ConvertParams'](_0x5e4bf3,_0x5e4bf3);const _0x496202=$gameTemp[_0x3235c3(0x87a)](),_0x34f716=BattleManager[_0x3235c3(0x7c0)],_0x1ce8bf=VisuMZ[_0x3235c3(0xb6b)](_0x5e4bf3[_0x3235c3(0x312)]),_0x3694cb=_0x5e4bf3[_0x3235c3(0x17f)];if(!_0x496202||!_0x34f716)return;const _0xf9e0b3=$dataSkilles[_0x34f716['guardSkillId']()],_0x506527=_0xf9e0b3[_0x3235c3(0xc12)];$gameTemp['requestAnimation'](_0x1ce8bf,_0x506527,_0x3694cb),_0x5e4bf3[_0x3235c3(0x277)]&&_0x496202[_0x3235c3(0xa7e)](_0x3235c3(0x5cf));}),PluginManager[_0x33ee77(0x274)](pluginData['name'],'ActSeq_Animation_ItemAnimation',_0x458f7f=>{const _0x2324b7=_0x33ee77;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x2324b7(0x9ef)](_0x458f7f,_0x458f7f);const _0x41f317=$gameTemp[_0x2324b7(0x87a)](),_0x573f59=VisuMZ[_0x2324b7(0xb6b)](_0x458f7f['Targets']),_0x5a7c38=Number(_0x458f7f[_0x2324b7(0x6bc)]||0x1),_0x327a3b=$dataItems[_0x5a7c38],_0x5401a5=_0x458f7f['Mirror'];if(!_0x41f317)return;if(!_0x327a3b)return;let _0x29fb36=_0x327a3b['animationId'];$gameTemp[_0x2324b7(0x84d)](_0x573f59,_0x29fb36,_0x5401a5),_0x458f7f[_0x2324b7(0x277)]&&_0x41f317[_0x2324b7(0xa7e)](_0x2324b7(0x5cf));}),PluginManager[_0x33ee77(0x274)](pluginData[_0x33ee77(0xac3)],_0x33ee77(0xb3b),_0x32b550=>{const _0x303b72=_0x33ee77;if(!SceneManager[_0x303b72(0x473)])return;if(!SceneManager[_0x303b72(0x473)][_0x303b72(0x850)])return;if(!Imported['VisuMZ_0_CoreEngine'])return;VisuMZ['ConvertParams'](_0x32b550,_0x32b550);const _0x4f62ef=$gameTemp[_0x303b72(0x87a)](),_0x26c76c=Math[_0x303b72(0x20e)](_0x32b550[_0x303b72(0x9a6)]),_0x2aec36=Math[_0x303b72(0x20e)](_0x32b550[_0x303b72(0x746)]);$gameTemp['requestPointAnimation'](_0x26c76c,_0x2aec36,_0x32b550[_0x303b72(0x2f1)],_0x32b550[_0x303b72(0x17f)],_0x32b550[_0x303b72(0x180)]),_0x32b550[_0x303b72(0x214)]&&_0x4f62ef&&(SceneManager[_0x303b72(0x473)][_0x303b72(0x850)][_0x303b72(0x8ff)](),_0x4f62ef[_0x303b72(0xa7e)](_0x303b72(0x5cf)));}),PluginManager[_0x33ee77(0x274)](pluginData[_0x33ee77(0xac3)],'ActSeq_Animation_ShowAnimation',_0x1f825d=>{const _0x40c909=_0x33ee77;if(!SceneManager[_0x40c909(0x5d9)]())return;VisuMZ[_0x40c909(0x9ef)](_0x1f825d,_0x1f825d);const _0x1033df=$gameTemp[_0x40c909(0x87a)](),_0x424a50=VisuMZ[_0x40c909(0xb6b)](_0x1f825d['Targets']),_0x3026dd=_0x1f825d[_0x40c909(0x2f1)],_0x3a3663=_0x1f825d[_0x40c909(0x17f)];if(!_0x1033df)return;$gameTemp[_0x40c909(0x84d)](_0x424a50,_0x3026dd,_0x3a3663);if(_0x1f825d['WaitForAnimation'])_0x1033df[_0x40c909(0xa7e)](_0x40c909(0x5cf));}),PluginManager[_0x33ee77(0x274)](pluginData[_0x33ee77(0xac3)],_0x33ee77(0xa66),_0x200379=>{const _0x2cc9d0=_0x33ee77;if(!SceneManager[_0x2cc9d0(0x5d9)]())return;VisuMZ[_0x2cc9d0(0x9ef)](_0x200379,_0x200379);const _0x95748e=$gameTemp[_0x2cc9d0(0x87a)](),_0x38bc66=VisuMZ[_0x2cc9d0(0xb6b)](_0x200379[_0x2cc9d0(0x312)]),_0x2c7411=Number(_0x200379[_0x2cc9d0(0x2f1)])||0x1,_0x244f6b=_0x200379[_0x2cc9d0(0x17f)];if(!_0x95748e)return;$gameTemp[_0x2cc9d0(0x84d)](_0x38bc66,_0x2c7411,_0x244f6b);if(_0x200379[_0x2cc9d0(0x277)])_0x95748e[_0x2cc9d0(0xa7e)](_0x2cc9d0(0x5cf));}),PluginManager['registerCommand'](pluginData[_0x33ee77(0xac3)],_0x33ee77(0x59c),_0x5ec237=>{const _0x2bddd9=_0x33ee77;if(!SceneManager[_0x2bddd9(0x5d9)]())return;VisuMZ['ConvertParams'](_0x5ec237,_0x5ec237);const _0x1881c6=$gameTemp[_0x2bddd9(0x87a)](),_0x473179=VisuMZ[_0x2bddd9(0xb6b)](_0x5ec237[_0x2bddd9(0x312)]),_0x560d32=Number(_0x5ec237[_0x2bddd9(0x442)]||0x1),_0x440479=$dataSkills[_0x560d32],_0x601016=_0x5ec237[_0x2bddd9(0x17f)];if(!_0x1881c6)return;if(!_0x440479)return;let _0x111ad5=_0x440479[_0x2bddd9(0xc12)];$gameTemp[_0x2bddd9(0x84d)](_0x473179,_0x111ad5,_0x601016),_0x5ec237[_0x2bddd9(0x277)]&&_0x1881c6[_0x2bddd9(0xa7e)](_0x2bddd9(0x5cf));}),PluginManager[_0x33ee77(0x274)](pluginData[_0x33ee77(0xac3)],_0x33ee77(0x17d),_0x6d2005=>{const _0x5406ec=_0x33ee77;if(!SceneManager[_0x5406ec(0x5d9)]())return;const _0x1e96fe=$gameTemp['getLastPluginCommandInterpreter']();if(!_0x1e96fe)return;_0x1e96fe['setWaitMode'](_0x5406ec(0x5cf));}),PluginManager['registerCommand'](pluginData[_0x33ee77(0xac3)],_0x33ee77(0xc27),_0x1c0388=>{const _0x126bb7=_0x33ee77;if(!SceneManager[_0x126bb7(0x5d9)]())return;VisuMZ[_0x126bb7(0x9ef)](_0x1c0388,_0x1c0388);const _0x15ff03=BattleManager[_0x126bb7(0xb43)],_0x35afbf=_0x1c0388[_0x126bb7(0xb08)]&&Imported[_0x126bb7(0x6b7)];_0x15ff03[_0x126bb7(0x25a)](_0x1c0388[_0x126bb7(0x9db)]),_0x35afbf&&Imported[_0x126bb7(0x6b7)]&&$gameSystem[_0x126bb7(0x348)](_0x1c0388[_0x126bb7(0x9db)]||'',_0x1c0388[_0x126bb7(0x828)]||0x0);}),PluginManager['registerCommand'](pluginData[_0x33ee77(0xac3)],_0x33ee77(0xaf5),_0x3994ea=>{const _0x4543b9=_0x33ee77;if(!SceneManager[_0x4543b9(0x5d9)]())return;const _0x40a7b1=BattleManager['_logWindow'];_0x40a7b1['clear']();}),PluginManager['registerCommand'](pluginData['name'],'ActSeq_BattleLog_DisplayAction',_0x2e8d3a=>{const _0x5df576=_0x33ee77;if(!SceneManager[_0x5df576(0x5d9)]())return;const _0x53f15a=$gameTemp[_0x5df576(0x87a)](),_0x52ec43=BattleManager[_0x5df576(0xac6)],_0x18ada1=BattleManager[_0x5df576(0x7c0)],_0x16d55=BattleManager['_logWindow'];if(!_0x53f15a||!_0x52ec43||!_0x18ada1)return;if(!_0x52ec43['item']())return;_0x16d55[_0x5df576(0x66f)](_0x18ada1,_0x52ec43[_0x5df576(0x5b0)]()),_0x53f15a[_0x5df576(0xa7e)](_0x5df576(0xa7c));}),PluginManager[_0x33ee77(0x274)](pluginData[_0x33ee77(0xac3)],_0x33ee77(0xaa0),_0x5ad60c=>{const _0x2ec831=_0x33ee77;if(!SceneManager[_0x2ec831(0x5d9)]())return;const _0x90974d=BattleManager[_0x2ec831(0xb43)];_0x90974d[_0x2ec831(0x2fc)]();}),PluginManager[_0x33ee77(0x274)](pluginData[_0x33ee77(0xac3)],'ActSeq_BattleLog_PushBaseLine',_0x3e0534=>{const _0x3f8051=_0x33ee77;if(!SceneManager['isSceneBattle']())return;const _0x20414e=BattleManager[_0x3f8051(0xb43)];_0x20414e[_0x3f8051(0xb7e)]();}),PluginManager[_0x33ee77(0x274)](pluginData[_0x33ee77(0xac3)],_0x33ee77(0xa14),_0x58cfe5=>{const _0x41b66c=_0x33ee77;if(!SceneManager[_0x41b66c(0x5d9)]())return;const _0x5330f3=BattleManager['_logWindow'];_0x5330f3[_0x41b66c(0x8d6)]();}),PluginManager[_0x33ee77(0x274)](pluginData[_0x33ee77(0xac3)],_0x33ee77(0x521),_0x306f20=>{const _0x470563=_0x33ee77;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x470563(0x9ef)](_0x306f20,_0x306f20),SceneManager[_0x470563(0x473)][_0x470563(0x41b)](_0x306f20[_0x470563(0x637)]);}),PluginManager[_0x33ee77(0x274)](pluginData[_0x33ee77(0xac3)],_0x33ee77(0x546),_0x4f3d5e=>{const _0x44bdb1=_0x33ee77;if(!SceneManager['isSceneBattle']())return;const _0x2f0475=$gameTemp[_0x44bdb1(0x87a)]();_0x2f0475[_0x44bdb1(0xa7e)](_0x44bdb1(0xa7c));}),PluginManager[_0x33ee77(0x274)](pluginData[_0x33ee77(0xac3)],_0x33ee77(0x502),_0x11e55f=>{const _0x5ea90a=_0x33ee77;if(!SceneManager[_0x5ea90a(0x5d9)]())return;const _0x97ff1b=$gameTemp[_0x5ea90a(0x87a)](),_0x1479fa=BattleManager['_logWindow'];_0x1479fa[_0x5ea90a(0x14a)](),_0x97ff1b['setWaitMode'](_0x5ea90a(0xa7c));}),PluginManager['registerCommand'](pluginData[_0x33ee77(0xac3)],_0x33ee77(0x913),_0x57a15e=>{const _0x2f37b9=_0x33ee77;if(!SceneManager[_0x2f37b9(0x5d9)]())return;if(!Imported['VisuMZ_3_ActSeqCamera'])return;VisuMZ[_0x2f37b9(0x9ef)](_0x57a15e,_0x57a15e);const _0x2f62dd=$gameScreen[_0x2f37b9(0x7d3)]();_0x2f62dd['cameraClamp']=_0x57a15e['Setting'];}),PluginManager['registerCommand'](pluginData[_0x33ee77(0xac3)],'ActSeq_Camera_FocusPoint',_0x2f0702=>{const _0x165f85=_0x33ee77;if(!SceneManager[_0x165f85(0x5d9)]())return;if(!Imported[_0x165f85(0x596)])return;VisuMZ['ConvertParams'](_0x2f0702,_0x2f0702);const _0x25d73c=$gameTemp['getLastPluginCommandInterpreter'](),_0x4c5b91=_0x2f0702['WaitForCamera'];$gameScreen[_0x165f85(0x303)](_0x2f0702['FocusX'],_0x2f0702[_0x165f85(0xab6)],_0x2f0702[_0x165f85(0x642)],_0x2f0702[_0x165f85(0x943)]);if(_0x4c5b91)_0x25d73c[_0x165f85(0xa7e)]('battleCamera');}),PluginManager['registerCommand'](pluginData['name'],_0x33ee77(0x5c1),_0x383dc5=>{const _0x2da1a1=_0x33ee77;if(!SceneManager[_0x2da1a1(0x5d9)]())return;if(!Imported[_0x2da1a1(0x596)])return;VisuMZ[_0x2da1a1(0x9ef)](_0x383dc5,_0x383dc5);const _0x495400=$gameTemp[_0x2da1a1(0x87a)](),_0xda6a4c=VisuMZ['CreateActionSequenceTargets'](_0x383dc5[_0x2da1a1(0x312)]),_0x425978=_0x383dc5[_0x2da1a1(0x25c)];$gameScreen[_0x2da1a1(0x87c)](_0xda6a4c,_0x383dc5[_0x2da1a1(0x642)],_0x383dc5[_0x2da1a1(0x943)]);if(_0x425978)_0x495400[_0x2da1a1(0xa7e)]('battleCamera');}),PluginManager[_0x33ee77(0x274)](pluginData[_0x33ee77(0xac3)],_0x33ee77(0x63e),_0x1523d8=>{const _0x270307=_0x33ee77;if(!SceneManager[_0x270307(0x5d9)]())return;if(!Imported[_0x270307(0x596)])return;VisuMZ[_0x270307(0x9ef)](_0x1523d8,_0x1523d8);const _0x3c2cd=$gameTemp['getLastPluginCommandInterpreter'](),_0x3e244a=_0x1523d8['WaitForCamera'];$gameScreen[_0x270307(0x3cb)](_0x1523d8['OffsetX'],_0x1523d8[_0x270307(0x995)],_0x1523d8[_0x270307(0x642)],_0x1523d8[_0x270307(0x943)]);if(_0x3e244a)_0x3c2cd['setWaitMode'](_0x270307(0x2cc));}),PluginManager[_0x33ee77(0x274)](pluginData[_0x33ee77(0xac3)],'ActSeq_Camera_Reset',_0x3e25c8=>{const _0x4bcbad=_0x33ee77;if(!SceneManager[_0x4bcbad(0x5d9)]())return;if(!Imported[_0x4bcbad(0x596)])return;VisuMZ['ConvertParams'](_0x3e25c8,_0x3e25c8);const _0x1c8e4e=$gameTemp['getLastPluginCommandInterpreter'](),_0x393b8c=_0x3e25c8[_0x4bcbad(0x1b6)],_0x1796ed=_0x3e25c8[_0x4bcbad(0x93c)],_0xfc1edf=_0x3e25c8[_0x4bcbad(0x25c)];if(_0x393b8c){const _0x3cec8e=Math[_0x4bcbad(0x20e)](Graphics[_0x4bcbad(0x3d9)]/0x2),_0x433b33=Math[_0x4bcbad(0x20e)](Graphics[_0x4bcbad(0x578)]/0x2);$gameScreen[_0x4bcbad(0x303)](_0x3cec8e,_0x433b33,_0x3e25c8[_0x4bcbad(0x642)],_0x3e25c8['EasingType']);}_0x1796ed&&$gameScreen[_0x4bcbad(0x3cb)](0x0,0x0,_0x3e25c8[_0x4bcbad(0x642)],_0x3e25c8[_0x4bcbad(0x943)]);if(_0xfc1edf)_0x1c8e4e[_0x4bcbad(0xa7e)](_0x4bcbad(0x2cc));}),PluginManager[_0x33ee77(0x274)](pluginData['name'],_0x33ee77(0x2eb),_0x4c8ad0=>{const _0x7aa9f5=_0x33ee77;if(!SceneManager[_0x7aa9f5(0x5d9)]())return;if(!Imported['VisuMZ_3_ActSeqCamera'])return;const _0x392fc5=$gameTemp[_0x7aa9f5(0x87a)]();if(!_0x392fc5)return;_0x392fc5[_0x7aa9f5(0xa7e)](_0x7aa9f5(0x2cc));}),VisuMZ[_0x33ee77(0x993)]['CreateCutinSettings']=function(_0x19eb84){const _0xff56dd=_0x33ee77;_0x19eb84['portraitFilename']='';const _0x39d1f3=VisuMZ[_0xff56dd(0x703)]['CreateCutinSettings'](_0x19eb84),_0xcea70b=VisuMZ['CreateActionSequenceTargets'](_0x19eb84[_0xff56dd(0x312)])[0x0]||null;return _0xcea70b&&(_0x39d1f3[_0xff56dd(0x3af)]=_0xcea70b['visualCutinPortraitFilename'](),_0x39d1f3[_0xff56dd(0xbbc)]=_0xcea70b[_0xff56dd(0x39e)](),_0x39d1f3[_0xff56dd(0x45f)]=_0xcea70b[_0xff56dd(0xa60)](),_0x39d1f3[_0xff56dd(0x51a)]=_0xcea70b[_0xff56dd(0x21b)](),_0xcea70b['isEnemy']()&&(_0xcea70b[_0xff56dd(0xa0b)]()&&(_0x39d1f3['portraitFlipHorz']=!_0x39d1f3[_0xff56dd(0x1fd)]),_0xcea70b[_0xff56dd(0xb72)]()&&(_0x39d1f3[_0xff56dd(0x553)]=!_0x39d1f3[_0xff56dd(0x553)]),_0x39d1f3[_0xff56dd(0x51a)]===_0xff56dd(0x699)&&(_0x39d1f3[_0xff56dd(0x1fd)]=!_0x39d1f3[_0xff56dd(0x1fd)]),_0x19eb84[_0xff56dd(0xb39)][_0xff56dd(0x947)]&&(_0x39d1f3[_0xff56dd(0xc14)]*=-0x1),_0x19eb84[_0xff56dd(0xb39)][_0xff56dd(0x848)]&&(_0x39d1f3[_0xff56dd(0x11c)]*=-0x1),_0x39d1f3[_0xff56dd(0x9ae)]+=_0x19eb84[_0xff56dd(0xb39)]['parallaxHueEnemyModifier']??0x0)),_0x39d1f3;},PluginManager[_0x33ee77(0x274)](pluginData[_0x33ee77(0xac3)],_0x33ee77(0x708),_0x258753=>{const _0xed459=_0x33ee77;if(!SceneManager[_0xed459(0x5d9)]())return;if(!Imported[_0xed459(0x11d)])return;VisuMZ[_0xed459(0x9ef)](_0x258753,_0x258753);const _0x54c756=VisuMZ[_0xed459(0x993)][_0xed459(0x5b1)](_0x258753);SceneManager[_0xed459(0x473)]['startVisualCutin'](_0x54c756);const _0x5437ab=$gameTemp['getLastPluginCommandInterpreter']();_0x5437ab&&_0x258753[_0xed459(0x612)]&&_0x5437ab[_0xed459(0xa7e)]('cutinEnter');}),PluginManager[_0x33ee77(0x274)](pluginData[_0x33ee77(0xac3)],'ActSeq_Cutin_EndVisualCutinEffectAll',_0x2f39be=>{const _0xa0dfa0=_0x33ee77;if(!SceneManager[_0xa0dfa0(0x5d9)]())return;if(!Imported[_0xa0dfa0(0x11d)])return;VisuMZ[_0xa0dfa0(0x9ef)](_0x2f39be,_0x2f39be),SceneManager[_0xa0dfa0(0x473)][_0xa0dfa0(0x2ce)]();const _0x29e539=$gameTemp[_0xa0dfa0(0x87a)]();_0x29e539&&_0x2f39be['WaitForExit']&&_0x29e539[_0xa0dfa0(0xa7e)](_0xa0dfa0(0xbc3));}),PluginManager['registerCommand'](pluginData['name'],_0x33ee77(0xb5e),_0x3d6e36=>{const _0x2a3e54=_0x33ee77;if(!SceneManager[_0x2a3e54(0x5d9)]())return;if(!Imported[_0x2a3e54(0x11d)])return;VisuMZ['ConvertParams'](_0x3d6e36,_0x3d6e36);const _0x5b8fe4=_0x3d6e36[_0x2a3e54(0xa0f)][_0x2a3e54(0x172)]()[_0x2a3e54(0xaf2)]();SceneManager[_0x2a3e54(0x473)][_0x2a3e54(0x49a)](_0x5b8fe4);const _0xa936a2=$gameTemp[_0x2a3e54(0x87a)]();_0xa936a2&&_0x3d6e36[_0x2a3e54(0x890)]&&_0xa936a2['setWaitMode'](_0x2a3e54(0xbc3));}),PluginManager[_0x33ee77(0x274)](pluginData['name'],_0x33ee77(0x3b0),_0xe9cc=>{const _0x3fe33e=_0x33ee77;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x3fe33e(0x11d)])return;const _0x3447e6=$gameTemp[_0x3fe33e(0x87a)]();_0x3447e6[_0x3fe33e(0xa7e)](_0x3fe33e(0x73e));}),PluginManager[_0x33ee77(0x274)](pluginData[_0x33ee77(0xac3)],_0x33ee77(0x8ba),_0xc7da21=>{const _0x4d4e4b=_0x33ee77;if(!SceneManager[_0x4d4e4b(0x5d9)]())return;if(!Imported[_0x4d4e4b(0x11d)])return;const _0x432a04=$gameTemp['getLastPluginCommandInterpreter']();_0x432a04[_0x4d4e4b(0xa7e)]('cutinExit');}),PluginManager[_0x33ee77(0x274)](pluginData[_0x33ee77(0xac3)],_0x33ee77(0x9d3),_0x286fd8=>{const _0x217d85=_0x33ee77;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x217d85(0x3c6)])return;VisuMZ[_0x217d85(0x9ef)](_0x286fd8,_0x286fd8);const _0x1a9cda=VisuMZ[_0x217d85(0xb6b)](_0x286fd8[_0x217d85(0x312)]),_0x1df28b=_0x286fd8[_0x217d85(0x58d)][_0x217d85(0x172)]()[_0x217d85(0xaf2)]();for(const _0x40a478 of _0x1a9cda){if(!_0x40a478)continue;_0x40a478['requestDragonbonesAnimation'](_0x1df28b);}}),PluginManager[_0x33ee77(0x274)](pluginData[_0x33ee77(0xac3)],'ActSeq_DB_DragonbonesTimeScale',_0x3fdf8a=>{const _0x1caa8f=_0x33ee77;if(!SceneManager[_0x1caa8f(0x5d9)]())return;if(!Imported[_0x1caa8f(0x3c6)])return;VisuMZ[_0x1caa8f(0x9ef)](_0x3fdf8a,_0x3fdf8a);const _0x26d989=VisuMZ['CreateActionSequenceTargets'](_0x3fdf8a[_0x1caa8f(0x312)]),_0x5a3321=_0x3fdf8a[_0x1caa8f(0x39f)];for(const _0x1ce2f4 of _0x26d989){if(!_0x1ce2f4)continue;_0x1ce2f4[_0x1caa8f(0xaf3)]()['timeScale']=_0x5a3321;}}),PluginManager[_0x33ee77(0x274)](pluginData[_0x33ee77(0xac3)],_0x33ee77(0x19e),_0x28feac=>{const _0x100533=_0x33ee77;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x100533(0x98c)])return;VisuMZ[_0x100533(0x9ef)](_0x28feac,_0x28feac);const _0x226187=BattleManager[_0x100533(0xac6)],_0x2c4002=_0x28feac[_0x100533(0x270)];if(!_0x226187)return;_0x226187['_battleCoreAddedElements']=_0x2c4002;}),PluginManager[_0x33ee77(0x274)](pluginData[_0x33ee77(0xac3)],_0x33ee77(0xac0),_0x1c2dac=>{const _0x529ccc=_0x33ee77;if(!SceneManager[_0x529ccc(0x5d9)]())return;if(!Imported['VisuMZ_1_ElementStatusCore'])return;const _0x596b61=BattleManager[_0x529ccc(0xac6)];if(!_0x596b61)return;_0x596b61[_0x529ccc(0x8c7)]();}),PluginManager[_0x33ee77(0x274)](pluginData[_0x33ee77(0xac3)],'ActSeq_Element_ForceElements',_0x469ecc=>{const _0x2f3149=_0x33ee77;if(!SceneManager[_0x2f3149(0x5d9)]())return;if(!Imported[_0x2f3149(0x98c)])return;VisuMZ[_0x2f3149(0x9ef)](_0x469ecc,_0x469ecc);const _0x2db284=BattleManager[_0x2f3149(0xac6)],_0xa9f5e8=_0x469ecc[_0x2f3149(0x270)];if(!_0x2db284)return;_0x2db284['_battleCoreForcedElements']=_0xa9f5e8;}),PluginManager[_0x33ee77(0x274)](pluginData['name'],_0x33ee77(0x5d7),_0x43f170=>{const _0x2c8a02=_0x33ee77;if(!SceneManager[_0x2c8a02(0x5d9)]())return;if(!Imported[_0x2c8a02(0x98c)])return;const _0x3aacdc=BattleManager[_0x2c8a02(0xac6)];if(!_0x3aacdc)return;_0x3aacdc['_battleCoreNoElement']=!![];}),PluginManager[_0x33ee77(0x274)](pluginData[_0x33ee77(0xac3)],_0x33ee77(0x4b5),_0x5c093f=>{const _0x5805cc=_0x33ee77;VisuMZ[_0x5805cc(0x319)][_0x5805cc(0x4b5)](_0x5c093f);}),PluginManager['registerCommand'](pluginData['name'],_0x33ee77(0xa34),_0x4b45c4=>{const _0x4d4375=_0x33ee77;VisuMZ[_0x4d4375(0x319)]['ActSeq_Grid_AddPassiveStatesToNode'](_0x4b45c4);}),PluginManager[_0x33ee77(0x274)](pluginData[_0x33ee77(0xac3)],_0x33ee77(0x325),_0xfeb94c=>{const _0x184d4e=_0x33ee77;VisuMZ[_0x184d4e(0x319)][_0x184d4e(0x325)](_0xfeb94c);}),PluginManager[_0x33ee77(0x274)](pluginData[_0x33ee77(0xac3)],_0x33ee77(0xb1f),_0x1e6a4c=>{VisuMZ['BattleGridSystem']['ActSeq_Grid_AddTriggerToNode'](_0x1e6a4c);}),PluginManager['registerCommand'](pluginData[_0x33ee77(0xac3)],_0x33ee77(0x225),_0x3994cc=>{const _0x29c6ea=_0x33ee77;VisuMZ['BattleGridSystem'][_0x29c6ea(0x225)](_0x3994cc);}),PluginManager[_0x33ee77(0x274)](pluginData[_0x33ee77(0xac3)],_0x33ee77(0x67f),_0x4d7aaa=>{const _0x14c5d2=_0x33ee77;VisuMZ[_0x14c5d2(0x319)][_0x14c5d2(0x67f)](_0x4d7aaa);}),PluginManager['registerCommand'](pluginData[_0x33ee77(0xac3)],_0x33ee77(0x3d7),_0x42990a=>{const _0xb51f6e=_0x33ee77;VisuMZ[_0xb51f6e(0x319)][_0xb51f6e(0x3d7)](_0x42990a);}),PluginManager[_0x33ee77(0x274)](pluginData['name'],'ActSeq_Grid_ClearPassiveStatesFromNode',_0x31088a=>{const _0x3ce678=_0x33ee77;VisuMZ['BattleGridSystem'][_0x3ce678(0x440)](_0x31088a);}),PluginManager[_0x33ee77(0x274)](pluginData['name'],_0x33ee77(0x586),_0x5aaae9=>{const _0x3106ac=_0x33ee77;VisuMZ[_0x3106ac(0x319)][_0x3106ac(0x586)](_0x5aaae9);}),PluginManager[_0x33ee77(0x274)](pluginData[_0x33ee77(0xac3)],_0x33ee77(0x124),_0x3c8495=>{const _0x126c68=_0x33ee77;VisuMZ[_0x126c68(0x319)][_0x126c68(0x124)](_0x3c8495);}),PluginManager['registerCommand'](pluginData['name'],_0x33ee77(0x598),_0x36072e=>{VisuMZ['BattleGridSystem']['ActSeq_Grid_PushFromTargetNode'](_0x36072e);}),PluginManager[_0x33ee77(0x274)](pluginData['name'],'ActSeq_Grid_RemovePassiveStatesFromNode',_0x4af168=>{const _0xefcbbc=_0x33ee77;VisuMZ[_0xefcbbc(0x319)][_0xefcbbc(0x817)](_0x4af168);}),PluginManager[_0x33ee77(0x274)](pluginData[_0x33ee77(0xac3)],_0x33ee77(0x155),_0x5392eb=>{const _0x19aa24=_0x33ee77;VisuMZ[_0x19aa24(0x319)][_0x19aa24(0x155)](_0x5392eb);}),PluginManager[_0x33ee77(0x274)](pluginData[_0x33ee77(0xac3)],_0x33ee77(0x3bb),_0x225525=>{const _0x40b0f2=_0x33ee77;VisuMZ[_0x40b0f2(0x319)][_0x40b0f2(0x3bb)](_0x225525);}),PluginManager[_0x33ee77(0x274)](pluginData[_0x33ee77(0xac3)],'ActSeq_Grid_TraverseToNode',_0xbc94d5=>{const _0x41573f=_0x33ee77;VisuMZ[_0x41573f(0x319)][_0x41573f(0x2b5)](_0xbc94d5);}),PluginManager['registerCommand'](pluginData[_0x33ee77(0xac3)],_0x33ee77(0x35e),_0x352078=>{const _0x372a8c=_0x33ee77;if(!Imported['VisuMZ_2_HorrorEffects'])return;if(!SceneManager[_0x372a8c(0x5d9)]())return;VisuMZ[_0x372a8c(0x9ef)](_0x352078,_0x352078);const _0x407c3a=VisuMZ['CreateActionSequenceTargets'](_0x352078[_0x372a8c(0x312)]);for(const _0x490c06 of _0x407c3a){if(!_0x490c06)continue;_0x490c06[_0x372a8c(0x449)](_0x372a8c(0x6a7)),_0x490c06[_0x372a8c(0x449)](_0x372a8c(0x9aa)),_0x490c06[_0x372a8c(0x449)]('tv'),_0x490c06[_0x372a8c(0x60f)]();}$gamePlayer[_0x372a8c(0x8d6)]();}),PluginManager[_0x33ee77(0x274)](pluginData[_0x33ee77(0xac3)],_0x33ee77(0xb74),_0x5098e6=>{const _0x31fff3=_0x33ee77;if(!Imported[_0x31fff3(0x5e8)])return;if(!SceneManager[_0x31fff3(0x5d9)]())return;VisuMZ[_0x31fff3(0x9ef)](_0x5098e6,_0x5098e6);const _0x51d9c7=VisuMZ['CreateActionSequenceTargets'](_0x5098e6[_0x31fff3(0x312)]),_0x4f3763=_0x31fff3(0x9aa);_0x5098e6['sliceMin']=Math[_0x31fff3(0x399)](_0x5098e6[_0x31fff3(0x400)]/0x2),_0x5098e6[_0x31fff3(0x330)]=_0x5098e6[_0x31fff3(0x400)],_0x5098e6['refreshRequest']=!![];for(const _0x22f0dd of _0x51d9c7){if(!_0x22f0dd)continue;_0x22f0dd[_0x31fff3(0x1c2)](_0x4f3763,_0x5098e6);}$gamePlayer[_0x31fff3(0x8d6)]();}),PluginManager[_0x33ee77(0x274)](pluginData[_0x33ee77(0xac3)],_0x33ee77(0x75b),_0x43e274=>{const _0x2677aa=_0x33ee77;if(!Imported[_0x2677aa(0x5e8)])return;if(!SceneManager[_0x2677aa(0x5d9)]())return;VisuMZ[_0x2677aa(0x9ef)](_0x43e274,_0x43e274);const _0x2b542b=VisuMZ[_0x2677aa(0xb6b)](_0x43e274[_0x2677aa(0x312)]);for(const _0x5c76be of _0x2b542b){if(!_0x5c76be)continue;_0x5c76be[_0x2677aa(0x449)](_0x2677aa(0x9aa));}$gamePlayer[_0x2677aa(0x8d6)]();}),PluginManager['registerCommand'](pluginData[_0x33ee77(0xac3)],'ActSeq_Horror_NoiseCreate',_0x430467=>{const _0x1a638d=_0x33ee77;if(!Imported['VisuMZ_2_HorrorEffects'])return;if(!SceneManager[_0x1a638d(0x5d9)]())return;VisuMZ[_0x1a638d(0x9ef)](_0x430467,_0x430467);const _0x3d0d44=VisuMZ['CreateActionSequenceTargets'](_0x430467[_0x1a638d(0x312)]),_0x3fae92='noise';for(const _0x119956 of _0x3d0d44){if(!_0x119956)continue;_0x119956[_0x1a638d(0x1c2)](_0x3fae92,_0x430467);}$gamePlayer[_0x1a638d(0x8d6)]();}),PluginManager[_0x33ee77(0x274)](pluginData['name'],_0x33ee77(0x624),_0x2f628b=>{const _0x2d8694=_0x33ee77;if(!Imported['VisuMZ_2_HorrorEffects'])return;if(!SceneManager[_0x2d8694(0x5d9)]())return;VisuMZ[_0x2d8694(0x9ef)](_0x2f628b,_0x2f628b);const _0x470cd0=VisuMZ['CreateActionSequenceTargets'](_0x2f628b[_0x2d8694(0x312)]);for(const _0x1f15c5 of _0x470cd0){if(!_0x1f15c5)continue;_0x1f15c5[_0x2d8694(0x449)]('noise');}$gamePlayer['refresh']();}),PluginManager[_0x33ee77(0x274)](pluginData['name'],'ActSeq_Horror_TVCreate',_0x56dea1=>{const _0x34715b=_0x33ee77;if(!Imported['VisuMZ_2_HorrorEffects'])return;if(!SceneManager[_0x34715b(0x5d9)]())return;VisuMZ[_0x34715b(0x9ef)](_0x56dea1,_0x56dea1);const _0x1971eb=VisuMZ['CreateActionSequenceTargets'](_0x56dea1[_0x34715b(0x312)]),_0x15259f='tv';for(const _0x1739d8 of _0x1971eb){if(!_0x1739d8)continue;_0x1739d8['setHorrorEffectSettings'](_0x15259f,_0x56dea1);}$gamePlayer[_0x34715b(0x8d6)]();}),PluginManager[_0x33ee77(0x274)](pluginData[_0x33ee77(0xac3)],_0x33ee77(0x32e),_0x91f37d=>{const _0x31fc23=_0x33ee77;if(!Imported[_0x31fc23(0x5e8)])return;if(!SceneManager[_0x31fc23(0x5d9)]())return;VisuMZ[_0x31fc23(0x9ef)](_0x91f37d,_0x91f37d);const _0x1aef3a=VisuMZ[_0x31fc23(0xb6b)](_0x91f37d[_0x31fc23(0x312)]);for(const _0x1bb240 of _0x1aef3a){if(!_0x1bb240)continue;_0x1bb240[_0x31fc23(0x449)]('tv');}$gamePlayer[_0x31fc23(0x8d6)]();}),PluginManager[_0x33ee77(0x274)](pluginData['name'],_0x33ee77(0x12d),_0x38c15c=>{const _0x542db2=_0x33ee77;if(!Imported['VisuMZ_3_ActSeqImpact'])return;const _0x2f71ae=SceneManager[_0x542db2(0x473)][_0x542db2(0x850)];if(!_0x2f71ae)return;if(VisuMZ[_0x542db2(0x324)]['version']<=1.04){alert(_0x542db2(0x5ab)),SceneManager['exit']();return;}VisuMZ['ConvertParams'](_0x38c15c,_0x38c15c);const _0x1fce7b=_0x38c15c[_0x542db2(0x6d3)];_0x2f71ae['setupBlueRedInvertImpactFilter'](_0x1fce7b);}),PluginManager['registerCommand'](pluginData[_0x33ee77(0xac3)],_0x33ee77(0x4b0),_0xc0f5ac=>{const _0x474019=_0x33ee77;if(!SceneManager['isSceneBattle']())return;if(!Imported['VisuMZ_3_ActSeqImpact'])return;const _0x716659=SceneManager[_0x474019(0x473)][_0x474019(0x850)];if(!_0x716659)return;VisuMZ[_0x474019(0x9ef)](_0xc0f5ac,_0xc0f5ac);const _0xe28383=_0xc0f5ac['Intensity']||0x1,_0x2188d1=_0xc0f5ac[_0x474019(0x642)]||0x1,_0x432188=_0xc0f5ac['EasingType']||_0x474019(0x8d8);_0x716659[_0x474019(0x7be)](_0xe28383,_0x2188d1,_0x432188);}),PluginManager[_0x33ee77(0x274)](pluginData[_0x33ee77(0xac3)],'ActSeq_Impact_Desaturate',_0x2f187a=>{const _0x46fed2=_0x33ee77;if(!Imported[_0x46fed2(0x15a)])return;const _0x185413=SceneManager[_0x46fed2(0x473)]['_spriteset'];if(!_0x185413)return;if(VisuMZ[_0x46fed2(0x324)]['version']<=1.04){alert(_0x46fed2(0x5ab)),SceneManager['exit']();return;}VisuMZ[_0x46fed2(0x9ef)](_0x2f187a,_0x2f187a);const _0x58f800=_0x2f187a[_0x46fed2(0x6d3)];_0x185413[_0x46fed2(0xc04)](_0x58f800);}),PluginManager['registerCommand'](pluginData[_0x33ee77(0xac3)],'ActSeq_Impact_MotionBlurScreen',_0x5e28d8=>{const _0x5f3e26=_0x33ee77;if(!SceneManager[_0x5f3e26(0x5d9)]())return;if(!Imported['VisuMZ_3_ActSeqImpact'])return;const _0xac5137=SceneManager[_0x5f3e26(0x473)][_0x5f3e26(0x850)];if(!_0xac5137)return;VisuMZ[_0x5f3e26(0x9ef)](_0x5e28d8,_0x5e28d8);const _0x4665fa=Number(_0x5e28d8[_0x5f3e26(0xacf)])||0x0,_0x35181d=Number(_0x5e28d8[_0x5f3e26(0x672)]),_0x53056e=_0x5e28d8[_0x5f3e26(0x642)]||0x1,_0x5f1a57=_0x5e28d8['EasingType']||'Linear';_0xac5137[_0x5f3e26(0x59f)](_0x4665fa,_0x35181d,_0x53056e,_0x5f1a57);}),PluginManager[_0x33ee77(0x274)](pluginData[_0x33ee77(0xac3)],_0x33ee77(0xada),_0x48fc2d=>{const _0x3e6ec5=_0x33ee77;if(!SceneManager[_0x3e6ec5(0x5d9)]())return;if(!Imported[_0x3e6ec5(0x15a)])return;const _0x1f27c2=SceneManager[_0x3e6ec5(0x473)][_0x3e6ec5(0x850)];if(!_0x1f27c2)return;VisuMZ[_0x3e6ec5(0x9ef)](_0x48fc2d,_0x48fc2d);const _0x53b3d9=Number(_0x48fc2d[_0x3e6ec5(0xacf)])||0x0,_0x7a64a2=Number(_0x48fc2d[_0x3e6ec5(0x672)]),_0x4c1017=_0x48fc2d[_0x3e6ec5(0x642)]||0x1,_0x5e15bf=_0x48fc2d['EasingType']||_0x3e6ec5(0x8d8),_0x37318b=VisuMZ[_0x3e6ec5(0xb6b)](_0x48fc2d['Targets']);for(const _0x45c665 of _0x37318b){if(!_0x45c665)continue;if(!_0x45c665[_0x3e6ec5(0x157)]())continue;_0x45c665[_0x3e6ec5(0x157)]()[_0x3e6ec5(0x59f)](_0x53b3d9,_0x7a64a2,_0x4c1017,_0x5e15bf);}}),PluginManager[_0x33ee77(0x274)](pluginData['name'],'ActSeq_Impact_MotionTrailCreate',_0x1a886e=>{const _0x2e2db0=_0x33ee77;if(!SceneManager[_0x2e2db0(0x5d9)]())return;if(!Imported[_0x2e2db0(0x15a)])return;VisuMZ[_0x2e2db0(0x9ef)](_0x1a886e,_0x1a886e);const _0x8ca4a2={'delay':_0x1a886e[_0x2e2db0(0x559)],'duration':_0x1a886e[_0x2e2db0(0xa16)],'hue':_0x1a886e[_0x2e2db0(0x945)],'opacityStart':_0x1a886e[_0x2e2db0(0x78b)],'tone':_0x1a886e[_0x2e2db0(0x6d8)],'visible':!![]},_0x5509e=VisuMZ['CreateActionSequenceTargets'](_0x1a886e['Targets']);for(const _0xf4b92d of _0x5509e){if(!_0xf4b92d)continue;_0xf4b92d[_0x2e2db0(0x928)](_0x8ca4a2);}}),PluginManager['registerCommand'](pluginData['name'],_0x33ee77(0xad4),_0x3028da=>{const _0xdcfd74=_0x33ee77;if(!SceneManager[_0xdcfd74(0x5d9)]())return;if(!Imported[_0xdcfd74(0x15a)])return;VisuMZ[_0xdcfd74(0x9ef)](_0x3028da,_0x3028da);const _0x3d3a56=VisuMZ[_0xdcfd74(0xb6b)](_0x3028da[_0xdcfd74(0x312)]);for(const _0x43bb57 of _0x3d3a56){if(!_0x43bb57)continue;_0x43bb57[_0xdcfd74(0x4bd)]();}}),PluginManager[_0x33ee77(0x274)](pluginData[_0x33ee77(0xac3)],_0x33ee77(0x81e),_0xb7973f=>{const _0x1c6934=_0x33ee77;if(!Imported['VisuMZ_3_ActSeqImpact'])return;const _0xef5c78=SceneManager[_0x1c6934(0x473)][_0x1c6934(0x850)];if(!_0xef5c78)return;if(VisuMZ['ActSeqImpact'][_0x1c6934(0x71e)]<=1.04){alert('Action\x20Sequence\x20Impact\x20needs\x20an\x20update!'),SceneManager[_0x1c6934(0x41d)]();return;}VisuMZ[_0x1c6934(0x9ef)](_0xb7973f,_0xb7973f);const _0x41d24a=_0xb7973f[_0x1c6934(0x6d3)];_0xef5c78[_0x1c6934(0x603)](_0x41d24a);}),PluginManager[_0x33ee77(0x274)](pluginData[_0x33ee77(0xac3)],_0x33ee77(0x8f2),_0xd15e42=>{const _0x543f2f=_0x33ee77;if(!Imported['VisuMZ_3_ActSeqImpact'])return;const _0x546017=SceneManager[_0x543f2f(0x473)][_0x543f2f(0x850)];if(!_0x546017)return;if(VisuMZ['ActSeqImpact'][_0x543f2f(0x71e)]<=1.04){alert(_0x543f2f(0x5ab)),SceneManager[_0x543f2f(0x41d)]();return;}VisuMZ[_0x543f2f(0x9ef)](_0xd15e42,_0xd15e42);const _0x3906b4=_0xd15e42[_0x543f2f(0x6d3)];_0x546017[_0x543f2f(0x381)](_0x3906b4);}),PluginManager[_0x33ee77(0x274)](pluginData[_0x33ee77(0xac3)],'ActSeq_Impact_ShockwavePoint',_0x307fb6=>{const _0x1c91f5=_0x33ee77;if(!Imported[_0x1c91f5(0x15a)])return;const _0x30a721=SceneManager[_0x1c91f5(0x473)][_0x1c91f5(0x850)];if(!_0x30a721)return;VisuMZ[_0x1c91f5(0x9ef)](_0x307fb6,_0x307fb6);const _0x5d473e=_0x307fb6['X']||0x0,_0x5ddc0b=_0x307fb6['Y']||0x0,_0x4ec712=_0x307fb6[_0x1c91f5(0x34d)]||0x0,_0x4cae5b=_0x307fb6['Wave']||0x0,_0x51d0e9=_0x307fb6['Duration']||0x1;_0x30a721['setupShockwaveImpactFilter'](_0x5d473e,_0x5ddc0b,_0x4ec712,_0x4cae5b,_0x51d0e9);}),PluginManager[_0x33ee77(0x274)](pluginData[_0x33ee77(0xac3)],_0x33ee77(0xb95),_0x3247fb=>{const _0x4f24b2=_0x33ee77;if(!SceneManager[_0x4f24b2(0x5d9)]())return;if(!Imported[_0x4f24b2(0x15a)])return;const _0x5105d9=SceneManager[_0x4f24b2(0x473)]['_spriteset'];if(!_0x5105d9)return;VisuMZ[_0x4f24b2(0x9ef)](_0x3247fb,_0x3247fb);const _0x56e5e3=VisuMZ['CreateActionSequenceTargets'](_0x3247fb['Targets']),_0x3506cc=_0x3247fb[_0x4f24b2(0x763)],_0x3079f8=_0x3247fb['OffsetX']||0x0,_0x55c6a2=_0x3247fb['OffsetY']||0x0,_0x399175=_0x3247fb[_0x4f24b2(0x34d)]||0x0,_0x180f5f=_0x3247fb['Wave']||0x0,_0x2476ec=_0x3247fb['Duration']||0x1;for(const _0x375174 of _0x56e5e3){if(!_0x375174)continue;if(!_0x375174['battler']())continue;const _0x3edf65=_0x375174['battler']();let _0x1e9a99=_0x3edf65['_baseX'],_0x572a63=_0x3edf65['_baseY'];_0x1e9a99+=(Graphics[_0x4f24b2(0x3d9)]-Graphics[_0x4f24b2(0x71a)])/0x2,_0x572a63+=(Graphics['height']-Graphics[_0x4f24b2(0x238)])/0x2;if(_0x3506cc[_0x4f24b2(0x7c1)](/front/i))_0x1e9a99+=(_0x375174[_0x4f24b2(0x43e)]()?0x1:-0x1)*_0x3edf65[_0x4f24b2(0x776)]()/0x2;else _0x3506cc[_0x4f24b2(0x7c1)](/back/i)&&(_0x1e9a99+=(_0x375174[_0x4f24b2(0x43e)]()?-0x1:0x1)*_0x3edf65['mainSpriteWidth']()/0x2);if(_0x3506cc[_0x4f24b2(0x7c1)](/head/i))_0x572a63-=_0x3edf65[_0x4f24b2(0xafe)]();else _0x3506cc['match'](/center/i)&&(_0x572a63-=_0x3edf65[_0x4f24b2(0xafe)]()/0x2);_0x1e9a99+=_0x3079f8,_0x572a63+=_0x55c6a2,_0x5105d9[_0x4f24b2(0x8b3)](_0x1e9a99,_0x572a63,_0x399175,_0x180f5f,_0x2476ec);}}),PluginManager['registerCommand'](pluginData[_0x33ee77(0xac3)],_0x33ee77(0x16e),_0x7f9b07=>{const _0x427939=_0x33ee77;if(!SceneManager[_0x427939(0x5d9)]())return;if(!Imported[_0x427939(0x15a)])return;const _0x32c221=SceneManager[_0x427939(0x473)][_0x427939(0x850)];if(!_0x32c221)return;VisuMZ[_0x427939(0x9ef)](_0x7f9b07,_0x7f9b07);const _0x10b1b4=VisuMZ[_0x427939(0xb6b)](_0x7f9b07[_0x427939(0x312)]),_0x52f8a6=_0x7f9b07['TargetLocation'],_0x46c040=_0x7f9b07[_0x427939(0x680)]||0x0,_0x120bd3=_0x7f9b07[_0x427939(0x995)]||0x0,_0x9476ef=_0x7f9b07['Amp']||0x0,_0x4c2f15=_0x7f9b07['Wave']||0x0,_0x2124fa=_0x7f9b07[_0x427939(0x642)]||0x1,_0x521283=Math['min'](..._0x10b1b4[_0x427939(0x6f2)](_0x8b9c04=>_0x8b9c04[_0x427939(0x157)]()[_0x427939(0x1f7)]-_0x8b9c04[_0x427939(0x157)]()['mainSpriteWidth']()/0x2)),_0x221ca2=Math[_0x427939(0x657)](..._0x10b1b4['map'](_0x37f60d=>_0x37f60d[_0x427939(0x157)]()['_baseX']+_0x37f60d[_0x427939(0x157)]()[_0x427939(0x776)]()/0x2)),_0x9eb738=Math[_0x427939(0x480)](..._0x10b1b4[_0x427939(0x6f2)](_0x4ccbb0=>_0x4ccbb0[_0x427939(0x157)]()[_0x427939(0x74a)]-_0x4ccbb0[_0x427939(0x157)]()[_0x427939(0xafe)]())),_0x33f99c=Math[_0x427939(0x657)](..._0x10b1b4[_0x427939(0x6f2)](_0xdd017=>_0xdd017['battler']()[_0x427939(0x74a)])),_0x344e96=_0x10b1b4[_0x427939(0x313)](_0x29b768=>_0x29b768[_0x427939(0x6c3)]())[_0x427939(0x70c)],_0x2c035f=_0x10b1b4[_0x427939(0x313)](_0x35efb7=>_0x35efb7[_0x427939(0x43e)]())[_0x427939(0x70c)];let _0x2176cd=0x0,_0x902880=0x0;if(_0x52f8a6[_0x427939(0x7c1)](/front/i))_0x2176cd=_0x344e96>=_0x2c035f?_0x521283:_0x221ca2;else{if(_0x52f8a6[_0x427939(0x7c1)](/middle/i))_0x2176cd=(_0x521283+_0x221ca2)/0x2,melee=-0x1;else _0x52f8a6[_0x427939(0x7c1)](/back/i)&&(_0x2176cd=_0x344e96>=_0x2c035f?_0x221ca2:_0x521283);}if(_0x52f8a6[_0x427939(0x7c1)](/head/i))_0x902880=_0x9eb738;else{if(_0x52f8a6[_0x427939(0x7c1)](/center/i))_0x902880=(_0x9eb738+_0x33f99c)/0x2;else _0x52f8a6[_0x427939(0x7c1)](/base/i)&&(_0x902880=_0x33f99c);}_0x2176cd+=(Graphics[_0x427939(0x3d9)]-Graphics[_0x427939(0x71a)])/0x2,_0x902880+=(Graphics[_0x427939(0x578)]-Graphics['boxHeight'])/0x2,_0x2176cd+=_0x46c040,_0x902880+=_0x120bd3,_0x32c221[_0x427939(0x8b3)](_0x2176cd,_0x902880,_0x9476ef,_0x4c2f15,_0x2124fa);}),PluginManager[_0x33ee77(0x274)](pluginData[_0x33ee77(0xac3)],_0x33ee77(0x91c),_0x257035=>{const _0x58614c=_0x33ee77;if(!Imported[_0x58614c(0x15a)])return;const _0xd10b9d=SceneManager[_0x58614c(0x473)][_0x58614c(0x850)];if(!_0xd10b9d)return;if(VisuMZ[_0x58614c(0x324)][_0x58614c(0x71e)]<=1.04){alert('Action\x20Sequence\x20Impact\x20needs\x20an\x20update!'),SceneManager[_0x58614c(0x41d)]();return;}VisuMZ[_0x58614c(0x9ef)](_0x257035,_0x257035);const _0x5daf58=$gameTemp['getLastPluginCommandInterpreter'](),_0x30929d=Math[_0x58614c(0x657)](0.01,_0x257035[_0x58614c(0x2c7)]);$gameTemp[_0x58614c(0x8dd)](_0x30929d,_0x5daf58);}),PluginManager[_0x33ee77(0x274)](pluginData[_0x33ee77(0xac3)],_0x33ee77(0x215),_0x432863=>{const _0x1ede77=_0x33ee77;if(!Imported[_0x1ede77(0x15a)])return;const _0x417dc9=SceneManager[_0x1ede77(0x473)]['_spriteset'];if(!_0x417dc9)return;if(VisuMZ[_0x1ede77(0x324)]['version']<=1.04){alert(_0x1ede77(0x5ab)),SceneManager['exit']();return;}VisuMZ[_0x1ede77(0x9ef)](_0x432863,_0x432863);const _0x5c8d38=$gameTemp[_0x1ede77(0x87a)](),_0x89627a=_0x432863['ms']||0x1;VisuMZ[_0x1ede77(0x324)][_0x1ede77(0x2f4)](_0x89627a,_0x5c8d38);}),PluginManager[_0x33ee77(0x274)](pluginData['name'],_0x33ee77(0x42f),_0x1e5fbe=>{const _0xb1adad=_0x33ee77;if(!Imported[_0xb1adad(0x15a)])return;const _0x33868c=SceneManager[_0xb1adad(0x473)][_0xb1adad(0x850)];if(!_0x33868c)return;VisuMZ[_0xb1adad(0x9ef)](_0x1e5fbe,_0x1e5fbe);const _0xe3e77e=_0x1e5fbe['X']||0x0,_0x2400a2=_0x1e5fbe['Y']||0x0,_0x13bfeb=_0x1e5fbe[_0xb1adad(0xbaa)]||0x0,_0x3dd69f=_0x1e5fbe[_0xb1adad(0x9d8)]||0x0,_0x2b1d51=_0x1e5fbe[_0xb1adad(0x642)]||0x1,_0x1f918e=_0x1e5fbe[_0xb1adad(0x943)]||_0xb1adad(0x8d8);_0x33868c[_0xb1adad(0x77a)](_0x13bfeb,_0xe3e77e,_0x2400a2,_0x3dd69f,_0x2b1d51,_0x1f918e);}),PluginManager[_0x33ee77(0x274)](pluginData[_0x33ee77(0xac3)],'ActSeq_Impact_ZoomBlurTargetCenter',_0x49105c=>{const _0x3923bd=_0x33ee77;if(!Imported[_0x3923bd(0x15a)])return;const _0x1abf76=SceneManager['_scene']['_spriteset'];if(!_0x1abf76)return;VisuMZ[_0x3923bd(0x9ef)](_0x49105c,_0x49105c);const _0x5da748=VisuMZ[_0x3923bd(0xb6b)](_0x49105c[_0x3923bd(0x312)]),_0x2dda34=_0x49105c['TargetLocation'],_0x1c5170=_0x49105c[_0x3923bd(0x680)]||0x0,_0x437c76=_0x49105c['OffsetY']||0x0,_0x261dac=_0x49105c['Strength']||0x0,_0x533d67=_0x49105c[_0x3923bd(0x9d8)]||0x0,_0x17e283=_0x49105c['Duration']||0x1,_0x59d6f2=_0x49105c[_0x3923bd(0x943)]||'Linear',_0x315e25=Math[_0x3923bd(0x480)](..._0x5da748[_0x3923bd(0x6f2)](_0x5b4d30=>_0x5b4d30[_0x3923bd(0x157)]()[_0x3923bd(0x1f7)]-_0x5b4d30['battler']()[_0x3923bd(0x776)]()/0x2)),_0x5b9601=Math[_0x3923bd(0x657)](..._0x5da748['map'](_0x3ccad6=>_0x3ccad6[_0x3923bd(0x157)]()[_0x3923bd(0x1f7)]+_0x3ccad6[_0x3923bd(0x157)]()['mainSpriteWidth']()/0x2)),_0x3b04ba=Math[_0x3923bd(0x480)](..._0x5da748['map'](_0x558f50=>_0x558f50['battler']()[_0x3923bd(0x74a)]-_0x558f50[_0x3923bd(0x157)]()[_0x3923bd(0xafe)]())),_0xcb8e94=Math['max'](..._0x5da748[_0x3923bd(0x6f2)](_0x1d4a49=>_0x1d4a49[_0x3923bd(0x157)]()['_baseY'])),_0x36716d=_0x5da748['filter'](_0x152404=>_0x152404[_0x3923bd(0x6c3)]())[_0x3923bd(0x70c)],_0x4df700=_0x5da748['filter'](_0x58a791=>_0x58a791[_0x3923bd(0x43e)]())['length'];let _0xc86198=0x0,_0xa93a62=0x0;if(_0x2dda34[_0x3923bd(0x7c1)](/front/i))_0xc86198=_0x36716d>=_0x4df700?_0x315e25:_0x5b9601;else{if(_0x2dda34['match'](/middle/i))_0xc86198=(_0x315e25+_0x5b9601)/0x2,melee=-0x1;else _0x2dda34[_0x3923bd(0x7c1)](/back/i)&&(_0xc86198=_0x36716d>=_0x4df700?_0x5b9601:_0x315e25);}if(_0x2dda34[_0x3923bd(0x7c1)](/head/i))_0xa93a62=_0x3b04ba;else{if(_0x2dda34['match'](/center/i))_0xa93a62=(_0x3b04ba+_0xcb8e94)/0x2;else _0x2dda34[_0x3923bd(0x7c1)](/base/i)&&(_0xa93a62=_0xcb8e94);}_0xc86198+=(Graphics['width']-Graphics['boxWidth'])/0x2,_0xa93a62+=(Graphics[_0x3923bd(0x578)]-Graphics['boxHeight'])/0x2,_0xc86198+=_0x1c5170,_0xa93a62+=_0x437c76,_0x1abf76[_0x3923bd(0x77a)](_0x261dac,_0xc86198,_0xa93a62,_0x533d67,_0x17e283,_0x59d6f2);}),PluginManager[_0x33ee77(0x274)](pluginData[_0x33ee77(0xac3)],'ActSeq_Inject_AnimationStart',_0x20c4e9=>{const _0x4aa6e9=_0x33ee77;if(!Imported[_0x4aa6e9(0x15a)])return;const _0xfc383b=SceneManager[_0x4aa6e9(0x473)][_0x4aa6e9(0x850)];if(!_0xfc383b)return;if(VisuMZ[_0x4aa6e9(0x324)][_0x4aa6e9(0x71e)]<=1.05){alert(_0x4aa6e9(0x5ab)),SceneManager[_0x4aa6e9(0x41d)]();return;}VisuMZ[_0x4aa6e9(0x9ef)](_0x20c4e9,_0x20c4e9);const _0x17bd4d=VisuMZ[_0x4aa6e9(0xb6b)](_0x20c4e9[_0x4aa6e9(0x312)]),_0x54f39d={'filename':_0x20c4e9[_0x4aa6e9(0x84a)],'horzCells':_0x20c4e9['horzCells']||0x1,'vertCells':_0x20c4e9['vertCells']||0x1,'frameDelay':_0x20c4e9[_0x4aa6e9(0x4d0)]||0x1,'smooth':_0x20c4e9[_0x4aa6e9(0x236)]||![],'anchorX':_0x20c4e9[_0x4aa6e9(0x1f1)]||0x0,'anchorY':_0x20c4e9[_0x4aa6e9(0xa2f)]||0x0,'offsetX':_0x20c4e9['offsetX']||0x0,'offsetY':_0x20c4e9[_0x4aa6e9(0x673)]||0x0};for(const _0x363a1f of _0x17bd4d){if(!_0x363a1f)continue;if(!_0x363a1f[_0x4aa6e9(0x157)]())continue;_0x363a1f['battler']()[_0x4aa6e9(0x2ec)](_0x54f39d);}const _0x1235e9=$gameTemp['getLastPluginCommandInterpreter']();_0x1235e9&&_0x1235e9[_0x4aa6e9(0xa7e)](_0x4aa6e9(0x625));}),PluginManager[_0x33ee77(0x274)](pluginData['name'],_0x33ee77(0xa9c),_0x19ca64=>{const _0x3e25ad=_0x33ee77;if(!Imported['VisuMZ_3_ActSeqImpact'])return;const _0x1ded75=SceneManager[_0x3e25ad(0x473)][_0x3e25ad(0x850)];if(!_0x1ded75)return;if(VisuMZ['ActSeqImpact'][_0x3e25ad(0x71e)]<=1.05){alert(_0x3e25ad(0x5ab)),SceneManager['exit']();return;}VisuMZ[_0x3e25ad(0x9ef)](_0x19ca64,_0x19ca64);const _0x357720=VisuMZ[_0x3e25ad(0xb6b)](_0x19ca64['Targets']);for(const _0x4a1c18 of _0x357720){if(!_0x4a1c18)continue;if(!_0x4a1c18['battler']())continue;_0x4a1c18[_0x3e25ad(0x157)]()['stopInjectAnimation']();}}),PluginManager[_0x33ee77(0x274)](pluginData[_0x33ee77(0xac3)],_0x33ee77(0xbe1),_0x56e15d=>{const _0x4a3bfa=_0x33ee77;if(!Imported['VisuMZ_3_ActSeqImpact'])return;const _0x5bbe43=SceneManager['_scene'][_0x4a3bfa(0x850)];if(!_0x5bbe43)return;if(VisuMZ[_0x4a3bfa(0x324)][_0x4a3bfa(0x71e)]<=1.05){alert(_0x4a3bfa(0x5ab)),SceneManager['exit']();return;}VisuMZ[_0x4a3bfa(0x9ef)](_0x56e15d,_0x56e15d);const _0x23da55=VisuMZ[_0x4a3bfa(0xb6b)](_0x56e15d[_0x4a3bfa(0x312)]),_0x321118=_0x56e15d[_0x4a3bfa(0x1ee)];for(const _0x394dab of _0x23da55){if(!_0x394dab)continue;if(!_0x394dab[_0x4a3bfa(0x157)]())continue;_0x394dab[_0x4a3bfa(0x157)]()[_0x4a3bfa(0x652)](_0x321118);}}),PluginManager[_0x33ee77(0x274)](pluginData[_0x33ee77(0xac3)],_0x33ee77(0x32a),_0x5e87ab=>{const _0x5f5ac1=_0x33ee77;if(!SceneManager[_0x5f5ac1(0x5d9)]())return;const _0x2276ec=$gameTemp[_0x5f5ac1(0x87a)]();if(!_0x2276ec)return;_0x2276ec['setWaitMode'](_0x5f5ac1(0x1e6));}),PluginManager[_0x33ee77(0x274)](pluginData['name'],'ActSeq_Mechanics_ActionEffect',_0x467e53=>{const _0x1a7fad=_0x33ee77;if(!SceneManager[_0x1a7fad(0x5d9)]())return;VisuMZ[_0x1a7fad(0x9ef)](_0x467e53,_0x467e53);const _0x2a1f40=$gameTemp['getLastPluginCommandInterpreter'](),_0x125aab=BattleManager['_action'],_0x5879bd=BattleManager['_subject'],_0x3d573c=BattleManager[_0x1a7fad(0xb43)];if(!_0x2a1f40||!_0x125aab||!_0x5879bd)return;if(!_0x125aab[_0x1a7fad(0x5b0)]())return;const _0x13e78e=VisuMZ[_0x1a7fad(0xb6b)](_0x467e53[_0x1a7fad(0x312)]);for(const _0x2fdc46 of _0x13e78e){if(!_0x2fdc46)continue;_0x3d573c[_0x1a7fad(0x7ab)](_0x1a7fad(0x1d5),_0x5879bd,_0x2fdc46);}_0x2a1f40[_0x1a7fad(0xa7e)](_0x1a7fad(0xa7c));}),PluginManager['registerCommand'](pluginData['name'],_0x33ee77(0x83e),_0x5d1f76=>{const _0x2d3faa=_0x33ee77;if(!SceneManager[_0x2d3faa(0x5d9)]())return;if(!Imported[_0x2d3faa(0x43a)])return;$gameTemp[_0x2d3faa(0x99d)]=!![];}),PluginManager[_0x33ee77(0x274)](pluginData[_0x33ee77(0xac3)],_0x33ee77(0x2cf),_0x1e2da2=>{const _0x213982=_0x33ee77;if(!SceneManager[_0x213982(0x5d9)]())return;VisuMZ[_0x213982(0x9ef)](_0x1e2da2,_0x1e2da2);const _0x58f81c=[_0x213982(0x353),'MAXMP',_0x213982(0x756),'DEF','MAT',_0x213982(0x938),_0x213982(0x75c),_0x213982(0x51e)],_0x4b9f0c=_0x1e2da2[_0x213982(0x3cf)],_0xb8b7dd=_0x1e2da2[_0x213982(0x1c1)],_0x57894f=_0x1e2da2[_0x213982(0x569)],_0x5efeb8=VisuMZ[_0x213982(0xb6b)](_0x1e2da2[_0x213982(0x312)]);for(const _0x2042e2 of _0x5efeb8){if(!_0x2042e2)continue;for(const _0x19a8cb of _0x4b9f0c){const _0x8d1071=_0x58f81c[_0x213982(0xba4)](_0x19a8cb[_0x213982(0x46b)]()[_0x213982(0xaf2)]());_0x8d1071>=0x0&&_0x8d1071<=0x7&&_0x2042e2['addBuff'](_0x8d1071,_0x57894f);}for(const _0x338144 of _0xb8b7dd){const _0x335462=_0x58f81c[_0x213982(0xba4)](_0x338144[_0x213982(0x46b)]()[_0x213982(0xaf2)]());_0x335462>=0x0&&_0x335462<=0x7&&_0x2042e2['addDebuff'](_0x335462,_0x57894f);}}}),PluginManager[_0x33ee77(0x274)](pluginData[_0x33ee77(0xac3)],_0x33ee77(0x7ad),_0x1612d7=>{const _0x1868b2=_0x33ee77;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x1868b2(0x9ef)](_0x1612d7,_0x1612d7);const _0x4c3f22=_0x1612d7['States'],_0x19da97=VisuMZ[_0x1868b2(0xb6b)](_0x1612d7[_0x1868b2(0x312)]);for(const _0x2eee3f of _0x19da97){if(!_0x2eee3f)continue;for(const _0x26e3c6 of _0x4c3f22){_0x2eee3f[_0x1868b2(0x38b)](_0x26e3c6);}}}),PluginManager[_0x33ee77(0x274)](pluginData['name'],_0x33ee77(0x7db),_0x3aa123=>{const _0x38ffa3=_0x33ee77;if(!SceneManager[_0x38ffa3(0x5d9)]())return;VisuMZ[_0x38ffa3(0x9ef)](_0x3aa123,_0x3aa123);const _0x1acd2b=BattleManager[_0x38ffa3(0xac6)],_0x58ee33={'arPenRate':_0x3aa123['ArPenRate'],'arPenFlat':_0x3aa123[_0x38ffa3(0xc13)],'arRedRate':_0x3aa123[_0x38ffa3(0x737)],'arRedFlat':_0x3aa123[_0x38ffa3(0x234)]};_0x1acd2b[_0x38ffa3(0x27c)]=_0x58ee33;}),PluginManager[_0x33ee77(0x274)](pluginData[_0x33ee77(0xac3)],_0x33ee77(0x9d9),_0x2390ed=>{const _0x5ed38b=_0x33ee77;if(!SceneManager[_0x5ed38b(0x5d9)]())return;if(!Imported[_0x5ed38b(0xa3f)])return;VisuMZ[_0x5ed38b(0x9ef)](_0x2390ed,_0x2390ed);const _0x1b701f=VisuMZ['CreateActionSequenceTargets'](_0x2390ed[_0x5ed38b(0x312)]),_0xc66454=_0x2390ed[_0x5ed38b(0x320)]||0x1;for(const _0x5b34a4 of _0x1b701f){if(!_0x5b34a4)continue;if(!_0x5b34a4[_0x5ed38b(0x43e)]())continue;_0x5b34a4[_0x5ed38b(0x1ba)](_0xc66454);}}),PluginManager[_0x33ee77(0x274)](pluginData['name'],_0x33ee77(0x6fb),_0x4c4929=>{const _0x2391eb=_0x33ee77;if(!SceneManager[_0x2391eb(0x5d9)]())return;if(!Imported[_0x2391eb(0x245)])return;if(!BattleManager[_0x2391eb(0xaeb)]())return;VisuMZ[_0x2391eb(0x9ef)](_0x4c4929,_0x4c4929);const _0x4d9915=VisuMZ[_0x2391eb(0xb6b)](_0x4c4929[_0x2391eb(0x312)]),_0x296986=_0x4c4929['ChargeRate'],_0x29a6db=_0x4c4929['ChargeRate'],_0x578970=_0x4c4929[_0x2391eb(0x819)];for(const _0x2a696c of _0x4d9915){if(!_0x2a696c)continue;if(_0x2a696c[_0x2391eb(0x6a1)]())_0x2a696c['changeAtbChargeTime'](_0x296986);else{if(_0x2a696c['isAtbCastingState']()){_0x2a696c[_0x2391eb(0x550)](_0x29a6db);if(_0x578970)_0x2a696c[_0x2391eb(0xb1a)]();}}}}),PluginManager['registerCommand'](pluginData[_0x33ee77(0xac3)],_0x33ee77(0x85a),_0x202402=>{const _0x309066=_0x33ee77;if(!SceneManager[_0x309066(0x5d9)]())return;if(!Imported['VisuMZ_3_BoostAction'])return;VisuMZ[_0x309066(0x9ef)](_0x202402,_0x202402);const _0x58f139=VisuMZ['CreateActionSequenceTargets'](_0x202402[_0x309066(0x312)]),_0x49ac07=_0x202402[_0x309066(0x694)];for(const _0x5ab3fe of _0x58f139){if(!_0x5ab3fe)continue;_0x5ab3fe['gainStoredBoostPoints'](_0x49ac07);}}),PluginManager['registerCommand'](pluginData[_0x33ee77(0xac3)],_0x33ee77(0x194),_0x3d1581=>{const _0x492281=_0x33ee77;if(!SceneManager[_0x492281(0x5d9)]())return;if(!Imported[_0x492281(0xae7)])return;if(!BattleManager['_subject'])return;VisuMZ[_0x492281(0x9ef)](_0x3d1581,_0x3d1581);const _0x1ccec8=_0x3d1581[_0x492281(0xa1f)];$gameVariables[_0x492281(0x248)](_0x1ccec8,BattleManager[_0x492281(0x7c0)]['toUseBoostPoints']());}),PluginManager[_0x33ee77(0x274)](pluginData[_0x33ee77(0xac3)],_0x33ee77(0x50f),_0x3d5c5c=>{const _0x478396=_0x33ee77;if(!SceneManager[_0x478396(0x5d9)]())return;if(!Imported[_0x478396(0xa22)])return;VisuMZ[_0x478396(0x9ef)](_0x3d5c5c,_0x3d5c5c);const _0x5c729c=VisuMZ[_0x478396(0xb6b)](_0x3d5c5c[_0x478396(0x312)]),_0x29f0a9=_0x3d5c5c[_0x478396(0x2dc)];for(const _0x22eede of _0x5c729c){if(!_0x22eede)continue;if(_0x22eede[_0x478396(0x5bd)]())continue;if(!_0x22eede['isAffectedByBreakShield']())continue;_0x22eede['alterBreakShield'](_0x29f0a9);}}),PluginManager['registerCommand'](pluginData[_0x33ee77(0xac3)],_0x33ee77(0x496),_0x5487de=>{const _0x1a66f9=_0x33ee77;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x1a66f9(0xa22)])return;VisuMZ[_0x1a66f9(0x9ef)](_0x5487de,_0x5487de);const _0x21127c=VisuMZ[_0x1a66f9(0xb6b)](_0x5487de['Targets']);for(const _0x35985d of _0x21127c){if(!_0x35985d)continue;if(_0x35985d[_0x1a66f9(0x5bd)]())continue;if(!_0x35985d[_0x1a66f9(0x68b)]())continue;_0x35985d['resetBreakShield']();}}),PluginManager['registerCommand'](pluginData[_0x33ee77(0xac3)],_0x33ee77(0x7ca),_0x32fc46=>{const _0x249ed0=_0x33ee77;if(!SceneManager[_0x249ed0(0x5d9)]())return;if(!Imported[_0x249ed0(0xbf3)])return;if(!BattleManager[_0x249ed0(0x285)]())return;VisuMZ[_0x249ed0(0x9ef)](_0x32fc46,_0x32fc46);const _0x27b1b8=VisuMZ[_0x249ed0(0xb6b)](_0x32fc46['Targets']),_0x27bd32=_0x32fc46[_0x249ed0(0x6e4)];for(const _0x737c88 of _0x27b1b8){if(!_0x737c88)continue;_0x737c88['gainBravePoints'](_0x27bd32);}}),PluginManager['registerCommand'](pluginData[_0x33ee77(0xac3)],_0x33ee77(0x78c),_0x2f9c1a=>{const _0x5c73b5=_0x33ee77;if(!SceneManager[_0x5c73b5(0x5d9)]())return;VisuMZ[_0x5c73b5(0x9ef)](_0x2f9c1a,_0x2f9c1a);const _0x2a79e2=$gameTemp['getLastPluginCommandInterpreter'](),_0x40161b=BattleManager[_0x5c73b5(0xac6)],_0x40ef6b=BattleManager[_0x5c73b5(0x7c0)];if(!_0x2a79e2||!_0x40161b||!_0x40ef6b)return;if(!_0x40161b[_0x5c73b5(0x5b0)]())return;const _0x434f3e=VisuMZ['CreateActionSequenceTargets'](_0x2f9c1a['Targets']);for(const _0x16a7c1 of _0x434f3e){if(!_0x16a7c1)continue;_0x2f9c1a[_0x5c73b5(0x6ee)]&&(_0x16a7c1[_0x5c73b5(0x497)](),_0x16a7c1[_0x5c73b5(0x38b)](_0x16a7c1[_0x5c73b5(0x61b)]())),_0x16a7c1['isDeathStateAffected']()&&_0x16a7c1[_0x5c73b5(0x1ce)]();}_0x2a79e2[_0x5c73b5(0xa7e)]('battleEffect');}),PluginManager[_0x33ee77(0x274)](pluginData['name'],_0x33ee77(0x78e),_0x346bd4=>{const _0x1e27da=_0x33ee77;if(!SceneManager[_0x1e27da(0x5d9)]())return;if(!Imported['VisuMZ_2_BattleSystemCTB'])return;if(!BattleManager['isCTB']())return;VisuMZ[_0x1e27da(0x9ef)](_0x346bd4,_0x346bd4);const _0x156487=VisuMZ[_0x1e27da(0xb6b)](_0x346bd4['Targets']),_0x21f03e=_0x346bd4[_0x1e27da(0x4f8)];for(const _0x393375 of _0x156487){if(!_0x393375)continue;_0x393375[_0x1e27da(0x909)](_0x21f03e);}}),PluginManager[_0x33ee77(0x274)](pluginData[_0x33ee77(0xac3)],'ActSeq_Mechanics_CtbSpeed',_0x135267=>{const _0x2d24ec=_0x33ee77;if(!SceneManager[_0x2d24ec(0x5d9)]())return;if(!Imported[_0x2d24ec(0x357)])return;if(!BattleManager['isCTB']())return;VisuMZ[_0x2d24ec(0x9ef)](_0x135267,_0x135267);const _0x1051a8=VisuMZ[_0x2d24ec(0xb6b)](_0x135267[_0x2d24ec(0x312)]),_0x350222=_0x135267[_0x2d24ec(0x3e5)],_0x5e0e55=_0x135267[_0x2d24ec(0x3e5)];for(const _0x187977 of _0x1051a8){if(!_0x187977)continue;if(_0x187977['_tpbState']==='charging')_0x187977[_0x2d24ec(0xad9)](_0x350222);else _0x187977[_0x2d24ec(0x3ee)]===_0x2d24ec(0x44c)&&_0x187977[_0x2d24ec(0x2f5)](_0x5e0e55);}}),PluginManager[_0x33ee77(0x274)](pluginData[_0x33ee77(0xac3)],_0x33ee77(0x920),_0x16a169=>{const _0x248429=_0x33ee77;if(!SceneManager[_0x248429(0x5d9)]())return;VisuMZ['ConvertParams'](_0x16a169,_0x16a169);const _0x9649f9=BattleManager['_action'];if(!_0x9649f9)return;let _0x301713=_0x16a169[_0x248429(0x529)];_0x9649f9[_0x248429(0x9f4)](_0x301713);}),PluginManager[_0x33ee77(0x274)](pluginData[_0x33ee77(0xac3)],_0x33ee77(0x962),_0x59868d=>{const _0x3a0395=_0x33ee77;if(!SceneManager[_0x3a0395(0x5d9)]())return;VisuMZ[_0x3a0395(0x9ef)](_0x59868d,_0x59868d);const _0x457b7c=VisuMZ[_0x3a0395(0xb6b)](_0x59868d['Targets']);for(const _0x44aaad of _0x457b7c){if(!_0x44aaad)continue;if(_0x44aaad[_0x3a0395(0xabf)]())_0x44aaad[_0x3a0395(0x1be)]();}}),PluginManager[_0x33ee77(0x274)](pluginData[_0x33ee77(0xac3)],'ActSeq_Mechanics_DeathBreak',_0x4af924=>{const _0x27006d=_0x33ee77;if(!SceneManager[_0x27006d(0x5d9)]())return;VisuMZ[_0x27006d(0x9ef)](_0x4af924,_0x4af924);const _0xc7504d=$gameTemp['getLastPluginCommandInterpreter'](),_0x24683d=BattleManager['_subject'],_0x221b3a=_0x4af924[_0x27006d(0x653)];if(!_0xc7504d)return;if(!_0x24683d)return;_0x24683d&&_0x24683d[_0x27006d(0x385)]()&&_0x221b3a[_0x27006d(0x46b)]()[_0x27006d(0xaf2)]()!==_0x27006d(0x145)&&_0xc7504d[_0x27006d(0x4f6)]([_0x221b3a]);}),PluginManager[_0x33ee77(0x274)](pluginData[_0x33ee77(0xac3)],_0x33ee77(0xa4d),_0x11afbc=>{const _0x326618=_0x33ee77;if(!SceneManager[_0x326618(0x5d9)]())return;VisuMZ['ConvertParams'](_0x11afbc,_0x11afbc);const _0x1db845=$gameTemp[_0x326618(0x87a)](),_0x2d6b9f=BattleManager[_0x326618(0xb43)];if(!_0x1db845)return;const _0x5d3352=VisuMZ[_0x326618(0xb6b)](_0x11afbc[_0x326618(0x604)]),_0x3dba45=VisuMZ[_0x326618(0xb6b)](_0x11afbc[_0x326618(0x312)]);for(const _0x161e19 of _0x5d3352){for(const _0x3db31a of _0x3dba45){if(!_0x3db31a)continue;const _0x52dc45=$dataSkills[_0x161e19[_0x326618(0x8a4)]()];_0x2d6b9f[_0x326618(0x7ab)]('emulateActionEffect',_0x161e19,_0x3db31a,_0x52dc45);}}_0x1db845[_0x326618(0xa7e)](_0x326618(0xa7c));}),PluginManager[_0x33ee77(0x274)](pluginData[_0x33ee77(0xac3)],_0x33ee77(0x181),_0x197d6e=>{const _0x315160=_0x33ee77;if(!SceneManager[_0x315160(0x5d9)]())return;VisuMZ[_0x315160(0x9ef)](_0x197d6e,_0x197d6e);const _0x26a55e=$gameTemp[_0x315160(0x87a)](),_0xc039c9=BattleManager[_0x315160(0xb43)];if(!_0x26a55e)return;const _0xa37d91=VisuMZ[_0x315160(0xb6b)](_0x197d6e[_0x315160(0x604)]),_0xe35bb0=VisuMZ[_0x315160(0xb6b)](_0x197d6e['Targets']);for(const _0x19c7ab of _0xa37d91){for(const _0x2d12e1 of _0xe35bb0){if(!_0x2d12e1)continue;const _0x5108d6=$dataSkills[_0x19c7ab[_0x315160(0x743)]()];_0xc039c9['push'](_0x315160(0x2b6),_0x19c7ab,_0x2d12e1,_0x5108d6);}}_0x26a55e[_0x315160(0xa7e)](_0x315160(0xa7c));}),PluginManager[_0x33ee77(0x274)](pluginData[_0x33ee77(0xac3)],_0x33ee77(0x879),_0x271f28=>{const _0x4184cc=_0x33ee77;if(!SceneManager[_0x4184cc(0x5d9)]())return;VisuMZ[_0x4184cc(0x9ef)](_0x271f28,_0x271f28);const _0x38e91a=$gameTemp[_0x4184cc(0x87a)](),_0x476b8c=BattleManager[_0x4184cc(0xb43)],_0x11e007=Number(_0x271f28[_0x4184cc(0x6bc)]||0x1),_0x5dd194=$dataItems[_0x11e007];if(!_0x38e91a)return;if(!_0x5dd194)return;const _0x3df682=VisuMZ[_0x4184cc(0xb6b)](_0x271f28[_0x4184cc(0x604)]),_0x482ea6=VisuMZ[_0x4184cc(0xb6b)](_0x271f28[_0x4184cc(0x312)]);for(const _0x5bfe5f of _0x3df682){for(const _0x41bace of _0x482ea6){if(!_0x41bace)continue;_0x476b8c[_0x4184cc(0x7ab)]('emulateActionEffect',_0x5bfe5f,_0x41bace,_0x5dd194);}}_0x38e91a[_0x4184cc(0xa7e)](_0x4184cc(0xa7c));}),PluginManager[_0x33ee77(0x274)](pluginData[_0x33ee77(0xac3)],'ActSeq_Mechanics_EmulateSkillCost',_0x466c24=>{const _0x5edd45=_0x33ee77;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x5edd45(0x9ef)](_0x466c24,_0x466c24);let _0x2dd735=Number(_0x466c24[_0x5edd45(0x442)]||0x0);if(_0x2dd735<=0x0){const _0x2994ec=BattleManager[_0x5edd45(0xac6)];if(_0x2994ec&&_0x2994ec[_0x5edd45(0x22e)]())_0x2dd735=_0x2994ec['item']()['id'];else return;}const _0x974a30=$dataSkills[_0x2dd735];if(!_0x974a30)return;const _0x5c9eef=VisuMZ['CreateActionSequenceTargets'](_0x466c24[_0x5edd45(0x604)]);for(const _0x26c9e4 of _0x5c9eef){_0x26c9e4['paySkillCost'](_0x974a30);}}),PluginManager[_0x33ee77(0x274)](pluginData[_0x33ee77(0xac3)],_0x33ee77(0x535),_0x135d64=>{const _0xff7f5b=_0x33ee77;if(!SceneManager[_0xff7f5b(0x5d9)]())return;VisuMZ[_0xff7f5b(0x9ef)](_0x135d64,_0x135d64);const _0x358256=$gameTemp[_0xff7f5b(0x87a)](),_0x1f4a32=BattleManager[_0xff7f5b(0xb43)],_0x540178=Number(_0x135d64[_0xff7f5b(0x442)]||0x1),_0x501855=$dataSkills[_0x540178];if(!_0x358256)return;if(!_0x501855)return;const _0x4b444c=VisuMZ[_0xff7f5b(0xb6b)](_0x135d64['Users']),_0x22388f=VisuMZ[_0xff7f5b(0xb6b)](_0x135d64[_0xff7f5b(0x312)]);for(const _0x38f938 of _0x4b444c){for(const _0x40b147 of _0x22388f){if(!_0x40b147)continue;_0x1f4a32['push'](_0xff7f5b(0x2b6),_0x38f938,_0x40b147,_0x501855);}}_0x358256[_0xff7f5b(0xa7e)]('battlelog');}),PluginManager[_0x33ee77(0x274)](pluginData['name'],_0x33ee77(0xa5f),_0x4510f6=>{const _0x383937=_0x33ee77;if(!SceneManager[_0x383937(0x5d9)]())return;VisuMZ[_0x383937(0x9ef)](_0x4510f6,_0x4510f6);const _0xbe68ed=VisuMZ[_0x383937(0xb6b)](_0x4510f6[_0x383937(0x312)]);for(const _0x681636 of _0xbe68ed){if(!_0x681636)continue;if(!_0x681636[_0x383937(0x43e)]())continue;_0x681636['escape']();}}),PluginManager['registerCommand'](pluginData[_0x33ee77(0xac3)],_0x33ee77(0xbdb),_0x79dd14=>{const _0xa8930c=_0x33ee77;if(!SceneManager[_0xa8930c(0x5d9)]())return;if(!Imported['VisuMZ_2_BattleSystemETB'])return;if(!BattleManager['isETB']())return;VisuMZ[_0xa8930c(0x9ef)](_0x79dd14,_0x79dd14);const _0x3a1abf=_0x79dd14[_0xa8930c(0x4c2)];BattleManager[_0xa8930c(0x7c0)]&&BattleManager[_0xa8930c(0x7c0)][_0xa8930c(0x95f)]()[_0xa8930c(0x2fa)](_0x3a1abf);}),PluginManager[_0x33ee77(0x274)](pluginData['name'],_0x33ee77(0x484),_0x5aa793=>{const _0x3cc69f=_0x33ee77;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x3cc69f(0xb15)])return;if(!BattleManager[_0x3cc69f(0x4fd)]())return;VisuMZ[_0x3cc69f(0x9ef)](_0x5aa793,_0x5aa793);const _0x16e8d7=_0x5aa793[_0x3cc69f(0x4c2)];BattleManager['_subject']&&BattleManager[_0x3cc69f(0x7c0)]['friendsUnit']()['gainCurrentActionsFTB'](_0x16e8d7);}),PluginManager[_0x33ee77(0x274)](pluginData[_0x33ee77(0xac3)],_0x33ee77(0x9c0),_0x4055ab=>{const _0x4ae83c=_0x33ee77;if(!SceneManager[_0x4ae83c(0x5d9)]())return;VisuMZ[_0x4ae83c(0x9ef)](_0x4055ab,_0x4055ab);const _0x5a1435=VisuMZ[_0x4ae83c(0xb6b)](_0x4055ab[_0x4ae83c(0x312)]),_0x49cd60=_0x4055ab[_0x4ae83c(0x329)],_0x2f178a=_0x4055ab['HP_Flat'],_0x461e88=_0x4055ab['MP_Rate'],_0x56ed5c=_0x4055ab[_0x4ae83c(0x795)],_0x485aea=_0x4055ab[_0x4ae83c(0xbbf)],_0x159faf=_0x4055ab[_0x4ae83c(0x982)],_0x1ee968=_0x4055ab[_0x4ae83c(0xb91)];for(const _0x3e9e22 of _0x5a1435){if(!_0x3e9e22)continue;const _0x94ee10=_0x3e9e22[_0x4ae83c(0x4ad)](),_0x439b1b=Math[_0x4ae83c(0x20e)](_0x49cd60*_0x3e9e22[_0x4ae83c(0x6e5)]+_0x2f178a),_0x1d3358=Math['round'](_0x461e88*_0x3e9e22[_0x4ae83c(0x587)]+_0x56ed5c),_0x3a0d26=Math[_0x4ae83c(0x20e)](_0x485aea*_0x3e9e22['maxTp']()+_0x159faf);if(_0x439b1b!==0x0)_0x3e9e22[_0x4ae83c(0x3ac)](_0x439b1b);if(_0x1d3358!==0x0)_0x3e9e22[_0x4ae83c(0x305)](_0x1d3358);if(_0x3a0d26!==0x0)_0x3e9e22['gainTp'](_0x3a0d26);if(_0x1ee968)_0x3e9e22['startDamagePopup']();_0x94ee10&&_0x3e9e22[_0x4ae83c(0x385)]()&&_0x3e9e22['performCollapse']();}}),PluginManager[_0x33ee77(0x274)](pluginData[_0x33ee77(0xac3)],'ActSeq_Mechanics_Immortal',_0x5e44b0=>{const _0x3fc2b9=_0x33ee77;if(!SceneManager[_0x3fc2b9(0x5d9)]())return;VisuMZ[_0x3fc2b9(0x9ef)](_0x5e44b0,_0x5e44b0);const _0x3c6cd9=VisuMZ[_0x3fc2b9(0xb6b)](_0x5e44b0[_0x3fc2b9(0x312)]);for(const _0x1404bb of _0x3c6cd9){if(!_0x1404bb)continue;_0x1404bb[_0x3fc2b9(0x536)](_0x5e44b0[_0x3fc2b9(0x30a)]);}}),PluginManager[_0x33ee77(0x274)](pluginData[_0x33ee77(0xac3)],_0x33ee77(0x823),_0x3ff0a0=>{const _0x59b6d2=_0x33ee77;if(!SceneManager['isSceneBattle']())return;VisuMZ['ConvertParams'](_0x3ff0a0,_0x3ff0a0);const _0x581c87=BattleManager[_0x59b6d2(0xac6)],_0x347030={'criticalHitRate':_0x3ff0a0['CriticalHitRate'],'criticalHitFlat':_0x3ff0a0[_0x59b6d2(0x579)],'criticalDmgRate':_0x3ff0a0[_0x59b6d2(0x29d)],'criticalDmgFlat':_0x3ff0a0[_0x59b6d2(0x780)],'damageRate':_0x3ff0a0[_0x59b6d2(0x9e1)],'damageFlat':_0x3ff0a0[_0x59b6d2(0x4ea)],'hitRate':_0x3ff0a0['HitRate'],'hitFlat':_0x3ff0a0['HitFlat']};_0x581c87['_multipliers']=_0x347030;}),PluginManager[_0x33ee77(0x274)](pluginData[_0x33ee77(0xac3)],_0x33ee77(0xb96),_0x1fea5e=>{const _0x1e5ea9=_0x33ee77;if(!SceneManager[_0x1e5ea9(0x5d9)]())return;VisuMZ['ConvertParams'](_0x1fea5e,_0x1fea5e);const _0x71b120=_0x1fea5e[_0x1e5ea9(0xb00)];SceneManager[_0x1e5ea9(0x473)][_0x1e5ea9(0xb85)](_0x71b120);}),PluginManager[_0x33ee77(0x274)](pluginData['name'],_0x33ee77(0x6fa),_0x320b2b=>{const _0x4fe14d=_0x33ee77;if(!SceneManager[_0x4fe14d(0x5d9)]())return;if(!Imported['VisuMZ_2_BattleSystemOTB'])return;if(!BattleManager['isOTB']())return;VisuMZ['ConvertParams'](_0x320b2b,_0x320b2b);const _0x497cc7=VisuMZ[_0x4fe14d(0xb6b)](_0x320b2b['Targets']);for(const _0x1fbab6 of _0x497cc7){if(!_0x1fbab6)continue;let _0x53cc50=_0x320b2b[_0x4fe14d(0x539)],_0x1c5e2e=_0x320b2b[_0x4fe14d(0x9bc)],_0x7b100e=_0x320b2b[_0x4fe14d(0x507)];BattleManager[_0x4fe14d(0x2b1)]['includes'](_0x1fbab6)?_0x53cc50+=_0x7b100e:_0x1c5e2e+=_0x7b100e,BattleManager[_0x4fe14d(0xa30)](_0x1fbab6,-_0x53cc50,![]),BattleManager[_0x4fe14d(0xa30)](_0x1fbab6,-_0x1c5e2e,!![]);}}),PluginManager[_0x33ee77(0x274)](pluginData[_0x33ee77(0xac3)],_0x33ee77(0x2cb),_0xb23ee=>{const _0x2b5fa7=_0x33ee77;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x2b5fa7(0x549)])return;if(!BattleManager['isPTB']())return;VisuMZ[_0x2b5fa7(0x9ef)](_0xb23ee,_0xb23ee);const _0x2c4c9d=BattleManager['_subject']['friendsUnit'](),_0x4fd58b=_0xb23ee['Override'],_0x2fce03=_0xb23ee[_0x2b5fa7(0xc2d)]||'unchanged',_0x17eb4b=_0xb23ee[_0x2b5fa7(0x499)]||_0x2b5fa7(0x927),_0x398025=_0xb23ee[_0x2b5fa7(0x8c8)]||0x0,_0x4bb103=_0xb23ee[_0x2b5fa7(0x60e)]||0x0;(_0x2c4c9d[_0x2b5fa7(0x1e2)]()||_0x4fd58b)&&(_0x4fd58b&&(_0x2c4c9d[_0x2b5fa7(0x46d)]=_0x2c4c9d[_0x2b5fa7(0x46d)]||{},_0x2c4c9d[_0x2b5fa7(0x46d)]['priority']=0x0),_0x2c4c9d[_0x2b5fa7(0x93a)](_0x2fce03,_0x17eb4b,_0x398025,_0x4bb103));}),PluginManager[_0x33ee77(0x274)](pluginData[_0x33ee77(0xac3)],_0x33ee77(0x771),_0xd1afb4=>{const _0x3678bd=_0x33ee77;if(!SceneManager[_0x3678bd(0x5d9)]())return;if(!Imported[_0x3678bd(0x549)])return;if(!BattleManager[_0x3678bd(0x99c)]())return;VisuMZ['ConvertParams'](_0xd1afb4,_0xd1afb4);const _0x23b424=BattleManager[_0x3678bd(0x7c0)]['friendsUnit']();let _0x154d39=Math[_0x3678bd(0x657)](_0xd1afb4[_0x3678bd(0x914)],0x0),_0x111c5a=_0x23b424[_0x3678bd(0x8e6)](),_0x34bba5=_0x23b424[_0x3678bd(0x8a3)]();while(_0x154d39--){if(_0x111c5a<=0x0&&_0x34bba5<=0x0)break;else _0x111c5a>0x0?(_0x111c5a--,_0x34bba5++):_0x34bba5--;}_0x23b424[_0x3678bd(0x323)](_0x111c5a),_0x23b424[_0x3678bd(0x247)](_0x34bba5);}),PluginManager[_0x33ee77(0x274)](pluginData['name'],_0x33ee77(0xb5c),_0x5093ae=>{const _0x3ab327=_0x33ee77;if(!SceneManager[_0x3ab327(0x5d9)]())return;if(!Imported['VisuMZ_2_BattleSystemPTB'])return;if(!BattleManager[_0x3ab327(0x99c)]())return;VisuMZ['ConvertParams'](_0x5093ae,_0x5093ae);const _0x8f20fa=BattleManager[_0x3ab327(0x7c0)][_0x3ab327(0x95f)]();let _0x5972ce=_0x5093ae[_0x3ab327(0xbd1)],_0x1ddec1=_0x5093ae['HalfActions'];_0x8f20fa[_0x3ab327(0xba3)](_0x5972ce),_0x8f20fa['gainHalfActionsPTB'](_0x1ddec1);}),PluginManager[_0x33ee77(0x274)](pluginData['name'],_0x33ee77(0x1db),_0x50b40a=>{const _0x42bc37=_0x33ee77;if(!SceneManager[_0x42bc37(0x5d9)]())return;VisuMZ['ConvertParams'](_0x50b40a,_0x50b40a);const _0x11edff=['MAXHP',_0x42bc37(0x4bc),'ATK',_0x42bc37(0x55a),_0x42bc37(0x1d7),_0x42bc37(0x938),_0x42bc37(0x75c),_0x42bc37(0x51e)],_0x1c5d0f=_0x50b40a[_0x42bc37(0x3cf)],_0x274ab1=_0x50b40a[_0x42bc37(0x1c1)],_0x13a08b=VisuMZ['CreateActionSequenceTargets'](_0x50b40a[_0x42bc37(0x312)]);for(const _0x3ce777 of _0x13a08b){if(!_0x3ce777)continue;for(const _0x1a935c of _0x1c5d0f){const _0x1f7d41=_0x11edff[_0x42bc37(0xba4)](_0x1a935c[_0x42bc37(0x46b)]()[_0x42bc37(0xaf2)]());_0x1f7d41>=0x0&&_0x1f7d41<=0x7&&_0x3ce777['isBuffAffected'](_0x1f7d41)&&_0x3ce777['removeBuff'](_0x1f7d41);}for(const _0x5b39dd of _0x274ab1){const _0x1959f3=_0x11edff[_0x42bc37(0xba4)](_0x5b39dd[_0x42bc37(0x46b)]()[_0x42bc37(0xaf2)]());_0x1959f3>=0x0&&_0x1959f3<=0x7&&_0x3ce777[_0x42bc37(0xc01)](_0x1959f3)&&_0x3ce777['removeBuff'](_0x1959f3);}}}),PluginManager['registerCommand'](pluginData[_0x33ee77(0xac3)],_0x33ee77(0xa79),_0x2aaac0=>{const _0x211746=_0x33ee77;if(!SceneManager[_0x211746(0x5d9)]())return;VisuMZ[_0x211746(0x9ef)](_0x2aaac0,_0x2aaac0);const _0x25e10c=_0x2aaac0[_0x211746(0x95d)],_0x735a79=VisuMZ[_0x211746(0xb6b)](_0x2aaac0[_0x211746(0x312)]);for(const _0x4f638f of _0x735a79){if(!_0x4f638f)continue;for(const _0x56b4a2 of _0x25e10c){_0x4f638f['removeState'](_0x56b4a2);}}}),PluginManager[_0x33ee77(0x274)](pluginData[_0x33ee77(0xac3)],_0x33ee77(0x845),_0x433edd=>{const _0x236ecc=_0x33ee77;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x236ecc(0x4e6)])return;VisuMZ[_0x236ecc(0x9ef)](_0x433edd,_0x433edd);const _0x2c04fc=VisuMZ['CreateActionSequenceTargets'](_0x433edd[_0x236ecc(0x312)]),_0x161f64=Number(_0x433edd[_0x236ecc(0x9be)]),_0x97a317=Number(_0x433edd['Turns']),_0x37ad4d=_0x433edd['AutoAddState'];for(const _0x5898f5 of _0x2c04fc){if(!_0x5898f5)continue;_0x37ad4d&&!_0x5898f5[_0x236ecc(0xa9e)](_0x161f64)?(_0x5898f5[_0x236ecc(0x38b)](_0x161f64),_0x5898f5[_0x236ecc(0x618)](_0x161f64,_0x97a317)):_0x5898f5[_0x236ecc(0x481)](_0x161f64,_0x97a317);}}),PluginManager['registerCommand'](pluginData['name'],_0x33ee77(0x3a8),_0x328975=>{const _0x5720ff=_0x33ee77;if(!SceneManager[_0x5720ff(0x5d9)]())return;if(!Imported[_0x5720ff(0x4e6)])return;VisuMZ[_0x5720ff(0x9ef)](_0x328975,_0x328975);const _0x13940d=VisuMZ[_0x5720ff(0xb6b)](_0x328975[_0x5720ff(0x312)]),_0x29a37c=Number(_0x328975[_0x5720ff(0x9be)]),_0x38cd86=Math[_0x5720ff(0x657)](Number(_0x328975[_0x5720ff(0x569)]),0x0),_0x1ae6cb=_0x328975[_0x5720ff(0x5fc)];for(const _0x38aa5b of _0x13940d){if(!_0x38aa5b)continue;_0x1ae6cb&&!_0x38aa5b[_0x5720ff(0xa9e)](_0x29a37c)&&_0x38aa5b['addState'](_0x29a37c),_0x38aa5b['setStateTurns'](_0x29a37c,_0x38cd86);}}),PluginManager[_0x33ee77(0x274)](pluginData[_0x33ee77(0xac3)],'ActSeq_Mechanics_StbExploit',_0x3002c0=>{const _0x4846ff=_0x33ee77;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x4846ff(0x249)])return;if(!BattleManager[_0x4846ff(0x2e6)]())return;VisuMZ['ConvertParams'](_0x3002c0,_0x3002c0);const _0x4e17a6=_0x3002c0[_0x4846ff(0x7bb)],_0x3b6830=VisuMZ['CreateActionSequenceTargets'](_0x3002c0['Targets']),_0x30b8a9=_0x3002c0['ForceExploited'],_0x2bee42=_0x3002c0['Exploiter'],_0x565022=_0x3002c0[_0x4846ff(0x207)],_0x5aeb51=BattleManager[_0x4846ff(0xac6)];if(_0x4e17a6)for(const _0x2fab40 of _0x3b6830){if(!_0x2fab40)continue;if(_0x2fab40===BattleManager['_subject'])continue;if(_0x30b8a9)_0x2fab40[_0x4846ff(0x1cc)](![]);_0x2fab40[_0x4846ff(0x314)](BattleManager[_0x4846ff(0x7c0)],_0x5aeb51);}if(_0x2bee42&&BattleManager[_0x4846ff(0x7c0)]){if(_0x565022)BattleManager[_0x4846ff(0x7c0)][_0x4846ff(0x1cc)](![]);const _0x18d8f6=_0x3b6830[0x0];BattleManager[_0x4846ff(0x7c0)][_0x4846ff(0x6f8)](_0x18d8f6,_0x5aeb51);}}),PluginManager[_0x33ee77(0x274)](pluginData[_0x33ee77(0xac3)],'ActSeq_Mechanics_StbExtraAction',_0x2e79d2=>{const _0x2b725e=_0x33ee77;if(!SceneManager[_0x2b725e(0x5d9)]())return;if(!Imported[_0x2b725e(0x249)])return;if(!BattleManager[_0x2b725e(0x2e6)]())return;VisuMZ[_0x2b725e(0x9ef)](_0x2e79d2,_0x2e79d2);const _0x29d516=_0x2e79d2[_0x2b725e(0x1b1)];BattleManager['_subject']&&BattleManager['_subject']['stbGainInstant'](_0x29d516);}),PluginManager[_0x33ee77(0x274)](pluginData[_0x33ee77(0xac3)],_0x33ee77(0xa91),_0x200962=>{const _0x34aad1=_0x33ee77;if(!SceneManager[_0x34aad1(0x5d9)]())return;if(!Imported[_0x34aad1(0x249)])return;if(!BattleManager[_0x34aad1(0x2e6)]())return;VisuMZ[_0x34aad1(0x9ef)](_0x200962,_0x200962);let _0x1c9a84=_0x200962['Actions'];if(BattleManager[_0x34aad1(0x7c0)]){BattleManager[_0x34aad1(0x7c0)][_0x34aad1(0x29e)]=BattleManager[_0x34aad1(0x7c0)][_0x34aad1(0x29e)]||[];while(_0x1c9a84--){if(BattleManager[_0x34aad1(0x7c0)][_0x34aad1(0x29e)][_0x34aad1(0x70c)]<=0x0)break;BattleManager['_subject'][_0x34aad1(0x29e)][_0x34aad1(0x2e8)]();}}}),PluginManager[_0x33ee77(0x274)](pluginData[_0x33ee77(0xac3)],'ActSeq_Mechanics_SwapWeapon',_0x36ed55=>{const _0x20334c=_0x33ee77;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x20334c(0x730)])return;VisuMZ[_0x20334c(0x9ef)](_0x36ed55,_0x36ed55);const _0x542610=VisuMZ[_0x20334c(0xb6b)](_0x36ed55[_0x20334c(0x312)]),_0x350f9e=_0x36ed55[_0x20334c(0x1f3)];for(const _0x35fec9 of _0x542610){if(!_0x35fec9)continue;if(!_0x35fec9[_0x20334c(0x6c3)]())continue;_0x35fec9[_0x20334c(0xb20)](_0x350f9e);}}),PluginManager[_0x33ee77(0x274)](pluginData['name'],'ActSeq_Mechanics_TextPopup',_0x2c7355=>{const _0x6fc3e6=_0x33ee77;if(!SceneManager[_0x6fc3e6(0x5d9)]())return;VisuMZ[_0x6fc3e6(0x9ef)](_0x2c7355,_0x2c7355);const _0x5480eb=VisuMZ[_0x6fc3e6(0xb6b)](_0x2c7355['Targets']),_0x4ae199=_0x2c7355[_0x6fc3e6(0x9db)],_0x2fa279={'textColor':ColorManager[_0x6fc3e6(0x4fc)](_0x2c7355[_0x6fc3e6(0xb89)]),'flashColor':_0x2c7355[_0x6fc3e6(0x3f8)],'flashDuration':_0x2c7355[_0x6fc3e6(0x1c4)]};for(const _0x36a762 of _0x5480eb){if(!_0x36a762)continue;_0x36a762[_0x6fc3e6(0x160)](_0x4ae199,_0x2fa279);}}),PluginManager[_0x33ee77(0x274)](pluginData[_0x33ee77(0xac3)],_0x33ee77(0x69f),_0x46c972=>{const _0x577fb0=_0x33ee77;if(!SceneManager[_0x577fb0(0x5d9)]())return;VisuMZ['ConvertParams'](_0x46c972,_0x46c972);const _0xc34d16=VisuMZ['CreateActionSequenceTargets'](_0x46c972[_0x577fb0(0x312)]);let _0x57fcc0=$gameVariables[_0x577fb0(0x5ce)](_0x46c972[_0x577fb0(0x350)]);Imported['VisuMZ_0_CoreEngine']&&_0x46c972[_0x577fb0(0xb84)]&&(_0x57fcc0=VisuMZ[_0x577fb0(0x5d4)](_0x57fcc0));const _0x6834a8=String(_0x57fcc0),_0x389def={'textColor':ColorManager[_0x577fb0(0x4fc)](_0x46c972[_0x577fb0(0xb89)]),'flashColor':_0x46c972[_0x577fb0(0x3f8)],'flashDuration':_0x46c972[_0x577fb0(0x1c4)]};for(const _0x124353 of _0xc34d16){if(!_0x124353)continue;_0x124353[_0x577fb0(0x160)](_0x6834a8,_0x389def);}}),PluginManager[_0x33ee77(0x274)](pluginData[_0x33ee77(0xac3)],'ActSeq_Mechanics_WaitForEffect',_0x469ba2=>{const _0x55ffb5=_0x33ee77;if(!SceneManager[_0x55ffb5(0x5d9)]())return;const _0x11f718=$gameTemp[_0x55ffb5(0x87a)]();if(!_0x11f718)return;_0x11f718['setWaitMode'](_0x55ffb5(0x223));}),PluginManager[_0x33ee77(0x274)](pluginData[_0x33ee77(0xac3)],_0x33ee77(0xc0b),_0x4501e9=>{const _0x192be1=_0x33ee77;if(!SceneManager[_0x192be1(0x5d9)]())return;VisuMZ[_0x192be1(0x9ef)](_0x4501e9,_0x4501e9);const _0x33ec0f=VisuMZ[_0x192be1(0xb6b)](_0x4501e9[_0x192be1(0x312)]);for(const _0x2e3f34 of _0x33ec0f){if(!_0x2e3f34)continue;_0x2e3f34['clearFreezeMotion']();}}),PluginManager[_0x33ee77(0x274)](pluginData['name'],_0x33ee77(0x7da),_0x10b11f=>{const _0x74e14d=_0x33ee77;if(!SceneManager[_0x74e14d(0x5d9)]())return;VisuMZ[_0x74e14d(0x9ef)](_0x10b11f,_0x10b11f);const _0x1cd701=VisuMZ['CreateActionSequenceTargets'](_0x10b11f[_0x74e14d(0x312)]),_0x3f08c1=_0x10b11f[_0x74e14d(0x1e1)]['toLowerCase']()['trim']();let _0x98bedc=_0x10b11f[_0x74e14d(0x807)];const _0x75b278=_0x10b11f[_0x74e14d(0x76e)];![_0x74e14d(0x4c5),_0x74e14d(0x606),_0x74e14d(0x4d1),_0x74e14d(0x617)][_0x74e14d(0x741)](_0x3f08c1)&&(_0x98bedc=![]);for(const _0x26a719 of _0x1cd701){if(!_0x26a719)continue;_0x26a719[_0x74e14d(0xa3a)](_0x3f08c1,_0x98bedc,_0x75b278);}}),PluginManager['registerCommand'](pluginData[_0x33ee77(0xac3)],_0x33ee77(0x91b),_0x3d89a8=>{const _0x2075c8=_0x33ee77;if(!SceneManager[_0x2075c8(0x5d9)]())return;VisuMZ['ConvertParams'](_0x3d89a8,_0x3d89a8);const _0xe8ee31=VisuMZ['CreateActionSequenceTargets'](_0x3d89a8[_0x2075c8(0x312)]),_0x2b4ab4=_0x3d89a8[_0x2075c8(0x1e1)][_0x2075c8(0x172)]()[_0x2075c8(0xaf2)](),_0x421d73=_0x3d89a8[_0x2075c8(0x807)];for(const _0x3aa959 of _0xe8ee31){if(!_0x3aa959)continue;_0x3aa959[_0x2075c8(0x9ca)]=_0x421d73;if(_0x2b4ab4[_0x2075c8(0x7c1)](/ATTACK[ ](\d+)/i))_0x3aa959['performAttackSlot'](Number(RegExp['$1']));else _0x2b4ab4==='attack'?_0x3aa959['performAttack']():_0x3aa959[_0x2075c8(0x2a8)](_0x2b4ab4);if(!_0x421d73)_0x3aa959[_0x2075c8(0x944)](0x0);else{if(_0x421d73&&[_0x2075c8(0x606),_0x2075c8(0x4d1),_0x2075c8(0x1ea)]['includes'](_0x2b4ab4)){}}_0x3aa959['_showWeapon']=undefined;}}),PluginManager[_0x33ee77(0x274)](pluginData[_0x33ee77(0xac3)],_0x33ee77(0xbb0),_0x3cf819=>{const _0x774c97=_0x33ee77;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x774c97(0x9ef)](_0x3cf819,_0x3cf819);const _0x46059d=BattleManager[_0x774c97(0xac6)];if(!_0x46059d)return;if(!_0x46059d[_0x774c97(0x5b0)]())return;const _0x11e12e=VisuMZ[_0x774c97(0xb6b)](_0x3cf819['Targets']);for(const _0x27619b of _0x11e12e){if(!_0x27619b)continue;_0x27619b[_0x774c97(0x805)](_0x46059d);}}),PluginManager['registerCommand'](pluginData[_0x33ee77(0xac3)],_0x33ee77(0x151),_0x429676=>{const _0x4ea954=_0x33ee77;if(!SceneManager[_0x4ea954(0x5d9)]())return;VisuMZ['ConvertParams'](_0x429676,_0x429676);const _0x3d65e1=VisuMZ['CreateActionSequenceTargets'](_0x429676[_0x4ea954(0x312)]);for(const _0x17f99b of _0x3d65e1){if(!_0x17f99b)continue;if(!_0x17f99b[_0x4ea954(0x157)]())continue;_0x17f99b[_0x4ea954(0x157)]()['refreshMotion']();}}),PluginManager['registerCommand'](pluginData[_0x33ee77(0xac3)],_0x33ee77(0x121),_0x4a8f37=>{const _0x1c8ea8=_0x33ee77;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x1c8ea8(0x9ef)](_0x4a8f37,_0x4a8f37);const _0x45f307=$gameTemp[_0x1c8ea8(0x87a)](),_0x5cea3f=_0x4a8f37[_0x1c8ea8(0x33d)]*Sprite_Battler[_0x1c8ea8(0x9d4)];_0x45f307[_0x1c8ea8(0xc10)](_0x5cea3f);}),PluginManager[_0x33ee77(0x274)](pluginData['name'],'ActSeq_Movement_BattleStep',_0x214462=>{const _0x5709a6=_0x33ee77;if(!SceneManager[_0x5709a6(0x5d9)]())return;VisuMZ[_0x5709a6(0x9ef)](_0x214462,_0x214462);const _0x29f378=$gameTemp[_0x5709a6(0x87a)](),_0x7978eb=BattleManager['_action'];if(!_0x29f378||!_0x7978eb)return;if(!_0x7978eb[_0x5709a6(0x5b0)]())return;const _0x3fdb39=VisuMZ['CreateActionSequenceTargets'](_0x214462[_0x5709a6(0x312)]);for(const _0x19047c of _0x3fdb39){if(!_0x19047c)continue;_0x19047c[_0x5709a6(0x49b)](_0x7978eb);}if(_0x214462['WaitForMovement'])_0x29f378[_0x5709a6(0xa7e)](_0x5709a6(0x56b));}),PluginManager[_0x33ee77(0x274)](pluginData['name'],_0x33ee77(0x971),_0x210a8f=>{const _0x23e8eb=_0x33ee77;if(!SceneManager[_0x23e8eb(0x5d9)]())return;if(!$gameSystem[_0x23e8eb(0x7a6)]())return;VisuMZ[_0x23e8eb(0x9ef)](_0x210a8f,_0x210a8f);const _0x5ac672=$gameTemp[_0x23e8eb(0x87a)](),_0x1286d6=VisuMZ[_0x23e8eb(0xb6b)](_0x210a8f[_0x23e8eb(0x312)]),_0x2ac1fa=_0x210a8f[_0x23e8eb(0x453)],_0x2c7647=_0x210a8f['DistanceX'],_0x374d79=_0x210a8f[_0x23e8eb(0x48e)],_0x3e507c=_0x210a8f[_0x23e8eb(0x642)],_0x171c62=_0x210a8f[_0x23e8eb(0x290)],_0x1bd0e8=_0x210a8f[_0x23e8eb(0x943)],_0x44f248=_0x210a8f[_0x23e8eb(0x1e1)],_0xa6ab0b=_0x210a8f['WaitForMovement'];if(!_0x5ac672)return;for(const _0x2e9883 of _0x1286d6){if(!_0x2e9883)continue;let _0x39e532=_0x2c7647,_0xcabbf6=_0x374d79;if(_0x2ac1fa[_0x23e8eb(0x7c1)](/horz/i))_0x39e532*=_0x2e9883['isActor']()?-0x1:0x1;if(_0x2ac1fa[_0x23e8eb(0x7c1)](/vert/i))_0xcabbf6*=_0x2e9883[_0x23e8eb(0x6c3)]()?-0x1:0x1;_0x2e9883['moveBattlerHomeDistance'](_0x39e532,_0xcabbf6,_0x3e507c,_0x171c62,_0x1bd0e8),_0x2e9883[_0x23e8eb(0x2a8)](_0x44f248);}if(_0xa6ab0b)_0x5ac672[_0x23e8eb(0xa7e)](_0x23e8eb(0x56b));}),PluginManager[_0x33ee77(0x274)](pluginData[_0x33ee77(0xac3)],'ActSeq_Movement_HomeMoveToJsPoint',_0x555d75=>{const _0xde9510=_0x33ee77;if(!SceneManager[_0xde9510(0x5d9)]())return;if(!$gameSystem[_0xde9510(0x7a6)]())return;VisuMZ[_0xde9510(0x9ef)](_0x555d75,_0x555d75);const _0x45c19e=$gameTemp[_0xde9510(0x87a)](),_0x5a7da4=VisuMZ[_0xde9510(0xb6b)](_0x555d75[_0xde9510(0x312)]),_0x35dec2=_0x555d75[_0xde9510(0x2fd)],_0x9d5a88=_0x555d75[_0xde9510(0x680)],_0x3a6a99=_0x555d75['OffsetY'],_0x1bd701=_0x555d75[_0xde9510(0x642)],_0x2150ff=_0x555d75[_0xde9510(0x290)],_0x38044c=_0x555d75[_0xde9510(0x943)],_0x23c477=_0x555d75[_0xde9510(0x1e1)],_0x210d0d=_0x555d75[_0xde9510(0xbba)];if(!_0x45c19e)return;for(const _0x166f3b of _0x5a7da4){if(!_0x166f3b)continue;const _0x2c58e6=_0x555d75[_0xde9510(0x5d8)](_0x166f3b)||{'x':0x0,'y':0x0};let _0x4d77c7=_0x2c58e6['x'],_0x2afa6=_0x2c58e6['y'];if(_0x35dec2[_0xde9510(0x7c1)](/none/i))_0x4d77c7+=_0x9d5a88,_0x2afa6+=_0x3a6a99;else{if(_0x35dec2[_0xde9510(0x7c1)](/horz/i)&&_0x35dec2[_0xde9510(0x7c1)](/vert/i))_0x4d77c7+=_0x166f3b['isActor']()?-_0x9d5a88:_0x9d5a88,_0x2afa6+=_0x166f3b[_0xde9510(0x6c3)]()?-_0x3a6a99:_0x3a6a99;else{if(_0x35dec2[_0xde9510(0x7c1)](/horz/i))_0x4d77c7+=_0x166f3b[_0xde9510(0x6c3)]()?-_0x9d5a88:_0x9d5a88,_0x2afa6+=_0x3a6a99;else _0x35dec2[_0xde9510(0x7c1)](/vert/i)&&(_0x4d77c7+=_0x9d5a88,_0x2afa6+=_0x166f3b[_0xde9510(0x6c3)]()?-_0x3a6a99:_0x3a6a99);}}_0x166f3b[_0xde9510(0xbc7)](_0x4d77c7,_0x2afa6,_0x1bd701,_0x2150ff,_0x38044c,-0x1),_0x166f3b[_0xde9510(0x2a8)](_0x23c477);}if(_0x210d0d)_0x45c19e[_0xde9510(0xa7e)](_0xde9510(0x56b));}),PluginManager[_0x33ee77(0x274)](pluginData[_0x33ee77(0xac3)],_0x33ee77(0xbe5),_0x2229c8=>{const _0x182647=_0x33ee77;if(!SceneManager[_0x182647(0x5d9)]())return;if(!$gameSystem[_0x182647(0x7a6)]())return;VisuMZ['ConvertParams'](_0x2229c8,_0x2229c8);const _0x35e88f=$gameTemp['getLastPluginCommandInterpreter'](),_0x58df99=VisuMZ[_0x182647(0xb6b)](_0x2229c8[_0x182647(0x312)]),_0x862753=_0x2229c8[_0x182647(0x341)],_0x32bd8b=_0x2229c8['OffsetAdjust'],_0x188c9b=_0x2229c8[_0x182647(0x680)],_0x9a9980=_0x2229c8['OffsetY'],_0x561cb2=_0x2229c8[_0x182647(0x642)],_0xf5a76c=_0x2229c8[_0x182647(0x290)],_0x5b3888=_0x2229c8[_0x182647(0x943)],_0x375d9d=_0x2229c8[_0x182647(0x1e1)],_0x436b6b=_0x2229c8[_0x182647(0xbba)];if(!_0x35e88f)return;for(const _0x540955 of _0x58df99){if(!_0x540955)continue;let _0x3185e5=_0x540955[_0x182647(0x157)]()['_baseX'],_0x58906c=_0x540955['battler']()[_0x182647(0x74a)];if(_0x862753[_0x182647(0x7c1)](/home/i))_0x3185e5=_0x540955[_0x182647(0x157)]()['_homeX'],_0x58906c=_0x540955[_0x182647(0x157)]()[_0x182647(0xab7)];else{if(_0x862753[_0x182647(0x7c1)](/center/i))_0x3185e5=Graphics[_0x182647(0x71a)]/0x2,_0x58906c=Graphics[_0x182647(0x238)]/0x2;else _0x862753[_0x182647(0x7c1)](/point (\d+), (\d+)/i)&&(_0x3185e5=Number(RegExp['$1']),_0x58906c=Number(RegExp['$2']));}if(_0x32bd8b[_0x182647(0x7c1)](/none/i))_0x3185e5+=_0x188c9b,_0x58906c+=_0x9a9980;else{if(_0x32bd8b['match'](/horz/i)&&_0x32bd8b[_0x182647(0x7c1)](/vert/i))_0x3185e5+=_0x540955[_0x182647(0x6c3)]()?-_0x188c9b:_0x188c9b,_0x58906c+=_0x540955[_0x182647(0x6c3)]()?-_0x9a9980:_0x9a9980;else{if(_0x32bd8b[_0x182647(0x7c1)](/horz/i))_0x3185e5+=_0x540955[_0x182647(0x6c3)]()?-_0x188c9b:_0x188c9b,_0x58906c+=_0x9a9980;else _0x32bd8b[_0x182647(0x7c1)](/vert/i)&&(_0x3185e5+=_0x188c9b,_0x58906c+=_0x540955[_0x182647(0x6c3)]()?-_0x9a9980:_0x9a9980);}}_0x540955[_0x182647(0xbc7)](_0x3185e5,_0x58906c,_0x561cb2,_0xf5a76c,_0x5b3888,-0x1),_0x540955[_0x182647(0x2a8)](_0x375d9d);}if(_0x436b6b)_0x35e88f['setWaitMode'](_0x182647(0x56b));}),PluginManager[_0x33ee77(0x274)](pluginData['name'],_0x33ee77(0x575),_0x4958aa=>{const _0x52255b=_0x33ee77;if(!SceneManager[_0x52255b(0x5d9)]())return;if(!$gameSystem[_0x52255b(0x7a6)]())return;VisuMZ['ConvertParams'](_0x4958aa,_0x4958aa);const _0x153c5b=$gameTemp['getLastPluginCommandInterpreter'](),_0x190854=VisuMZ['CreateActionSequenceTargets'](_0x4958aa[_0x52255b(0xbad)]),_0x4b9e12=VisuMZ['CreateActionSequenceTargets'](_0x4958aa['Targets2']),_0x196325=_0x4958aa[_0x52255b(0x763)];let _0x3b366f=_0x4958aa['MeleeDistance'];const _0x292693=_0x4958aa[_0x52255b(0x2fd)],_0x13ec81=_0x4958aa[_0x52255b(0x680)],_0x1feb77=_0x4958aa[_0x52255b(0x995)],_0x30ca1c=_0x4958aa[_0x52255b(0x642)],_0x29dc74=_0x4958aa[_0x52255b(0x290)],_0x4059f9=_0x4958aa['EasingType'],_0xd2603d=_0x4958aa['MotionType'],_0x1cf1d9=_0x4958aa[_0x52255b(0xbba)],_0x160ee7=Math[_0x52255b(0x480)](..._0x4b9e12[_0x52255b(0x6f2)](_0x2ee983=>_0x2ee983[_0x52255b(0x157)]()[_0x52255b(0x1f7)]-_0x2ee983[_0x52255b(0x157)]()[_0x52255b(0x776)]()/0x2)),_0xa04a0f=Math[_0x52255b(0x657)](..._0x4b9e12['map'](_0x53f802=>_0x53f802[_0x52255b(0x157)]()[_0x52255b(0x1f7)]+_0x53f802[_0x52255b(0x157)]()[_0x52255b(0x776)]()/0x2)),_0x4d14fe=Math[_0x52255b(0x480)](..._0x4b9e12[_0x52255b(0x6f2)](_0x566300=>_0x566300[_0x52255b(0x157)]()['_baseY']-_0x566300[_0x52255b(0x157)]()[_0x52255b(0xafe)]())),_0x23fd75=Math[_0x52255b(0x657)](..._0x4b9e12['map'](_0x5d056e=>_0x5d056e[_0x52255b(0x157)]()[_0x52255b(0x74a)])),_0x5b22aa=_0x4b9e12[_0x52255b(0x313)](_0x3dafa9=>_0x3dafa9['isActor']())[_0x52255b(0x70c)],_0x5b844c=_0x4b9e12[_0x52255b(0x313)](_0x58e687=>_0x58e687['isEnemy']())[_0x52255b(0x70c)];let _0x456e70=0x0,_0x25e978=0x0;if(_0x196325[_0x52255b(0x7c1)](/front/i))_0x456e70=_0x5b22aa>=_0x5b844c?_0x160ee7:_0xa04a0f;else{if(_0x196325['match'](/middle/i))_0x456e70=(_0x160ee7+_0xa04a0f)/0x2,_0x3b366f=-0x1;else _0x196325['match'](/back/i)&&(_0x456e70=_0x5b22aa>=_0x5b844c?_0xa04a0f:_0x160ee7);}if(_0x196325['match'](/head/i))_0x25e978=_0x4d14fe;else{if(_0x196325['match'](/center/i))_0x25e978=(_0x4d14fe+_0x23fd75)/0x2;else _0x196325[_0x52255b(0x7c1)](/base/i)&&(_0x25e978=_0x23fd75);}if(!_0x153c5b)return;for(const _0x3e8a5e of _0x190854){if(!_0x3e8a5e)continue;let _0x508d65=_0x456e70,_0x278ef0=_0x25e978;if(_0x292693[_0x52255b(0x7c1)](/none/i))_0x508d65+=_0x13ec81,_0x278ef0+=_0x1feb77;else{if(_0x292693['match'](/horz/i)&&_0x292693[_0x52255b(0x7c1)](/vert/i))_0x508d65+=_0x3e8a5e['isActor']()?-_0x13ec81:_0x13ec81,_0x278ef0+=_0x3e8a5e[_0x52255b(0x6c3)]()?-_0x1feb77:_0x1feb77;else{if(_0x292693[_0x52255b(0x7c1)](/horz/i))_0x508d65+=_0x3e8a5e[_0x52255b(0x6c3)]()?-_0x13ec81:_0x13ec81,_0x278ef0+=_0x1feb77;else _0x292693[_0x52255b(0x7c1)](/vert/i)&&(_0x508d65+=_0x13ec81,_0x278ef0+=_0x3e8a5e['isActor']()?-_0x1feb77:_0x1feb77);}}_0x3e8a5e[_0x52255b(0xbc7)](_0x508d65,_0x278ef0,_0x30ca1c,_0x29dc74,_0x4059f9,_0x3b366f),_0x3e8a5e['requestMotion'](_0xd2603d);}if(_0x1cf1d9)_0x153c5b[_0x52255b(0xa7e)](_0x52255b(0x56b));}),PluginManager[_0x33ee77(0x274)](pluginData['name'],_0x33ee77(0xa51),_0x1186bf=>{const _0x12445d=_0x33ee77;if(!SceneManager[_0x12445d(0x5d9)]())return;if(!$gameSystem[_0x12445d(0x7a6)]())return;VisuMZ[_0x12445d(0x9ef)](_0x1186bf,_0x1186bf);const _0x3ee6cd=VisuMZ['CreateActionSequenceTargets'](_0x1186bf['Targets']);let _0x422d70=_0x1186bf[_0x12445d(0x7af)]['match'](/back/i);for(const _0x4c617f of _0x3ee6cd){if(!_0x4c617f)continue;if(_0x1186bf[_0x12445d(0x7af)][_0x12445d(0x7c1)](/rand/i))_0x422d70=Math['randomInt'](0x2);_0x4c617f[_0x12445d(0xa7b)](!!_0x422d70);}}),PluginManager[_0x33ee77(0x274)](pluginData[_0x33ee77(0xac3)],'ActSeq_Movement_FaceJsPoint',_0x3a779e=>{const _0x37c064=_0x33ee77;if(!SceneManager[_0x37c064(0x5d9)]())return;if(!$gameSystem[_0x37c064(0x7a6)]())return;VisuMZ[_0x37c064(0x9ef)](_0x3a779e,_0x3a779e);const _0x5c8891=VisuMZ[_0x37c064(0xb6b)](_0x3a779e[_0x37c064(0x312)]),_0x2b3def=_0x3a779e[_0x37c064(0x70b)];for(const _0x314a8e of _0x5c8891){if(!_0x314a8e)continue;const _0x5500fa=_0x3a779e[_0x37c064(0x80a)](_0x314a8e)||{'x':0x0,'y':0x0};let _0xafa78=_0x5500fa['x'],_0x1db1ee=_0x5500fa['y'];_0x314a8e[_0x37c064(0x3e1)](Math['round'](_0xafa78),Math[_0x37c064(0x20e)](_0x1db1ee),!!_0x2b3def);}}),PluginManager[_0x33ee77(0x274)](pluginData[_0x33ee77(0xac3)],'ActSeq_Movement_FacePoint',_0x236d95=>{const _0x41e3f4=_0x33ee77;if(!SceneManager[_0x41e3f4(0x5d9)]())return;if(!$gameSystem[_0x41e3f4(0x7a6)]())return;VisuMZ[_0x41e3f4(0x9ef)](_0x236d95,_0x236d95);const _0x4277f5=VisuMZ[_0x41e3f4(0xb6b)](_0x236d95[_0x41e3f4(0x312)]);let _0xc0e188=_0x236d95[_0x41e3f4(0xb04)];const _0x328514=_0x236d95['FaceAway'];for(const _0x253dd5 of _0x4277f5){if(!_0x253dd5)continue;let _0x27ab59=_0x253dd5[_0x41e3f4(0x157)]()[_0x41e3f4(0x1f7)],_0x71f7d4=_0x253dd5[_0x41e3f4(0x157)]()[_0x41e3f4(0x74a)];if(_0xc0e188[_0x41e3f4(0x7c1)](/home/i))_0x27ab59=_0x253dd5[_0x41e3f4(0x157)]()[_0x41e3f4(0x2ca)],_0x71f7d4=_0x253dd5[_0x41e3f4(0x157)]()['_homeY'];else{if(_0xc0e188['match'](/center/i))_0x27ab59=Graphics[_0x41e3f4(0x71a)]/0x2,_0x71f7d4=Graphics['boxHeight']/0x2;else _0xc0e188[_0x41e3f4(0x7c1)](/point (\d+), (\d+)/i)&&(_0x27ab59=Number(RegExp['$1']),_0x71f7d4=Number(RegExp['$2']));}_0x253dd5[_0x41e3f4(0x3e1)](Math['round'](_0x27ab59),Math[_0x41e3f4(0x20e)](_0x71f7d4),!!_0x328514);}}),PluginManager[_0x33ee77(0x274)](pluginData[_0x33ee77(0xac3)],_0x33ee77(0x8ca),_0x13c466=>{const _0x27d258=_0x33ee77;if(!SceneManager[_0x27d258(0x5d9)]())return;if(!$gameSystem[_0x27d258(0x7a6)]())return;VisuMZ[_0x27d258(0x9ef)](_0x13c466,_0x13c466);const _0x354001=VisuMZ[_0x27d258(0xb6b)](_0x13c466['Targets1']),_0x11641e=VisuMZ['CreateActionSequenceTargets'](_0x13c466['Targets2']),_0x680170=_0x11641e['map'](_0xdf7706=>_0xdf7706&&_0xdf7706['battler']()?_0xdf7706[_0x27d258(0x157)]()[_0x27d258(0x1f7)]:0x0)/(_0x11641e['length']||0x1),_0x9ee50b=_0x11641e[_0x27d258(0x6f2)](_0x318312=>_0x318312&&_0x318312['battler']()?_0x318312[_0x27d258(0x157)]()[_0x27d258(0x74a)]:0x0)/(_0x11641e[_0x27d258(0x70c)]||0x1),_0x217add=_0x13c466[_0x27d258(0x70b)];for(const _0x36e7b6 of _0x354001){if(!_0x36e7b6)continue;_0x36e7b6['setBattlerFacePoint'](Math[_0x27d258(0x20e)](_0x680170),Math[_0x27d258(0x20e)](_0x9ee50b),!!_0x217add);}}),PluginManager[_0x33ee77(0x274)](pluginData[_0x33ee77(0xac3)],_0x33ee77(0x439),_0x4fe9f7=>{const _0x341c3c=_0x33ee77;if(!SceneManager[_0x341c3c(0x5d9)]())return;VisuMZ[_0x341c3c(0x9ef)](_0x4fe9f7,_0x4fe9f7);const _0x1b1704=$gameTemp[_0x341c3c(0x87a)](),_0x22a226=VisuMZ[_0x341c3c(0xb6b)](_0x4fe9f7[_0x341c3c(0x312)]),_0x3d2a21=_0x4fe9f7['Height'],_0x256fe6=_0x4fe9f7[_0x341c3c(0x642)],_0x123748=_0x4fe9f7[_0x341c3c(0x943)],_0x51cc21=_0x4fe9f7['WaitForFloat'];if(!_0x1b1704)return;for(const _0x423797 of _0x22a226){if(!_0x423797)continue;_0x423797[_0x341c3c(0x3d5)](_0x3d2a21,_0x256fe6,_0x123748);}if(_0x51cc21)_0x1b1704['setWaitMode']('battleFloat');}),PluginManager[_0x33ee77(0x274)](pluginData['name'],_0x33ee77(0x861),_0x22db07=>{const _0x1be035=_0x33ee77;if(!SceneManager['isSceneBattle']())return;VisuMZ['ConvertParams'](_0x22db07,_0x22db07);const _0x258e82=$gameTemp[_0x1be035(0x87a)]();if(!_0x258e82)return;const _0x3e8370=VisuMZ['CreateActionSequenceTargets'](_0x22db07[_0x1be035(0x312)]);for(const _0x54af34 of _0x3e8370){if(!_0x54af34)continue;_0x54af34[_0x1be035(0x626)]();}BattleManager[_0x1be035(0x7c0)]&&BattleManager[_0x1be035(0x7c0)]['performActionEnd']();if(_0x22db07['WaitForMovement'])_0x258e82[_0x1be035(0xa7e)]('battleMove');}),PluginManager[_0x33ee77(0x274)](pluginData[_0x33ee77(0xac3)],_0x33ee77(0x382),_0x47b23d=>{const _0x533662=_0x33ee77;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x533662(0x9ef)](_0x47b23d,_0x47b23d);const _0x11e574=$gameTemp[_0x533662(0x87a)](),_0x5dd250=VisuMZ['CreateActionSequenceTargets'](_0x47b23d[_0x533662(0x312)]),_0x338a5b=_0x47b23d[_0x533662(0xb7b)],_0x53f3f7=_0x47b23d[_0x533662(0x642)],_0x5058b0=_0x47b23d[_0x533662(0xa9a)];if(!_0x11e574)return;for(const _0x53c581 of _0x5dd250){if(!_0x53c581)continue;_0x53c581['jumpBattler'](_0x338a5b,_0x53f3f7);}if(_0x5058b0)_0x11e574['setWaitMode'](_0x533662(0x14c));}),PluginManager['registerCommand'](pluginData[_0x33ee77(0xac3)],_0x33ee77(0x349),_0x294201=>{const _0x3dc804=_0x33ee77;if(!SceneManager[_0x3dc804(0x5d9)]())return;if(!$gameSystem[_0x3dc804(0x7a6)]())return;VisuMZ[_0x3dc804(0x9ef)](_0x294201,_0x294201);const _0x346a32=$gameTemp[_0x3dc804(0x87a)](),_0x505932=VisuMZ['CreateActionSequenceTargets'](_0x294201['Targets']),_0x27fb31=_0x294201[_0x3dc804(0x453)],_0x1600b0=_0x294201[_0x3dc804(0x76d)],_0xd62dcf=_0x294201['DistanceY'],_0x491101=_0x294201[_0x3dc804(0x642)],_0x416ea2=_0x294201['FaceDirection'],_0x320a69=_0x294201[_0x3dc804(0x943)],_0xd2b447=_0x294201[_0x3dc804(0x1e1)],_0x3dc9a4=_0x294201[_0x3dc804(0xbba)];if(!_0x346a32)return;for(const _0x44259f of _0x505932){if(!_0x44259f)continue;let _0x4402f9=_0x1600b0,_0x58b7e3=_0xd62dcf;if(_0x27fb31[_0x3dc804(0x7c1)](/horz/i))_0x4402f9*=_0x44259f['isActor']()?-0x1:0x1;if(_0x27fb31[_0x3dc804(0x7c1)](/vert/i))_0x58b7e3*=_0x44259f['isActor']()?-0x1:0x1;_0x44259f[_0x3dc804(0x5f1)](_0x4402f9,_0x58b7e3,_0x491101,_0x416ea2,_0x320a69),_0x44259f[_0x3dc804(0x2a8)](_0xd2b447);}if(_0x3dc9a4)_0x346a32[_0x3dc804(0xa7e)](_0x3dc804(0x56b));}),PluginManager[_0x33ee77(0x274)](pluginData[_0x33ee77(0xac3)],_0x33ee77(0x814),_0x289c80=>{const _0x451b74=_0x33ee77;if(!SceneManager['isSceneBattle']())return;if(!$gameSystem[_0x451b74(0x7a6)]())return;VisuMZ[_0x451b74(0x9ef)](_0x289c80,_0x289c80);const _0x3dfa89=$gameTemp[_0x451b74(0x87a)](),_0x472e41=VisuMZ[_0x451b74(0xb6b)](_0x289c80['Targets']),_0x5a0ad4=_0x289c80[_0x451b74(0x2fd)],_0x4bdcf4=_0x289c80[_0x451b74(0x680)],_0x4f2317=_0x289c80[_0x451b74(0x995)],_0x44bc04=_0x289c80['Duration'],_0x1d07f7=_0x289c80['FaceDirection'],_0x4e891d=_0x289c80[_0x451b74(0x943)],_0x5b7d17=_0x289c80[_0x451b74(0x1e1)],_0x5d18e6=_0x289c80[_0x451b74(0xbba)];if(!_0x3dfa89)return;for(const _0x5a1766 of _0x472e41){if(!_0x5a1766)continue;const _0x1e8c35=_0x289c80[_0x451b74(0x5d8)](_0x5a1766)||{'x':0x0,'y':0x0};let _0x269482=_0x1e8c35['x'],_0x50528d=_0x1e8c35['y'];if(_0x5a0ad4[_0x451b74(0x7c1)](/none/i))_0x269482+=_0x4bdcf4,_0x50528d+=_0x4f2317;else{if(_0x5a0ad4[_0x451b74(0x7c1)](/horz/i)&&_0x5a0ad4['match'](/vert/i))_0x269482+=_0x5a1766[_0x451b74(0x6c3)]()?-_0x4bdcf4:_0x4bdcf4,_0x50528d+=_0x5a1766[_0x451b74(0x6c3)]()?-_0x4f2317:_0x4f2317;else{if(_0x5a0ad4['match'](/horz/i))_0x269482+=_0x5a1766[_0x451b74(0x6c3)]()?-_0x4bdcf4:_0x4bdcf4,_0x50528d+=_0x4f2317;else _0x5a0ad4[_0x451b74(0x7c1)](/vert/i)&&(_0x269482+=_0x4bdcf4,_0x50528d+=_0x5a1766[_0x451b74(0x6c3)]()?-_0x4f2317:_0x4f2317);}}_0x5a1766[_0x451b74(0x511)](_0x269482,_0x50528d,_0x44bc04,_0x1d07f7,_0x4e891d,-0x1),_0x5a1766[_0x451b74(0x2a8)](_0x5b7d17);}if(_0x5d18e6)_0x3dfa89['setWaitMode'](_0x451b74(0x56b));}),PluginManager['registerCommand'](pluginData[_0x33ee77(0xac3)],'ActSeq_Movement_MoveToPoint',_0x4f58d3=>{const _0x577243=_0x33ee77;if(!SceneManager[_0x577243(0x5d9)]())return;if(!$gameSystem[_0x577243(0x7a6)]())return;VisuMZ[_0x577243(0x9ef)](_0x4f58d3,_0x4f58d3);const _0x506ece=$gameTemp[_0x577243(0x87a)](),_0xb01138=VisuMZ['CreateActionSequenceTargets'](_0x4f58d3[_0x577243(0x312)]),_0x2903e7=_0x4f58d3[_0x577243(0x341)],_0x2db5c2=_0x4f58d3[_0x577243(0x2fd)],_0x1314a5=_0x4f58d3['OffsetX'],_0x22e50b=_0x4f58d3[_0x577243(0x995)],_0x200e2d=_0x4f58d3[_0x577243(0x642)],_0x231bfe=_0x4f58d3[_0x577243(0x290)],_0x48786f=_0x4f58d3[_0x577243(0x943)],_0x518478=_0x4f58d3[_0x577243(0x1e1)],_0x41093b=_0x4f58d3[_0x577243(0xbba)];if(!_0x506ece)return;for(const _0x3d8aff of _0xb01138){if(!_0x3d8aff)continue;let _0x3fa0c0=_0x3d8aff['battler']()[_0x577243(0x1f7)],_0x3eb75c=_0x3d8aff[_0x577243(0x157)]()[_0x577243(0x74a)];if(_0x2903e7[_0x577243(0x7c1)](/home/i))_0x3fa0c0=_0x3d8aff[_0x577243(0x157)]()[_0x577243(0x2ca)],_0x3eb75c=_0x3d8aff['battler']()[_0x577243(0xab7)];else{if(_0x2903e7[_0x577243(0x7c1)](/center/i))_0x3fa0c0=Graphics[_0x577243(0x71a)]/0x2,_0x3eb75c=Graphics[_0x577243(0x238)]/0x2;else _0x2903e7['match'](/point (\d+), (\d+)/i)&&(_0x3fa0c0=Number(RegExp['$1']),_0x3eb75c=Number(RegExp['$2']));}if(_0x2db5c2[_0x577243(0x7c1)](/none/i))_0x3fa0c0+=_0x1314a5,_0x3eb75c+=_0x22e50b;else{if(_0x2db5c2[_0x577243(0x7c1)](/horz/i)&&_0x2db5c2['match'](/vert/i))_0x3fa0c0+=_0x3d8aff[_0x577243(0x6c3)]()?-_0x1314a5:_0x1314a5,_0x3eb75c+=_0x3d8aff[_0x577243(0x6c3)]()?-_0x22e50b:_0x22e50b;else{if(_0x2db5c2['match'](/horz/i))_0x3fa0c0+=_0x3d8aff[_0x577243(0x6c3)]()?-_0x1314a5:_0x1314a5,_0x3eb75c+=_0x22e50b;else _0x2db5c2['match'](/vert/i)&&(_0x3fa0c0+=_0x1314a5,_0x3eb75c+=_0x3d8aff[_0x577243(0x6c3)]()?-_0x22e50b:_0x22e50b);}}_0x3d8aff['moveBattlerToPoint'](_0x3fa0c0,_0x3eb75c,_0x200e2d,_0x231bfe,_0x48786f,-0x1),_0x3d8aff[_0x577243(0x2a8)](_0x518478);}if(_0x41093b)_0x506ece[_0x577243(0xa7e)]('battleMove');}),PluginManager[_0x33ee77(0x274)](pluginData[_0x33ee77(0xac3)],_0x33ee77(0xc0e),_0x43e065=>{const _0x370d36=_0x33ee77;if(!SceneManager[_0x370d36(0x5d9)]())return;if(!$gameSystem[_0x370d36(0x7a6)]())return;VisuMZ[_0x370d36(0x9ef)](_0x43e065,_0x43e065);const _0x583ef9=$gameTemp[_0x370d36(0x87a)](),_0x51b4d9=VisuMZ[_0x370d36(0xb6b)](_0x43e065['Targets1']),_0x375e4c=VisuMZ[_0x370d36(0xb6b)](_0x43e065[_0x370d36(0x326)]),_0x31e7b6=_0x43e065['TargetLocation'];let _0x3ffef1=_0x43e065[_0x370d36(0x773)];const _0x1677f5=_0x43e065[_0x370d36(0x2fd)],_0xe00082=_0x43e065[_0x370d36(0x680)],_0x3791b0=_0x43e065[_0x370d36(0x995)],_0x367442=_0x43e065[_0x370d36(0x642)],_0x40dbe4=_0x43e065[_0x370d36(0x290)],_0x251872=_0x43e065[_0x370d36(0x943)],_0x110e53=_0x43e065[_0x370d36(0x1e1)],_0x297fbe=_0x43e065[_0x370d36(0xbba)],_0x529458=Math['min'](..._0x375e4c['map'](_0xc49ea=>_0xc49ea[_0x370d36(0x157)]()[_0x370d36(0x1f7)]-_0xc49ea[_0x370d36(0x157)]()[_0x370d36(0x776)]()/0x2)),_0x7e912c=Math[_0x370d36(0x657)](..._0x375e4c[_0x370d36(0x6f2)](_0x48c774=>_0x48c774[_0x370d36(0x157)]()[_0x370d36(0x1f7)]+_0x48c774[_0x370d36(0x157)]()[_0x370d36(0x776)]()/0x2)),_0x41f3ea=Math[_0x370d36(0x480)](..._0x375e4c['map'](_0xa53dfc=>_0xa53dfc[_0x370d36(0x157)]()[_0x370d36(0x74a)]-_0xa53dfc['battler']()['mainSpriteHeight']())),_0x1382bc=Math[_0x370d36(0x657)](..._0x375e4c['map'](_0xed4caf=>_0xed4caf['battler']()[_0x370d36(0x74a)])),_0x537d09=_0x375e4c['filter'](_0x3cefb4=>_0x3cefb4[_0x370d36(0x6c3)]())[_0x370d36(0x70c)],_0x139672=_0x375e4c[_0x370d36(0x313)](_0x13fe20=>_0x13fe20[_0x370d36(0x43e)]())['length'];let _0x4cae7a=0x0,_0x4e0dba=0x0;if(_0x31e7b6[_0x370d36(0x7c1)](/front/i))_0x4cae7a=_0x537d09>=_0x139672?_0x529458:_0x7e912c;else{if(_0x31e7b6[_0x370d36(0x7c1)](/middle/i))_0x4cae7a=(_0x529458+_0x7e912c)/0x2,_0x3ffef1=-0x1;else _0x31e7b6[_0x370d36(0x7c1)](/back/i)&&(_0x4cae7a=_0x537d09>=_0x139672?_0x7e912c:_0x529458);}if(_0x31e7b6[_0x370d36(0x7c1)](/head/i))_0x4e0dba=_0x41f3ea;else{if(_0x31e7b6['match'](/center/i))_0x4e0dba=(_0x41f3ea+_0x1382bc)/0x2;else _0x31e7b6[_0x370d36(0x7c1)](/base/i)&&(_0x4e0dba=_0x1382bc);}if(!_0x583ef9)return;for(const _0x47363a of _0x51b4d9){if(!_0x47363a)continue;let _0x4b06ef=_0x4cae7a,_0x4c16dd=_0x4e0dba;if(_0x1677f5[_0x370d36(0x7c1)](/none/i))_0x4b06ef+=_0xe00082,_0x4c16dd+=_0x3791b0;else{if(_0x1677f5[_0x370d36(0x7c1)](/horz/i)&&_0x1677f5[_0x370d36(0x7c1)](/vert/i))_0x4b06ef+=_0x47363a[_0x370d36(0x6c3)]()?-_0xe00082:_0xe00082,_0x4c16dd+=_0x47363a[_0x370d36(0x6c3)]()?-_0x3791b0:_0x3791b0;else{if(_0x1677f5[_0x370d36(0x7c1)](/horz/i))_0x4b06ef+=_0x47363a['isActor']()?-_0xe00082:_0xe00082,_0x4c16dd+=_0x3791b0;else _0x1677f5[_0x370d36(0x7c1)](/vert/i)&&(_0x4b06ef+=_0xe00082,_0x4c16dd+=_0x47363a['isActor']()?-_0x3791b0:_0x3791b0);}}_0x47363a['moveBattlerToPoint'](_0x4b06ef,_0x4c16dd,_0x367442,_0x40dbe4,_0x251872,_0x3ffef1),_0x47363a[_0x370d36(0x2a8)](_0x110e53);}if(_0x297fbe)_0x583ef9[_0x370d36(0xa7e)](_0x370d36(0x56b));}),PluginManager[_0x33ee77(0x274)](pluginData[_0x33ee77(0xac3)],_0x33ee77(0x6dc),_0x35fac1=>{const _0x3d9137=_0x33ee77;if(!SceneManager[_0x3d9137(0x5d9)]())return;VisuMZ[_0x3d9137(0x9ef)](_0x35fac1,_0x35fac1);const _0x2394ff=$gameTemp[_0x3d9137(0x87a)](),_0x439ebd=VisuMZ[_0x3d9137(0xb6b)](_0x35fac1[_0x3d9137(0x312)]),_0x244ab4=_0x35fac1[_0x3d9137(0x487)],_0x1c4261=_0x35fac1[_0x3d9137(0x642)],_0x851116=_0x35fac1[_0x3d9137(0x943)],_0x4aa0ce=_0x35fac1['WaitForOpacity'];if(!_0x2394ff)return;for(const _0x19a1c8 of _0x439ebd){if(!_0x19a1c8)continue;_0x19a1c8['changeBattlerOpacity'](_0x244ab4,_0x1c4261,_0x851116);}if(_0x4aa0ce)_0x2394ff['setWaitMode'](_0x3d9137(0x77b));}),PluginManager['registerCommand'](pluginData[_0x33ee77(0xac3)],_0x33ee77(0x427),_0x190506=>{const _0x1e9867=_0x33ee77;if(!SceneManager[_0x1e9867(0x5d9)]())return;VisuMZ[_0x1e9867(0x9ef)](_0x190506,_0x190506);const _0x35d08b=$gameTemp[_0x1e9867(0x87a)](),_0x34f985=VisuMZ['CreateActionSequenceTargets'](_0x190506[_0x1e9867(0x312)]),_0x419e20=_0x190506[_0x1e9867(0x560)],_0x490cde=_0x190506[_0x1e9867(0x8b9)],_0x1a3f9d=_0x190506['Duration'],_0x474916=_0x190506['EasingType'],_0x1d612c=_0x190506[_0x1e9867(0x394)];if(!_0x35d08b)return;for(const _0x2db696 of _0x34f985){if(!_0x2db696)continue;_0x2db696['growBattler'](_0x419e20,_0x490cde,_0x1a3f9d,_0x474916);}if(_0x1d612c)_0x35d08b[_0x1e9867(0xa7e)](_0x1e9867(0x564));}),PluginManager[_0x33ee77(0x274)](pluginData[_0x33ee77(0xac3)],_0x33ee77(0xa46),_0xcb0207=>{const _0x37af19=_0x33ee77;if(!SceneManager['isSceneBattle']())return;VisuMZ['ConvertParams'](_0xcb0207,_0xcb0207);const _0x13d58c=$gameTemp[_0x37af19(0x87a)](),_0x377b21=VisuMZ['CreateActionSequenceTargets'](_0xcb0207[_0x37af19(0x312)]),_0x56928d=_0xcb0207[_0x37af19(0xacb)],_0x54af8d=_0xcb0207[_0x37af19(0x1c8)],_0x3fea3b=_0xcb0207['Duration'],_0x40666a=_0xcb0207[_0x37af19(0x943)],_0x161b12=_0xcb0207['WaitForSkew'];if(!_0x13d58c)return;for(const _0xa2f1cc of _0x377b21){if(!_0xa2f1cc)continue;_0xa2f1cc[_0x37af19(0x19c)](_0x56928d,_0x54af8d,_0x3fea3b,_0x40666a);}if(_0x161b12)_0x13d58c[_0x37af19(0xa7e)](_0x37af19(0x76b));}),PluginManager['registerCommand'](pluginData[_0x33ee77(0xac3)],'ActSeq_Movement_Spin',_0x1f98ba=>{const _0x482485=_0x33ee77;if(!SceneManager[_0x482485(0x5d9)]())return;VisuMZ[_0x482485(0x9ef)](_0x1f98ba,_0x1f98ba);const _0x645816=$gameTemp[_0x482485(0x87a)](),_0x5480b8=VisuMZ[_0x482485(0xb6b)](_0x1f98ba[_0x482485(0x312)]),_0x50a695=_0x1f98ba[_0x482485(0xacf)],_0xd7cb05=_0x1f98ba[_0x482485(0x642)],_0x5ec658=_0x1f98ba['EasingType'],_0x272e5d=_0x1f98ba[_0x482485(0x8ae)],_0x931c4e=_0x1f98ba[_0x482485(0xaa8)];if(!_0x645816)return;for(const _0x18d7bc of _0x5480b8){if(!_0x18d7bc)continue;_0x18d7bc[_0x482485(0x4f4)](_0x50a695,_0xd7cb05,_0x5ec658,_0x272e5d);}if(_0x931c4e)_0x645816[_0x482485(0xa7e)]('battleSpin');}),PluginManager['registerCommand'](pluginData['name'],'ActSeq_Movement_WaitForFloat',_0x1635bd=>{const _0xa42b66=_0x33ee77;if(!SceneManager[_0xa42b66(0x5d9)]())return;const _0x123bd2=$gameTemp[_0xa42b66(0x87a)]();if(!_0x123bd2)return;_0x123bd2[_0xa42b66(0xa7e)](_0xa42b66(0x8a5));}),PluginManager[_0x33ee77(0x274)](pluginData[_0x33ee77(0xac3)],'ActSeq_Movement_WaitForJump',_0x174c28=>{const _0x40ec61=_0x33ee77;if(!SceneManager['isSceneBattle']())return;const _0x58522f=$gameTemp[_0x40ec61(0x87a)]();if(!_0x58522f)return;_0x58522f[_0x40ec61(0xa7e)](_0x40ec61(0x14c));}),PluginManager[_0x33ee77(0x274)](pluginData[_0x33ee77(0xac3)],_0x33ee77(0x18d),_0x2c5f4e=>{const _0x2f695b=_0x33ee77;if(!SceneManager['isSceneBattle']())return;const _0x34f5e1=$gameTemp[_0x2f695b(0x87a)]();if(!_0x34f5e1)return;_0x34f5e1[_0x2f695b(0xa7e)]('battleMove');}),PluginManager[_0x33ee77(0x274)](pluginData[_0x33ee77(0xac3)],'ActSeq_Movement_WaitForOpacity',_0x46d24b=>{const _0x481ac3=_0x33ee77;if(!SceneManager[_0x481ac3(0x5d9)]())return;const _0x3f1b70=$gameTemp[_0x481ac3(0x87a)]();if(!_0x3f1b70)return;_0x3f1b70['setWaitMode'](_0x481ac3(0x77b));}),PluginManager[_0x33ee77(0x274)](pluginData['name'],_0x33ee77(0xa75),_0x482efc=>{const _0x639662=_0x33ee77;if(!SceneManager[_0x639662(0x5d9)]())return;const _0x4d0ec1=$gameTemp[_0x639662(0x87a)]();if(!_0x4d0ec1)return;_0x4d0ec1[_0x639662(0xa7e)]('battleGrow');}),PluginManager[_0x33ee77(0x274)](pluginData[_0x33ee77(0xac3)],_0x33ee77(0x583),_0x3866bb=>{const _0x2aa9a0=_0x33ee77;if(!SceneManager[_0x2aa9a0(0x5d9)]())return;const _0xd3ae98=$gameTemp[_0x2aa9a0(0x87a)]();if(!_0xd3ae98)return;_0xd3ae98[_0x2aa9a0(0xa7e)](_0x2aa9a0(0x76b));}),PluginManager[_0x33ee77(0x274)](pluginData[_0x33ee77(0xac3)],'ActSeq_Movement_WaitForSpin',_0x2c7a7c=>{const _0x4daf6d=_0x33ee77;if(!SceneManager[_0x4daf6d(0x5d9)]())return;const _0xe9cced=$gameTemp[_0x4daf6d(0x87a)]();if(!_0xe9cced)return;_0xe9cced[_0x4daf6d(0xa7e)](_0x4daf6d(0x2ba));}),VisuMZ[_0x33ee77(0x993)][_0x33ee77(0x852)]=function(){const _0x539777=_0x33ee77;if(!Imported[_0x539777(0x4ca)])return;if(VisuMZ['ActSeqProjectiles'][_0x539777(0x71e)]<1.08){let _0x4c4a93='';_0x4c4a93+=_0x539777(0x3b1),_0x4c4a93+=_0x539777(0x7f2),alert(_0x4c4a93),SceneManager[_0x539777(0x41d)]();}},PluginManager[_0x33ee77(0x274)](pluginData[_0x33ee77(0xac3)],_0x33ee77(0x3ec),_0x43367b=>{const _0x11bbb4=_0x33ee77;if(!SceneManager[_0x11bbb4(0x5d9)]())return;if(!Imported[_0x11bbb4(0x4ca)])return;VisuMZ[_0x11bbb4(0x9ef)](_0x43367b,_0x43367b),VisuMZ[_0x11bbb4(0x993)]['CheckActSeqProjectileVersion']();const _0x21faad=$gameTemp['getLastPluginCommandInterpreter'](),_0x27fa46=_0x43367b[_0x11bbb4(0x468)];if(!_0x21faad)return;const _0x36aaae=BattleManager['_spriteset'];if(!_0x36aaae)return;_0x36aaae['createActionSequenceProjectile'](_0x43367b);if(_0x27fa46)_0x21faad[_0x11bbb4(0xa7e)](_0x11bbb4(0x9af));}),PluginManager[_0x33ee77(0x274)](pluginData[_0x33ee77(0xac3)],_0x33ee77(0x479),_0x5daeb3=>{const _0x17ac29=_0x33ee77;if(!SceneManager[_0x17ac29(0x5d9)]())return;if(!Imported[_0x17ac29(0x4ca)])return;VisuMZ[_0x17ac29(0x9ef)](_0x5daeb3,_0x5daeb3),VisuMZ[_0x17ac29(0x993)][_0x17ac29(0x852)]();const _0x3e55e3=$gameTemp[_0x17ac29(0x87a)](),_0x5b73b3=_0x5daeb3[_0x17ac29(0x468)];if(!_0x3e55e3)return;const _0x53f270=BattleManager['_spriteset'];if(!_0x53f270)return;_0x53f270[_0x17ac29(0x57b)](_0x5daeb3);if(_0x5b73b3)_0x3e55e3[_0x17ac29(0xa7e)]('battleProjectiles');}),PluginManager[_0x33ee77(0x274)](pluginData[_0x33ee77(0xac3)],_0x33ee77(0xb68),_0x51e691=>{const _0x3a72de=_0x33ee77;if(!SceneManager[_0x3a72de(0x5d9)]())return;if(!Imported[_0x3a72de(0x4ca)])return;VisuMZ[_0x3a72de(0x9ef)](_0x51e691,_0x51e691),VisuMZ['BattleCore']['CheckActSeqProjectileVersion']();const _0x2dfbfd=$gameTemp[_0x3a72de(0x87a)](),_0x15ccbe=_0x51e691[_0x3a72de(0x468)];if(!_0x2dfbfd)return;const _0x45f3b5=BattleManager[_0x3a72de(0x850)];if(!_0x45f3b5)return;_0x45f3b5[_0x3a72de(0x57b)](_0x51e691);if(_0x15ccbe)_0x2dfbfd['setWaitMode'](_0x3a72de(0x9af));}),PluginManager['registerCommand'](pluginData[_0x33ee77(0xac3)],_0x33ee77(0x894),_0x39454a=>{const _0x31e1f7=_0x33ee77;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x31e1f7(0x596)])return;VisuMZ[_0x31e1f7(0x9ef)](_0x39454a,_0x39454a);const _0x42f38c=$gameTemp[_0x31e1f7(0x87a)](),_0x3e2e59=_0x39454a[_0x31e1f7(0x93e)];if(!_0x42f38c)return;$gameScreen[_0x31e1f7(0x6d9)](_0x39454a['SkewX'],_0x39454a['SkewY'],_0x39454a[_0x31e1f7(0x642)],_0x39454a['EasingType']);if(_0x3e2e59)_0x42f38c[_0x31e1f7(0xa7e)](_0x31e1f7(0x4d9));}),PluginManager[_0x33ee77(0x274)](pluginData[_0x33ee77(0xac3)],_0x33ee77(0x681),_0x474e76=>{const _0x50f631=_0x33ee77;if(!SceneManager[_0x50f631(0x5d9)]())return;if(!Imported['VisuMZ_3_ActSeqCamera'])return;VisuMZ[_0x50f631(0x9ef)](_0x474e76,_0x474e76);const _0x538491=$gameTemp[_0x50f631(0x87a)](),_0x296e0b=_0x474e76[_0x50f631(0x93e)];if(!_0x538491)return;$gameScreen[_0x50f631(0x6d9)](0x0,0x0,_0x474e76[_0x50f631(0x642)],_0x474e76[_0x50f631(0x943)]);if(_0x296e0b)_0x538491[_0x50f631(0xa7e)]('battleSkew');}),PluginManager['registerCommand'](pluginData[_0x33ee77(0xac3)],_0x33ee77(0x6df),_0x1195d2=>{const _0x4767d0=_0x33ee77;if(!SceneManager[_0x4767d0(0x5d9)]())return;if(!Imported[_0x4767d0(0x596)])return;const _0x25870c=$gameTemp[_0x4767d0(0x87a)]();if(!_0x25870c)return;_0x25870c[_0x4767d0(0xa7e)]('battleSkew');}),PluginManager[_0x33ee77(0x274)](pluginData['name'],_0x33ee77(0x2ef),_0x2d4beb=>{const _0x180aee=_0x33ee77;if(!SceneManager[_0x180aee(0x5d9)]())return;VisuMZ['ConvertParams'](_0x2d4beb,_0x2d4beb);const _0x2a5e19=$gameTemp[_0x180aee(0x87a)](),_0x4800ca=_0x2d4beb[_0x180aee(0x821)],_0x20ca65=_0x2d4beb['JumpToLabel'];if(!_0x2a5e19)return;BattleManager[_0x180aee(0x27a)]=_0x4800ca,BattleManager[_0x180aee(0x608)]=BattleManager[_0x180aee(0x901)]?BattleManager[_0x180aee(0x901)][BattleManager[_0x180aee(0x27a)]]||null:null;if(window['$target'])BattleManager[_0x180aee(0xb25)]();BattleManager[_0x180aee(0x608)]&&_0x20ca65[_0x180aee(0x46b)]()['trim']()!==_0x180aee(0x145)&&_0x2a5e19[_0x180aee(0x4f6)]([_0x20ca65]);}),PluginManager[_0x33ee77(0x274)](pluginData[_0x33ee77(0xac3)],_0x33ee77(0x380),_0x2827ff=>{const _0x436aa2=_0x33ee77;if(!SceneManager[_0x436aa2(0x5d9)]())return;VisuMZ[_0x436aa2(0x9ef)](_0x2827ff,_0x2827ff);const _0x22fae6=$gameTemp[_0x436aa2(0x87a)](),_0x32d828=_0x2827ff[_0x436aa2(0x653)];if(!_0x22fae6)return;BattleManager['_targetIndex']++,BattleManager[_0x436aa2(0x608)]=BattleManager[_0x436aa2(0x901)][BattleManager['_targetIndex']]||null;if(window[_0x436aa2(0x80d)])BattleManager[_0x436aa2(0xb25)]();BattleManager[_0x436aa2(0x608)]&&_0x32d828['toUpperCase']()[_0x436aa2(0xaf2)]()!==_0x436aa2(0x145)&&_0x22fae6[_0x436aa2(0x4f6)]([_0x32d828]);}),PluginManager[_0x33ee77(0x274)](pluginData[_0x33ee77(0xac3)],_0x33ee77(0x779),_0x4886a9=>{const _0x4a0efd=_0x33ee77;if(!SceneManager[_0x4a0efd(0x5d9)]())return;VisuMZ[_0x4a0efd(0x9ef)](_0x4886a9,_0x4886a9);const _0x887811=$gameTemp[_0x4a0efd(0x87a)](),_0x4bc635=_0x4886a9[_0x4a0efd(0x653)];if(!_0x887811)return;BattleManager[_0x4a0efd(0x27a)]--,BattleManager[_0x4a0efd(0x608)]=BattleManager[_0x4a0efd(0x901)][BattleManager[_0x4a0efd(0x27a)]]||null;if(window['$target'])BattleManager['updateBattleVariables']();BattleManager[_0x4a0efd(0x608)]&&_0x4bc635[_0x4a0efd(0x46b)]()['trim']()!=='UNTITLED'&&_0x887811[_0x4a0efd(0x4f6)]([_0x4bc635]);}),PluginManager['registerCommand'](pluginData[_0x33ee77(0xac3)],'ActSeq_Target_RandTarget',_0x1bb9c9=>{const _0x502c94=_0x33ee77;if(!SceneManager[_0x502c94(0x5d9)]())return;VisuMZ[_0x502c94(0x9ef)](_0x1bb9c9,_0x1bb9c9);const _0x28f7c4=$gameTemp[_0x502c94(0x87a)](),_0x2fe188=_0x1bb9c9[_0x502c94(0xbd6)],_0x39ed2c=_0x1bb9c9[_0x502c94(0x653)];if(!_0x28f7c4)return;const _0x28bba2=BattleManager[_0x502c94(0x27a)];for(;;){BattleManager[_0x502c94(0x27a)]=Math[_0x502c94(0x6bb)](BattleManager[_0x502c94(0x901)][_0x502c94(0x70c)]);if(!_0x2fe188)break;if(BattleManager[_0x502c94(0x27a)]!==_0x28bba2)break;if(BattleManager[_0x502c94(0x901)][_0x502c94(0x70c)]<=0x1){BattleManager[_0x502c94(0x27a)]=0x0;break;}}BattleManager[_0x502c94(0x608)]=BattleManager[_0x502c94(0x901)][BattleManager[_0x502c94(0x27a)]]||null;if(window['$target'])BattleManager['updateBattleVariables']();BattleManager[_0x502c94(0x608)]&&_0x39ed2c[_0x502c94(0x46b)]()[_0x502c94(0xaf2)]()!=='UNTITLED'&&_0x28f7c4[_0x502c94(0x4f6)]([_0x39ed2c]);}),PluginManager[_0x33ee77(0x274)](pluginData[_0x33ee77(0xac3)],_0x33ee77(0x38a),_0x97118=>{const _0x1b68c6=_0x33ee77;if(!SceneManager[_0x1b68c6(0x5d9)]())return;if(!Imported[_0x1b68c6(0x488)])return;if(!ConfigManager['battleVoices'])return;VisuMZ[_0x1b68c6(0x9ef)](_0x97118,_0x97118);const _0x53348e=VisuMZ[_0x1b68c6(0xb6b)](_0x97118[_0x1b68c6(0x312)]);let _0x39899c=_0x97118[_0x1b68c6(0x36b)]||'';for(const _0xba8852 of _0x53348e){if(!_0xba8852)continue;_0xba8852['playBattleVoice'](_0x39899c);}}),PluginManager['registerCommand'](pluginData['name'],'ActSeq_BattleVoice_PlaySpecialLine',_0x12e526=>{const _0x27ffb8=_0x33ee77;if(!SceneManager[_0x27ffb8(0x5d9)]())return;if(!Imported[_0x27ffb8(0x488)])return;if(!ConfigManager[_0x27ffb8(0x7b6)])return;VisuMZ[_0x27ffb8(0x9ef)](_0x12e526,_0x12e526);const _0x9333df=VisuMZ[_0x27ffb8(0xb6b)](_0x12e526[_0x27ffb8(0x312)]);let _0x362851=(_0x12e526[_0x27ffb8(0x796)]||'')+(_0x12e526[_0x27ffb8(0x478)]||'');for(const _0x10af82 of _0x9333df){if(!_0x10af82)continue;_0x10af82[_0x27ffb8(0x56a)](_0x362851);}}),PluginManager['registerCommand'](pluginData['name'],_0x33ee77(0x5b4),_0x156b5c=>{const _0x5919cb=_0x33ee77;if(!SceneManager[_0x5919cb(0x5d9)]())return;VisuMZ['ConvertParams'](_0x156b5c,_0x156b5c);const _0x58b1e5=VisuMZ[_0x5919cb(0xb6b)](_0x156b5c[_0x5919cb(0x312)]);for(const _0x330f68 of _0x58b1e5){if(!_0x330f68)continue;if(!_0x330f68[_0x5919cb(0x6c3)]())continue;_0x330f68[_0x5919cb(0xa70)]();}}),PluginManager[_0x33ee77(0x274)](pluginData[_0x33ee77(0xac3)],_0x33ee77(0x896),_0x58b955=>{const _0x4da510=_0x33ee77;if(!SceneManager['isSceneBattle']())return;VisuMZ['ConvertParams'](_0x58b955,_0x58b955);const _0x165e30=$gameTemp['getLastPluginCommandInterpreter']();let _0x55e846=![];const _0x1fb0d6=_0x58b955[_0x4da510(0x653)],_0x3e6ec9=VisuMZ[_0x4da510(0xb6b)](_0x58b955[_0x4da510(0x312)]);for(const _0x411883 of _0x3e6ec9){if(!_0x411883)continue;if(!_0x411883[_0x4da510(0x6c3)]())continue;_0x411883['nextActiveWeaponSlot'](),_0x411883[_0x4da510(0x769)]()['length']>0x0?_0x55e846=!![]:_0x411883['clearActiveWeaponSlot']();}_0x55e846&&_0x1fb0d6[_0x4da510(0x46b)]()[_0x4da510(0xaf2)]()!==_0x4da510(0x145)&&_0x165e30['command119']([_0x1fb0d6]);}),PluginManager[_0x33ee77(0x274)](pluginData[_0x33ee77(0xac3)],_0x33ee77(0x4a5),_0x40fa1b=>{const _0x303124=_0x33ee77;if(!SceneManager['isSceneBattle']())return;VisuMZ['ConvertParams'](_0x40fa1b,_0x40fa1b);let _0x47ed16=_0x40fa1b[_0x303124(0x5af)];_0x47ed16--,_0x47ed16=Math[_0x303124(0x657)](_0x47ed16,0x0);const _0x52bf48=VisuMZ[_0x303124(0xb6b)](_0x40fa1b[_0x303124(0x312)]);for(const _0x53f76e of _0x52bf48){if(!_0x53f76e)continue;if(!_0x53f76e[_0x303124(0x6c3)]())continue;_0x53f76e[_0x303124(0x584)](_0x47ed16);}}),PluginManager[_0x33ee77(0x274)](pluginData[_0x33ee77(0xac3)],_0x33ee77(0x339),_0x59d29e=>{const _0x419d31=_0x33ee77;if(!SceneManager['isSceneBattle']())return;if(!Imported['VisuMZ_3_ActSeqCamera'])return;VisuMZ[_0x419d31(0x9ef)](_0x59d29e,_0x59d29e);const _0x31af14=$gameTemp[_0x419d31(0x87a)](),_0x583de3=_0x59d29e[_0x419d31(0x881)];if(!_0x31af14)return;$gameScreen['setBattleZoom'](_0x59d29e['Scale'],_0x59d29e['Duration'],_0x59d29e[_0x419d31(0x943)]);if(_0x583de3)_0x31af14['setWaitMode'](_0x419d31(0x190));}),PluginManager[_0x33ee77(0x274)](pluginData[_0x33ee77(0xac3)],_0x33ee77(0x530),_0x166734=>{const _0x2478e9=_0x33ee77;if(!SceneManager[_0x2478e9(0x5d9)]())return;if(!Imported[_0x2478e9(0x596)])return;VisuMZ['ConvertParams'](_0x166734,_0x166734);const _0x28bbdb=$gameTemp[_0x2478e9(0x87a)](),_0x12a4cc=_0x166734['WaitForZoom'];if(!_0x28bbdb)return;$gameScreen[_0x2478e9(0x747)](0x1,_0x166734[_0x2478e9(0x642)],_0x166734[_0x2478e9(0x943)]);if(_0x12a4cc)_0x28bbdb[_0x2478e9(0xa7e)](_0x2478e9(0x190));}),PluginManager[_0x33ee77(0x274)](pluginData[_0x33ee77(0xac3)],_0x33ee77(0xc08),_0xb2fd65=>{const _0x4897ff=_0x33ee77;if(!SceneManager[_0x4897ff(0x5d9)]())return;if(!Imported[_0x4897ff(0x596)])return;const _0x2a9f48=$gameTemp[_0x4897ff(0x87a)]();if(!_0x2a9f48)return;_0x2a9f48[_0x4897ff(0xa7e)](_0x4897ff(0x190));}),VisuMZ[_0x33ee77(0x993)]['Scene_Boot_onDatabaseLoaded']=Scene_Boot[_0x33ee77(0x9a7)]['onDatabaseLoaded'],Scene_Boot[_0x33ee77(0x9a7)]['onDatabaseLoaded']=function(){const _0x1f2110=_0x33ee77;this[_0x1f2110(0x9ba)](),this['process_VisuMZ_BattleCore_PluginParams'](),this['process_VisuMZ_BattleCore_DamageStyles'](),this[_0x1f2110(0x77c)](),VisuMZ[_0x1f2110(0x993)][_0x1f2110(0xa74)][_0x1f2110(0x88f)](this),this[_0x1f2110(0x1f2)](),this[_0x1f2110(0xbce)](),this[_0x1f2110(0xc0c)](),this['process_VisuMZ_BattleCore_CommonEventKeys']();},Scene_Boot[_0x33ee77(0x9a7)]['process_VisuMZ_BattleCore_Notetags']=function(){const _0x296658=_0x33ee77;if(VisuMZ[_0x296658(0x26b)])return;this[_0x296658(0xbec)](),this['process_VisuMZ_BattleCore_TraitObject_Notetags'](),this['process_VisuMZ_BattleCore_jsFunctions']();},Scene_Boot[_0x33ee77(0x9a7)][_0x33ee77(0x9ba)]=function(){const _0x15b6f1=_0x33ee77,_0x34a04a=$dataSystem['weaponTypes'][_0x15b6f1(0x70c)];for(let _0x251e5f=0x0;_0x251e5f<_0x34a04a;_0x251e5f++){const _0x36b6cd=$dataSystem[_0x15b6f1(0xab4)][_0x251e5f];if(_0x36b6cd)continue;$dataSystem['attackMotions'][_0x251e5f]={'type':0x1,'weaponImageId':0x1};}},Scene_Boot[_0x33ee77(0x9a7)][_0x33ee77(0xa09)]=function(){const _0x1ca41a=_0x33ee77,_0x2343ff=VisuMZ[_0x1ca41a(0x993)][_0x1ca41a(0x12b)];_0x2343ff[_0x1ca41a(0x133)][_0x1ca41a(0x9b8)]===undefined&&(_0x2343ff[_0x1ca41a(0x133)][_0x1ca41a(0x9b8)]=_0x1ca41a(0x44a)),_0x2343ff[_0x1ca41a(0x46f)][_0x1ca41a(0x494)]===undefined&&(_0x2343ff[_0x1ca41a(0x46f)]['SmoothImage']=![]),_0x2343ff[_0x1ca41a(0xc1d)][_0x1ca41a(0x494)]===undefined&&(_0x2343ff[_0x1ca41a(0xc1d)][_0x1ca41a(0x494)]=!![]),_0x2343ff[_0x1ca41a(0x46f)][_0x1ca41a(0xc2b)]===undefined&&(_0x2343ff[_0x1ca41a(0x46f)][_0x1ca41a(0xc2b)]=![]),_0x2343ff[_0x1ca41a(0x46f)][_0x1ca41a(0x2c2)]===undefined&&(_0x2343ff[_0x1ca41a(0x46f)][_0x1ca41a(0x2c2)]=!![]);},VisuMZ[_0x33ee77(0x994)]={},Scene_Boot[_0x33ee77(0x9a7)]['process_VisuMZ_BattleCore_DamageStyles']=function(){const _0x4f81ac=_0x33ee77;for(const _0x54893d of VisuMZ['BattleCore'][_0x4f81ac(0x12b)][_0x4f81ac(0x133)]['DamageStyleList']){if(!_0x54893d)continue;const _0x5a11ee=_0x54893d['Name']['toUpperCase']()['trim']();VisuMZ['DamageStyles'][_0x5a11ee]=_0x54893d;}},VisuMZ['BattleCore'][_0x33ee77(0x4c1)]={'jsAccuracy':/<JS (?:ACCURACY|ACC|HIT|EVA)>\s*([\s\S]*?)\s*<\/JS (?:ACCURACY|ACC|HIT|EVA)>/i,'jsAccuracyAsUser':/<JS (?:ACCURACY|ACC|HIT|EVA) AS USER>\s*([\s\S]*?)\s*<\/JS (?:ACCURACY|ACC|HIT|EVA) AS USER>/i,'jsAccuracyAsTarget':/<JS (?:ACCURACY|ACC|HIT|EVA) AS TARGET>\s*([\s\S]*?)\s*<\/JS (?:ACCURACY|ACC|HIT|EVA) AS TARGET>/i,'jsCritRateAsUser':/<JS (?:CRITICAL RATE|CRI) AS USER>\s*([\s\S]*?)\s*<\/JS (?:CRITICAL RATE|CRI) AS USER>/i,'jsCritRateAsTarget':/<JS (?:CRITICAL RATE|CRI) AS TARGET>\s*([\s\S]*?)\s*<\/JS (?:CRITICAL RATE|CRI) AS TARGET>/i},Scene_Boot['prototype']['process_VisuMZ_BattleCore_CreateRegExp']=function(){const _0x229ffa=_0x33ee77,_0x29c73d=VisuMZ[_0x229ffa(0x993)][_0x229ffa(0x4c1)],_0xc222af=_0x229ffa(0xa65),_0xac6b80=[[_0x229ffa(0xaf7),_0x229ffa(0xbf1)],['Post',_0x229ffa(0x679)]],_0x2db888=[['%1Apply%2JS',_0x229ffa(0x63d)],[_0x229ffa(0x953),'JS\x20%1DAMAGE\x20%2']],_0x3c6e56=[['',''],[_0x229ffa(0xa0e),_0x229ffa(0x18a)],[_0x229ffa(0x9e6),'AS\x20TARGET']];for(const _0x216c98 of _0x2db888){for(const _0x18fd57 of _0x3c6e56){for(const _0x464c35 of _0xac6b80){const _0x3f853a=_0x216c98[0x0]['format'](_0x464c35[0x0],_0x18fd57[0x0]),_0x28375b=_0x216c98[0x1][_0x229ffa(0x23d)](_0x464c35[0x1],_0x18fd57[0x1])['trim'](),_0x1027e2=new RegExp(_0xc222af['format'](_0x28375b),'i');_0x29c73d[_0x3f853a]=_0x1027e2;}}}const _0x4cb3bd=[[_0x229ffa(0x3b7),_0x229ffa(0x634)],[_0x229ffa(0xb32),_0x229ffa(0x970)]];for(const _0x5ebae6 of _0x4cb3bd){for(const _0x5d5de1 of _0xac6b80){const _0x1851b2=_0x5ebae6[0x0][_0x229ffa(0x23d)](_0x5d5de1[0x0]),_0x3efd29=_0x5ebae6[0x1][_0x229ffa(0x23d)](_0x5d5de1[0x1]),_0x47051e=new RegExp(_0xc222af[_0x229ffa(0x23d)](_0x3efd29),'i');_0x29c73d[_0x1851b2]=_0x47051e;}}const _0x18c681=[[_0x229ffa(0x8b6),_0x229ffa(0x630)],[_0x229ffa(0x90d),_0x229ffa(0x226)],[_0x229ffa(0xad2),'JS\x20BATTLE\x20VICTORY'],[_0x229ffa(0x503),'JS\x20BATTLE\x20DEFEAT'],['EscapeSuccessJS','JS\x20ESCAPE\x20SUCCESS'],[_0x229ffa(0x55f),_0x229ffa(0x1ff)],[_0x229ffa(0x66c),_0x229ffa(0x2db)],[_0x229ffa(0x666),'JS\x20%1END\x20TURN'],[_0x229ffa(0x65c),'JS\x20%1REGENERATE']];for(const _0x336841 of _0x18c681){for(const _0x5c2a09 of _0xac6b80){const _0xa80f23=_0x336841[0x0][_0x229ffa(0x23d)](_0x5c2a09[0x0]),_0x4330c3=_0x336841[0x1][_0x229ffa(0x23d)](_0x5c2a09[0x1]),_0x39c293=new RegExp(_0xc222af[_0x229ffa(0x23d)](_0x4330c3),'i');_0x29c73d[_0xa80f23]=_0x39c293;}}},Scene_Boot['prototype']['process_VisuMZ_BattleCore_Action_Notetags']=function(){const _0x329839=_0x33ee77,_0x4e6432=$dataSkills[_0x329839(0x770)]($dataItems);for(const _0x4872a5 of _0x4e6432){if(!_0x4872a5)continue;VisuMZ[_0x329839(0x993)][_0x329839(0xb48)](_0x4872a5);}},Scene_Boot[_0x33ee77(0x9a7)][_0x33ee77(0x7a1)]=function(){const _0x14db0c=_0x33ee77,_0x5ee252=$dataActors[_0x14db0c(0x770)]($dataClasses,$dataWeapons,$dataArmors,$dataEnemies,$dataStates);for(const _0x17a35c of _0x5ee252){if(!_0x17a35c)continue;VisuMZ[_0x14db0c(0x993)]['Parse_Notetags_TraitObjects'](_0x17a35c),_0x17a35c['autoRemovalTiming']!==undefined&&VisuMZ[_0x14db0c(0x993)]['Parse_Notetags_HelpDescription'](_0x17a35c);}},Scene_Boot[_0x33ee77(0x9a7)][_0x33ee77(0xbce)]=function(){const _0xd9584f=_0x33ee77,_0x6ce51c=VisuMZ[_0xd9584f(0x993)][_0xd9584f(0x12b)][_0xd9584f(0x803)][_0xd9584f(0x69d)],_0x3ecba4=[];for(const _0x17507a of _0x6ce51c){const _0x76bebc=$dataTroops[_0x17507a];if(_0x76bebc)_0x3ecba4['push'](JsonEx[_0xd9584f(0x266)](_0x76bebc));}for(const _0x161d06 of $dataTroops){if(!_0x161d06)continue;for(const _0x507b36 of _0x3ecba4){if(_0x507b36['id']===_0x161d06['id'])continue;_0x161d06[_0xd9584f(0xa41)]=_0x161d06[_0xd9584f(0xa41)][_0xd9584f(0x770)](_0x507b36[_0xd9584f(0xa41)]);}}},Scene_Boot[_0x33ee77(0x9a7)][_0x33ee77(0xc0c)]=function(){const _0x5e7632=_0x33ee77,_0x14aed0=VisuMZ[_0x5e7632(0x993)][_0x5e7632(0x12b)]['Mechanics'];if(_0x14aed0[_0x5e7632(0x825)]>0x0&&$dataCommonEvents[_0x14aed0[_0x5e7632(0x825)]]){const _0x43a3b8=$dataCommonEvents[_0x14aed0[_0x5e7632(0x825)]],_0x28549a=_0x43a3b8['list']['length']-0x2,_0x22cdae=_0x43a3b8[_0x5e7632(0x6a3)][_0x28549a];if(_0x22cdae&&_0x22cdae[_0x5e7632(0x5d5)]!==0xe6){const _0x29af44={'code':0xe6,'indent':0x0,'parameters':[0x1]},_0x3362a1=_0x43a3b8['list'][_0x5e7632(0xc2e)]();_0x43a3b8[_0x5e7632(0x6a3)]['unshift'](_0x29af44),_0x43a3b8[_0x5e7632(0x6a3)][_0x5e7632(0x900)](_0x3362a1);}}},Scene_Boot[_0x33ee77(0x9a7)][_0x33ee77(0x9c4)]=function(){const _0x4f34a6=_0x33ee77;VisuMZ['BattleCore'][_0x4f34a6(0x917)](),VisuMZ[_0x4f34a6(0x993)][_0x4f34a6(0x4b8)]($dataSkills),VisuMZ['BattleCore']['BindCommonEventKeysForGroup']($dataItems);},VisuMZ['BattleCore'][_0x33ee77(0x917)]=function(){const _0x521f72=_0x33ee77;VisuMZ[_0x521f72(0x993)]['_commonEventKey']={};for(const _0x29fe2b of $dataCommonEvents){if(!_0x29fe2b)continue;if(_0x29fe2b[_0x521f72(0xac3)]['match'](/\[(.*)\]/i)){let _0x110015=String(RegExp['$1'])[_0x521f72(0x7dd)](/,/g,'')[_0x521f72(0x46b)]()[_0x521f72(0xaf2)]();VisuMZ[_0x521f72(0x993)][_0x521f72(0x8c1)][_0x110015]=_0x29fe2b['id'];}}},VisuMZ[_0x33ee77(0x993)][_0x33ee77(0x4b8)]=function(_0x1478d1){const _0x5db751=_0x33ee77;for(const _0x555ceb of _0x1478d1){if(!_0x555ceb)continue;VisuMZ[_0x5db751(0x993)]['BindCommonEventKeysForObj'](_0x555ceb);}},VisuMZ[_0x33ee77(0x993)][_0x33ee77(0x996)]=function(_0x3590ab){const _0x586594=_0x33ee77;if(!_0x3590ab)return;if(!_0x3590ab['effects'])return;VisuMZ['BattleCore'][_0x586594(0x8c1)]=VisuMZ['BattleCore'][_0x586594(0x8c1)]||{};const _0x1b5e85=/<COMMON EVENT (?:KEY|KEYS):[ ](.*)>/gi,_0x16fa89=/<COMMON EVENT (?:KEY|KEYS)>\s*([\s\S]*)\s*<\/COMMON EVENT (?:KEY|KEYS)>/i;let _0x8712c9=[];const _0x4d9356=_0x3590ab[_0x586594(0x448)][_0x586594(0x7c1)](_0x1b5e85);if(_0x4d9356){for(const _0x1f2e79 of _0x4d9356){_0x1f2e79['match'](_0x1b5e85);const _0xf45185=String(RegExp['$1'])[_0x586594(0x22d)](',')[_0x586594(0x6f2)](_0x2d6428=>String(_0x2d6428)['toUpperCase']()[_0x586594(0xaf2)]());_0x8712c9=_0x8712c9['concat'](_0xf45185);}!_0x3590ab['note'][_0x586594(0x7c1)](/<CUSTOM ACTION SEQUENCE>/i)&&(_0x3590ab[_0x586594(0x448)]+='<CUSTOM\x20ACTION\x20SEQUENCE>');;}if(_0x3590ab[_0x586594(0x448)][_0x586594(0x7c1)](_0x16fa89)){const _0x516406=String(RegExp['$1'])[_0x586594(0x22d)](/[\r\n]+/)[_0x586594(0x6f2)](_0x3a5695=>String(_0x3a5695)['toUpperCase']()[_0x586594(0xaf2)]());_0x8712c9=_0x8712c9[_0x586594(0x770)](_0x516406);!_0x3590ab[_0x586594(0x448)][_0x586594(0x7c1)](/<CUSTOM ACTION SEQUENCE>/i)&&(_0x3590ab[_0x586594(0x448)]+=_0x586594(0x5c9));;}for(const _0x1e950e of _0x8712c9){if(VisuMZ[_0x586594(0x993)][_0x586594(0x8c1)][_0x1e950e]){const _0x543ce6=VisuMZ['BattleCore'][_0x586594(0x8c1)][_0x1e950e],_0x345ed1={'code':0x2c,'dataId':_0x543ce6,'value1':0x1,'value2':0x0};_0x3590ab[_0x586594(0x2a3)][_0x586594(0x7ab)](_0x345ed1);}}},Scene_Boot[_0x33ee77(0x9a7)][_0x33ee77(0x9ff)]=function(){const _0x35604b=_0x33ee77,_0x2614a0=$dataSkills[_0x35604b(0x770)]($dataItems);for(const _0x2eb6da of _0x2614a0){if(!_0x2eb6da)continue;VisuMZ[_0x35604b(0x993)][_0x35604b(0x9df)](_0x2eb6da);}},VisuMZ['BattleCore']['ParseActorNotetags']=VisuMZ['ParseActorNotetags'],VisuMZ['ParseActorNotetags']=function(_0x15e512){const _0x4f86ee=_0x33ee77;VisuMZ[_0x4f86ee(0x993)][_0x4f86ee(0x9c9)]&&VisuMZ[_0x4f86ee(0x993)][_0x4f86ee(0x9c9)][_0x4f86ee(0x88f)](this,_0x15e512),VisuMZ['BattleCore'][_0x4f86ee(0x8df)](_0x15e512);},VisuMZ['BattleCore'][_0x33ee77(0x146)]=VisuMZ[_0x33ee77(0x146)],VisuMZ[_0x33ee77(0x146)]=function(_0x48f1f6){const _0x59b75d=_0x33ee77;VisuMZ[_0x59b75d(0x993)]['ParseClassNotetags']&&VisuMZ['BattleCore'][_0x59b75d(0x146)][_0x59b75d(0x88f)](this,_0x48f1f6),VisuMZ[_0x59b75d(0x993)][_0x59b75d(0x8df)](_0x48f1f6);},VisuMZ[_0x33ee77(0x993)]['ParseSkillNotetags']=VisuMZ[_0x33ee77(0x6cb)],VisuMZ[_0x33ee77(0x6cb)]=function(_0x41207d){const _0x5969cb=_0x33ee77;VisuMZ['BattleCore'][_0x5969cb(0x6cb)]&&VisuMZ['BattleCore'][_0x5969cb(0x6cb)][_0x5969cb(0x88f)](this,_0x41207d),VisuMZ[_0x5969cb(0x993)]['Parse_Notetags_Action'](_0x41207d),VisuMZ[_0x5969cb(0x993)][_0x5969cb(0x9df)](_0x41207d);},VisuMZ[_0x33ee77(0x993)][_0x33ee77(0x3de)]=VisuMZ[_0x33ee77(0x3de)],VisuMZ[_0x33ee77(0x3de)]=function(_0x50e1e1){const _0x2c3bf8=_0x33ee77;VisuMZ[_0x2c3bf8(0x993)][_0x2c3bf8(0x3de)]&&VisuMZ[_0x2c3bf8(0x993)]['ParseItemNotetags'][_0x2c3bf8(0x88f)](this,_0x50e1e1),VisuMZ['BattleCore'][_0x2c3bf8(0xb48)](_0x50e1e1),VisuMZ['BattleCore']['Parse_Notetags_Targets'](_0x50e1e1);},VisuMZ[_0x33ee77(0x993)][_0x33ee77(0xa28)]=VisuMZ[_0x33ee77(0xa28)],VisuMZ[_0x33ee77(0xa28)]=function(_0x5223d4){const _0x319823=_0x33ee77;VisuMZ[_0x319823(0x993)][_0x319823(0xa28)]&&VisuMZ['BattleCore']['ParseWeaponNotetags'][_0x319823(0x88f)](this,_0x5223d4),VisuMZ['BattleCore'][_0x319823(0x8df)](_0x5223d4);},VisuMZ[_0x33ee77(0x993)][_0x33ee77(0x643)]=VisuMZ[_0x33ee77(0x643)],VisuMZ['ParseArmorNotetags']=function(_0x88df69){const _0x86eb4=_0x33ee77;VisuMZ[_0x86eb4(0x993)][_0x86eb4(0x643)]&&VisuMZ[_0x86eb4(0x993)][_0x86eb4(0x643)][_0x86eb4(0x88f)](this,_0x88df69),VisuMZ['BattleCore'][_0x86eb4(0x8df)](_0x88df69);},VisuMZ['BattleCore'][_0x33ee77(0x640)]=VisuMZ[_0x33ee77(0x640)],VisuMZ[_0x33ee77(0x640)]=function(_0x5c531f){const _0x4a58b0=_0x33ee77;VisuMZ[_0x4a58b0(0x993)][_0x4a58b0(0x640)]&&VisuMZ[_0x4a58b0(0x993)][_0x4a58b0(0x640)][_0x4a58b0(0x88f)](this,_0x5c531f),VisuMZ[_0x4a58b0(0x993)][_0x4a58b0(0x8df)](_0x5c531f);},VisuMZ['BattleCore'][_0x33ee77(0xacd)]=VisuMZ[_0x33ee77(0xacd)],VisuMZ[_0x33ee77(0xacd)]=function(_0x4b2648){const _0x312794=_0x33ee77;VisuMZ['BattleCore'][_0x312794(0xacd)]&&VisuMZ['BattleCore'][_0x312794(0xacd)][_0x312794(0x88f)](this,_0x4b2648),VisuMZ[_0x312794(0x993)][_0x312794(0x8df)](_0x4b2648),VisuMZ[_0x312794(0x993)]['Parse_Notetags_HelpDescription'](_0x4b2648);},VisuMZ['BattleCore']['Parse_Notetags_Action']=function(_0x51de8e){const _0x55d2bb=_0x33ee77,_0x5deb9d=['PreApplyJS',_0x55d2bb(0x201),_0x55d2bb(0x7d4),_0x55d2bb(0x4ff),_0x55d2bb(0x322),_0x55d2bb(0x6a6),_0x55d2bb(0x12c),'PostEndActionJS'];for(const _0x595210 of _0x5deb9d){VisuMZ[_0x55d2bb(0x993)][_0x55d2bb(0x5c3)](_0x51de8e,_0x595210);}const _0x374f12=_0x51de8e['note'];_0x374f12[_0x55d2bb(0x7c1)](/<ALWAYS CRITICAL/i)&&(_0x51de8e[_0x55d2bb(0x2d7)]['critical']=!![]),_0x374f12[_0x55d2bb(0x7c1)](/<(?:REPEAT|REPEATS|REPEAT HITS):[ ](\d+)/i)&&(_0x51de8e[_0x55d2bb(0x2e1)]=Math[_0x55d2bb(0x657)](0x1,Number(RegExp['$1']))),_0x374f12['match'](/<TARGET:[ ](.*)>/i)&&(_0x51de8e[_0x55d2bb(0x519)]=String(RegExp['$1'])[_0x55d2bb(0x46b)]()[_0x55d2bb(0xaf2)]());},VisuMZ[_0x33ee77(0x993)][_0x33ee77(0x8df)]=function(_0x9ff538){const _0x3b0cad=_0x33ee77,_0x173bde=[_0x3b0cad(0xa15),_0x3b0cad(0x51c),'PreDamageAsUserJS',_0x3b0cad(0x2c1),_0x3b0cad(0x99b),_0x3b0cad(0x882),'PreDamageAsTargetJS',_0x3b0cad(0xb8a),_0x3b0cad(0x322),_0x3b0cad(0x6a6),_0x3b0cad(0x12c),'PostEndActionJS',_0x3b0cad(0xb8f),_0x3b0cad(0x21c),_0x3b0cad(0x8bc),_0x3b0cad(0x78f),_0x3b0cad(0xad2),'BattleDefeatJS',_0x3b0cad(0x866),_0x3b0cad(0x55f),_0x3b0cad(0x318),'PostStartTurnJS',_0x3b0cad(0x251),'PostEndTurnJS',_0x3b0cad(0x867),_0x3b0cad(0xbb5)];for(const _0x2725e6 of _0x173bde){VisuMZ[_0x3b0cad(0x993)][_0x3b0cad(0x5c3)](_0x9ff538,_0x2725e6);}const _0xca78c2=['jsAccuracy',_0x3b0cad(0x701),'jsAccuracyAsTarget','jsCritRateAsUser',_0x3b0cad(0xa7d)];for(const _0x3f948a of _0xca78c2){VisuMZ['BattleCore'][_0x3b0cad(0x39c)](_0x9ff538,_0x3f948a);}},VisuMZ[_0x33ee77(0x993)][_0x33ee77(0x9df)]=function(_0x57a1ba){const _0x348cb5=_0x33ee77,_0x33f08f=_0x57a1ba[_0x348cb5(0x448)];if(_0x33f08f['match'](/<JS TARGETS>\s*([\s\S]*)\s*<\/JS TARGETS>/i)){const _0x52d2d8=String(RegExp['$1']),_0x42f059=VisuMZ[_0x348cb5(0x993)]['createKeyJS'](_0x57a1ba,'Targets');VisuMZ[_0x348cb5(0x993)][_0x348cb5(0x3e2)](_0x52d2d8,_0x42f059);}if(_0x33f08f[_0x348cb5(0x7c1)](/<JS COMMAND (?:VISIBLE|SHOW|HIDE)>\s*([\s\S]*)\s*<\/JS COMMAND (?:VISIBLE|SHOW|HIDE)>/i)){const _0x4bc420=String(RegExp['$1']),_0x32e174=VisuMZ[_0x348cb5(0x993)]['createKeyJS'](_0x57a1ba,'CommandVisible');VisuMZ['BattleCore'][_0x348cb5(0x68d)](_0x4bc420,_0x32e174);}},VisuMZ[_0x33ee77(0x993)]['JS']={},VisuMZ[_0x33ee77(0x993)][_0x33ee77(0x5c3)]=function(_0x4eb72c,_0x534954){const _0x295cd3=_0x33ee77,_0x4dbe94=_0x4eb72c['note'];if(_0x4dbe94[_0x295cd3(0x7c1)](VisuMZ['BattleCore'][_0x295cd3(0x4c1)][_0x534954])){const _0x51253a=RegExp['$1'],_0x2bd519='\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Declare\x20Arguments\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20user\x20=\x20arguments[0];\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20target\x20=\x20arguments[1];\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20obj\x20=\x20arguments[2];\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20let\x20value\x20=\x20arguments[3]\x20||\x200;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20let\x20originalValue\x20=\x20value;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Declare\x20Constants\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20action\x20=\x20(this.constructor\x20===\x20Game_Action)\x20?\x20this\x20:\x20user.currentAction();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20a\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20b\x20=\x20target;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20attacker\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20defender\x20=\x20target;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20healer\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20receiver\x20=\x20target;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20actor\x20=\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20currentClass\x20=\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20skill\x20=\x20(this.constructor\x20===\x20Game_Action)\x20?\x20this.item()\x20:\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20item\x20=\x20(this.constructor\x20===\x20Game_Action)\x20?\x20this.item()\x20:\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20weapon\x20=\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20armor\x20=\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20enemy\x20=\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20state\x20=\x20obj;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Create\x20Compatibility\x20Variables\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20let\x20origin\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(Imported.VisuMZ_1_SkillsStatesCore\x20&&\x20$dataStates.includes(obj))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20origin\x20=\x20target.getStateOrigin(obj.id);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Process\x20Code\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20try\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20%1\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x20catch\x20(e)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20($gameTemp.isPlaytest())\x20console.log(e);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20NaN\x20Check\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(isNaN(value)){\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20($gameTemp.isPlaytest())\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20console.log(\x27NaN\x20value\x20created\x20by\x20%2\x27.format(\x27\x27,obj.name));\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20console.log(\x27Restoring\x20value\x20to\x20%2\x27.format(\x27\x27,originalValue));\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20value\x20=\x20originalValue;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Return\x20Value\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20value;\x0a\x20\x20\x20\x20\x20\x20\x20\x20'[_0x295cd3(0x23d)](_0x51253a),_0xfbe4e4=VisuMZ['BattleCore'][_0x295cd3(0x240)](_0x4eb72c,_0x534954);VisuMZ[_0x295cd3(0x993)]['JS'][_0xfbe4e4]=new Function(_0x2bd519);}},VisuMZ[_0x33ee77(0x993)][_0x33ee77(0x240)]=function(_0x48c368,_0x10c9ad){const _0x599815=_0x33ee77;if(VisuMZ[_0x599815(0x240)])return VisuMZ['createKeyJS'](_0x48c368,_0x10c9ad);let _0x555939='';if($dataActors[_0x599815(0x741)](_0x48c368))_0x555939=_0x599815(0x5cd)[_0x599815(0x23d)](_0x48c368['id'],_0x10c9ad);if($dataClasses[_0x599815(0x741)](_0x48c368))_0x555939=_0x599815(0x4b2)['format'](_0x48c368['id'],_0x10c9ad);if($dataSkills[_0x599815(0x741)](_0x48c368))_0x555939=_0x599815(0x61c)[_0x599815(0x23d)](_0x48c368['id'],_0x10c9ad);if($dataItems[_0x599815(0x741)](_0x48c368))_0x555939='Item-%1-%2'['format'](_0x48c368['id'],_0x10c9ad);if($dataWeapons[_0x599815(0x741)](_0x48c368))_0x555939=_0x599815(0x2e5)[_0x599815(0x23d)](_0x48c368['id'],_0x10c9ad);if($dataArmors[_0x599815(0x741)](_0x48c368))_0x555939=_0x599815(0x1fa)[_0x599815(0x23d)](_0x48c368['id'],_0x10c9ad);if($dataEnemies[_0x599815(0x741)](_0x48c368))_0x555939=_0x599815(0xa6b)[_0x599815(0x23d)](_0x48c368['id'],_0x10c9ad);if($dataStates[_0x599815(0x741)](_0x48c368))_0x555939=_0x599815(0xa62)[_0x599815(0x23d)](_0x48c368['id'],_0x10c9ad);return _0x555939;},VisuMZ[_0x33ee77(0x993)]['createTargetsJS']=function(_0x87a7c0,_0x55282f){const _0x560bbd=_0x33ee77,_0x47d485=_0x560bbd(0x24c)[_0x560bbd(0x23d)](_0x87a7c0);VisuMZ[_0x560bbd(0x993)]['JS'][_0x55282f]=new Function(_0x47d485);},VisuMZ[_0x33ee77(0x993)][_0x33ee77(0x68d)]=function(_0x9d069,_0x33ea8f){const _0x52d495=_0x33ee77,_0x275d77=_0x52d495(0x283)['format'](_0x9d069);VisuMZ[_0x52d495(0x993)]['JS'][_0x33ea8f]=new Function(_0x275d77);},VisuMZ[_0x33ee77(0x993)][_0x33ee77(0x39c)]=function(_0x879a19,_0x3f1003){const _0x358004=_0x33ee77,_0x346762=_0x879a19[_0x358004(0x448)];if(_0x346762['match'](VisuMZ['BattleCore'][_0x358004(0x4c1)][_0x3f1003])){const _0x154560=RegExp['$1'],_0x3fe9db=_0x358004(0x327)[_0x358004(0x23d)](_0x154560),_0xcba0ad=VisuMZ[_0x358004(0x993)][_0x358004(0x240)](_0x879a19,_0x3f1003);VisuMZ[_0x358004(0x993)]['JS'][_0xcba0ad]=new Function(_0x3fe9db);}},VisuMZ[_0x33ee77(0x993)][_0x33ee77(0xaf4)]=function(_0x97e336){const _0x1171a1=_0x33ee77;_0x97e336[_0x1171a1(0x263)]='-';const _0x5631ea=_0x97e336[_0x1171a1(0x448)];_0x5631ea[_0x1171a1(0x7c1)](/<(?:HELP|HELP DESCRIPTION|DESCRIPTION)>\s*([\s\S]*)\s*<\/(?:HELP|HELP DESCRIPTION|DESCRIPTION)>/i)&&(_0x97e336[_0x1171a1(0x263)]=String(RegExp['$1'])[_0x1171a1(0xaf2)]()),_0x5631ea[_0x1171a1(0x7c1)](/<(?:IN-BATTLE |)STATUS DESCRIPTION>\s*([\s\S]*)\s*<\/(?:IN-BATTLE |)STATUS DESCRIPTION>/i)&&(_0x97e336['statusDescription']=String(RegExp['$1'])['trim']()),_0x5631ea['match'](/<EXCLUDE FROM (?:HELP|STATUS|STATUS LIST|LISTING|STATUS LISTING)>/i)&&(_0x97e336[_0x1171a1(0x5b8)]=!![]);},TextManager[_0x33ee77(0x886)]=VisuMZ[_0x33ee77(0x993)]['Settings']['PartyCmd'][_0x33ee77(0xaa1)],TextManager[_0x33ee77(0x7df)]=VisuMZ[_0x33ee77(0x993)][_0x33ee77(0x12b)][_0x33ee77(0x27f)]['StartName'],TextManager[_0x33ee77(0x880)]=VisuMZ['BattleCore'][_0x33ee77(0x12b)][_0x33ee77(0x27f)]['StyleName'],TextManager['visualHpGauge']=VisuMZ[_0x33ee77(0x993)][_0x33ee77(0x12b)][_0x33ee77(0x5d6)]['Name'],ColorManager[_0x33ee77(0x4fc)]=function(_0x2946dc){const _0x339453=_0x33ee77;return _0x2946dc=String(_0x2946dc),_0x2946dc[_0x339453(0x7c1)](/#(.*)/i)?_0x339453(0xba7)[_0x339453(0x23d)](String(RegExp['$1'])):this[_0x339453(0x6c7)](Number(_0x2946dc));},DataManager[_0x33ee77(0x47b)]=function(_0x1300f6){const _0x5d15cd=_0x33ee77;if(_0x1300f6['note'][_0x5d15cd(0x7c1)](/<DAMAGE STYLE:[ ](.*)>/i)){const _0xb498bc=String(RegExp['$1'])[_0x5d15cd(0x46b)]()['trim']();if(_0xb498bc===_0x5d15cd(0xbb4))return _0x5d15cd(0xbb4);if(VisuMZ['DamageStyles'][_0xb498bc])return _0xb498bc;}const _0x2bf14f=VisuMZ[_0x5d15cd(0x993)][_0x5d15cd(0x12b)][_0x5d15cd(0x133)][_0x5d15cd(0x198)][_0x5d15cd(0x46b)]()[_0x5d15cd(0xaf2)]();if(VisuMZ[_0x5d15cd(0x994)][_0x2bf14f])return _0x2bf14f;return'MANUAL';},DataManager[_0x33ee77(0xb16)]=function(_0x4f3579){const _0x4851a4=_0x33ee77;_0x4f3579=_0x4f3579[_0x4851a4(0x46b)]()[_0x4851a4(0xaf2)](),this[_0x4851a4(0x97c)]=this['_stypeIDs']||{};if(this[_0x4851a4(0x97c)][_0x4f3579])return this['_stypeIDs'][_0x4f3579];for(let _0x25cace=0x1;_0x25cace<0x64;_0x25cace++){if(!$dataSystem[_0x4851a4(0x52f)][_0x25cace])continue;let _0x9e9e7d=$dataSystem['skillTypes'][_0x25cace][_0x4851a4(0x46b)]()[_0x4851a4(0xaf2)]();_0x9e9e7d=_0x9e9e7d[_0x4851a4(0x7dd)](/\x1I\[(\d+)\]/gi,''),_0x9e9e7d=_0x9e9e7d[_0x4851a4(0x7dd)](/\\I\[(\d+)\]/gi,''),this[_0x4851a4(0x97c)][_0x9e9e7d]=_0x25cace;}return this[_0x4851a4(0x97c)][_0x4f3579]||0x0;},DataManager[_0x33ee77(0xa13)]=function(_0x2b845b){const _0x294f2f=_0x33ee77;_0x2b845b=_0x2b845b[_0x294f2f(0x46b)]()[_0x294f2f(0xaf2)](),this[_0x294f2f(0x2aa)]=this[_0x294f2f(0x2aa)]||{};if(this[_0x294f2f(0x2aa)][_0x2b845b])return this[_0x294f2f(0x2aa)][_0x2b845b];for(const _0x4f103b of $dataSkills){if(!_0x4f103b)continue;this[_0x294f2f(0x2aa)][_0x4f103b[_0x294f2f(0xac3)][_0x294f2f(0x46b)]()['trim']()]=_0x4f103b['id'];}return this['_skillIDs'][_0x2b845b]||0x0;},DataManager[_0x33ee77(0xbc5)]=function(_0x2a4377){const _0x4a0941=_0x33ee77;_0x2a4377=_0x2a4377['toUpperCase']()[_0x4a0941(0xaf2)](),this[_0x4a0941(0x79f)]=this[_0x4a0941(0x79f)]||{};if(this[_0x4a0941(0x79f)][_0x2a4377])return this[_0x4a0941(0x79f)][_0x2a4377];for(const _0x51f0ca of $dataEnemies){if(!_0x51f0ca)continue;this[_0x4a0941(0x79f)][_0x51f0ca[_0x4a0941(0xac3)][_0x4a0941(0x46b)]()['trim']()]=_0x51f0ca['id'];}return this[_0x4a0941(0x79f)][_0x2a4377]||0x0;},DataManager['getWtypeIdWithName']=function(_0x114559){const _0x3486c3=_0x33ee77;_0x114559=_0x114559[_0x3486c3(0x46b)]()[_0x3486c3(0xaf2)](),this[_0x3486c3(0x15c)]=this[_0x3486c3(0x15c)]||{};if(this[_0x3486c3(0x15c)][_0x114559])return this[_0x3486c3(0x15c)][_0x114559];for(let _0x38d571=0x1;_0x38d571<0x64;_0x38d571++){if(!$dataSystem['weaponTypes'][_0x38d571])continue;let _0x3c0787=$dataSystem[_0x3486c3(0x6c9)][_0x38d571][_0x3486c3(0x46b)]()[_0x3486c3(0xaf2)]();_0x3c0787=_0x3c0787['replace'](/\x1I\[(\d+)\]/gi,''),_0x3c0787=_0x3c0787[_0x3486c3(0x7dd)](/\\I\[(\d+)\]/gi,''),this[_0x3486c3(0x15c)][_0x3c0787]=_0x38d571;}return this['_wtypeIDs']['BARE\x20HANDS']=0x0,this['_wtypeIDs'][_0x114559]||0x0;},DataManager[_0x33ee77(0x92f)]=function(_0x3df8c0){const _0x249bab=_0x33ee77,_0x4d4e91=_0x249bab(0x3be);let _0x945e24=_0x3df8c0['iconIndex'],_0x3a348c=_0x3df8c0[_0x249bab(0xac3)];const _0x138980=_0x3df8c0['note'];return _0x138980[_0x249bab(0x7c1)](/<DISPLAY ICON: (\d+)>/i)&&(_0x945e24=Number(RegExp['$1'])),_0x138980['match'](/<DISPLAY TEXT: (.*)>/i)&&(_0x3a348c=String(RegExp['$1'])),_0x4d4e91[_0x249bab(0x23d)](_0x945e24,_0x3a348c);},DataManager[_0x33ee77(0xa6c)]=function(_0x1ec8a2){const _0x25d02b=_0x33ee77;return _0x1ec8a2[_0x25d02b(0x448)][_0x25d02b(0x7c1)](/<COMMAND TEXT: (.*)>/i)?String(RegExp['$1']):_0x1ec8a2[_0x25d02b(0xac3)];},DataManager[_0x33ee77(0xa88)]=function(_0x277306){const _0x3ba0d4=_0x33ee77;return _0x277306['note'][_0x3ba0d4(0x7c1)](/<COMMAND ICON: (\d+)>/i)?Number(RegExp['$1']):_0x277306['iconIndex'];},DataManager[_0x33ee77(0x5ea)]=function(_0x3fbe74){const _0xd312c=_0x33ee77,_0x5de6fe=$dataEnemies[_0x3fbe74];if(_0x5de6fe){if(_0x5de6fe[_0xd312c(0x448)][_0xd312c(0x7c1)](/<SWAP ENEMIES>\s*([\s\S]*)\s*<\/SWAP ENEMIES>/i)){const _0x24e78f=String(RegExp['$1'])[_0xd312c(0x22d)](/[\r\n]+/)[_0xd312c(0x259)](''),_0xd39b2=this['processRandomizedData'](_0x24e78f);_0x3fbe74=this['getEnemyIdWithName'](_0xd39b2)||_0x3fbe74,_0x3fbe74=DataManager['swapEnemyIDs'](_0x3fbe74);}}return _0x3fbe74;},DataManager[_0x33ee77(0xb06)]=function(_0x3ad4a7){const _0x248797=_0x33ee77;let _0x1a6cf1=0x0;const _0x35a75b={};for(const _0x9acfa of _0x3ad4a7){if(_0x9acfa['match'](/(.*):[ ](\d+)/i)){const _0x32585a=String(RegExp['$1'])[_0x248797(0xaf2)](),_0x1f2076=Number(RegExp['$2']);_0x35a75b[_0x32585a]=_0x1f2076,_0x1a6cf1+=_0x1f2076;}else{if(_0x9acfa[_0x248797(0x7c1)](/(.*):[ ](\d+\.?\d+)/i)){const _0x58df03=String(RegExp['$1'])[_0x248797(0xaf2)](),_0x2d274b=Number(RegExp['$2']);_0x35a75b[_0x58df03]=_0x2d274b,_0x1a6cf1+=_0x2d274b;}else _0x9acfa!==''&&(_0x35a75b[_0x9acfa]=0x1,_0x1a6cf1++);}}if(_0x1a6cf1<=0x0)return'';let _0x172668=Math['random']()*_0x1a6cf1;for(const _0x13bb37 in _0x35a75b){_0x172668-=_0x35a75b[_0x13bb37];if(_0x172668<=0x0)return _0x13bb37;}return'';},DataManager[_0x33ee77(0x591)]=function(_0x136f60){const _0x139af=_0x33ee77;if(!_0x136f60)return![];if(!VisuMZ['BattleCore'][_0x139af(0x12b)]['ActionSequence']['AutoNotetag'])return![];if(_0x136f60[_0x139af(0x448)][_0x139af(0x7c1)](/<AUTO ACTION SEQUENCE>/i))return![];if(_0x136f60[_0x139af(0x448)][_0x139af(0x7c1)](/<COMMON (?:EVENT|EVENTS):[ ](.*)>/gi))return!![];for(const _0x22efb9 of _0x136f60['effects']){if(!_0x22efb9)continue;if(_0x22efb9[_0x139af(0x5d5)]===Game_Action[_0x139af(0x858)])return!![];}return![];},DataManager[_0x33ee77(0xbdd)]=function(_0x3ad308){const _0x7beda0=_0x33ee77,_0x103092=$dataTroops[_0x3ad308];if(!_0x103092)return'';let _0x47bf94='';_0x47bf94+=_0x103092[_0x7beda0(0xac3)];for(const _0x57ad04 of _0x103092[_0x7beda0(0xa41)]){for(const _0x3716f4 of _0x57ad04[_0x7beda0(0x6a3)]){[0x6c,0x198]['includes'](_0x3716f4[_0x7beda0(0x5d5)])&&(_0x47bf94+='\x0a',_0x47bf94+=_0x3716f4[_0x7beda0(0x98e)][0x0]);}}return _0x47bf94;},ConfigManager[_0x33ee77(0x9b0)]=ConfigManager['autoBattleAtStart']??![],ConfigManager[_0x33ee77(0x403)]=ConfigManager[_0x33ee77(0x403)]??![],ConfigManager['visualHpGauge']=ConfigManager[_0x33ee77(0xafd)]??!![],VisuMZ['BattleCore'][_0x33ee77(0xbac)]=ConfigManager[_0x33ee77(0x59d)],ConfigManager[_0x33ee77(0x59d)]=function(){const _0x41d477=_0x33ee77,_0x2a4a24=VisuMZ[_0x41d477(0x993)][_0x41d477(0xbac)]['call'](this);return _0x2a4a24[_0x41d477(0x9b0)]=this['autoBattleAtStart'],_0x2a4a24['autoBattleUseSkills']=this[_0x41d477(0x403)],_0x2a4a24[_0x41d477(0xafd)]=this['visualHpGauge'],_0x2a4a24;},VisuMZ['BattleCore'][_0x33ee77(0x872)]=ConfigManager['applyData'],ConfigManager['applyData']=function(_0x288e54){const _0x2ccec9=_0x33ee77;VisuMZ[_0x2ccec9(0x993)]['ConfigManager_applyData']['call'](this,_0x288e54),_0x2ccec9(0x9b0)in _0x288e54?this[_0x2ccec9(0x9b0)]=_0x288e54['autoBattleAtStart']:this[_0x2ccec9(0x9b0)]=![],_0x2ccec9(0x403)in _0x288e54?this[_0x2ccec9(0x403)]=_0x288e54['autoBattleUseSkills']:this[_0x2ccec9(0x403)]=![],'visualHpGauge'in _0x288e54?this[_0x2ccec9(0xafd)]=_0x288e54[_0x2ccec9(0xafd)]:this[_0x2ccec9(0xafd)]=!![];},ImageManager[_0x33ee77(0x461)]=ImageManager['svActorHorzCells']||0x9,ImageManager['svActorVertCells']=ImageManager[_0x33ee77(0x9b9)]||0x6,VisuMZ[_0x33ee77(0x993)]['BattleManager_setup']=BattleManager[_0x33ee77(0x888)],BattleManager[_0x33ee77(0x888)]=function(_0x5d16ff,_0x3cf51f,_0x3a3e85){const _0x159e4b=_0x33ee77;VisuMZ[_0x159e4b(0x993)][_0x159e4b(0x906)][_0x159e4b(0x88f)](this,_0x5d16ff,_0x3cf51f,_0x3a3e85),this[_0x159e4b(0x420)]={};},VisuMZ[_0x33ee77(0x993)][_0x33ee77(0x6b6)]=BattleManager[_0x33ee77(0xb4c)],BattleManager[_0x33ee77(0xb4c)]=function(){const _0x3227ec=_0x33ee77;VisuMZ['BattleCore'][_0x3227ec(0x6b6)][_0x3227ec(0x88f)](this),this[_0x3227ec(0xbd8)]=[];},BattleManager[_0x33ee77(0xb25)]=function(){const _0xf3ddfa=_0x33ee77;$subject=this[_0xf3ddfa(0x7c0)],$targets=this[_0xf3ddfa(0x3ae)],$target=this[_0xf3ddfa(0x608)]||this[_0xf3ddfa(0x3ae)][this[_0xf3ddfa(0x27a)]||0x0];},BattleManager[_0x33ee77(0x5eb)]=function(){const _0x36c661=_0x33ee77;if(!SceneManager[_0x36c661(0x5d9)]())return;const _0x4ac62c=SceneManager['_scene'][_0x36c661(0x189)];if(_0x4ac62c)_0x4ac62c[_0x36c661(0x9d7)]();},BattleManager['battleSys']=function(){const _0x4397bb=_0x33ee77;if(BattleManager[_0x4397bb(0x17e)]())return _0x4397bb(0x501);return _0x4397bb(0x9dd);},BattleManager[_0x33ee77(0x547)]=function(_0x47ecb0){const _0x52d027=_0x33ee77;return _0x47ecb0=_0x47ecb0[_0x52d027(0x46b)]()[_0x52d027(0xaf2)](),this[_0x52d027(0xaf6)]()===_0x47ecb0;},BattleManager[_0x33ee77(0xc06)]=function(){const _0x120143=_0x33ee77;return this['isBattleSys'](_0x120143(0x9dd));},BattleManager['isTurnBased']=function(){const _0x102a37=_0x33ee77;return this[_0x102a37(0xc06)]();},BattleManager[_0x33ee77(0xb6c)]=function(){return!this['isTurnBased']();},BattleManager['isTeamBased']=function(){const _0x59adc3=_0x33ee77;return!this[_0x59adc3(0x627)]()&&!this[_0x59adc3(0xb6c)]();},BattleManager[_0x33ee77(0x68c)]=function(_0x5d693e){const _0x399121=_0x33ee77;this[_0x399121(0x420)]=this['_battlerKeyCache']||{};if(this[_0x399121(0x420)][_0x5d693e]!==undefined)return this[_0x399121(0x420)][_0x5d693e];this[_0x399121(0x420)][_0x5d693e]=null;const _0x162bd2=this[_0x399121(0x1ac)](),_0x29c8bb=_0x162bd2[_0x399121(0x298)](_0x49def6=>_0x49def6['battlerKey']()===_0x5d693e);if(_0x29c8bb)this[_0x399121(0x420)][_0x5d693e]=_0x29c8bb;return this['_battlerKeyCache'][_0x5d693e];},Game_BattlerBase[_0x33ee77(0x9a7)][_0x33ee77(0x19f)]=function(){const _0x4fa5b3=_0x33ee77;return _0x4fa5b3(0x4ba)[_0x4fa5b3(0x23d)](this['isActor']()?'actor':_0x4fa5b3(0x246),this['name']()+'-'+(this[_0x4fa5b3(0x6c3)]()?this['actorId']():this[_0x4fa5b3(0xa63)]()));},Game_Action[_0x33ee77(0x9a7)]['setTargetBattlerKey']=function(_0x299844){const _0x4310fe=_0x33ee77;if(this[_0x4310fe(0x1d6)]!=='')return;typeof _0x299844===_0x4310fe(0x7f6)?this[_0x4310fe(0x1d6)]=_0x299844['toLowerCase']()[_0x4310fe(0xaf2)]():this[_0x4310fe(0x1d6)]=_0x299844[_0x4310fe(0x19f)]();},Game_Action['prototype'][_0x33ee77(0xb66)]=function(){const _0x2a31cf=_0x33ee77;return[this[_0x2a31cf(0x4f3)]()];},Game_Action[_0x33ee77(0x9a7)][_0x33ee77(0x4f3)]=function(){const _0x34b17a=_0x33ee77,_0x11c608=this[_0x34b17a(0x1d6)]||'',_0x157f00=BattleManager[_0x34b17a(0x68c)](_0x11c608);if(!_0x157f00)return this[_0x34b17a(0x209)]();if(!_0x157f00[_0x34b17a(0x4ad)]())return this[_0x34b17a(0x209)]();return _0x157f00;},Game_Action[_0x33ee77(0x9a7)]['getBattlerKeyTargetReplacement']=function(){const _0x361852=_0x33ee77,_0x11ee42=this[_0x361852(0x1d6)];return _0x11ee42[_0x361852(0x7c1)](/ACTOR/i)?this[_0x361852(0x95f)]()['trueRandomTarget']():this['opponentsUnit']()[_0x361852(0x43c)]();},BattleManager['selectedBattlers']=function(){const _0x192e19=_0x33ee77;return this[_0x192e19(0x1ac)]()[_0x192e19(0x313)](_0x34d574=>_0x34d574[_0x192e19(0x7a2)]());},BattleManager[_0x33ee77(0x29a)]=function(_0x1e8123){const _0x2502a7=_0x33ee77;_0x1e8123===_0x2502a7(0xad2)&&(this['_endingBattle']=!![]),$gameParty[_0x2502a7(0x29a)](_0x1e8123),$gameTroop['processBattleCoreJS'](_0x1e8123);},VisuMZ[_0x33ee77(0x993)][_0x33ee77(0x6e6)]=BattleManager['startBattle'],BattleManager[_0x33ee77(0xb6d)]=function(){const _0x32d4cf=_0x33ee77;this[_0x32d4cf(0x9e7)]=![],this[_0x32d4cf(0x5bb)]=ConfigManager[_0x32d4cf(0x9b0)],this[_0x32d4cf(0x77d)]=![],this[_0x32d4cf(0x29a)]('PreStartBattleJS'),VisuMZ['BattleCore'][_0x32d4cf(0x6e6)]['call'](this),this['processBattleCoreJS'](_0x32d4cf(0x21c));},BattleManager[_0x33ee77(0x98d)]=function(_0x71e372){const _0x3e50f6=_0x33ee77,_0x3cb25a=VisuMZ[_0x3e50f6(0x993)][_0x3e50f6(0x12b)][_0x3e50f6(0x803)];_0x71e372!==_0x3e50f6(0x8fb)&&_0x3cb25a[_0x3e50f6(0x7f0)]&&VisuMZ[_0x3e50f6(0x993)][_0x3e50f6(0x6e9)](_0x3cb25a[_0x3e50f6(0x7f0)])&&$gameTemp[_0x3e50f6(0x444)](_0x3cb25a[_0x3e50f6(0x7f0)]);const _0x397d83='%1Event'[_0x3e50f6(0x23d)](_0x71e372);_0x3cb25a[_0x397d83]&&VisuMZ[_0x3e50f6(0x993)]['CheckMapBattleEventValid'](_0x3cb25a[_0x397d83])&&$gameTemp['reserveCommonEvent'](_0x3cb25a[_0x397d83]);},VisuMZ[_0x33ee77(0x993)][_0x33ee77(0x789)]=BattleManager[_0x33ee77(0x948)],BattleManager[_0x33ee77(0x948)]=function(){const _0x5be036=_0x33ee77;VisuMZ['BattleCore'][_0x5be036(0x789)]['call'](this),SceneManager['isSceneBattle']()&&BattleManager[_0x5be036(0x3b5)]();},VisuMZ[_0x33ee77(0x993)][_0x33ee77(0x4a1)]=BattleManager[_0x33ee77(0x51d)],BattleManager['checkBattleEnd']=function(){const _0x3f8d10=_0x33ee77;if(this[_0x3f8d10(0x23a)]===_0x3f8d10(0x9f5)){if($gameTemp[_0x3f8d10(0x2e2)]())return![];}return VisuMZ[_0x3f8d10(0x993)][_0x3f8d10(0x4a1)][_0x3f8d10(0x88f)](this);},VisuMZ[_0x33ee77(0x993)][_0x33ee77(0xa54)]=BattleManager[_0x33ee77(0x62b)],BattleManager[_0x33ee77(0x62b)]=function(){const _0x2467b5=_0x33ee77;this['_endingBattle']=!![],this[_0x2467b5(0x29a)](_0x2467b5(0xad2)),VisuMZ[_0x2467b5(0x993)][_0x2467b5(0xa54)][_0x2467b5(0x88f)](this),this[_0x2467b5(0x98d)](_0x2467b5(0x167));},VisuMZ[_0x33ee77(0x993)][_0x33ee77(0xb5f)]=BattleManager[_0x33ee77(0x9f9)],BattleManager[_0x33ee77(0x9f9)]=function(){const _0x237148=_0x33ee77;this[_0x237148(0x77d)]=!![],VisuMZ[_0x237148(0x993)][_0x237148(0xb5f)]['call'](this);},VisuMZ['BattleCore'][_0x33ee77(0xace)]=BattleManager[_0x33ee77(0x391)],BattleManager[_0x33ee77(0x391)]=function(){const _0x2b389e=_0x33ee77;this[_0x2b389e(0x77d)]=!![],this[_0x2b389e(0x29a)](_0x2b389e(0x503)),VisuMZ[_0x2b389e(0x993)][_0x2b389e(0xace)][_0x2b389e(0x88f)](this),this[_0x2b389e(0x98d)](_0x2b389e(0x94e));},VisuMZ[_0x33ee77(0x993)][_0x33ee77(0x120)]=BattleManager[_0x33ee77(0x641)],BattleManager[_0x33ee77(0x641)]=function(_0x4a8f7f){const _0xabdf7f=_0x33ee77;this[_0xabdf7f(0x9e7)]=!![],this['_autoBattle']=![],this[_0xabdf7f(0x29a)](_0xabdf7f(0x8bc)),VisuMZ['BattleCore'][_0xabdf7f(0x120)][_0xabdf7f(0x88f)](this,_0x4a8f7f),this[_0xabdf7f(0x29a)](_0xabdf7f(0x78f));},VisuMZ[_0x33ee77(0x993)][_0x33ee77(0x358)]=BattleManager[_0x33ee77(0x9d0)],BattleManager[_0x33ee77(0x9d0)]=function(){const _0x1595d6=_0x33ee77;if(this[_0x1595d6(0x627)]())this['processBattleCoreJS']('PreStartTurnJS');VisuMZ['BattleCore'][_0x1595d6(0x358)]['call'](this);if(this[_0x1595d6(0x627)]())this['processBattleCoreJS'](_0x1595d6(0x5fd));},BattleManager['processTurn']=function(){const _0x31c60a=_0x33ee77,_0x437571=this[_0x31c60a(0x7c0)],_0x55fd87=_0x437571[_0x31c60a(0x628)]();_0x55fd87?(_0x55fd87[_0x31c60a(0x260)](),_0x55fd87['isValid']()?(this[_0x31c60a(0x16b)](),_0x437571[_0x31c60a(0xa8b)]()):(_0x437571[_0x31c60a(0xa8b)](),this['endAction']())):(this[_0x31c60a(0x7ae)](),this[_0x31c60a(0x7c0)]=null);},VisuMZ[_0x33ee77(0x993)]['BattleManager_startAction']=BattleManager[_0x33ee77(0x16b)],BattleManager[_0x33ee77(0x16b)]=function(){const _0x49c8e7=_0x33ee77,_0x5d53e3=this[_0x49c8e7(0x7c0)][_0x49c8e7(0x628)](),_0x3f2334=this[_0x49c8e7(0x7c0)];_0x5d53e3&&_0x5d53e3['subject']()===_0x3f2334&&_0x5d53e3[_0x49c8e7(0xb37)]('PreStartActionJS'),VisuMZ[_0x49c8e7(0x993)][_0x49c8e7(0xb42)]['call'](this),_0x5d53e3&&_0x5d53e3[_0x49c8e7(0xaaf)]()===_0x3f2334&&_0x5d53e3[_0x49c8e7(0xb37)](_0x49c8e7(0x6a6));},VisuMZ[_0x33ee77(0x993)][_0x33ee77(0x837)]=BattleManager['endAction'],BattleManager[_0x33ee77(0x7ae)]=function(){const _0x483b64=_0x33ee77,_0x4f1e94=this[_0x483b64(0xac6)],_0x20e0ad=this[_0x483b64(0x7c0)];_0x4f1e94&&_0x4f1e94!==this['_lastAction']&&_0x4f1e94[_0x483b64(0xaaf)]()===_0x20e0ad&&_0x4f1e94[_0x483b64(0xb37)](_0x483b64(0x12c)),this['_subject']?VisuMZ[_0x483b64(0x993)][_0x483b64(0x837)][_0x483b64(0x88f)](this):this[_0x483b64(0x23a)]=_0x483b64(0x9f5),_0x4f1e94&&_0x4f1e94!==this[_0x483b64(0x7f3)]&&_0x4f1e94[_0x483b64(0xaaf)]()===_0x20e0ad&&_0x4f1e94[_0x483b64(0xb37)](_0x483b64(0x67c)),this[_0x483b64(0x55e)](this[_0x483b64(0x1ac)]()),this[_0x483b64(0x7f3)]=this[_0x483b64(0xac6)];},BattleManager[_0x33ee77(0x55e)]=function(_0xf06ab7){const _0x1d546e=_0x33ee77;for(const _0x57a4d1 of _0xf06ab7){if(!_0x57a4d1)continue;if(!_0x57a4d1[_0x1d546e(0x157)]())continue;_0x57a4d1[_0x1d546e(0x157)]()[_0x1d546e(0xa8f)]();}},BattleManager[_0x33ee77(0xc21)]=function(){const _0x476096=_0x33ee77;!this[_0x476096(0xb43)][_0x476096(0xa5d)]()&&this['endAction']();},Game_Battler[_0x33ee77(0x9a7)]['onAllActionsEnd']=function(){const _0x1dd4fb=_0x33ee77;this[_0x1dd4fb(0x170)]();if(Imported[_0x1dd4fb(0x4e6)]){const _0x142640=VisuMZ['SkillsStatesCore']['Settings'][_0x1dd4fb(0x95d)];_0x142640&&_0x142640[_0x1dd4fb(0xbc4)]===![]&&this[_0x1dd4fb(0x57f)](0x1);}else this[_0x1dd4fb(0x57f)](0x1);this[_0x1dd4fb(0x162)]();},VisuMZ[_0x33ee77(0x993)][_0x33ee77(0x96b)]=BattleManager[_0x33ee77(0xbc8)],BattleManager[_0x33ee77(0xbc8)]=function(_0x706ec0,_0x208255){const _0x2e9fb1=_0x33ee77;this['_bypassCanCounterCheck']=!![],VisuMZ[_0x2e9fb1(0x993)][_0x2e9fb1(0x96b)][_0x2e9fb1(0x88f)](this,_0x706ec0,_0x208255),this[_0x2e9fb1(0xae3)]=undefined;},BattleManager[_0x33ee77(0x7fc)]=function(){const _0x3cc923=_0x33ee77;this[_0x3cc923(0x6f5)]=VisuMZ[_0x3cc923(0x993)][_0x3cc923(0x12b)]['Mechanics'][_0x3cc923(0x8ac)]['call'](this);},VisuMZ[_0x33ee77(0x993)][_0x33ee77(0x806)]=BattleManager[_0x33ee77(0x6f4)],BattleManager['onEscapeSuccess']=function(){const _0x325769=_0x33ee77;this['processBattleCoreJS']('EscapeSuccessJS'),BattleManager[_0x325769(0x850)][_0x325769(0xb2f)](),VisuMZ[_0x325769(0x993)][_0x325769(0x806)][_0x325769(0x88f)](this),this[_0x325769(0x98d)](_0x325769(0xba6));},VisuMZ['BattleCore']['BattleManager_onEscapeFailure']=BattleManager[_0x33ee77(0x922)],BattleManager[_0x33ee77(0x922)]=function(){const _0x3d75a1=_0x33ee77;this[_0x3d75a1(0x29a)](_0x3d75a1(0x55f));const _0x403578=this[_0x3d75a1(0x6f5)];VisuMZ[_0x3d75a1(0x993)][_0x3d75a1(0x557)][_0x3d75a1(0x88f)](this),this[_0x3d75a1(0x6f5)]=_0x403578+VisuMZ[_0x3d75a1(0x993)][_0x3d75a1(0x12b)][_0x3d75a1(0x803)][_0x3d75a1(0x1ed)][_0x3d75a1(0x88f)](this),this[_0x3d75a1(0x50b)]=![],this[_0x3d75a1(0x98d)](_0x3d75a1(0x8fb));},BattleManager[_0x33ee77(0x6b3)]=function(){const _0x5d7327=_0x33ee77;let _0x51f43e=![];if(this[_0x5d7327(0x774)]())for(const _0x3042da of $gameTroop[_0x5d7327(0x220)]()){this[_0x5d7327(0xb43)][_0x5d7327(0x7ab)](_0x5d7327(0x25a),TextManager['emerge'][_0x5d7327(0x23d)](_0x3042da)),this[_0x5d7327(0xb43)][_0x5d7327(0x7ab)](_0x5d7327(0xc10)),_0x51f43e=!![];}if(this[_0x5d7327(0x7c8)])this[_0x5d7327(0xb43)][_0x5d7327(0x7ab)]('addText',TextManager[_0x5d7327(0x4aa)][_0x5d7327(0x23d)]($gameParty['name']())),this[_0x5d7327(0xb43)]['push'](_0x5d7327(0xc10));else this[_0x5d7327(0x366)]&&(this['_logWindow']['push']('addText',TextManager[_0x5d7327(0xbfa)][_0x5d7327(0x23d)]($gameParty[_0x5d7327(0xac3)]())),this[_0x5d7327(0xb43)][_0x5d7327(0x7ab)](_0x5d7327(0xc10)));_0x51f43e&&(this[_0x5d7327(0xb43)][_0x5d7327(0x7ab)](_0x5d7327(0xc10)),this[_0x5d7327(0xb43)][_0x5d7327(0x7ab)](_0x5d7327(0x7aa))),this[_0x5d7327(0x17e)]()&&this[_0x5d7327(0x8d1)]()&&(this['_tpbNeedsPartyCommand']=![]);},BattleManager[_0x33ee77(0x774)]=function(){const _0x2347ad=_0x33ee77;if(BattleManager[_0x2347ad(0x5bb)])return![];return VisuMZ['BattleCore'][_0x2347ad(0x12b)]['Enemy'][_0x2347ad(0x990)];},VisuMZ[_0x33ee77(0x993)][_0x33ee77(0x622)]=BattleManager[_0x33ee77(0x985)],BattleManager[_0x33ee77(0x985)]=function(){const _0x89c895=_0x33ee77;VisuMZ['BattleCore'][_0x89c895(0x622)][_0x89c895(0x88f)](this),this[_0x89c895(0xc06)]()&&this[_0x89c895(0x8d1)]()&&!this[_0x89c895(0x366)]&&$gameParty[_0x89c895(0x6ca)]()&&this[_0x89c895(0x4dc)]();},BattleManager[_0x33ee77(0x8d1)]=function(){return VisuMZ['BattleCore']['Settings']['PartyCmd']['SkipPartyCmd'];},BattleManager['checkTpbInputOpen']=function(){const _0x5f2549=_0x33ee77;this[_0x5f2549(0x4b3)]()&&this['selectNextCommand']();},VisuMZ[_0x33ee77(0x993)]['Scene_Battle_startActorCommandSelection']=Scene_Battle[_0x33ee77(0x9a7)][_0x33ee77(0x65a)],Scene_Battle[_0x33ee77(0x9a7)][_0x33ee77(0x65a)]=function(){const _0x1a3d40=_0x33ee77;VisuMZ[_0x1a3d40(0x993)][_0x1a3d40(0x551)]['call'](this),BattleManager[_0x1a3d40(0x17e)]()&&BattleManager['_tpbNeedsPartyCommand']&&(BattleManager[_0x1a3d40(0x235)]=![],this[_0x1a3d40(0x543)]());},BattleManager[_0x33ee77(0xadc)]=function(_0x468124,_0x57bb2a,_0x3e8dc2){const _0x325a54=_0x33ee77;if(!_0x3e8dc2)return;if(!_0x468124)return;if(!_0x57bb2a)return;const _0x34730e=this[_0x325a54(0xac6)];this[_0x325a54(0xac6)]=new Game_Action(_0x468124);if(DataManager['isItem'](_0x3e8dc2))this[_0x325a54(0xac6)][_0x325a54(0x6e3)](_0x3e8dc2['id']);if(DataManager['isSkill'](_0x3e8dc2))this[_0x325a54(0xac6)][_0x325a54(0x230)](_0x3e8dc2['id']);if(this[_0x325a54(0xac6)][_0x325a54(0x5b0)]())BattleManager[_0x325a54(0x6fc)](_0x468124,_0x57bb2a);this[_0x325a54(0xac6)]=_0x34730e;},BattleManager['invokeMagicReflection']=function(_0x4fe104,_0x28e908){const _0x28785c=_0x33ee77;this[_0x28785c(0xac6)]['_reflectionTarget']=_0x28e908,this['_logWindow'][_0x28785c(0x707)](_0x28e908),this[_0x28785c(0xb43)]['displayReflectionPlayBack'](_0x4fe104,this['_action']),this['_action'][_0x28785c(0x4e9)](_0x4fe104),this[_0x28785c(0xb43)]['displayActionResults'](_0x4fe104,_0x4fe104);},VisuMZ['BattleCore'][_0x33ee77(0x55c)]=BattleManager[_0x33ee77(0x66b)],BattleManager[_0x33ee77(0x66b)]=function(){const _0x343cbd=_0x33ee77;VisuMZ[_0x343cbd(0x993)]['BattleManager_makeActionOrders']['call'](this),this[_0x343cbd(0x2b1)]=this['_actionBattlers'][_0x343cbd(0x313)](_0x36c746=>_0x36c746&&_0x36c746[_0x343cbd(0xbdf)]());},VisuMZ[_0x33ee77(0x993)][_0x33ee77(0x9a3)]=BattleManager[_0x33ee77(0x359)],BattleManager[_0x33ee77(0x359)]=function(_0x2e7039){const _0x3231e9=_0x33ee77;if(this['_phase']===_0x3231e9(0x5cc))this[_0x3231e9(0x338)]();else this[_0x3231e9(0x23a)]===_0x3231e9(0x9eb)?this[_0x3231e9(0x7d7)]():VisuMZ[_0x3231e9(0x993)]['BattleManager_updatePhase'][_0x3231e9(0x88f)](this,_0x2e7039);},BattleManager[_0x33ee77(0x295)]=function(){const _0x575fda=_0x33ee77;this['_allTargets']=this[_0x575fda(0x3ae)][_0x575fda(0x9fd)](0x0),this[_0x575fda(0x27a)]=0x0,this[_0x575fda(0x608)]=this[_0x575fda(0x901)][0x0]||null,this[_0x575fda(0x23a)]=_0x575fda(0x5cc);},BattleManager[_0x33ee77(0x338)]=function(){const _0x11d385=_0x33ee77;!this[_0x11d385(0x686)]()&&!this[_0x11d385(0xb43)][_0x11d385(0xa5d)]()&&(this['_phase']=_0x11d385(0x4a8));},BattleManager['forceAction']=function(_0x4eb9a0){const _0x2d2b60=_0x33ee77;this['_actionBattlers']['remove'](_0x4eb9a0);if(_0x4eb9a0===this[_0x2d2b60(0x7c0)])return;const _0xfee3b3=JsonEx[_0x2d2b60(0x266)](_0x4eb9a0[_0x2d2b60(0x628)]());this[_0x2d2b60(0xbd8)][_0x2d2b60(0x7ab)]([_0x4eb9a0,_0xfee3b3]);},BattleManager[_0x33ee77(0x73f)]=function(){},BattleManager['updateStart']=function(){const _0x77eb45=_0x33ee77;if(this[_0x77eb45(0x17e)]())this[_0x77eb45(0x23a)]='turn';else this['_forcedBattlers'][_0x77eb45(0x70c)]>0x0?this[_0x77eb45(0x23a)]=_0x77eb45(0x9f5):this[_0x77eb45(0x985)]();},BattleManager['getNextSubject']=function(){const _0x33f84a=_0x33ee77,_0x4bb2df=this[_0x33f84a(0x7c0)];_0x4bb2df&&this[_0x33f84a(0x17e)]()&&_0x4bb2df[_0x33f84a(0x34a)](_0x33f84a(0x6c4));for(;;){const _0x20bf04=this[_0x33f84a(0xbef)]();if(!_0x20bf04)return null;if(_0x20bf04[_0x33f84a(0x527)]()&&_0x20bf04[_0x33f84a(0x4ad)]())return _0x20bf04;}},BattleManager[_0x33ee77(0xbef)]=function(){const _0x102049=_0x33ee77;if(this[_0x102049(0xbd8)]['length']>0x0){const _0x269c84=this[_0x102049(0xbd8)][_0x102049(0x2e8)](),_0x4a4063=_0x269c84[0x0];return _0x4a4063[_0x102049(0x29e)]=_0x4a4063['_actions']||[],_0x4a4063['_actions'][0x0]=_0x269c84[0x1],_0x4a4063;}else return this['_actionBattlers'][_0x102049(0x2e8)]();},VisuMZ[_0x33ee77(0x993)]['Game_Battler_forceAction']=Game_Battler[_0x33ee77(0x9a7)]['forceAction'],Game_Battler[_0x33ee77(0x9a7)][_0x33ee77(0x9eb)]=function(_0x3f11a1,_0x38f0fd){const _0x5c51eb=_0x33ee77;VisuMZ['BattleCore'][_0x5c51eb(0x4c4)][_0x5c51eb(0x88f)](this,_0x3f11a1,_0x38f0fd),this[_0x5c51eb(0x29e)][this[_0x5c51eb(0x29e)][_0x5c51eb(0x70c)]-0x1][_0x5c51eb(0x964)]=!![];},Game_Interpreter[_0x33ee77(0x9a7)][_0x33ee77(0xbae)]=function(_0x115acf){const _0x429a7d=_0x33ee77;return this[_0x429a7d(0x3fe)](_0x115acf[0x0],_0x115acf[0x1],_0x328cc7=>{const _0x44dce7=_0x429a7d;!_0x328cc7[_0x44dce7(0x687)]()&&(_0x328cc7[_0x44dce7(0x9eb)](_0x115acf[0x2],_0x115acf[0x3]),BattleManager[_0x44dce7(0x9eb)](_0x328cc7));}),!![];},VisuMZ[_0x33ee77(0x993)][_0x33ee77(0x3d1)]=Game_Battler[_0x33ee77(0x9a7)]['makeSpeed'],Game_Battler['prototype'][_0x33ee77(0x723)]=function(){const _0x5b7be2=_0x33ee77;VisuMZ[_0x5b7be2(0x993)][_0x5b7be2(0x3d1)][_0x5b7be2(0x88f)](this),this[_0x5b7be2(0x29e)][_0x5b7be2(0x70c)]<=0x0&&(this[_0x5b7be2(0xa73)]=Number[_0x5b7be2(0x1c0)]);},BattleManager[_0x33ee77(0x1d9)]=function(){const _0x2b9294=_0x33ee77;if(VisuMZ['BattleCore'][_0x2b9294(0x12b)][_0x2b9294(0x133)][_0x2b9294(0x1a4)]??!![])return![];return SceneManager[_0x2b9294(0x5d9)]()&&this[_0x2b9294(0x77d)];},VisuMZ[_0x33ee77(0x993)][_0x33ee77(0x370)]=BattleManager[_0x33ee77(0x4dc)],BattleManager[_0x33ee77(0x4dc)]=function(){const _0x55f234=_0x33ee77;this[_0x55f234(0x17e)]()?this[_0x55f234(0x7e3)]():VisuMZ[_0x55f234(0x993)][_0x55f234(0x370)][_0x55f234(0x88f)](this);},BattleManager[_0x33ee77(0x7e3)]=function(){const _0x1cd375=_0x33ee77;if(this['_currentActor']){if(this['_currentActor'][_0x1cd375(0x4dc)]())return;this['finishActorInput'](),this[_0x1cd375(0x5b2)](),!this[_0x1cd375(0x7c0)]&&!this[_0x1cd375(0x7ee)]&&SceneManager['_scene'][_0x1cd375(0x524)]();}else!this['_subject']&&this[_0x1cd375(0x352)]();},BattleManager[_0x33ee77(0x5b2)]=function(){const _0x26b479=_0x33ee77;(!this[_0x26b479(0x4b3)]()||this['needsActorInputCancel']())&&(this['_tpbSceneChangeCacheActor']&&(!$gameParty[_0x26b479(0xa6a)]()['includes'](this['_tpbSceneChangeCacheActor'])&&(this[_0x26b479(0x5f3)]=null)),!this[_0x26b479(0x5f3)]?(this[_0x26b479(0xb67)](),this[_0x26b479(0x7ee)]=null,this['_inputting']=![]):this[_0x26b479(0x613)]());},BattleManager[_0x33ee77(0x613)]=function(){const _0x31853b=_0x33ee77;!$gameParty[_0x31853b(0xa6a)]()[_0x31853b(0x741)](this[_0x31853b(0x5f3)])&&(this[_0x31853b(0x5f3)]=null),this[_0x31853b(0x5f3)]?(this['_currentActor']=this[_0x31853b(0x5f3)],this[_0x31853b(0x7ee)][_0x31853b(0x3ee)]=_0x31853b(0x3d2),this[_0x31853b(0x50b)]=!![],this[_0x31853b(0x5f3)]=null):(this[_0x31853b(0xb67)](),this[_0x31853b(0x7ee)]=null,this[_0x31853b(0x50b)]=![]);},VisuMZ[_0x33ee77(0x993)][_0x33ee77(0x5a6)]=BattleManager[_0x33ee77(0x576)],BattleManager[_0x33ee77(0x576)]=function(){const _0x523793=_0x33ee77;return this['_phase']===_0x523793(0x5cc)?this['battleCoreTpbMainPhase']():VisuMZ[_0x523793(0x993)][_0x523793(0x5a6)][_0x523793(0x88f)](this);},BattleManager[_0x33ee77(0x3d4)]=function(){const _0x3e32ee=_0x33ee77;return this[_0x3e32ee(0x6f3)]();},VisuMZ['BattleCore'][_0x33ee77(0x520)]=BattleManager['cancelActorInput'],BattleManager[_0x33ee77(0xb67)]=function(){const _0x453a49=_0x33ee77;this[_0x453a49(0x17e)]()&&this[_0x453a49(0x23a)]===_0x453a49(0x5db)&&(this[_0x453a49(0x7ee)]=null),VisuMZ[_0x453a49(0x993)][_0x453a49(0x520)][_0x453a49(0x88f)](this);},VisuMZ['BattleCore'][_0x33ee77(0xb5b)]=BattleManager[_0x33ee77(0x21e)],BattleManager[_0x33ee77(0x21e)]=function(){const _0x54d9f6=_0x33ee77,_0x1b40e7=this[_0x54d9f6(0x7ee)];if(_0x1b40e7&&!_0x1b40e7[_0x54d9f6(0x21e)]()){const _0x328751=_0x1b40e7[_0x54d9f6(0x9a4)];_0x1b40e7[_0x54d9f6(0x29e)][_0x328751]=new Game_Action(_0x1b40e7);}return VisuMZ[_0x54d9f6(0x993)]['BattleManager_inputtingAction'][_0x54d9f6(0x88f)](this);},VisuMZ[_0x33ee77(0x993)][_0x33ee77(0x952)]=BattleManager['checkSubstitute'],BattleManager[_0x33ee77(0x607)]=function(_0xd644ef){const _0x18e5f5=_0x33ee77;if(this[_0x18e5f5(0xac6)][_0x18e5f5(0x25d)]())return![];return VisuMZ[_0x18e5f5(0x993)][_0x18e5f5(0x952)]['call'](this,_0xd644ef);},SceneManager[_0x33ee77(0x5d9)]=function(){const _0x2abb18=_0x33ee77;return this['_scene']&&this[_0x2abb18(0x473)][_0x2abb18(0xa94)]===Scene_Battle;},SceneManager['isBattleFlipped']=function(){const _0x2735bb=_0x33ee77;return Spriteset_Battle[_0x2735bb(0x9a7)]['isFlipped']();},SceneManager[_0x33ee77(0x4b6)]=function(){if(SceneManager['isPreviousScene'](Scene_Options))return!![];return![];},SceneManager[_0x33ee77(0x9d1)]=function(){const _0x304254=_0x33ee77;if(SceneManager[_0x304254(0x55b)](Scene_Options))return!![];return![];},SceneManager['checkSceneBattleTransitionable']=function(_0x3cc9e1){const _0x44bcd5=_0x33ee77;if(!SceneManager['isSceneBattle']())return!![];const _0x293891=[_0x44bcd5(0x767),'Scene_Party',_0x44bcd5(0x4cb)];return _0x293891[_0x44bcd5(0x741)](_0x3cc9e1[_0x44bcd5(0xac3)]);},VisuMZ['BattleCore'][_0x33ee77(0x504)]=SceneManager['push'],SceneManager[_0x33ee77(0x7ab)]=function(_0x159da0){const _0xa32ed3=_0x33ee77;if(!SceneManager[_0xa32ed3(0xb8d)](_0x159da0))return this[_0xa32ed3(0x40b)](_0x159da0);VisuMZ['BattleCore'][_0xa32ed3(0x504)]['call'](this,_0x159da0);},SceneManager[_0x33ee77(0x40b)]=function(_0x9ac15a){const _0x2f6552=_0x33ee77;if(!$gameTemp[_0x2f6552(0x7e4)]())return;if(this[_0x2f6552(0x44f)])return;this[_0x2f6552(0x44f)]=!![];let _0x33be1c='';_0x33be1c+=_0x2f6552(0x68f),_0x33be1c+=_0x2f6552(0x73b)[_0x2f6552(0x23d)](_0x9ac15a[_0x2f6552(0xac3)]),alert(_0x33be1c);},VisuMZ[_0x33ee77(0x993)][_0x33ee77(0x156)]=Game_Temp[_0x33ee77(0x9a7)][_0x33ee77(0x54f)],Game_Temp[_0x33ee77(0x9a7)][_0x33ee77(0x54f)]=function(){const _0x2d902b=_0x33ee77;VisuMZ[_0x2d902b(0x993)][_0x2d902b(0x156)]['call'](this),this[_0x2d902b(0x506)]=[];},VisuMZ['BattleCore'][_0x33ee77(0x4c9)]=Game_Temp[_0x33ee77(0x9a7)][_0x33ee77(0x84d)],Game_Temp[_0x33ee77(0x9a7)]['requestAnimation']=function(_0x2a6c3c,_0x366f7c,_0x48cf9e){const _0x480af6=_0x33ee77;_0x2a6c3c[_0x480af6(0x259)](null)[_0x480af6(0x259)](undefined),_0x2a6c3c=_0x2a6c3c[_0x480af6(0x313)]((_0x5bcdd2,_0x272e84,_0x348bc0)=>_0x348bc0[_0x480af6(0xba4)](_0x5bcdd2)===_0x272e84);SceneManager['isSceneBattle']()&&SceneManager[_0x480af6(0x8ad)]()&&(_0x48cf9e=!_0x48cf9e);VisuMZ[_0x480af6(0x993)]['Game_Temp_requestAnimation'][_0x480af6(0x88f)](this,_0x2a6c3c,_0x366f7c,_0x48cf9e);SceneManager[_0x480af6(0x5d9)]()&&BattleManager[_0x480af6(0x850)][_0x480af6(0x21a)]();for(const _0x4ec1ab of _0x2a6c3c){_0x4ec1ab&&_0x4ec1ab[_0x480af6(0x43e)]&&_0x4ec1ab[_0x480af6(0x43e)]()&&_0x4ec1ab[_0x480af6(0x3e9)]();}},Game_Temp[_0x33ee77(0x9a7)]['setLastPluginCommandInterpreter']=function(_0x10b4aa){const _0x56ed18=_0x33ee77;this[_0x56ed18(0x988)]=_0x10b4aa;},Game_Temp[_0x33ee77(0x9a7)][_0x33ee77(0x87a)]=function(){return this['_lastPluginCommandInterpreter'];},Game_Temp[_0x33ee77(0x9a7)][_0x33ee77(0x26e)]=function(){this['_forcedBattleLayout']=undefined;},Game_Temp[_0x33ee77(0x9a7)]['applyForcedGameTroopSettingsBattleCore']=function(_0x3cd103){const _0x8e7ec3=_0x33ee77;$gameMap&&$dataMap&&$dataMap['note']&&this[_0x8e7ec3(0x398)]($dataMap[_0x8e7ec3(0x448)]);const _0x1d4530=$dataTroops[_0x3cd103];if(_0x1d4530){let _0x4e9320=DataManager[_0x8e7ec3(0xbdd)](_0x1d4530['id']);this[_0x8e7ec3(0x398)](_0x4e9320);}},Game_Temp[_0x33ee77(0x9a7)][_0x33ee77(0x398)]=function(_0x51fda8){const _0x5ac810=_0x33ee77;if(!_0x51fda8)return;if(_0x51fda8[_0x5ac810(0x7c1)](/<(?:BATTLELAYOUT|BATTLE LAYOUT|LAYOUT):[ ](.*?)>/i)){const _0xc84235=String(RegExp['$1']);if(_0xc84235['match'](/DEFAULT/i))this[_0x5ac810(0xb87)]=_0x5ac810(0x331);else{if(_0xc84235['match'](/LIST/i))this[_0x5ac810(0xb87)]='list';else{if(_0xc84235[_0x5ac810(0x7c1)](/XP/i))this[_0x5ac810(0xb87)]='xp';else{if(_0xc84235['match'](/PORTRAIT/i))this[_0x5ac810(0xb87)]=_0x5ac810(0x9f2);else{if(_0xc84235[_0x5ac810(0x7c1)](/BORDER/i))this['_forcedBattleLayout']='border';else{if(_0xc84235[_0x5ac810(0x7c1)](/(?:SIDEVIEW UI|SIDEVIEW)/i))Imported[_0x5ac810(0x154)]?this[_0x5ac810(0xb87)]=_0x5ac810(0x2c6):this['_forcedBattleLayout']=_0x5ac810(0x331);else _0xc84235[_0x5ac810(0x7c1)](/(?:FRONTVIEW UI|FRONTVIEW)/i)&&(Imported[_0x5ac810(0x762)]?this['_forcedBattleLayout']='frontview_ui':this['_forcedBattleLayout']='default');}}}}}}},VisuMZ['BattleCore'][_0x33ee77(0x9e0)]=Game_Temp['prototype'][_0x33ee77(0x7b2)],Game_Temp[_0x33ee77(0x9a7)]['requestBalloon']=function(_0x5f524d,_0x53dc45){const _0x17120a=_0x33ee77;SceneManager['isSceneBattle']()?this[_0x17120a(0x60a)](_0x5f524d,_0x53dc45):VisuMZ[_0x17120a(0x993)]['Game_Temp_requestBalloon'][_0x17120a(0x88f)](this,_0x5f524d,_0x53dc45);},Game_Temp['prototype'][_0x33ee77(0x60a)]=function(_0x45af57,_0x29b4e6){const _0x3cf0f5=_0x33ee77,_0x333c7d={'target':_0x45af57,'balloonId':_0x29b4e6};this[_0x3cf0f5(0x506)]=this['_battleBalloonQueue']||[],this['_battleBalloonQueue']['push'](_0x333c7d);},Game_Temp[_0x33ee77(0x9a7)][_0x33ee77(0x558)]=function(){const _0x2b4167=_0x33ee77;return this[_0x2b4167(0x506)]=this[_0x2b4167(0x506)]||[],this[_0x2b4167(0x506)]['shift']();},Game_Temp[_0x33ee77(0x9a7)]['clearBattleBalloons']=function(){const _0x328775=_0x33ee77;this[_0x328775(0x506)]=[];},Spriteset_Battle['prototype'][_0x33ee77(0x36d)]=function(){const _0xaf81f4=_0x33ee77;this[_0xaf81f4(0xb18)]===undefined&&(this[_0xaf81f4(0xb18)]=[]);for(const _0x499a4f of this['_battleBalloonSprites']){!_0x499a4f[_0xaf81f4(0x38d)]()&&this[_0xaf81f4(0x3a7)](_0x499a4f);}this[_0xaf81f4(0x8c5)]();},Spriteset_Battle[_0x33ee77(0x9a7)][_0x33ee77(0x8c5)]=function(){const _0x53aad2=_0x33ee77;for(;;){const _0x133401=$gameTemp[_0x53aad2(0x558)]();if(_0x133401)this[_0x53aad2(0x141)](_0x133401);else break;}},Spriteset_Battle[_0x33ee77(0x9a7)][_0x33ee77(0x141)]=function(_0x163c1d){const _0x2a85e6=_0x33ee77,_0x1ea01f=this[_0x2a85e6(0xa5a)](_0x163c1d[_0x2a85e6(0x6d6)]);if(_0x1ea01f){let _0x87dc66=null;Imported[_0x2a85e6(0x188)]&&Array[_0x2a85e6(0x683)](_0x163c1d[_0x2a85e6(0x616)])?_0x87dc66=new Sprite_IconBalloon():_0x87dc66=new Sprite_Balloon(),_0x87dc66[_0x2a85e6(0xa44)]=_0x163c1d[_0x2a85e6(0x6d6)],_0x87dc66['_target']=_0x1ea01f,_0x87dc66[_0x2a85e6(0x608)][_0x2a85e6(0x5de)]=_0x1ea01f,_0x87dc66[_0x2a85e6(0x888)](_0x1ea01f,_0x163c1d['balloonId']),BattleManager[_0x2a85e6(0x408)](_0x87dc66),this['_battleBalloonSprites'][_0x2a85e6(0x7ab)](_0x87dc66);}},Spriteset_Battle[_0x33ee77(0x9a7)]['removeBattleBalloon']=function(_0x847cd8){const _0x56d5d5=_0x33ee77;this[_0x56d5d5(0xb18)][_0x56d5d5(0x259)](_0x847cd8),BattleManager['removeChildFromUiContainer'](_0x847cd8),_0x847cd8['destroy']();},Sprite_Battler[_0x33ee77(0x9a7)][_0x33ee77(0x119)]=function(_0x57cbf4,_0x234f2f){},Sprite_Battler[_0x33ee77(0x9a7)]['isSpriteVS8dir']=function(){return![];},Spriteset_Battle[_0x33ee77(0x9a7)][_0x33ee77(0x294)]=function(){const _0x305a51=_0x33ee77;return this['_battleBalloonSprites']=this[_0x305a51(0xb18)]||[],this[_0x305a51(0xb18)][_0x305a51(0x70c)]>0x0;},VisuMZ[_0x33ee77(0x993)][_0x33ee77(0x70f)]=Game_System[_0x33ee77(0x9a7)]['initialize'],Game_System['prototype'][_0x33ee77(0x54f)]=function(){const _0x5a1294=_0x33ee77;VisuMZ[_0x5a1294(0x993)][_0x5a1294(0x70f)]['call'](this),this[_0x5a1294(0x282)]();},Game_System[_0x33ee77(0x9a7)][_0x33ee77(0x282)]=function(){const _0x370357=_0x33ee77;this[_0x370357(0x386)]=this['_defeatedEnemies']||[];},Game_System['prototype'][_0x33ee77(0x1de)]=function(){const _0x558730=_0x33ee77;if(this[_0x558730(0x386)]===undefined)this[_0x558730(0x282)]();return this[_0x558730(0x386)];},Game_System['prototype'][_0x33ee77(0x9c3)]=function(_0x2db720){const _0x3c7bd6=_0x33ee77;if(this[_0x3c7bd6(0x386)]===undefined)this['initBattleCore']();if(!_0x2db720)return;if(this[_0x3c7bd6(0x386)][_0x3c7bd6(0x741)](_0x2db720))return;this['_defeatedEnemies'][_0x3c7bd6(0x7ab)](_0x2db720),this['_defeatedEnemies']['sort']((_0x1129e4,_0x102904)=>_0x1129e4-_0x102904);},VisuMZ['BattleCore']['Game_BattlerBase_addNewState']=Game_BattlerBase[_0x33ee77(0x9a7)]['addNewState'],Game_BattlerBase[_0x33ee77(0x9a7)]['addNewState']=function(_0x41fff4){const _0x224ecd=_0x33ee77,_0x411052=this['isAlive'](),_0x5d7f55=this[_0x224ecd(0x717)]();VisuMZ[_0x224ecd(0x993)][_0x224ecd(0xa68)][_0x224ecd(0x88f)](this,_0x41fff4),this[_0x224ecd(0x43e)]()&&_0x411052&&this[_0x224ecd(0x385)]()&&(this[_0x224ecd(0x932)]=!this[_0x224ecd(0x92a)](),$gameSystem[_0x224ecd(0x9c3)](this['enemyId']())),SceneManager[_0x224ecd(0x5d9)]()&&_0x5d7f55!==this[_0x224ecd(0x717)]()&&(this[_0x224ecd(0x157)]()&&this[_0x224ecd(0x157)]()['refreshMotion']());},Game_Enemy[_0x33ee77(0x9a7)][_0x33ee77(0x92a)]=function(){const _0x2df3e7=_0x33ee77;return $gameSystem[_0x2df3e7(0x1de)]()[_0x2df3e7(0x741)](this[_0x2df3e7(0x16f)]);},VisuMZ['BattleCore']['Game_BattlerBase_eraseState']=Game_BattlerBase['prototype'][_0x33ee77(0x138)],Game_BattlerBase['prototype'][_0x33ee77(0x138)]=function(_0x1f22d6){const _0x187d5f=_0x33ee77,_0x16080b=this['_states'][_0x187d5f(0x741)](_0x1f22d6),_0x57fd6d=this[_0x187d5f(0x717)]();VisuMZ[_0x187d5f(0x993)][_0x187d5f(0x7e8)]['call'](this,_0x1f22d6),this[_0x187d5f(0x43e)]()&&_0x1f22d6===this[_0x187d5f(0x61b)]()&&this['isAlive']()&&(this[_0x187d5f(0x932)]=![]),!this[_0x187d5f(0xad5)]&&!this[_0x187d5f(0x5d3)]&&SceneManager['isSceneBattle']()&&(_0x16080b&&!this[_0x187d5f(0xa08)]['includes'](_0x1f22d6)&&this['requestMotionRefresh'](),_0x57fd6d!==this[_0x187d5f(0x717)]()&&(this[_0x187d5f(0x157)]()&&this[_0x187d5f(0x157)]()[_0x187d5f(0xa8f)]()));},VisuMZ[_0x33ee77(0x993)]['Game_Action_clear']=Game_Action[_0x33ee77(0x9a7)]['clear'],Game_Action[_0x33ee77(0x9a7)][_0x33ee77(0x7aa)]=function(){const _0x38718a=_0x33ee77;VisuMZ[_0x38718a(0x993)]['Game_Action_clear'][_0x38718a(0x88f)](this),this[_0x38718a(0x27c)]={'arPenRate':0x0,'arPenFlat':0x0,'arRedRate':0x0,'arRedFlat':0x0},this[_0x38718a(0xb97)]={'criticalHitRate':0x1,'criticalHitFlat':0x0,'criticalDmgRate':0x1,'criticalDmgFlat':0x0,'damageRate':0x1,'damageFlat':0x0,'hitRate':0x1,'hitFlat':0x0},this[_0x38718a(0x1ec)]=_0x38718a(0x331),this[_0x38718a(0x96d)]();},Game_Action[_0x33ee77(0x9a7)][_0x33ee77(0x96d)]=function(){this['_targetBattlerKey']='';},VisuMZ[_0x33ee77(0x993)][_0x33ee77(0xa20)]=Game_Action[_0x33ee77(0x9a7)]['setSubject'],Game_Action[_0x33ee77(0x9a7)][_0x33ee77(0x39a)]=function(_0x19197f){const _0x176680=_0x33ee77;VisuMZ[_0x176680(0x993)][_0x176680(0xa20)]['call'](this,_0x19197f),this[_0x176680(0x96d)]();},VisuMZ[_0x33ee77(0x993)][_0x33ee77(0x7ce)]=Game_Action[_0x33ee77(0x9a7)][_0x33ee77(0x230)],Game_Action[_0x33ee77(0x9a7)][_0x33ee77(0x230)]=function(_0x2b3aa6){const _0x502e6d=_0x33ee77;VisuMZ[_0x502e6d(0x993)][_0x502e6d(0x7ce)]['call'](this,_0x2b3aa6),this[_0x502e6d(0x96d)]();},VisuMZ[_0x33ee77(0x993)][_0x33ee77(0xa25)]=Game_Action['prototype'][_0x33ee77(0x6e3)],Game_Action[_0x33ee77(0x9a7)][_0x33ee77(0x6e3)]=function(_0x5aa34a){const _0x389d59=_0x33ee77;VisuMZ[_0x389d59(0x993)]['Game_Action_setItem'][_0x389d59(0x88f)](this,_0x5aa34a),this[_0x389d59(0x96d)]();},Game_Action[_0x33ee77(0x9a7)]['makeDamageValue']=function(_0x477faf,_0x34086e){const _0x55bcf3=_0x33ee77;return VisuMZ[_0x55bcf3(0x993)]['Settings']['Damage'][_0x55bcf3(0x7e6)][_0x55bcf3(0x88f)](this,_0x477faf,_0x34086e);},Game_Action[_0x33ee77(0x9a7)]['applyVariance']=function(_0x33fee7,_0x19f1eb){const _0x50a246=_0x33ee77;return VisuMZ[_0x50a246(0x993)][_0x50a246(0x12b)]['Damage']['VarianceFormulaJS'][_0x50a246(0x88f)](this,_0x33fee7,_0x19f1eb);},Game_Action[_0x33ee77(0x9a7)][_0x33ee77(0x9f0)]=function(_0x3fb994,_0x5c6f7a){const _0x3c61ea=_0x33ee77;return VisuMZ[_0x3c61ea(0x993)][_0x3c61ea(0x12b)]['Damage'][_0x3c61ea(0x2bc)][_0x3c61ea(0x88f)](this,_0x3fb994,_0x5c6f7a);},VisuMZ['BattleCore'][_0x33ee77(0x435)]=Game_Action[_0x33ee77(0x9a7)][_0x33ee77(0x509)],Game_Action[_0x33ee77(0x9a7)][_0x33ee77(0x509)]=function(_0x4b7679){const _0x16ad6b=_0x33ee77,_0x667b4c=this[_0x16ad6b(0x5b0)]()[_0x16ad6b(0x448)];if(_0x667b4c[_0x16ad6b(0x7c1)](/<ALWAYS HIT>/i))return 0x1;else{if(_0x667b4c[_0x16ad6b(0x7c1)](/<ALWAYS HIT RATE: (\d+)([%％])>/i))return Number(RegExp['$1'])/0x64;else{let _0x3ae9b1=VisuMZ[_0x16ad6b(0x993)][_0x16ad6b(0x435)]['call'](this,_0x4b7679);return _0x3ae9b1=this[_0x16ad6b(0xb97)]['hitRate']*_0x3ae9b1+this['_multipliers']['hitFlat'],$gameParty['inBattle']()&&(_0x3ae9b1=this['applyBattleCoreHitRateJS'](_0x3ae9b1,_0x4b7679)),_0x3ae9b1;}}},VisuMZ['BattleCore'][_0x33ee77(0x903)]=Game_Action[_0x33ee77(0x9a7)][_0x33ee77(0xbea)],Game_Action[_0x33ee77(0x9a7)]['updateLastTarget']=function(_0xe34845){const _0x51cefe=_0x33ee77;this[_0x51cefe(0x684)]=!![],VisuMZ[_0x51cefe(0x993)][_0x51cefe(0x903)][_0x51cefe(0x88f)](this,_0xe34845),this[_0x51cefe(0x684)]=undefined;},Game_Action[_0x33ee77(0x9a7)][_0x33ee77(0x5fa)]=function(_0xa17fc5){const _0x1887c2=_0x33ee77;window[_0x1887c2(0x4a8)]=this,window['a']=this[_0x1887c2(0xaaf)](),window['b']=_0xa17fc5,window[_0x1887c2(0x485)]=this['subject'](),window[_0x1887c2(0x6d6)]=_0xa17fc5,window[_0x1887c2(0xb10)]=this['item'](),window[_0x1887c2(0x24b)]=this[_0x1887c2(0x5b0)](),window[_0x1887c2(0x5b0)]=this[_0x1887c2(0x5b0)]();},Game_Action[_0x33ee77(0x9a7)]['clearGlobalVariables']=function(_0x3741cf){const _0x5d3c7a=_0x33ee77;window[_0x5d3c7a(0x4a8)]=undefined,window['a']=undefined,window['b']=undefined,window['user']=undefined,window['target']=undefined,window[_0x5d3c7a(0xb10)]=undefined,window['skill']=undefined,window['item']=undefined;},Game_Action[_0x33ee77(0x9a7)]['applyBattleCoreHitRateJS']=function(_0x196137,_0xa2d07){const _0x5c9aaa=_0x33ee77;if(this['_bypass_applyBattleCoreHitRateJS'])return _0x196137;this[_0x5c9aaa(0x5fa)](_0xa2d07),window[_0x5c9aaa(0x3c2)]=_0x196137;const _0x338dd7=VisuMZ[_0x5c9aaa(0x993)][_0x5c9aaa(0x4c1)];if(this[_0x5c9aaa(0x5b0)]()){if(this[_0x5c9aaa(0x5b0)]()[_0x5c9aaa(0x448)][_0x5c9aaa(0x7c1)](_0x338dd7[_0x5c9aaa(0x74c)])){const _0x3716e5=String(RegExp['$1']);try{eval(_0x3716e5);}catch(_0x18a22f){if($gameTemp[_0x5c9aaa(0x7e4)]())console[_0x5c9aaa(0x950)](_0x18a22f);}}}{const _0x15bd3e=this[_0x5c9aaa(0xaaf)]()['traitObjects']();for(const _0x28ee94 of _0x15bd3e){if(!_0x28ee94)continue;if(_0x28ee94[_0x5c9aaa(0x448)][_0x5c9aaa(0x7c1)](_0x338dd7['jsAccuracyAsUser'])){const _0xce9149=String(RegExp['$1']);try{eval(_0xce9149);}catch(_0x3c56fc){if($gameTemp[_0x5c9aaa(0x7e4)]())console[_0x5c9aaa(0x950)](_0x3c56fc);}}}}{const _0x3bdd65=_0xa2d07[_0x5c9aaa(0x335)]();for(const _0x82c193 of _0x3bdd65){if(!_0x82c193)continue;if(_0x82c193[_0x5c9aaa(0x448)][_0x5c9aaa(0x7c1)](_0x338dd7['jsAccuracyAsTarget'])){const _0x194cf0=String(RegExp['$1']);try{eval(_0x194cf0);}catch(_0x382aa1){if($gameTemp[_0x5c9aaa(0x7e4)]())console['log'](_0x382aa1);}}}}return _0x196137=window[_0x5c9aaa(0x3c2)],this[_0x5c9aaa(0x544)](_0xa2d07),_0x196137;},Game_Action[_0x33ee77(0x9a7)][_0x33ee77(0x9bf)]=function(_0x2c14ea){const _0x2d04fc=_0x33ee77;if(!this[_0x2d04fc(0x5b0)]()[_0x2d04fc(0x2d7)]['critical'])return 0x0;let _0x3ff2ea=VisuMZ[_0x2d04fc(0x993)][_0x2d04fc(0x12b)][_0x2d04fc(0x133)][_0x2d04fc(0x402)][_0x2d04fc(0x88f)](this,_0x2c14ea);return _0x3ff2ea=this[_0x2d04fc(0xb97)]['criticalHitRate']*_0x3ff2ea+this['_multipliers'][_0x2d04fc(0x98a)],$gameParty[_0x2d04fc(0x275)]()&&(_0x3ff2ea=this['applyBattleCoreCriticalHitRateJS'](_0x3ff2ea,_0x2c14ea)),_0x3ff2ea;},Game_Action[_0x33ee77(0x9a7)][_0x33ee77(0x489)]=function(_0x90f0a7,_0x378856){const _0x4b7b81=_0x33ee77;this[_0x4b7b81(0x5fa)](_0x378856),window[_0x4b7b81(0x3c2)]=_0x90f0a7;const _0x156180=VisuMZ['BattleCore'][_0x4b7b81(0x4c1)];{const _0x955704=this['subject']()[_0x4b7b81(0x335)]();for(const _0x4736ec of _0x955704){if(!_0x4736ec)continue;if(_0x4736ec['note'][_0x4b7b81(0x7c1)](_0x156180['jsCritRateAsUser'])){const _0x209623=String(RegExp['$1']);try{eval(_0x209623);}catch(_0x51d418){if($gameTemp[_0x4b7b81(0x7e4)]())console[_0x4b7b81(0x950)](_0x51d418);}}}}{const _0x22e105=_0x378856[_0x4b7b81(0x335)]();for(const _0xb542ed of _0x22e105){if(!_0xb542ed)continue;if(_0xb542ed[_0x4b7b81(0x448)][_0x4b7b81(0x7c1)](_0x156180[_0x4b7b81(0xa7d)])){const _0x2382c7=String(RegExp['$1']);try{eval(_0x2382c7);}catch(_0x1b59b4){if($gameTemp[_0x4b7b81(0x7e4)]())console[_0x4b7b81(0x950)](_0x1b59b4);}}}}return _0x90f0a7=window[_0x4b7b81(0x3c2)],this[_0x4b7b81(0x544)](_0x378856),_0x90f0a7;},Game_Action[_0x33ee77(0x9a7)][_0x33ee77(0x489)]=function(_0x12fb69,_0x5dd2a9){const _0x2b01bb=_0x33ee77;this[_0x2b01bb(0x5fa)](_0x5dd2a9);for(const _0x184f1d of this[_0x2b01bb(0xaaf)]()[_0x2b01bb(0x335)]()){if(!_0x184f1d)continue;key=VisuMZ[_0x2b01bb(0x993)][_0x2b01bb(0x240)](_0x184f1d,_0x2b01bb(0x196)),VisuMZ[_0x2b01bb(0x993)]['JS'][key]&&(_0x12fb69=VisuMZ[_0x2b01bb(0x993)]['JS'][key]['call'](this,this['subject'](),_0x5dd2a9,this[_0x2b01bb(0x5b0)](),_0x12fb69));}for(const _0x28f9e0 of _0x5dd2a9[_0x2b01bb(0x335)]()){if(!_0x28f9e0)continue;key=VisuMZ[_0x2b01bb(0x993)]['createKeyJS'](_0x28f9e0,_0x2b01bb(0xa7d)),VisuMZ[_0x2b01bb(0x993)]['JS'][key]&&(_0x12fb69=VisuMZ[_0x2b01bb(0x993)]['JS'][key][_0x2b01bb(0x88f)](this,this[_0x2b01bb(0xaaf)](),_0x5dd2a9,this[_0x2b01bb(0x5b0)](),_0x12fb69));}return this[_0x2b01bb(0x544)](_0x5dd2a9),_0x12fb69;},Game_Action[_0x33ee77(0x9a7)][_0x33ee77(0x86d)]=function(_0x596614){const _0x24e465=_0x33ee77;return _0x596614=VisuMZ[_0x24e465(0x993)]['Settings'][_0x24e465(0x133)][_0x24e465(0x97a)][_0x24e465(0x88f)](this,_0x596614),_0x596614=this[_0x24e465(0xb97)][_0x24e465(0x213)]*_0x596614+this[_0x24e465(0xb97)][_0x24e465(0x611)],_0x596614;},VisuMZ[_0x33ee77(0x993)]['Game_Action_evalDamageFormula']=Game_Action['prototype'][_0x33ee77(0x518)],Game_Action[_0x33ee77(0x9a7)][_0x33ee77(0x518)]=function(_0x32d7b5){const _0x433942=_0x33ee77;if(this[_0x433942(0x1ec)]!==_0x433942(0x331))return this['customDamageFormula'](_0x32d7b5);else return DataManager[_0x433942(0x47b)](this[_0x433942(0x5b0)]())===_0x433942(0xbb4)?VisuMZ[_0x433942(0x993)]['Game_Action_evalDamageFormula'][_0x433942(0x88f)](this,_0x32d7b5):this[_0x433942(0x7d2)](_0x32d7b5);},Game_Action[_0x33ee77(0x9a7)][_0x33ee77(0x9f4)]=function(_0x26f3bf){const _0xe9ecfd=_0x33ee77;this[_0xe9ecfd(0x1ec)]=_0x26f3bf;},Game_Action[_0x33ee77(0x9a7)][_0x33ee77(0xb6f)]=function(_0x1a0479){const _0xd8b534=_0x33ee77,_0x2f545a=this[_0xd8b534(0x5b0)](),_0x50a4d0=_0x2f545a['damage'][_0xd8b534(0x975)];_0x2f545a[_0xd8b534(0x2d7)][_0xd8b534(0x975)]=this['_customDamageFormula'];let _0x39e673=VisuMZ[_0xd8b534(0x993)][_0xd8b534(0x4a4)][_0xd8b534(0x88f)](this,_0x1a0479);return _0x2f545a[_0xd8b534(0x2d7)][_0xd8b534(0x975)]=_0x50a4d0,_0x39e673;},Game_Action[_0x33ee77(0x9a7)][_0x33ee77(0x9b1)]=function(){const _0x3b5f8b=_0x33ee77;if(this['item']()[_0x3b5f8b(0x448)][_0x3b5f8b(0x7c1)](/<DAMAGE STYLE:[ ](.*)>/i)){const _0xcbfcd=String(RegExp['$1'])[_0x3b5f8b(0x46b)]()[_0x3b5f8b(0xaf2)]();return _0xcbfcd;}return _0x3b5f8b(0xbb4);},Game_Action[_0x33ee77(0x9a7)]['evalDamageFormulaBattleCore']=function(_0x44e064){const _0x27d4fa=_0x33ee77,_0x5362a7=DataManager[_0x27d4fa(0x47b)](this['item']()),_0x457460=VisuMZ[_0x27d4fa(0x994)][_0x5362a7];try{return _0x457460[_0x27d4fa(0x529)][_0x27d4fa(0x88f)](this,_0x44e064);}catch(_0x51b92d){if($gameTemp['isPlaytest']())console[_0x27d4fa(0x950)](_0x51b92d);return VisuMZ['BattleCore'][_0x27d4fa(0x4a4)][_0x27d4fa(0x88f)](this);}},Game_Action[_0x33ee77(0x9a7)][_0x33ee77(0x360)]=function(_0x17a2dd,_0x46d213){const _0x60c830=_0x33ee77;if(this[_0x60c830(0x72e)]())return _0x46d213;const _0x59f124=this[_0x60c830(0xaaf)](),_0x3dc7af=_0x17a2dd;let _0x599027=[],_0x8be832=[];_0x599027[_0x60c830(0x7ab)](this[_0x60c830(0x27c)][_0x60c830(0x9fe)],this[_0x60c830(0x27c)][_0x60c830(0x6b9)]),_0x8be832[_0x60c830(0x7ab)](this[_0x60c830(0x27c)]['arPenRate'],this[_0x60c830(0x27c)]['arRedRate']);const _0x5bd4f8=this['isPhysical']()?/<ARMOR REDUCTION:[ ](\d+\.?\d*)>/i:/<MAGIC REDUCTION:[ ](\d+\.?\d*)>/i,_0x4a4fe3=this[_0x60c830(0x36e)]()?/<ARMOR REDUCTION:[ ](\d+\.?\d*)([%％])>/i:/<MAGIC REDUCTION:[ ](\d+\.?\d*)([%％])>/i,_0x906968=this['isPhysical']()?/<ARMOR PENETRATION:[ ](\d+\.?\d*)>/i:/<MAGIC PENETRATION:[ ](\d+\.?\d*)>/i,_0x1eb26b=this[_0x60c830(0x36e)]()?/<ARMOR PENETRATION:[ ](\d+\.?\d*)([%％])>/i:/<MAGIC PENETRATION:[ ](\d+\.?\d*)([%％])>/i;return _0x599027=_0x599027['concat'](_0x3dc7af[_0x60c830(0x335)]()['map'](_0x10e9a4=>_0x10e9a4&&_0x10e9a4['note'][_0x60c830(0x7c1)](_0x5bd4f8)?Number(RegExp['$1']):0x0)),_0x8be832=_0x8be832[_0x60c830(0x770)](_0x3dc7af[_0x60c830(0x335)]()['map'](_0x36d158=>_0x36d158&&_0x36d158[_0x60c830(0x448)]['match'](_0x4a4fe3)?Number(RegExp['$1'])/0x64:0x0)),_0x599027=_0x599027['concat'](_0x59f124[_0x60c830(0x335)]()[_0x60c830(0x6f2)](_0x1e644a=>_0x1e644a&&_0x1e644a['note'][_0x60c830(0x7c1)](_0x906968)?Number(RegExp['$1']):0x0)),_0x8be832=_0x8be832[_0x60c830(0x770)](_0x59f124[_0x60c830(0x335)]()[_0x60c830(0x6f2)](_0x3a1660=>_0x3a1660&&_0x3a1660[_0x60c830(0x448)][_0x60c830(0x7c1)](_0x1eb26b)?Number(RegExp['$1'])/0x64:0x0)),this[_0x60c830(0x5b0)]()[_0x60c830(0x448)][_0x60c830(0x7c1)](_0x906968)&&_0x599027['push'](Number(RegExp['$1'])),this[_0x60c830(0x5b0)]()[_0x60c830(0x448)][_0x60c830(0x7c1)](_0x1eb26b)&&_0x8be832[_0x60c830(0x7ab)](Number(RegExp['$1'])),_0x46d213=_0x599027[_0x60c830(0x424)]((_0x5eef75,_0x59a50d)=>_0x5eef75-_0x59a50d,_0x46d213),_0x46d213>0x0&&(_0x46d213=_0x8be832['reduce']((_0x20e515,_0x183934)=>_0x20e515*(0x1-_0x183934),_0x46d213)),_0x46d213;},VisuMZ[_0x33ee77(0x993)]['Game_Action_executeDamage']=Game_Action[_0x33ee77(0x9a7)][_0x33ee77(0x1c7)],Game_Action[_0x33ee77(0x9a7)][_0x33ee77(0x1c7)]=function(_0x13bb90,_0x15784c){const _0x25cd52=_0x33ee77;_0x15784c=_0x15784c*this[_0x25cd52(0xb97)][_0x25cd52(0xa80)],_0x15784c+=this[_0x25cd52(0xb97)][_0x25cd52(0x74b)]*(_0x15784c>=0x0?0x1:-0x1),_0x15784c=this[_0x25cd52(0x1fb)](_0x25cd52(0xc28),_0x13bb90,_0x15784c,![]),_0x15784c=this[_0x25cd52(0xb7a)](_0x15784c),_0x15784c>0x0?_0x15784c=Math['ceil'](_0x15784c):_0x15784c=Math[_0x25cd52(0x816)](_0x15784c),this['_executedValue']=_0x15784c,this[_0x25cd52(0xbfe)]=this[_0x25cd52(0xbfe)]||0x0,this[_0x25cd52(0xbfe)]+=_0x15784c,VisuMZ['BattleCore']['Game_Action_executeDamage'][_0x25cd52(0x88f)](this,_0x13bb90,_0x15784c),this[_0x25cd52(0x1fb)](_0x25cd52(0x4d4),_0x13bb90,_0x15784c,!![]);},Game_Action[_0x33ee77(0x9a7)]['applyDamageCaps']=function(_0x1bc268){const _0x1c4ca9=_0x33ee77;if(this[_0x1c4ca9(0x371)]())return _0x1bc268;return _0x1bc268=this[_0x1c4ca9(0x4f0)](_0x1bc268),_0x1bc268=this[_0x1c4ca9(0x165)](_0x1bc268),_0x1bc268;},Game_Action[_0x33ee77(0x9a7)][_0x33ee77(0x371)]=function(){const _0x49f6f1=_0x33ee77,_0x586a21=/<BYPASS DAMAGE CAP>/i;if(this[_0x49f6f1(0x5b0)]()['note']['match'](_0x586a21))return!![];if(this[_0x49f6f1(0xaaf)]()[_0x49f6f1(0x335)]()[_0x49f6f1(0x1d1)](_0x561a65=>_0x561a65&&_0x561a65['note']['match'](_0x586a21)))return!![];return!VisuMZ[_0x49f6f1(0x993)][_0x49f6f1(0x12b)][_0x49f6f1(0x133)][_0x49f6f1(0x31b)];},Game_Action[_0x33ee77(0x9a7)][_0x33ee77(0x4f0)]=function(_0x380b39){const _0x580703=_0x33ee77;if(!VisuMZ[_0x580703(0x993)][_0x580703(0x12b)][_0x580703(0x133)][_0x580703(0xa37)])return _0x380b39;const _0x5bafea=/<BYPASS SOFT DAMAGE CAP>/i;if(this[_0x580703(0x5b0)]()[_0x580703(0x448)][_0x580703(0x7c1)](_0x5bafea))return _0x380b39;if(this[_0x580703(0xaaf)]()[_0x580703(0x335)]()[_0x580703(0x1d1)](_0x376f61=>_0x376f61&&_0x376f61[_0x580703(0x448)]['match'](_0x5bafea)))return _0x380b39;const _0x5b9991=_0x380b39<0x0?-0x1:0x1;_0x380b39=Math[_0x580703(0x960)](_0x380b39);let _0x16bbc0=this['subject']()[_0x580703(0x710)]();this[_0x580703(0x5b0)]()['note'][_0x580703(0x7c1)](/<SOFT DAMAGE CAP:[ ]([\+\-]\d+)([%％])>/i)&&(_0x16bbc0+=Number(RegExp['$1'])/0x64);_0x16bbc0=_0x16bbc0[_0x580703(0x6a9)](0.01,0x1);const _0x1773fe=this['getHardDamageCap'](),_0x5ab084=_0x16bbc0*_0x1773fe;if(_0x380b39>_0x5ab084&&_0x1773fe>_0x5ab084){_0x380b39-=_0x5ab084;const _0x4dd018=VisuMZ[_0x580703(0x993)][_0x580703(0x12b)]['Damage'][_0x580703(0x980)],_0x3ce849=Math[_0x580703(0x657)](0x1-_0x380b39/((_0x1773fe-_0x5ab084)*_0x4dd018+_0x380b39),0.01);_0x380b39*=_0x3ce849,_0x380b39+=_0x5ab084;}return _0x380b39*_0x5b9991;},Game_Action[_0x33ee77(0x9a7)][_0x33ee77(0x85e)]=function(){const _0x3c61c5=_0x33ee77;return this['item']()[_0x3c61c5(0x448)][_0x3c61c5(0x7c1)](/<DAMAGE CAP:[ ](\d+)>/i)?Number(RegExp['$1']):this[_0x3c61c5(0xaaf)]()[_0x3c61c5(0x609)]();},Game_Action['prototype']['applyHardDamageCap']=function(_0x10ba80){const _0x172876=_0x33ee77;let _0x499372=this[_0x172876(0x85e)]();return _0x10ba80[_0x172876(0x6a9)](-_0x499372,_0x499372);},Game_Action['prototype'][_0x33ee77(0x186)]=function(){const _0x77a6fe=_0x33ee77;if(!this['item']())return![];if(!$gameParty[_0x77a6fe(0x275)]())return![];return(this['item']()[_0x77a6fe(0x448)]||'')['match'](/<DISPERSE DAMAGE>/i);},Game_Action['prototype'][_0x33ee77(0x6bd)]=function(_0x1a02a4){const _0x2153ab=_0x33ee77;if(this[_0x2153ab(0x186)]()){let _0x1838f1=BattleManager['_targets'];_0x1a02a4/=_0x1838f1[_0x2153ab(0x70c)],this[_0x2153ab(0x33a)]()&&(_0x1a02a4*=this[_0x2153ab(0xaaf)]()[_0x2153ab(0xa57)]()+0x1),_0x1a02a4=_0x1a02a4>0x0?Math['ceil'](_0x1a02a4):Math['floor'](_0x1a02a4);}return _0x1a02a4;},VisuMZ[_0x33ee77(0x993)][_0x33ee77(0xa27)]=Game_Action[_0x33ee77(0x9a7)]['makeDamageValue'],Game_Action['prototype'][_0x33ee77(0x742)]=function(_0x44d89a,_0x596e63){const _0x32bd61=_0x33ee77;let _0x2e33fb=VisuMZ[_0x32bd61(0x993)][_0x32bd61(0xa27)][_0x32bd61(0x88f)](this,_0x44d89a,_0x596e63);return this[_0x32bd61(0x6bd)](_0x2e33fb);},Game_Action[_0x33ee77(0x9a7)][_0x33ee77(0x11a)]=function(_0x430947,_0xa7403c){const _0x2611c9=_0x33ee77;let _0x5bc3cb=(_0x430947[_0x2611c9(0x6e5)]*_0xa7403c[_0x2611c9(0x374)]+_0xa7403c[_0x2611c9(0x29c)])*_0x430947[_0x2611c9(0x1e4)];_0x5bc3cb=this[_0x2611c9(0x6bd)](_0x5bc3cb),this[_0x2611c9(0x7e1)]()&&(_0x5bc3cb*=this[_0x2611c9(0xaaf)]()[_0x2611c9(0xb4e)]),_0x5bc3cb=Math[_0x2611c9(0x816)](_0x5bc3cb),_0x5bc3cb!==0x0&&(_0x430947[_0x2611c9(0x3ac)](_0x5bc3cb),this[_0x2611c9(0xbc2)](_0x430947));},Game_Action[_0x33ee77(0x9a7)][_0x33ee77(0x2ab)]=function(_0x3362d9,_0x54f01b){const _0xf10799=_0x33ee77;let _0x4b65c3=(_0x3362d9[_0xf10799(0x587)]*_0x54f01b[_0xf10799(0x374)]+_0x54f01b['value2'])*_0x3362d9[_0xf10799(0x1e4)];_0x4b65c3=this[_0xf10799(0x6bd)](_0x4b65c3),this[_0xf10799(0x7e1)]()&&(_0x4b65c3*=this['subject']()[_0xf10799(0xb4e)]),_0x4b65c3=Math[_0xf10799(0x816)](_0x4b65c3),_0x4b65c3!==0x0&&(_0x3362d9[_0xf10799(0x305)](_0x4b65c3),this[_0xf10799(0xbc2)](_0x3362d9));},Game_Action[_0x33ee77(0x9a7)][_0x33ee77(0x8d7)]=function(_0x31340b,_0xa84e21){const _0x2eced8=_0x33ee77;let _0x5bbbb9=Math['floor'](_0xa84e21[_0x2eced8(0x374)]);_0x5bbbb9=this['disperseDamage'](_0x5bbbb9),_0x5bbbb9!==0x0&&(_0x31340b[_0x2eced8(0x9b6)](_0x5bbbb9),this[_0x2eced8(0xbc2)](_0x31340b));},VisuMZ[_0x33ee77(0x993)]['Game_Action_apply']=Game_Action[_0x33ee77(0x9a7)][_0x33ee77(0x4e9)],Game_Action[_0x33ee77(0x9a7)]['apply']=function(_0x704249){const _0x5739b9=_0x33ee77;if(_0x704249&&_0x704249[_0x5739b9(0x43e)]())_0x704249['resetNameTempVisibility']();this[_0x5739b9(0x1fb)](_0x5739b9(0x7cb),_0x704249,0x0,!![]),VisuMZ[_0x5739b9(0x993)][_0x5739b9(0x594)]['call'](this,_0x704249),this[_0x5739b9(0x1fb)](_0x5739b9(0x709),_0x704249,this['_executedValue']||0x0,!![]),this['applyResultSwitches'](_0x704249);},Game_Action[_0x33ee77(0x9a7)][_0x33ee77(0x1fb)]=function(_0x42b461,_0x4ef1c1,_0x198fd9,_0x267af2){const _0x421b7e=_0x33ee77;if(this['_tempBattler']||this[_0x421b7e(0xad5)])return;_0x198fd9=_0x198fd9||0x0;const _0x1650a6=_0x198fd9,_0x4d0e86=VisuMZ[_0x421b7e(0x993)][_0x421b7e(0x12b)][_0x421b7e(0x803)],_0x558e31=_0x42b461[_0x421b7e(0x23d)]('');if(_0x4d0e86[_0x558e31]){_0x198fd9=_0x4d0e86[_0x558e31][_0x421b7e(0x88f)](this,_0x198fd9,_0x4ef1c1);if(_0x267af2)_0x198fd9=_0x1650a6;}let _0x42ef63=VisuMZ[_0x421b7e(0x993)][_0x421b7e(0x240)](this['item'](),_0x42b461['format'](''));if(VisuMZ[_0x421b7e(0x993)]['JS'][_0x42ef63]){_0x198fd9=VisuMZ[_0x421b7e(0x993)]['JS'][_0x42ef63][_0x421b7e(0x88f)](this,this[_0x421b7e(0xaaf)](),_0x4ef1c1,this[_0x421b7e(0x5b0)](),_0x198fd9);if(_0x267af2)_0x198fd9=_0x1650a6;}for(const _0x3bcd89 of this[_0x421b7e(0xaaf)]()[_0x421b7e(0x335)]()){if(!_0x3bcd89)continue;_0x42ef63=VisuMZ[_0x421b7e(0x993)]['createKeyJS'](_0x3bcd89,_0x42b461[_0x421b7e(0x23d)]('AsUser'));if(VisuMZ[_0x421b7e(0x993)]['JS'][_0x42ef63]){_0x198fd9=VisuMZ[_0x421b7e(0x993)]['JS'][_0x42ef63][_0x421b7e(0x88f)](this,this[_0x421b7e(0xaaf)](),_0x4ef1c1,_0x3bcd89,_0x198fd9);if(_0x267af2)_0x198fd9=_0x1650a6;}}for(const _0x80dbee of _0x4ef1c1[_0x421b7e(0x335)]()){if(!_0x80dbee)continue;_0x42ef63=VisuMZ[_0x421b7e(0x993)][_0x421b7e(0x240)](_0x80dbee,_0x42b461[_0x421b7e(0x23d)]('AsTarget'));if(VisuMZ[_0x421b7e(0x993)]['JS'][_0x42ef63]){_0x198fd9=VisuMZ[_0x421b7e(0x993)]['JS'][_0x42ef63][_0x421b7e(0x88f)](this,this[_0x421b7e(0xaaf)](),_0x4ef1c1,_0x80dbee,_0x198fd9);if(_0x267af2)_0x198fd9=_0x1650a6;}}return _0x198fd9;},Game_Action[_0x33ee77(0x9a7)][_0x33ee77(0xb37)]=function(_0x2867da){const _0x622a=_0x33ee77,_0x5ce62b=this[_0x622a(0xbfe)]||0x0,_0x293c42=VisuMZ[_0x622a(0x993)][_0x622a(0x12b)][_0x622a(0x803)],_0x186c30=_0x2867da[_0x622a(0x23d)]('');_0x293c42[_0x186c30]&&_0x293c42[_0x186c30][_0x622a(0x88f)](this,_0x5ce62b);let _0x3df1b0=VisuMZ['BattleCore'][_0x622a(0x240)](this[_0x622a(0x5b0)](),_0x2867da);VisuMZ[_0x622a(0x993)]['JS'][_0x3df1b0]&&VisuMZ[_0x622a(0x993)]['JS'][_0x3df1b0]['call'](this,this[_0x622a(0xaaf)](),this[_0x622a(0xaaf)](),this['item'](),_0x5ce62b);for(const _0x46bf30 of this[_0x622a(0xaaf)]()[_0x622a(0x335)]()){if(!_0x46bf30)continue;_0x3df1b0=VisuMZ['BattleCore'][_0x622a(0x240)](_0x46bf30,_0x2867da),VisuMZ[_0x622a(0x993)]['JS'][_0x3df1b0]&&VisuMZ[_0x622a(0x993)]['JS'][_0x3df1b0][_0x622a(0x88f)](this,this[_0x622a(0xaaf)](),this['subject'](),_0x46bf30,_0x5ce62b);}},Game_Action['prototype']['speed']=function(){const _0x19c1f5=_0x33ee77;return VisuMZ[_0x19c1f5(0x993)]['Settings'][_0x19c1f5(0x803)][_0x19c1f5(0x271)][_0x19c1f5(0x88f)](this);},Game_Action[_0x33ee77(0x9a7)][_0x33ee77(0x6b1)]=function(){const _0x99aa45=_0x33ee77;return VisuMZ[_0x99aa45(0x993)][_0x99aa45(0x12b)][_0x99aa45(0x803)][_0x99aa45(0x77f)];},Game_Action['prototype'][_0x33ee77(0xa71)]=function(){const _0x47bf84=_0x33ee77;if(this[_0x47bf84(0x1d6)]==='all\x20actors')return![];if(this[_0x47bf84(0x1d6)]===_0x47bf84(0x667))return![];if(!this[_0x47bf84(0x5b0)]())return![];return this[_0x47bf84(0x5b0)]()['note'][_0x47bf84(0x7c1)](/<JS TARGETS>/i);},Game_Action[_0x33ee77(0x9a7)][_0x33ee77(0x317)]=function(){const _0x29cdfd=_0x33ee77;if(this[_0x29cdfd(0x1d6)]==='all\x20actors')return![];if(this['_targetBattlerKey']==='all\x20enemies')return![];if(!this[_0x29cdfd(0xb1d)]&&this[_0x29cdfd(0xaaf)]()[_0x29cdfd(0x847)]())return![];if(this[_0x29cdfd(0xa71)]())return!![];if(!this['item']())return![];return typeof this[_0x29cdfd(0x5b0)]()[_0x29cdfd(0x519)]===_0x29cdfd(0x7f6);},VisuMZ[_0x33ee77(0x993)][_0x33ee77(0x893)]=Game_Action[_0x33ee77(0x9a7)]['isForOpponent'],Game_Action['prototype']['isForOpponent']=function(){const _0x5201fa=_0x33ee77;if(this[_0x5201fa(0x1d6)]===_0x5201fa(0xb9a))return![];if(this[_0x5201fa(0x1d6)]==='all\x20enemies')return!![];return this[_0x5201fa(0x317)]()&&!this[_0x5201fa(0xa71)]()?this[_0x5201fa(0x2ee)]():VisuMZ['BattleCore'][_0x5201fa(0x893)][_0x5201fa(0x88f)](this);},Game_Action[_0x33ee77(0x9a7)][_0x33ee77(0x2ee)]=function(){const _0x106299=_0x33ee77,_0x1687c6=String(this['item']()[_0x106299(0x519)]);if(_0x1687c6[_0x106299(0x7c1)](/ANY/i))return!![];return _0x1687c6[_0x106299(0x7c1)](/(?:ENEMY|ENEMIES|FOE|FOES)/i);},VisuMZ[_0x33ee77(0x993)][_0x33ee77(0x169)]=Game_Action[_0x33ee77(0x9a7)][_0x33ee77(0x25d)],Game_Action[_0x33ee77(0x9a7)]['isForFriend']=function(){const _0xa02175=_0x33ee77;if(this[_0xa02175(0x1d6)]===_0xa02175(0xb9a))return!![];if(this[_0xa02175(0x1d6)]===_0xa02175(0x667))return![];return this[_0xa02175(0x317)]()&&!this[_0xa02175(0xa71)]()?this[_0xa02175(0x86e)]():VisuMZ['BattleCore'][_0xa02175(0x169)][_0xa02175(0x88f)](this);},Game_Action[_0x33ee77(0x9a7)][_0x33ee77(0x86e)]=function(){const _0xf8ed84=_0x33ee77,_0x3029a6=String(this[_0xf8ed84(0x5b0)]()[_0xf8ed84(0x519)]);return _0x3029a6[_0xf8ed84(0x7c1)](/(?:ALLY|ALLIES|FRIEND|FRIENDS)/i);},Game_Action['prototype'][_0x33ee77(0x82d)]=function(){const _0x280666=_0x33ee77;if(this[_0x280666(0x317)]()&&!this['isCustomBattleScope']()){const _0x5eb408=String(this[_0x280666(0x5b0)]()[_0x280666(0x519)]);return _0x5eb408['match'](/(?:ENEMY|FOE)/i)&&_0x5eb408[_0x280666(0x7c1)](/OR/i)&&_0x5eb408['match'](/(?:ALLY|FRIEND)/i);}else return![];},Game_Action['prototype'][_0x33ee77(0xaca)]=function(){const _0x316f36=_0x33ee77;if(this['isForAnyone']()){const _0x2938a4=String(this[_0x316f36(0x5b0)]()[_0x316f36(0x519)]);if(_0x2938a4['match'](/(?:ALLY|FRIEND) OR (?:ENEMY|FOE)/i))return!![];}return![];},Game_Action[_0x33ee77(0x9a7)][_0x33ee77(0xa43)]=function(){const _0x1aad0a=_0x33ee77;if(this[_0x1aad0a(0x82d)]()){const _0x3169b1=String(this[_0x1aad0a(0x5b0)]()[_0x1aad0a(0x519)]);if(_0x3169b1[_0x1aad0a(0x7c1)](/(?:ENEMY|FOE) OR (?:ALLY|FRIEND)/i))return!![];}return![];},VisuMZ['BattleCore'][_0x33ee77(0x52d)]=Game_Action[_0x33ee77(0x9a7)][_0x33ee77(0xb38)],Game_Action[_0x33ee77(0x9a7)]['isForAliveFriend']=function(){const _0x2da5fa=_0x33ee77;if(this['_targetBattlerKey']===_0x2da5fa(0xb9a))return!![];return this[_0x2da5fa(0x317)]()&&!this[_0x2da5fa(0xa71)]()?this[_0x2da5fa(0x784)]():VisuMZ[_0x2da5fa(0x993)]['Game_Action_isForAliveFriend']['call'](this);},VisuMZ[_0x33ee77(0x993)][_0x33ee77(0xc1c)]=Game_Action[_0x33ee77(0x9a7)][_0x33ee77(0x11b)],Game_Action[_0x33ee77(0x9a7)][_0x33ee77(0x11b)]=function(){const _0xad9f68=_0x33ee77;if(this['_targetBattlerKey']==='all\x20actors')return VisuMZ[_0xad9f68(0x993)][_0xad9f68(0xc1c)][_0xad9f68(0x88f)](this);return VisuMZ[_0xad9f68(0x993)][_0xad9f68(0xc1c)]['call'](this);},Game_Action[_0x33ee77(0x9a7)][_0x33ee77(0x784)]=function(){const _0xf2bd57=_0x33ee77;if(this[_0xf2bd57(0x82d)]())return!![];return![];},Game_Action['prototype'][_0x33ee77(0x55d)]=function(){const _0x5acefe=_0x33ee77;return this[_0x5acefe(0x5b0)]()&&this['item']()[_0x5acefe(0x448)]['match'](/<CANNOT TARGET (?:USER|SELF)>/i);},VisuMZ[_0x33ee77(0x993)]['Game_Action_isForOne']=Game_Action[_0x33ee77(0x9a7)]['isForOne'],Game_Action[_0x33ee77(0x9a7)]['isForOne']=function(){const _0x2905f8=_0x33ee77;if(this[_0x2905f8(0x1d6)]===_0x2905f8(0xb9a))return![];if(this[_0x2905f8(0x1d6)]===_0x2905f8(0x667))return![];return this[_0x2905f8(0x317)]()&&!this[_0x2905f8(0xa71)]()?this[_0x2905f8(0x5f7)]():VisuMZ[_0x2905f8(0x993)][_0x2905f8(0x13d)][_0x2905f8(0x88f)](this);},Game_Action[_0x33ee77(0x9a7)][_0x33ee77(0x5f7)]=function(){const _0xdd567a=_0x33ee77;if(this[_0xdd567a(0x82d)]())return!![];return![];},VisuMZ[_0x33ee77(0x993)][_0x33ee77(0x7fa)]=Game_Action[_0x33ee77(0x9a7)][_0x33ee77(0x513)],Game_Action[_0x33ee77(0x9a7)]['isForRandom']=function(){const _0x274a6c=_0x33ee77;if(this['_targetBattlerKey']===_0x274a6c(0xb9a))return![];if(this[_0x274a6c(0x1d6)]==='all\x20enemies')return![];return this[_0x274a6c(0x317)]()&&!this[_0x274a6c(0xa71)]()?this['isForRandomBattleCore']():VisuMZ['BattleCore']['Game_Action_isForRandom'][_0x274a6c(0x88f)](this);},Game_Action[_0x33ee77(0x9a7)][_0x33ee77(0xb01)]=function(){const _0x26f9d4=_0x33ee77,_0x15d62c=String(this[_0x26f9d4(0x5b0)]()[_0x26f9d4(0x519)]);return _0x15d62c['match'](/(?:RAND|RANDOM)/i);},VisuMZ[_0x33ee77(0x993)][_0x33ee77(0x542)]=Game_Action[_0x33ee77(0x9a7)]['isForAll'],Game_Action[_0x33ee77(0x9a7)][_0x33ee77(0x92d)]=function(){const _0x636449=_0x33ee77;if(this['_targetBattlerKey']===_0x636449(0xb9a))return!![];if(this[_0x636449(0x1d6)]===_0x636449(0x667))return!![];return VisuMZ[_0x636449(0x993)][_0x636449(0x542)]['call'](this);},Game_Action['prototype'][_0x33ee77(0x552)]=function(){const _0x4fa86b=_0x33ee77;if(!this[_0x4fa86b(0x5b0)]())return![];if(this[_0x4fa86b(0x11b)]())return![];return(this[_0x4fa86b(0x5b0)]()['note']||'')['match'](/<SINGLE OR MULTIPLE SELECT>/i);},VisuMZ[_0x33ee77(0x993)]['Game_Action_testApply']=Game_Action[_0x33ee77(0x9a7)]['testApply'],Game_Action[_0x33ee77(0x9a7)]['testApply']=function(_0x336f63){const _0x4d4648=_0x33ee77;if(this[_0x4d4648(0x55d)]()&&_0x336f63===this['subject']())return![];return VisuMZ[_0x4d4648(0x993)][_0x4d4648(0x3c9)]['call'](this,_0x336f63);},VisuMZ[_0x33ee77(0x993)][_0x33ee77(0x241)]=Game_Action[_0x33ee77(0x9a7)][_0x33ee77(0x208)],Game_Action['prototype'][_0x33ee77(0x208)]=function(){const _0x7df371=_0x33ee77,_0x10bc5e=VisuMZ[_0x7df371(0x993)]['Game_Action_itemTargetCandidates']['call'](this);if(this[_0x7df371(0x55d)]())_0x10bc5e[_0x7df371(0x259)](this['subject']());return _0x10bc5e;},VisuMZ[_0x33ee77(0x993)][_0x33ee77(0x800)]=Game_Action['prototype']['needsSelection'],Game_Action[_0x33ee77(0x9a7)][_0x33ee77(0x834)]=function(){const _0x4744de=_0x33ee77;return this['isBattleCoreTargetScope']()&&!this[_0x4744de(0xa71)]()?this['needsSelectionBattleCore']():VisuMZ[_0x4744de(0x993)][_0x4744de(0x800)][_0x4744de(0x88f)](this);},Game_Action[_0x33ee77(0x9a7)][_0x33ee77(0x2fb)]=function(){const _0x1e803f=_0x33ee77,_0x537b1a=String(this[_0x1e803f(0x5b0)]()['scope']);if(_0x537b1a[_0x1e803f(0x7c1)](/RANDOM/i))return![];if(_0x537b1a[_0x1e803f(0x7c1)](/ALL (?:ALLY|ALLIES|FRIEND|FRIENDS)/i))return![];if(_0x537b1a[_0x1e803f(0x7c1)](/ALL (?:ENEMY|ENEMIES|FOE|FOES)/i))return![];if(_0x537b1a['match'](/(?:ENEMY|FOE) OR (?:ALLY|FRIEND)/i))return!![];if(_0x537b1a[_0x1e803f(0x7c1)](/(?:ALLY|FRIEND) OR (?:ENEMY|FOE)/i))return!![];return VisuMZ[_0x1e803f(0x993)][_0x1e803f(0x800)][_0x1e803f(0x88f)](this);},VisuMZ[_0x33ee77(0x993)]['Game_Action_makeTargets']=Game_Action[_0x33ee77(0x9a7)][_0x33ee77(0x8f1)],Game_Action['prototype'][_0x33ee77(0x8f1)]=function(){const _0x5a78ad=_0x33ee77;let _0x220da5=[];return this[_0x5a78ad(0x317)]()?this[_0x5a78ad(0xa71)]()?_0x220da5=this[_0x5a78ad(0xa03)]():_0x220da5=this[_0x5a78ad(0xc11)]():_0x220da5=VisuMZ[_0x5a78ad(0x993)][_0x5a78ad(0xae8)]['call'](this),_0x220da5=this['applyTargetFilters'](_0x220da5),_0x220da5;},Game_Action['prototype'][_0x33ee77(0xbf9)]=function(){const _0x1f1278=_0x33ee77;return this[_0x1f1278(0xaaf)]()[_0x1f1278(0x6c3)]()&&!this['subject']()[_0x1f1278(0x1cd)]();},Game_Action['prototype']['makeTargetsBattleCoreJS']=function(){const _0x303398=_0x33ee77,_0x5e70f5=VisuMZ[_0x303398(0x993)][_0x303398(0x240)](this[_0x303398(0x5b0)](),'Targets');if(VisuMZ[_0x303398(0x993)]['JS'][_0x5e70f5]){targets=VisuMZ[_0x303398(0x993)][_0x303398(0xae8)][_0x303398(0x88f)](this);const _0x5b38b6=VisuMZ['BattleCore']['createKeyJS'](this[_0x303398(0x5b0)](),_0x303398(0x312));return targets=VisuMZ[_0x303398(0x993)]['JS'][_0x5b38b6][_0x303398(0x88f)](this,this[_0x303398(0xaaf)](),targets),this[_0x303398(0x86a)](targets);}return this[_0x303398(0xc11)]();},Game_Action[_0x33ee77(0x9a7)][_0x33ee77(0xc11)]=function(){const _0x54c7ed=_0x33ee77;let _0x5598fc=[];const _0x4cf403=String(this['item']()[_0x54c7ed(0x519)]);if(this[_0x54c7ed(0xa43)]())return this[_0x54c7ed(0xbf9)]()?(_0x5598fc=this[_0x54c7ed(0xb66)](),this['repeatTargets'](_0x5598fc)):(this[_0x54c7ed(0x27a)]=-0x1,_0x5598fc[_0x54c7ed(0x7ab)](...this[_0x54c7ed(0x8ec)]()),this['repeatTargets'](_0x5598fc));if(this[_0x54c7ed(0xaca)]()){if(this['isSubjectValidForAnyoneSelect']())return _0x5598fc=this[_0x54c7ed(0xb66)](),this['repeatTargets'](_0x5598fc);else{if(Imported['VisuMZ_3_BattleAI']){if(VisuMZ['BattleAI'][_0x54c7ed(0x71e)]<1.19){let _0x9f7534='';_0x9f7534+=_0x54c7ed(0x89a),_0x9f7534+='in\x20order\x20for\x20Ally\x20or\x20Enemy\x20targeting\x20to\x20work\x20',_0x9f7534+=_0x54c7ed(0x2a4),alert(_0x9f7534),SceneManager['exit']();}}return this['_targetIndex']=-0x1,_0x5598fc['push'](...this[_0x54c7ed(0x72c)]()),this[_0x54c7ed(0x86a)](_0x5598fc);}}if(_0x4cf403['match'](/(\d+) RANDOM ANY/i)){let _0x3a24c4=Number(RegExp['$1']);while(_0x3a24c4--){const _0xbf3eb8=Math[_0x54c7ed(0x6bb)](0x2)===0x0?this[_0x54c7ed(0x20d)]():this[_0x54c7ed(0x95f)]();_0x5598fc[_0x54c7ed(0x7ab)](_0xbf3eb8[_0x54c7ed(0x43c)]());}return this[_0x54c7ed(0x86a)](_0x5598fc);}if(_0x4cf403[_0x54c7ed(0x7c1)](/(\d+) RANDOM (?:ENEMY|ENEMIES|FOE|FOES)/i)){let _0x408c80=Number(RegExp['$1']);while(_0x408c80--){_0x5598fc[_0x54c7ed(0x7ab)](this[_0x54c7ed(0x20d)]()[_0x54c7ed(0x43c)]());}return this[_0x54c7ed(0x86a)](_0x5598fc);}if(_0x4cf403['match'](/(\d+) RANDOM (?:ALLY|ALLIES|FRIEND|FRIENDS)/i)){let _0x1408fb=Number(RegExp['$1']);while(_0x1408fb--){_0x5598fc['push'](this[_0x54c7ed(0x95f)]()['trueRandomTarget']());}return this[_0x54c7ed(0x86a)](_0x5598fc);}if(_0x4cf403[_0x54c7ed(0x7c1)](/ALL (?:ALLY|ALLIES|FRIEND|FRIENDS) (?:BUT|EXCEPT) (?:USER|SELF)/i))return _0x5598fc[_0x54c7ed(0x7ab)](...this[_0x54c7ed(0x95f)]()['aliveMembers']()[_0x54c7ed(0x313)](_0x32c1ee=>_0x32c1ee!==this[_0x54c7ed(0xaaf)]())),this[_0x54c7ed(0x86a)](_0x5598fc);return VisuMZ[_0x54c7ed(0x993)][_0x54c7ed(0xae8)][_0x54c7ed(0x88f)](this);},Game_Action[_0x33ee77(0x9a7)][_0x33ee77(0x458)]=function(_0x3ce6c8){const _0x3b0078=_0x33ee77,_0x49da47=[];for(let _0xb53d08=0x0;_0xb53d08<this[_0x3b0078(0x9ed)]();_0xb53d08++){_0x49da47[_0x3b0078(0x7ab)](_0x3ce6c8[_0x3b0078(0x43c)]());}return _0x49da47;},Game_Action[_0x33ee77(0x9a7)][_0x33ee77(0x777)]=function(_0xc7495){const _0xea1868=_0x33ee77;if(!this['item']())return _0xc7495;const _0x584642=this[_0xea1868(0x5b0)]()[_0xea1868(0x448)];if(this['isForNotUser']()){this[_0xea1868(0x92d)]()&&_0xc7495[_0xea1868(0x259)](this[_0xea1868(0xaaf)]());if(_0xc7495[_0xea1868(0x741)](this[_0xea1868(0xaaf)]())){const _0x18bd09=this[_0xea1868(0x95f)]()['aliveMembers']()[_0xea1868(0x259)](this[_0xea1868(0xaaf)]());if(_0x18bd09[_0xea1868(0x70c)]>0x0){_0x18bd09['sort']((_0x3bd174,_0x3a7886)=>_0x3bd174[_0xea1868(0x595)]()-_0x3a7886[_0xea1868(0x595)]());while(_0xc7495[_0xea1868(0x741)](this[_0xea1868(0xaaf)]())){const _0x571983=_0xc7495[_0xea1868(0xba4)](this['subject']());_0xc7495[_0x571983]=_0x18bd09[Math[_0xea1868(0x6bb)](_0x18bd09['length'])];}}else _0xc7495['remove'](this['subject']());}}return _0xc7495;},VisuMZ[_0x33ee77(0x993)]['Game_Action_itemEffectAddAttackState']=Game_Action[_0x33ee77(0x9a7)][_0x33ee77(0x3ff)],Game_Action[_0x33ee77(0x9a7)][_0x33ee77(0x3ff)]=function(_0x5486f4,_0x1eaf99){const _0x23a8c0=_0x33ee77;VisuMZ[_0x23a8c0(0x993)][_0x23a8c0(0x46e)]['call'](this,_0x5486f4,_0x1eaf99);if(!_0x5486f4[_0x23a8c0(0x3f6)]())return;for(const _0x392699 of this[_0x23a8c0(0xaaf)]()['attackStates']()){if(_0x392699===_0x5486f4[_0x23a8c0(0x61b)]()){let _0x2ae186=_0x1eaf99[_0x23a8c0(0x374)];_0x2ae186*=_0x5486f4[_0x23a8c0(0x722)](_0x392699),_0x2ae186*=this[_0x23a8c0(0xaaf)]()[_0x23a8c0(0x759)](_0x392699),_0x2ae186*=this[_0x23a8c0(0xa85)](_0x5486f4),Math[_0x23a8c0(0x3b9)]()<_0x2ae186&&(_0x5486f4[_0x23a8c0(0x6fe)]=!![],this[_0x23a8c0(0xbc2)](_0x5486f4));}}},VisuMZ[_0x33ee77(0x993)][_0x33ee77(0x333)]=Game_Action['prototype']['itemEffectAddNormalState'],Game_Action[_0x33ee77(0x9a7)]['itemEffectAddNormalState']=function(_0xf5f1a,_0x1eb38a){const _0x5e3827=_0x33ee77;VisuMZ[_0x5e3827(0x993)][_0x5e3827(0x333)][_0x5e3827(0x88f)](this,_0xf5f1a,_0x1eb38a);if(!_0xf5f1a['isImmortal']())return;if(_0x1eb38a[_0x5e3827(0x9dc)]!==_0xf5f1a[_0x5e3827(0x61b)]())return;let _0x3a7eb5=_0x1eb38a['value1'];!this[_0x5e3827(0x72e)]()&&(_0x3a7eb5*=_0xf5f1a['stateRate'](_0x1eb38a[_0x5e3827(0x9dc)]),_0x3a7eb5*=this[_0x5e3827(0xa85)](_0xf5f1a)),Math[_0x5e3827(0x3b9)]()<_0x3a7eb5&&(_0xf5f1a[_0x5e3827(0x6fe)]=!![],this[_0x5e3827(0xbc2)](_0xf5f1a));},VisuMZ[_0x33ee77(0x993)]['Game_Action_applyGlobal']=Game_Action[_0x33ee77(0x9a7)][_0x33ee77(0x356)],Game_Action[_0x33ee77(0x9a7)][_0x33ee77(0x356)]=function(){const _0x1bb60e=_0x33ee77;VisuMZ[_0x1bb60e(0x993)][_0x1bb60e(0x904)][_0x1bb60e(0x88f)](this),this['applyGlobalCommonEventNotetags'](),this['resetResultSwitches']();},Game_Action[_0x33ee77(0x9a7)][_0x33ee77(0xb05)]=function(){const _0x5d9892=_0x33ee77;if(!SceneManager['isSceneBattle']())return;const _0x12cb5d=/<COMMON (?:EVENT|EVENTS):[ ](.*)>/gi,_0x73888e=this['item']()['note']['match'](_0x12cb5d);if(_0x73888e)for(const _0xcc0eca of _0x73888e){if(!_0xcc0eca)continue;_0xcc0eca[_0x5d9892(0x7c1)](_0x12cb5d);const _0x792199=String(RegExp['$1'])['split'](',')['map'](_0x2f790e=>String(_0x2f790e)[_0x5d9892(0xaf2)]()),_0xea9eb5=_0x792199[_0x5d9892(0x6f2)](_0xe371ca=>DataManager['getCommonEventIdWithName'](_0xe371ca));for(const _0x5b9e9e of _0xea9eb5){const _0x5d55b0=$dataCommonEvents[_0x5b9e9e];_0x5d55b0&&$gameTemp['reserveCommonEvent'](_0x5b9e9e);}}},DataManager[_0x33ee77(0xaff)]=function(_0xeb8e83){const _0x18964a=_0x33ee77;_0xeb8e83=_0xeb8e83[_0x18964a(0x46b)]()['trim'](),this['_commonEventIDs']=this[_0x18964a(0x2de)]||{};if(this[_0x18964a(0x2de)][_0xeb8e83])return this['_commonEventIDs'][_0xeb8e83];for(const _0x53f234 of $dataCommonEvents){if(!_0x53f234)continue;let _0x4badc0=_0x53f234['name'];_0x4badc0=_0x4badc0[_0x18964a(0x7dd)](/\x1I\[(\d+)\]/gi,''),_0x4badc0=_0x4badc0['replace'](/\\I\[(\d+)\]/gi,''),this[_0x18964a(0x2de)][_0x4badc0[_0x18964a(0x46b)]()[_0x18964a(0xaf2)]()]=_0x53f234['id'];}return this[_0x18964a(0x2de)][_0xeb8e83]||0x0;},Game_Action[_0x33ee77(0x9a7)]['resetResultSwitches']=function(){const _0x21934b=_0x33ee77;if(!SceneManager[_0x21934b(0x5d9)]())return;const _0x5c91ad=VisuMZ['BattleCore']['Settings'][_0x21934b(0x803)];_0x5c91ad[_0x21934b(0x34f)]&&$gameSwitches[_0x21934b(0x248)](_0x5c91ad[_0x21934b(0x34f)],![]),_0x5c91ad[_0x21934b(0x3ed)]&&$gameSwitches['setValue'](_0x5c91ad[_0x21934b(0x3ed)],![]),_0x5c91ad[_0x21934b(0x498)]&&$gameVariables[_0x21934b(0x248)](_0x5c91ad[_0x21934b(0x498)],0x0),_0x5c91ad[_0x21934b(0xba8)]&&$gameVariables['setValue'](_0x5c91ad[_0x21934b(0xba8)],0x0);},Game_Action[_0x33ee77(0x9a7)]['applyResultSwitches']=function(_0x5205e1){const _0x5a0743=_0x33ee77;if(!SceneManager[_0x5a0743(0x5d9)]())return;if(!_0x5205e1)return;const _0x497088=_0x5205e1[_0x5a0743(0x491)](),_0x390cf2=VisuMZ['BattleCore'][_0x5a0743(0x12b)][_0x5a0743(0x803)];_0x390cf2[_0x5a0743(0x34f)]&&_0x497088[_0x5a0743(0x452)]&&$gameSwitches[_0x5a0743(0x248)](_0x390cf2[_0x5a0743(0x34f)],!![]);_0x390cf2['SwitchMissEvade']&&(_0x497088[_0x5a0743(0x78d)]||_0x497088['evaded'])&&$gameSwitches[_0x5a0743(0x248)](_0x390cf2[_0x5a0743(0x3ed)],!![]);if(_0x390cf2['VariableDmg']){let _0x3d17dc=$gameVariables['value'](_0x390cf2[_0x5a0743(0x498)]);_0x497088[_0x5a0743(0x3a5)]>0x0&&(_0x3d17dc+=Math[_0x5a0743(0x960)](_0x497088[_0x5a0743(0x3a5)])),$gameVariables[_0x5a0743(0x248)](_0x390cf2['VariableDmg'],_0x3d17dc);}if(_0x390cf2['VariableHeal']){let _0x291cd9=$gameVariables['value'](_0x390cf2['VariableHeal']);_0x497088[_0x5a0743(0x3a5)]<0x0&&(_0x291cd9+=Math['abs'](_0x497088[_0x5a0743(0x3a5)])),$gameVariables[_0x5a0743(0x248)](_0x390cf2['VariableHeal'],_0x291cd9);}},VisuMZ[_0x33ee77(0x993)][_0x33ee77(0x31c)]={'lifeSteaItem':/<(.*?) (?:LIFE|MANA) STEAL:[ ](\d+)([%％])>/gi,'lifeStealTrait':/<(.*?) (?:LIFE|MANA) STEAL (.*?):[ ]([\+\-]\d+)([%％])>/gi,'cancelLifeSteal':/<CANCEL LIFE STEAL>/i,'cancelHpLifeSteal':/<CANCEL HP LIFE STEAL>/i,'cancelMpLifeSteal':/<CANCEL MP LIFE STEAL>/i,'guardLifeSteal':/<GUARD LIFE STEAL>/i,'guardHpLifeSteal':/<GUARD HP LIFE STEAL>/i,'guardMpLifeSteal':/<GUARD MP LIFE STEAL>/i,'disarmLifeSteal':/<DISARM LIFE STEAL>/i,'disarmHpLifeSteal':/<DISARM HP LIFE STEAL>/i,'disarmMpLifeSteal':/<DISARM MP LIFE STEAL>/i,'negativeLifeSteal':/<REVERSE LIFE STEAL>/i,'negativeHpLifeSteal':/<REVERSE HP LIFE STEAL>/i,'negativeMpLifeSteal':/<REVERSE MP LIFE STEAL>/i},VisuMZ[_0x33ee77(0x993)]['Game_Action_executeHpDamage']=Game_Action[_0x33ee77(0x9a7)][_0x33ee77(0x1d8)],Game_Action[_0x33ee77(0x9a7)][_0x33ee77(0x1d8)]=function(_0x1160b9,_0x25bee7){const _0x5f1375=_0x33ee77;VisuMZ[_0x5f1375(0x993)][_0x5f1375(0xa33)][_0x5f1375(0x88f)](this,_0x1160b9,_0x25bee7);!this[_0x5f1375(0x25e)]()&&_0x1160b9&&_0x1160b9[_0x5f1375(0x491)]()[_0x5f1375(0x3a5)]>0x0&&this[_0x5f1375(0x31e)]('HP',_0x1160b9,_0x1160b9[_0x5f1375(0x491)]()[_0x5f1375(0x3a5)]);if(_0x1160b9){this['_executeHpDamage']=this[_0x5f1375(0x401)]||{};const _0x9ad0eb=_0x1160b9[_0x5f1375(0x19f)]();this[_0x5f1375(0x401)][_0x9ad0eb]=_0x25bee7;}},Game_Action['prototype']['getLastHpDamage']=function(_0x5267e6){const _0x2675f0=_0x33ee77;this[_0x2675f0(0x401)]=this[_0x2675f0(0x401)]||{};const _0xaf1273=_0x5267e6[_0x2675f0(0x19f)]();return this[_0x2675f0(0x401)][_0xaf1273]||0x0;},VisuMZ[_0x33ee77(0x993)]['Game_Action_executeMpDamage']=Game_Action[_0x33ee77(0x9a7)][_0x33ee77(0xb28)],Game_Action[_0x33ee77(0x9a7)][_0x33ee77(0xb28)]=function(_0x4213c2,_0x48b976){const _0x2bd9c0=_0x33ee77;VisuMZ['BattleCore']['Game_Action_executeMpDamage']['call'](this,_0x4213c2,_0x48b976),!this[_0x2bd9c0(0x25e)]()&&_0x4213c2&&_0x4213c2[_0x2bd9c0(0x491)]()[_0x2bd9c0(0x182)]>0x0&&this[_0x2bd9c0(0x31e)]('MP',_0x4213c2,_0x4213c2[_0x2bd9c0(0x491)]()[_0x2bd9c0(0x182)]);},Game_Action['prototype'][_0x33ee77(0x31e)]=function(_0x32cecb,_0x53bb74,_0x2cc489){const _0x2f4ba7=_0x33ee77;_0x32cecb=_0x32cecb['toUpperCase']()['trim']();const _0x5b792e=this['lifeStealRate'](_0x32cecb,_0x53bb74);if(_0x5b792e<=0x0)return;const _0x2cf3d0=Math['round'](_0x2cc489*_0x5b792e);if(_0x2cf3d0<=0x0)return;let _0x5a09aa=this['subject']();if(this[_0x2f4ba7(0xa32)])_0x5a09aa=this['_reflectionTarget'];const _0x158992=_0x53bb74['isNegativeLifeSteal'](_0x32cecb)?-0x1:0x1;if(_0x32cecb==='HP')_0x5a09aa[_0x2f4ba7(0x3ac)](_0x158992*_0x2cf3d0);if(_0x32cecb==='MP')_0x5a09aa[_0x2f4ba7(0x305)](_0x158992*_0x2cf3d0);},Game_Action[_0x33ee77(0x9a7)][_0x33ee77(0x3fa)]=function(_0x30b406,_0x49f168){const _0x455a51=_0x33ee77;if(this['isCancelLifeSteal'](_0x30b406))return 0x0;if(this[_0x455a51(0xaaf)]()[_0x455a51(0x4bf)](_0x30b406))return 0x0;if(_0x49f168[_0x455a51(0x363)](_0x30b406))return 0x0;let _0x3ce4c5=0x0;return _0x3ce4c5+=this[_0x455a51(0x9a1)](_0x30b406),_0x3ce4c5+=this['subject']()['lifeStealRate'](_0x30b406,this['item']()['hitType']),_0x3ce4c5[_0x455a51(0x6a9)](0x0,0x1);},Game_Action[_0x33ee77(0x9a7)][_0x33ee77(0x7b5)]=function(_0x23f178){const _0x5a679c=_0x33ee77;_0x23f178=_0x23f178[_0x5a679c(0x46b)]()[_0x5a679c(0xaf2)]();const _0x38affd=VisuMZ[_0x5a679c(0x993)][_0x5a679c(0x31c)],_0x4d736e=this['item']()[_0x5a679c(0x448)]||'';if(_0x4d736e[_0x5a679c(0x7c1)](_0x38affd[_0x5a679c(0x8e4)]))return!![];if(_0x23f178==='HP'&&_0x4d736e[_0x5a679c(0x7c1)](_0x38affd[_0x5a679c(0x4d8)]))return!![];if(_0x23f178==='MP'&&_0x4d736e['match'](_0x38affd[_0x5a679c(0x8fc)]))return!![];return![];},Game_Action['prototype']['itemLifeStealRate']=function(_0x255119){const _0x480580=_0x33ee77,_0x129169=VisuMZ['BattleCore']['LifeStealRegExp'],_0x34ff16=this[_0x480580(0x5b0)]()['note']||'';_0x255119=_0x255119[_0x480580(0x46b)]()['trim']();const _0x18582f=_0x34ff16[_0x480580(0x7c1)](_0x129169[_0x480580(0xa26)]);if(_0x18582f)for(const _0x17b788 of _0x18582f){_0x17b788[_0x480580(0x7c1)](_0x129169[_0x480580(0xa26)]);const _0x26a944=String(RegExp['$1'])[_0x480580(0x46b)]()[_0x480580(0xaf2)](),_0x3b26d2=Number(RegExp['$2'])*0.01;if(_0x26a944!==_0x255119)continue;return _0x3b26d2;}return 0x0;},Game_BattlerBase[_0x33ee77(0x9a7)][_0x33ee77(0x3fa)]=function(_0xbff2b0,_0x5b9b26){const _0x202a9b=_0x33ee77,_0x5a574b=VisuMZ[_0x202a9b(0x993)][_0x202a9b(0x31c)];let _0x366d96=0x0;_0xbff2b0=_0xbff2b0[_0x202a9b(0x46b)]()[_0x202a9b(0xaf2)]();for(const _0x4b4d1f of this['traitObjects']()){if(!_0x4b4d1f)continue;const _0x4fae12=_0x4b4d1f[_0x202a9b(0x448)]||'',_0x1f3520=_0x4fae12[_0x202a9b(0x7c1)](_0x5a574b[_0x202a9b(0x7ac)]);if(_0x1f3520)for(const _0x28ff0b of _0x1f3520){_0x28ff0b[_0x202a9b(0x7c1)](_0x5a574b[_0x202a9b(0x7ac)]);const _0x5a976e=String(RegExp['$1'])['toUpperCase']()['trim'](),_0x59aaae=String(RegExp['$2']),_0x4cf9eb=Number(RegExp['$3'])*0.01;if(_0x5a976e!==_0xbff2b0)continue;if(_0x5b9b26===Game_Action[_0x202a9b(0x846)]&&_0x59aaae['match'](/CERTAIN/i))_0x366d96+=_0x4cf9eb;else{if(_0x5b9b26===Game_Action[_0x202a9b(0x210)]&&_0x59aaae[_0x202a9b(0x7c1)](/PHYS/i))_0x366d96+=_0x4cf9eb;else _0x5b9b26===Game_Action[_0x202a9b(0x96a)]&&_0x59aaae[_0x202a9b(0x7c1)](/MAGIC/i)&&(_0x366d96+=_0x4cf9eb);}}}return _0x366d96;},Game_BattlerBase[_0x33ee77(0x9a7)][_0x33ee77(0x4bf)]=function(_0x52b996){const _0x3d4d13=_0x33ee77;_0x52b996=_0x52b996[_0x3d4d13(0x46b)]()[_0x3d4d13(0xaf2)]();const _0x4ff9fa=VisuMZ[_0x3d4d13(0x993)][_0x3d4d13(0x31c)];for(const _0x4884d3 of this[_0x3d4d13(0x335)]()){if(!_0x4884d3)continue;const _0x339821=_0x4884d3[_0x3d4d13(0x448)]||'';if(_0x339821[_0x3d4d13(0x7c1)](_0x4ff9fa['disarmLifeSteal']))return!![];if(_0x52b996==='HP'&&_0x339821[_0x3d4d13(0x7c1)](_0x4ff9fa['disarmHpLifeSteal']))return!![];if(_0x52b996==='MP'&&_0x339821[_0x3d4d13(0x7c1)](_0x4ff9fa[_0x3d4d13(0x21d)]))return!![];}return![];},Game_BattlerBase[_0x33ee77(0x9a7)][_0x33ee77(0xafb)]=function(_0x5ddb24){const _0x476f6c=_0x33ee77;_0x5ddb24=_0x5ddb24[_0x476f6c(0x46b)]()['trim']();const _0x4d911e=VisuMZ[_0x476f6c(0x993)][_0x476f6c(0x31c)];for(const _0x133e77 of this[_0x476f6c(0x335)]()){if(!_0x133e77)continue;const _0x169ef3=_0x133e77[_0x476f6c(0x448)]||'';if(_0x169ef3[_0x476f6c(0x7c1)](_0x4d911e[_0x476f6c(0xac2)]))return!![];if(_0x5ddb24==='HP'&&_0x169ef3[_0x476f6c(0x7c1)](_0x4d911e[_0x476f6c(0xb4b)]))return!![];if(_0x5ddb24==='MP'&&_0x169ef3[_0x476f6c(0x7c1)](_0x4d911e[_0x476f6c(0x9de)]))return!![];}return![];},Game_BattlerBase[_0x33ee77(0x9a7)][_0x33ee77(0x363)]=function(_0xa728d2){const _0x30cab8=_0x33ee77;_0xa728d2=_0xa728d2['toUpperCase']()[_0x30cab8(0xaf2)]();const _0x297d60=VisuMZ[_0x30cab8(0x993)]['LifeStealRegExp'];for(const _0x1c5652 of this['traitObjects']()){if(!_0x1c5652)continue;const _0x1024ba=_0x1c5652['note']||'';if(_0x1024ba[_0x30cab8(0x7c1)](_0x297d60['guardLifeSteal']))return!![];if(_0xa728d2==='HP'&&_0x1024ba['match'](_0x297d60[_0x30cab8(0x79e)]))return!![];if(_0xa728d2==='MP'&&_0x1024ba['match'](_0x297d60[_0x30cab8(0xa3c)]))return!![];}return![];},VisuMZ[_0x33ee77(0x993)][_0x33ee77(0xa76)]=Game_BattlerBase['prototype']['initMembers'],Game_BattlerBase[_0x33ee77(0x9a7)][_0x33ee77(0xb4c)]=function(){const _0x6b40a6=_0x33ee77;VisuMZ[_0x6b40a6(0x993)][_0x6b40a6(0xa76)][_0x6b40a6(0x88f)](this),this['initMembersBattleCore']();},Game_BattlerBase['prototype'][_0x33ee77(0x9e3)]=function(){const _0x34e47d=_0x33ee77;this[_0x34e47d(0xa1b)]=![];},VisuMZ['BattleCore']['Game_BattlerBase_refresh']=Game_BattlerBase['prototype'][_0x33ee77(0x8d6)],Game_BattlerBase[_0x33ee77(0x9a7)][_0x33ee77(0x8d6)]=function(){const _0x2d5a02=_0x33ee77;this[_0x2d5a02(0x79c)]={},VisuMZ[_0x2d5a02(0x993)][_0x2d5a02(0x268)][_0x2d5a02(0x88f)](this);},Game_BattlerBase['prototype'][_0x33ee77(0x7a8)]=function(_0x30ae38){const _0x1af5c0=_0x33ee77;return this[_0x1af5c0(0x79c)]=this['_cache']||{},this[_0x1af5c0(0x79c)][_0x30ae38]!==undefined;},Game_BattlerBase['prototype']['hardDamageCap']=function(){const _0x1e7b03=_0x33ee77;if(this[_0x1e7b03(0x79c)][_0x1e7b03(0x609)]!==undefined)return this[_0x1e7b03(0x79c)]['hardDamageCap'];const _0x58cf64=/<DAMAGE CAP:[ ](\d+)>/i,_0x55783d=this[_0x1e7b03(0x335)]()[_0x1e7b03(0x6f2)](_0x3b488d=>_0x3b488d&&_0x3b488d[_0x1e7b03(0x448)]['match'](_0x58cf64)?Number(RegExp['$1']):0x0);let _0x52a340=_0x55783d[_0x1e7b03(0x70c)]>0x0?Math[_0x1e7b03(0x657)](..._0x55783d):0x0;if(_0x52a340<=0x0)_0x52a340=VisuMZ[_0x1e7b03(0x993)][_0x1e7b03(0x12b)][_0x1e7b03(0x133)][_0x1e7b03(0x81f)];return this['_cache'][_0x1e7b03(0x609)]=_0x52a340,this[_0x1e7b03(0x79c)][_0x1e7b03(0x609)];},Game_BattlerBase[_0x33ee77(0x9a7)][_0x33ee77(0x710)]=function(){const _0x9f1eb8=_0x33ee77;if(this['_cache'][_0x9f1eb8(0x52a)]!==undefined)return this[_0x9f1eb8(0x79c)]['softDamageCap'];let _0x24e90a=VisuMZ[_0x9f1eb8(0x993)][_0x9f1eb8(0x12b)][_0x9f1eb8(0x133)][_0x9f1eb8(0x482)];const _0x2f2536=/<SOFT DAMAGE CAP:[ ]([\+\-]\d+)([%％])>/i,_0x43d51d=this['traitObjects']()['map'](_0x1ce3bb=>_0x1ce3bb&&_0x1ce3bb['note'][_0x9f1eb8(0x7c1)](_0x2f2536)?Number(RegExp['$1'])/0x64:0x0);return _0x24e90a=_0x43d51d[_0x9f1eb8(0x424)]((_0x271731,_0xb456b3)=>_0x271731+_0xb456b3,_0x24e90a),this['_cache'][_0x9f1eb8(0x52a)]=_0x24e90a,this[_0x9f1eb8(0x79c)]['softDamageCap'][_0x9f1eb8(0x6a9)](0.01,0x1);},VisuMZ[_0x33ee77(0x993)][_0x33ee77(0x1d4)]=Game_BattlerBase[_0x33ee77(0x9a7)][_0x33ee77(0xb17)],Game_BattlerBase[_0x33ee77(0x9a7)]['die']=function(){const _0x32ec89=_0x33ee77;VisuMZ['BattleCore'][_0x32ec89(0x1d4)][_0x32ec89(0x88f)](this),SceneManager[_0x32ec89(0x5d9)]()&&(this[_0x32ec89(0x2a8)](_0x32ec89(0x47e)),this[_0x32ec89(0x13f)]=undefined);},Game_BattlerBase[_0x33ee77(0x9a7)]['battler']=function(){const _0x5a3394=_0x33ee77;if(!SceneManager[_0x5a3394(0x5d9)]())return null;if(!SceneManager['_scene']['_spriteset'])return null;return SceneManager[_0x5a3394(0x473)][_0x5a3394(0x850)][_0x5a3394(0xa5a)](this);},Game_BattlerBase[_0x33ee77(0x9a7)]['svBattlerAnchorX']=function(){const _0x34b156=_0x33ee77;return VisuMZ[_0x34b156(0x993)][_0x34b156(0x12b)][_0x34b156(0x46f)][_0x34b156(0x633)];},Game_BattlerBase[_0x33ee77(0x9a7)]['svBattlerAnchorY']=function(){const _0x400cef=_0x33ee77;return VisuMZ['BattleCore'][_0x400cef(0x12b)][_0x400cef(0x46f)][_0x400cef(0x621)];},Game_BattlerBase['prototype']['svBattlerShadowVisible']=function(){const _0x5b1f85=_0x33ee77;return this[_0x5b1f85(0x6c3)]&&this[_0x5b1f85(0x6c3)]()?VisuMZ[_0x5b1f85(0x993)]['Settings']['Actor'][_0x5b1f85(0xbd4)]:VisuMZ[_0x5b1f85(0x993)][_0x5b1f85(0x12b)][_0x5b1f85(0xc1d)][_0x5b1f85(0xbd4)];},Game_BattlerBase[_0x33ee77(0x9a7)][_0x33ee77(0x7b3)]=function(){return!![];},Game_BattlerBase[_0x33ee77(0x9a7)][_0x33ee77(0xa2e)]=function(){return 0x0;},Game_BattlerBase['prototype'][_0x33ee77(0xabb)]=function(){return 0x0;},Game_BattlerBase[_0x33ee77(0x9a7)][_0x33ee77(0x671)]=function(_0x28aa82){const _0x2a2599=_0x33ee77;if(!_0x28aa82)return 0x0;let _0x196a57=0x0;const _0x5cafa8=_0x28aa82[_0x2a2599(0x448)];return _0x5cafa8[_0x2a2599(0x7c1)](/<BATTLE UI OFFSET X:[ ]([\+\-]\d+)>/i)&&(_0x196a57+=Number(RegExp['$1'])),_0x5cafa8[_0x2a2599(0x7c1)](/<BATTLE UI OFFSET:[ ]([\+\-]\d+),[ ]([\+\-]\d+)>/i)&&(_0x196a57+=Number(RegExp['$1'])),_0x196a57;},Game_BattlerBase[_0x33ee77(0x9a7)][_0x33ee77(0x958)]=function(_0x30e174){const _0x4ca77a=_0x33ee77;if(!_0x30e174)return 0x0;let _0x35e176=0x0;const _0xfe32cd=_0x30e174['note'];return _0xfe32cd[_0x4ca77a(0x7c1)](/<BATTLE UI OFFSET Y:[ ]([\+\-]\d+)>/i)&&(_0x35e176+=Number(RegExp['$1'])),_0xfe32cd[_0x4ca77a(0x7c1)](/<BATTLE UI OFFSET:[ ]([\+\-]\d+),[ ]([\+\-]\d+)>/i)&&(_0x35e176+=Number(RegExp['$2'])),_0x35e176;},VisuMZ[_0x33ee77(0x993)]['Game_BattlerBase_isStateResist']=Game_BattlerBase[_0x33ee77(0x9a7)][_0x33ee77(0x2c8)],Game_BattlerBase['prototype'][_0x33ee77(0x2c8)]=function(_0x3bb2d2){const _0x65a866=_0x33ee77;if(_0x3bb2d2===this[_0x65a866(0x61b)]()&&this['isImmortal']())return!![];return VisuMZ['BattleCore'][_0x65a866(0xa8d)][_0x65a866(0x88f)](this,_0x3bb2d2);},Game_BattlerBase[_0x33ee77(0x9a7)][_0x33ee77(0x3f6)]=function(){const _0x14cfe4=_0x33ee77;return this[_0x14cfe4(0xa1b)];},Game_BattlerBase['prototype'][_0x33ee77(0x536)]=function(_0x43bede){const _0x458c90=_0x33ee77;_0x43bede?this[_0x458c90(0xbcb)]():this[_0x458c90(0x497)]();},Game_BattlerBase[_0x33ee77(0x9a7)]['addImmortal']=function(){const _0x5a8a39=_0x33ee77;if(this[_0x5a8a39(0x385)]())return;this[_0x5a8a39(0xa1b)]=!![],this[_0x5a8a39(0x6fe)]=![];},Game_BattlerBase['prototype'][_0x33ee77(0x497)]=function(){const _0x39771e=_0x33ee77,_0x2737df=this[_0x39771e(0x4ad)]();this[_0x39771e(0xa1b)]=![],_0x2737df&&this[_0x39771e(0x6fe)]&&this[_0x39771e(0xb17)](),this[_0x39771e(0x6fe)]=![],this[_0x39771e(0x8d6)](),this[_0x39771e(0x385)]()&&_0x2737df&&(this[_0x39771e(0x1ce)](),this['requestMotionRefresh']());},VisuMZ['BattleCore'][_0x33ee77(0x8ea)]=Game_Action[_0x33ee77(0x9a7)][_0x33ee77(0x45c)],Game_Action[_0x33ee77(0x9a7)][_0x33ee77(0x45c)]=function(){const _0x37f05e=_0x33ee77;return this[_0x37f05e(0x5b0)]()?VisuMZ['BattleCore'][_0x37f05e(0x8ea)][_0x37f05e(0x88f)](this):0x0;},VisuMZ['BattleCore']['Game_Action_setAttack']=Game_Action[_0x33ee77(0x9a7)][_0x33ee77(0x528)],Game_Action[_0x33ee77(0x9a7)][_0x33ee77(0x528)]=function(){const _0x4b3392=_0x33ee77;if(this[_0x4b3392(0xaaf)]()&&this[_0x4b3392(0xaaf)]()[_0x4b3392(0x830)]())VisuMZ[_0x4b3392(0x993)]['Game_Action_setAttack'][_0x4b3392(0x88f)](this);else BattleManager[_0x4b3392(0xae3)]?VisuMZ['BattleCore']['Game_Action_setAttack'][_0x4b3392(0x88f)](this):this[_0x4b3392(0x7aa)]();},VisuMZ['BattleCore']['Game_BattlerBase_canAttack']=Game_BattlerBase['prototype']['canAttack'],Game_BattlerBase[_0x33ee77(0x9a7)]['canAttack']=function(){const _0x235ebc=_0x33ee77;if(!this[_0x235ebc(0x379)]())return![];return VisuMZ[_0x235ebc(0x993)][_0x235ebc(0x83b)][_0x235ebc(0x88f)](this);},Game_BattlerBase['prototype'][_0x33ee77(0x379)]=function(){const _0xd87a7d=_0x33ee77;for(const _0x4731d6 of this[_0xd87a7d(0x335)]()){if(!_0x4731d6)continue;if(_0x4731d6[_0xd87a7d(0x448)][_0xd87a7d(0x7c1)](/<(?:ATTACK SEAL|SEAL ATTACK)>/i))return![];}return!![];},VisuMZ['BattleCore'][_0x33ee77(0x24e)]=Game_Action[_0x33ee77(0x9a7)][_0x33ee77(0xadb)],Game_Action[_0x33ee77(0x9a7)][_0x33ee77(0xadb)]=function(){const _0x2aa316=_0x33ee77;this[_0x2aa316(0xaaf)]()[_0x2aa316(0xa5c)]()&&VisuMZ[_0x2aa316(0x993)][_0x2aa316(0x24e)][_0x2aa316(0x88f)](this);},VisuMZ[_0x33ee77(0x993)]['Game_BattlerBase_canGuard']=Game_BattlerBase[_0x33ee77(0x9a7)]['canGuard'],Game_BattlerBase[_0x33ee77(0x9a7)][_0x33ee77(0xa5c)]=function(){const _0x5ac5b2=_0x33ee77;if(!this[_0x5ac5b2(0x734)]())return![];return VisuMZ['BattleCore']['Game_BattlerBase_canGuard'][_0x5ac5b2(0x88f)](this);},Game_BattlerBase[_0x33ee77(0x9a7)]['canGuardBattleCore']=function(){const _0x544f66=_0x33ee77;for(const _0x2a43e0 of this[_0x544f66(0x335)]()){if(!_0x2a43e0)continue;if(_0x2a43e0['note']['match'](/<(?:GUARD SEAL|SEAL GUARD)>/i))return![];}return!![];},Game_BattlerBase['prototype']['canUseItemCommand']=function(){const _0x2908e4=_0x33ee77;for(const _0x3fda39 of this[_0x2908e4(0x335)]()){if(!_0x3fda39)continue;if(_0x3fda39[_0x2908e4(0x448)][_0x2908e4(0x7c1)](/<(?:ITEM SEAL|SEAL ITEM|SEAL ITEMS)>/i))return![];}return!![];},VisuMZ[_0x33ee77(0x993)][_0x33ee77(0x6af)]=Game_BattlerBase['prototype']['meetsUsableItemConditions'],Game_BattlerBase[_0x33ee77(0x9a7)][_0x33ee77(0x636)]=function(_0x254f35){const _0x330f85=_0x33ee77;if(_0x254f35&&_0x254f35[_0x330f85(0x448)][_0x330f85(0x7c1)](/<CANNOT TARGET (?:USER|SELF)>/i)){const _0x15fb00=this[_0x330f85(0x95f)]()[_0x330f85(0x373)]();if(_0x15fb00[_0x330f85(0x70c)]===0x1&&_0x15fb00[0x0]===this)return![];}return VisuMZ['BattleCore'][_0x330f85(0x6af)][_0x330f85(0x88f)](this,_0x254f35);},Game_Battler['prototype'][_0x33ee77(0x6b1)]=function(){const _0x580154=_0x33ee77;return VisuMZ[_0x580154(0x993)]['Settings'][_0x580154(0x803)][_0x580154(0x77f)];},VisuMZ[_0x33ee77(0x993)]['Game_Battler_regenerateAll']=Game_Battler[_0x33ee77(0x9a7)][_0x33ee77(0x25b)],Game_Battler['prototype'][_0x33ee77(0x25b)]=function(){const _0x1ae874=_0x33ee77;if(SceneManager['isSceneBattle']()){if(BattleManager['isTpb']()){if(this[_0x1ae874(0x253)]()<=0x0)return;}else{if($gameTroop[_0x1ae874(0x253)]()<=0x0)return;}}if(SceneManager[_0x1ae874(0x5d9)]()&&BattleManager[_0x1ae874(0x17e)]()&&this[_0x1ae874(0x411)]===Graphics['frameCount'])return;this['_lastRegenFrameCount']=Graphics[_0x1ae874(0x7c3)],SceneManager[_0x1ae874(0x5d9)]()&&this['processBattleCoreJS'](_0x1ae874(0x867)),VisuMZ['BattleCore']['Game_Battler_regenerateAll'][_0x1ae874(0x88f)](this),SceneManager[_0x1ae874(0x5d9)]()&&(this[_0x1ae874(0x459)](),this['processBattleCoreJS'](_0x1ae874(0xbb5)));},Game_Battler[_0x33ee77(0x9a7)]['regenerateAllBattleCore']=function(){const _0x459765=_0x33ee77;if(SceneManager[_0x459765(0x5d9)]())for(const _0x247727 of this[_0x459765(0x335)]()){if(!_0x247727)continue;this[_0x459765(0x428)](_0x247727);}},Game_Battler[_0x33ee77(0x9a7)][_0x33ee77(0x428)]=function(_0x67e918){const _0x3c34f5=_0x33ee77;if(!Imported[_0x3c34f5(0x2e4)])return;if(!SceneManager[_0x3c34f5(0x5d9)]())return;if(this['isDead']())return;if(this[_0x3c34f5(0xa72)]())return;if(_0x67e918[_0x3c34f5(0x448)]['match'](/<(?:REGENERATE|REGEN|DEGEN|DOT|SLIP)[ ]ANIMATION:[ ](\d+)>/i)){const _0x476fda=Number(RegExp['$1']);$gameTemp['requestFauxAnimation']([this],_0x476fda,![],![]);}},VisuMZ[_0x33ee77(0x993)][_0x33ee77(0x1ae)]=Game_Battler[_0x33ee77(0x9a7)][_0x33ee77(0x570)],Game_Battler[_0x33ee77(0x9a7)][_0x33ee77(0x570)]=function(){const _0xc0cff8=_0x33ee77;this[_0xc0cff8(0x29a)](_0xc0cff8(0x318)),VisuMZ[_0xc0cff8(0x993)]['Game_Battler_startTpbTurn'][_0xc0cff8(0x88f)](this),this['processBattleCoreJS']('PostStartTurnJS');},VisuMZ[_0x33ee77(0x993)]['Game_Battler_onTurnEnd']=Game_Battler['prototype'][_0x33ee77(0x804)],Game_Battler['prototype'][_0x33ee77(0x804)]=function(){const _0x37d6ba=_0x33ee77;this[_0x37d6ba(0x29a)](_0x37d6ba(0x251)),VisuMZ['BattleCore']['Game_Battler_onTurnEnd']['call'](this),VisuMZ[_0x37d6ba(0x993)][_0x37d6ba(0x12b)][_0x37d6ba(0x803)][_0x37d6ba(0x422)]&&this[_0x37d6ba(0x162)](),this[_0x37d6ba(0x29a)](_0x37d6ba(0xa93));},Game_Battler[_0x33ee77(0x9a7)][_0x33ee77(0x29a)]=function(_0x5633b2){const _0x5b3075=_0x33ee77;if(this[_0x5b3075(0x5d3)]||this[_0x5b3075(0xad5)])return;const _0x59c881=VisuMZ['BattleCore'][_0x5b3075(0x12b)][_0x5b3075(0x803)];if(_0x59c881[_0x5633b2])_0x59c881[_0x5633b2][_0x5b3075(0x88f)](this);for(const _0xb7be8 of this[_0x5b3075(0x335)]()){if(!_0xb7be8)continue;key=VisuMZ[_0x5b3075(0x993)][_0x5b3075(0x240)](_0xb7be8,_0x5633b2),VisuMZ['BattleCore']['JS'][key]&&VisuMZ['BattleCore']['JS'][key][_0x5b3075(0x88f)](this,this,this,_0xb7be8,0x0);}},Game_Battler[_0x33ee77(0x9a7)][_0x33ee77(0x7ff)]=function(){return VisuMZ['BattleCore']['Settings']['Actor']['ChantStyle']||![];},Game_Battler[_0x33ee77(0x9a7)][_0x33ee77(0xc0f)]=function(){const _0x25d699=_0x33ee77;if(this[_0x25d699(0xa1c)]()){if(this[_0x25d699(0x7ff)]()){if(this['_actions']['some'](_0xb062c2=>_0xb062c2['item']()&&_0xb062c2[_0x25d699(0x3b4)]()))return!![];}else{if(this[_0x25d699(0x29e)]['some'](_0x2310b3=>_0x2310b3['item']()&&_0x2310b3['isMagicSkill']()))return!![];}}if(BattleManager[_0x25d699(0x17e)]()&&this[_0x25d699(0x3ee)]==='casting')return this[_0x25d699(0x7ff)]()?this[_0x25d699(0x628)]()&&this[_0x25d699(0x628)]()[_0x25d699(0x5b0)]()&&this[_0x25d699(0x628)]()['isMagical']():this[_0x25d699(0x628)]()&&this[_0x25d699(0x628)]()[_0x25d699(0x5b0)]()&&this['currentAction']()[_0x25d699(0x60d)]();return![];},Game_Battler[_0x33ee77(0x9a7)][_0x33ee77(0x457)]=function(){const _0x332621=_0x33ee77;if(BattleManager['isTpb']()&&this[_0x332621(0x3ee)]===_0x332621(0x44c))return this[_0x332621(0x7ff)]()?this[_0x332621(0x628)]()&&this[_0x332621(0x628)]()[_0x332621(0x5b0)]()&&!this['currentAction']()[_0x332621(0x3b4)]():this[_0x332621(0x628)]()&&this[_0x332621(0x628)]()[_0x332621(0x5b0)]()&&!this[_0x332621(0x628)]()[_0x332621(0x60d)]();return![];},VisuMZ['BattleCore'][_0x33ee77(0x4af)]=Game_Battler[_0x33ee77(0x9a7)][_0x33ee77(0x43d)],Game_Battler[_0x33ee77(0x9a7)][_0x33ee77(0x43d)]=function(){const _0x2c80b5=_0x33ee77;VisuMZ['BattleCore'][_0x2c80b5(0x4af)]['call'](this),this['_damagePopupArray']=[];},Game_Battler['prototype'][_0x33ee77(0x94f)]=function(){const _0x122a66=_0x33ee77;if(!this[_0x122a66(0x2c5)])this[_0x122a66(0x43d)]();return this[_0x122a66(0x2c5)][_0x122a66(0x70c)]>0x0;},Game_Battler[_0x33ee77(0x9a7)][_0x33ee77(0x1be)]=function(){const _0x1682a6=_0x33ee77;if(!SceneManager[_0x1682a6(0x5d9)]())return;if(BattleManager[_0x1682a6(0x1d9)]())return;if(!this['_damagePopupArray'])this['clearDamagePopup']();this['createSeparateDamagePopups']();const _0x414e19=this['battler']();if(_0x414e19)_0x414e19[_0x1682a6(0x221)]();},Game_Battler[_0x33ee77(0x9a7)][_0x33ee77(0xa1a)]=function(){const _0x38266d=_0x33ee77,_0x39b1eb=this[_0x38266d(0x491)]();if(_0x39b1eb[_0x38266d(0x78d)]||_0x39b1eb[_0x38266d(0xb2d)]){const _0x222fed=JsonEx[_0x38266d(0x266)](_0x39b1eb);_0x222fed['hpAffected']=![],_0x222fed[_0x38266d(0x182)]=0x0,this[_0x38266d(0x2c5)][_0x38266d(0x7ab)](_0x222fed);if(!_0x39b1eb['hpDamage']&&!_0x39b1eb[_0x38266d(0x182)])return;}if(_0x39b1eb[_0x38266d(0x8f3)]){const _0x432a16=JsonEx[_0x38266d(0x266)](_0x39b1eb);_0x432a16['missed']=![],_0x432a16[_0x38266d(0xb2d)]=![],_0x432a16['mpDamage']=0x0,this[_0x38266d(0x2c5)]['push'](_0x432a16);}if(_0x39b1eb['mpDamage']!==0x0){const _0x3a74be=JsonEx['makeDeepCopy'](_0x39b1eb);_0x3a74be[_0x38266d(0x78d)]=![],_0x3a74be['evaded']=![],_0x3a74be[_0x38266d(0x8f3)]=![],this[_0x38266d(0x2c5)][_0x38266d(0x7ab)](_0x3a74be);}},Game_Battler['prototype']['getNextDamagePopup']=function(){const _0x585340=_0x33ee77;if(!this[_0x585340(0x2c5)])this[_0x585340(0x43d)]();return VisuMZ[_0x585340(0x993)][_0x585340(0x12b)][_0x585340(0x133)][_0x585340(0x8ef)]?this[_0x585340(0x2c5)][_0x585340(0x2e8)]():this['_damagePopupArray'][_0x585340(0xc2e)]();},Game_Battler['prototype']['setupTextPopup']=function(_0x1127fd,_0x5043d0){const _0x5ef8b5=_0x33ee77;if(!SceneManager[_0x5ef8b5(0x5d9)]())return;if(BattleManager['shouldHideBattleEndPopups']())return;if(!this['battler']())return;if(_0x1127fd[_0x5ef8b5(0x70c)]<=0x0)return;_0x5043d0=_0x5043d0||{},_0x5043d0[_0x5ef8b5(0x6c7)]=_0x5043d0[_0x5ef8b5(0x6c7)]||_0x5ef8b5(0x963),_0x5043d0[_0x5ef8b5(0x158)]=_0x5043d0[_0x5ef8b5(0x158)]||[0x0,0x0,0x0,0x0],_0x5043d0[_0x5ef8b5(0x5ff)]=_0x5043d0[_0x5ef8b5(0x5ff)]||0x0,this[_0x5ef8b5(0x157)]()[_0x5ef8b5(0x160)](_0x1127fd,_0x5043d0);},Game_Battler['prototype'][_0x33ee77(0xb0b)]=function(_0x256c01,_0x24f9db,_0x59f3c5){const _0x2a9b44=_0x33ee77;if(!SceneManager[_0x2a9b44(0x5d9)]())return;if(BattleManager[_0x2a9b44(0x1d9)]())return;if(!this['battler']())return;if(_0x24f9db[_0x2a9b44(0x70c)]<=0x0)return;_0x59f3c5=_0x59f3c5||{},_0x59f3c5[_0x2a9b44(0x6c7)]=_0x59f3c5['textColor']||_0x2a9b44(0x963),_0x59f3c5[_0x2a9b44(0x158)]=_0x59f3c5[_0x2a9b44(0x158)]||[0x0,0x0,0x0,0x0],_0x59f3c5[_0x2a9b44(0x5ff)]=_0x59f3c5[_0x2a9b44(0x5ff)]||0x0,this[_0x2a9b44(0x157)]()[_0x2a9b44(0xb0b)](_0x256c01,_0x24f9db,_0x59f3c5);},Game_Battler[_0x33ee77(0x9a7)][_0x33ee77(0x5b6)]=function(){const _0x429c1c=_0x33ee77;if(this['isHidden']())return![];if(this[_0x429c1c(0x4ad)]()&&this[_0x429c1c(0xbdf)]())return!![];if(this['isEnemy']()&&this[_0x429c1c(0x175)]()){if(this['isDead']()&&this[_0x429c1c(0x2d0)]())return![];}else{if(this['isDead']())return![];}return!![];},VisuMZ[_0x33ee77(0x993)][_0x33ee77(0x250)]=Game_Battler[_0x33ee77(0x9a7)][_0x33ee77(0xb86)],Game_Battler['prototype']['clearMotion']=function(){const _0x33eba9=_0x33ee77;VisuMZ[_0x33eba9(0x993)]['Game_Battler_clearMotion'][_0x33eba9(0x88f)](this),this[_0x33eba9(0x35d)]();},Game_Battler['prototype'][_0x33ee77(0x57a)]=function(){return!![];},Game_Battler['prototype'][_0x33ee77(0x61e)]=function(){return![];},VisuMZ[_0x33ee77(0x993)]['Game_Battler_onBattleStart']=Game_Battler['prototype'][_0x33ee77(0x8cf)],Game_Battler['prototype'][_0x33ee77(0x8cf)]=function(_0x38d5ec){const _0x598ed1=_0x33ee77;VisuMZ[_0x598ed1(0x993)][_0x598ed1(0xc1f)][_0x598ed1(0x88f)](this,_0x38d5ec),this['onBattleStartBattleCore'](_0x38d5ec),this[_0x598ed1(0x43d)]();},Game_Battler['prototype'][_0x33ee77(0xb12)]=function(_0x8f57ef){const _0x171c74=_0x33ee77;this[_0x171c74(0xa7b)](![]),this[_0x171c74(0x62e)]=undefined,this[_0x171c74(0x6ce)]=undefined;},VisuMZ['BattleCore']['Game_Battler_onBattleEnd']=Game_Battler['prototype'][_0x33ee77(0x50c)],Game_Battler[_0x33ee77(0x9a7)][_0x33ee77(0x50c)]=function(){const _0x468156=_0x33ee77;VisuMZ[_0x468156(0x993)][_0x468156(0x237)]['call'](this),this[_0x468156(0x51b)]();},Game_Battler[_0x33ee77(0x9a7)][_0x33ee77(0x51b)]=function(){const _0x3d408c=_0x33ee77;this[_0x3d408c(0x62e)]=undefined,this[_0x3d408c(0x6ce)]=undefined;},VisuMZ[_0x33ee77(0x993)]['Game_Battler_performActionStart']=Game_Battler[_0x33ee77(0x9a7)][_0x33ee77(0x49b)],Game_Battler[_0x33ee77(0x9a7)][_0x33ee77(0x49b)]=function(_0x10ddbe){const _0x11424b=_0x33ee77;VisuMZ[_0x11424b(0x993)]['Game_Battler_performActionStart'][_0x11424b(0x88f)](this,_0x10ddbe);if(!_0x10ddbe[_0x11424b(0x14f)]()){const _0x2212b8=this['battler']();_0x2212b8&&_0x2212b8[_0x11424b(0x340)]();}this[_0x11424b(0xa7b)](![]);},Game_Battler['prototype'][_0x33ee77(0x626)]=function(){const _0xa0c79=_0x33ee77;this[_0xa0c79(0x13f)]=undefined;const _0x5a348d=this[_0xa0c79(0xb3a)];this[_0xa0c79(0xb3a)]=![];if(BattleManager['isActiveTpb']()&&this[_0xa0c79(0x9bd)]()){const _0x4412e0=this[_0xa0c79(0x157)]();if(_0x4412e0&&_0x5a348d)_0x4412e0[_0xa0c79(0x340)]();return;}const _0x307cbc=this['battler']();if(_0x307cbc)_0x307cbc[_0xa0c79(0x70a)]();this[_0xa0c79(0xa7b)](![]),this['requestMotionRefresh']();},Game_Battler[_0x33ee77(0x9a7)][_0x33ee77(0x516)]=function(_0x45a27c){const _0x17628e=_0x33ee77;if(_0x45a27c[_0x17628e(0x33a)]())this[_0x17628e(0x695)]();else{if(_0x45a27c[_0x17628e(0x14f)]())this['requestMotion'](_0x17628e(0x462));else{if(_0x45a27c[_0x17628e(0x3b4)]())this[_0x17628e(0x2a8)]('spell');else{if(_0x45a27c[_0x17628e(0x22e)]())[0x1,0x2,0x5,0x6][_0x17628e(0x741)](_0x45a27c[_0x17628e(0x5b0)]()[_0x17628e(0x2d7)]['type'])?this[_0x17628e(0x695)]():this[_0x17628e(0x2a8)]('skill');else _0x45a27c[_0x17628e(0x7e1)]()&&this[_0x17628e(0x2a8)]('item');}}}},Game_Battler[_0x33ee77(0x9a7)][_0x33ee77(0x74d)]=function(){const _0x401741=_0x33ee77;return $dataSystem[_0x401741(0xab4)][0x0];},Game_Battler[_0x33ee77(0x9a7)][_0x33ee77(0x787)]=function(){const _0x2ae958=_0x33ee77,_0x3c8509=this['getAttackMotion']();return _0x3c8509?_0x3c8509[_0x2ae958(0x889)]:0x0;},Game_Battler['prototype'][_0x33ee77(0xaae)]=function(_0xcae67a){const _0x3b1444=_0x33ee77;if(!$gameSystem['isSideView']())return;const _0x235b7d=this['battler'](),_0x3175c3=_0xcae67a[_0x3b1444(0x157)]();if(!_0x235b7d||!_0x3175c3)return;const _0x52ee0c=_0x3175c3[_0x3b1444(0x1f7)],_0x2e4b7d=_0x3175c3[_0x3b1444(0x74a)];this['moveBattlerToPoint'](_0x52ee0c,_0x2e4b7d,0x0,![],'Linear',-0x1),_0x235b7d['updatePosition']();const _0x7e2c99=VisuMZ[_0x3b1444(0x993)][_0x3b1444(0x12b)][_0x3b1444(0x3f4)];let _0x92ba26=(_0x3175c3[_0x3b1444(0x3d9)]+_0x235b7d[_0x3b1444(0x3d9)])/0x2;_0x92ba26*=this[_0x3b1444(0x6c3)]()?0x1:-0x1;let _0x1e94c7=_0x7e2c99[_0x3b1444(0x62f)]*(this[_0x3b1444(0x6c3)]()?0x1:-0x1);_0xcae67a[_0x3b1444(0x5f1)](_0x92ba26,_0x1e94c7,0x0,![],'Linear'),_0x3175c3['updatePosition']();},Game_Battler[_0x33ee77(0x9a7)][_0x33ee77(0x2a8)]=function(_0x511eba){const _0xc905df=_0x33ee77;if(SceneManager[_0xc905df(0x5d9)]()){const _0x3f4dba=this['battler']();_0x3f4dba&&(_0x3f4dba[_0xc905df(0xad6)](_0x511eba),['swing',_0xc905df(0x606),'missile'][_0xc905df(0x741)](_0x511eba)&&this[_0xc905df(0x2b7)]());}this[_0xc905df(0x35d)]();},Game_Battler[_0x33ee77(0x9a7)]['performWeaponAnimation']=function(){},Game_Battler[_0x33ee77(0x9a7)][_0x33ee77(0x944)]=function(_0x5c70cf){const _0x235b23=_0x33ee77;if(SceneManager[_0x235b23(0x5d9)]()){const _0x41b4b1=this[_0x235b23(0x157)]();if(_0x41b4b1)_0x41b4b1[_0x235b23(0x3ab)](_0x5c70cf);}},Game_Battler['prototype'][_0x33ee77(0xa96)]=function(){const _0x1749eb=_0x33ee77;if(SceneManager[_0x1749eb(0x5d9)]()){const _0x1ac83c=this[_0x1749eb(0x787)]();this[_0x1749eb(0x944)](_0x1ac83c);}},Game_Battler[_0x33ee77(0x9a7)][_0x33ee77(0x351)]=function(_0x2840cd,_0x26db85){const _0x120fb8=_0x33ee77;if(!_0x2840cd)return;if(!_0x2840cd['item']())return;if(_0x2840cd[_0x120fb8(0x33a)]())return;if(_0x2840cd[_0x120fb8(0x14f)]())return;if(_0x2840cd['isItem']())return;if($gameTemp[_0x120fb8(0x729)])return;let _0x3e8ccc=0x0;const _0x45842b=VisuMZ['BattleCore'][_0x120fb8(0x12b)][_0x120fb8(0x3f4)],_0x59a971=_0x2840cd[_0x120fb8(0x5b0)]()['note'];if(_0x59a971[_0x120fb8(0x7c1)](/<CAST ANIMATION: (\d+)>/i))_0x3e8ccc=Number(RegExp['$1']);else{if(_0x59a971[_0x120fb8(0x7c1)](/<NO CAST ANIMATION>/i))return;else{if(_0x2840cd['isCertainHit']())_0x3e8ccc=_0x45842b[_0x120fb8(0xb80)];else{if(_0x2840cd[_0x120fb8(0x36e)]())_0x3e8ccc=_0x45842b['CastPhysical'];else _0x2840cd['isMagical']()&&(_0x3e8ccc=_0x45842b[_0x120fb8(0x4e7)]);}}}_0x3e8ccc>0x0&&$gameTemp[_0x120fb8(0x84d)]([this],_0x3e8ccc,!!_0x26db85);},Game_Battler[_0x33ee77(0x9a7)][_0x33ee77(0xa4c)]=function(){const _0x52cc18=_0x33ee77;SoundManager[_0x52cc18(0x60c)]();let _0x49ecc0=VisuMZ[_0x52cc18(0x993)][_0x52cc18(0x12b)][_0x52cc18(0x3f4)][_0x52cc18(0x42b)];_0x49ecc0>0x0&&(Imported[_0x52cc18(0x2e4)]?$gameTemp['requestFauxAnimation']([this],_0x49ecc0):$gameTemp[_0x52cc18(0x84d)]([this],_0x49ecc0));},Game_Battler[_0x33ee77(0x9a7)][_0x33ee77(0x2c3)]=function(){const _0xb67903=_0x33ee77;if(!$gameSystem['isSideView']())return![];if(!BattleManager['isActiveTpb']())return![];if(!this['isAlive']())return![];if(this['isInputting']())return!![];if(this[_0xb67903(0x355)]())return!![];if(this['_tpbChargeTime']>=0x1)return!![];return![];},VisuMZ['BattleCore']['Game_Battler_performDamage']=Game_Battler['prototype']['performDamage'],Game_Battler[_0x33ee77(0x9a7)][_0x33ee77(0xa53)]=function(){const _0x530d17=_0x33ee77;this[_0x530d17(0x2c3)]()&&(this['_performDamageMotion']=!![]),VisuMZ[_0x530d17(0x993)][_0x530d17(0x797)][_0x530d17(0x88f)](this),this[_0x530d17(0x89d)](),this[_0x530d17(0x929)]();},VisuMZ[_0x33ee77(0x993)][_0x33ee77(0x12a)]=Game_Battler['prototype'][_0x33ee77(0x227)],Game_Battler['prototype']['performMiss']=function(){const _0x555aad=_0x33ee77;this[_0x555aad(0x2c3)]()&&(this[_0x555aad(0x13f)]=!![]),VisuMZ['BattleCore'][_0x555aad(0x12a)]['call'](this),this[_0x555aad(0x89d)]();},VisuMZ[_0x33ee77(0x993)][_0x33ee77(0x5fe)]=Game_Battler[_0x33ee77(0x9a7)][_0x33ee77(0xa00)],Game_Battler['prototype']['performEvasion']=function(){const _0x4e4de9=_0x33ee77;this['isActiveTpbReady']()&&(this[_0x4e4de9(0x13f)]=!![]),VisuMZ[_0x4e4de9(0x993)][_0x4e4de9(0x5fe)]['call'](this),this[_0x4e4de9(0x89d)]();},Game_Battler['prototype'][_0x33ee77(0x89d)]=function(){const _0x4885cf=_0x33ee77;if(!$gameSystem[_0x4885cf(0x7a6)]())return;if(this[_0x4885cf(0xb3a)])return;this[_0x4885cf(0xb3a)]=!![];const _0x26a239=this[_0x4885cf(0x157)]();if(_0x26a239)_0x26a239[_0x4885cf(0x396)]();},Game_Battler[_0x33ee77(0x9a7)][_0x33ee77(0x929)]=function(){const _0x371bdb=_0x33ee77;if(!this[_0x371bdb(0x57a)]())return;const _0x1196d3=VisuMZ[_0x371bdb(0x993)][_0x371bdb(0x12b)]['Actor'];if(!(_0x1196d3[_0x371bdb(0x8e3)]??![]))return;if(this[_0x371bdb(0x9f8)]<=0x0)return;const _0x2628da=this['battler']();if(_0x2628da){const _0x42c8e9=this['_lastHpDamage'],_0x3cc97a=(_0x42c8e9/this['mhp'])[_0x371bdb(0x6a9)](0.8,0x1),_0x2882d7=_0x1196d3[_0x371bdb(0x7b8)]??0x30,_0x2752d1=_0x3cc97a*_0x2882d7;_0x2628da[_0x371bdb(0x690)](_0x2752d1,_0x3cc97a);}},Game_Battler['prototype'][_0x33ee77(0x3dd)]=function(){const _0x5c61a7=_0x33ee77;if(this[_0x5c61a7(0x385)]()&&this[_0x5c61a7(0x23f)]!==_0x5c61a7(0x47e)){this['requestMotion'](_0x5c61a7(0x47e));return;}if(this['isDead']()&&this[_0x5c61a7(0x23f)]===_0x5c61a7(0x47e))return;if(!!this[_0x5c61a7(0x4f2)])return;if(this[_0x5c61a7(0x43e)]()){if(!this['isDuringNonLoopingMotion']()&&this!==BattleManager['_subject']){if(this['battler']())this['battler']()[_0x5c61a7(0xa8f)]();}this[_0x5c61a7(0x35d)]();return;}if(this[_0x5c61a7(0x23f)]===_0x5c61a7(0x8ee))return;if(this[_0x5c61a7(0x23f)]==='escape'&&!BattleManager[_0x5c61a7(0x9bd)]())return;if(this['_motionType']==='guard'&&!BattleManager[_0x5c61a7(0x9bd)]())return;this[_0x5c61a7(0xb86)]();if(BattleManager[_0x5c61a7(0x6f3)]()&&this===BattleManager[_0x5c61a7(0x7c0)])return;if(this['battler']()&&BattleManager[_0x5c61a7(0x9bd)]()){this[_0x5c61a7(0x157)]()['refreshMotion'](),this[_0x5c61a7(0x35d)]();return;}},Game_Enemy[_0x33ee77(0x9a7)][_0x33ee77(0x4b9)]=function(){const _0x32308f=_0x33ee77;if(!this[_0x32308f(0x175)]())return![];const _0x13b0fd=this[_0x32308f(0x157)]();if(!_0x13b0fd)return![];const _0xe1731e=_0x13b0fd[_0x32308f(0x57e)];if(!_0xe1731e)return![];const _0x563301=_0xe1731e[_0x32308f(0xc2c)];return _0x563301&&!_0x563301[_0x32308f(0xaf1)];},Game_Battler[_0x33ee77(0x9a7)][_0x33ee77(0x94d)]=function(){return this['_isBattlerFlipped'];},Game_Battler['prototype'][_0x33ee77(0xa7b)]=function(_0x38e2b9){const _0x1a110f=_0x33ee77;if(!$gameSystem[_0x1a110f(0x7a6)]())return;this[_0x1a110f(0x284)]=_0x38e2b9;const _0x536976=this['battler']();if(_0x536976)_0x536976[_0x1a110f(0x843)]();},Game_Battler[_0x33ee77(0x9a7)][_0x33ee77(0x3e1)]=function(_0x4871ce,_0x3d1d97,_0x33e7f3){const _0x460ff7=_0x33ee77;if(!$gameSystem[_0x460ff7(0x7a6)]())return;const _0x3a3e95=this[_0x460ff7(0x157)]();if(!_0x3a3e95)return;if(_0x4871ce===_0x3a3e95['_baseX'])return;let _0x4295e1=![];if(this[_0x460ff7(0x6c3)]()){if(_0x4871ce>_0x3a3e95[_0x460ff7(0x1f7)])_0x4295e1=!![];if(_0x4871ce<_0x3a3e95[_0x460ff7(0x1f7)])_0x4295e1=![];}else{if(this[_0x460ff7(0x43e)]()){if(_0x4871ce>_0x3a3e95[_0x460ff7(0x1f7)])_0x4295e1=![];if(_0x4871ce<_0x3a3e95[_0x460ff7(0x1f7)])_0x4295e1=!![];}};this[_0x460ff7(0xa7b)](_0x33e7f3?!_0x4295e1:_0x4295e1),_0x3a3e95['updateFlip']();},Game_Battler[_0x33ee77(0x9a7)][_0x33ee77(0x5f1)]=function(_0x226afe,_0x52543a,_0x2d6076,_0x4d9bbb,_0x516d1c){const _0x5548d0=_0x33ee77;if(!$gameSystem[_0x5548d0(0x7a6)]())return;const _0x46a7fc=this[_0x5548d0(0x157)]();if(!_0x46a7fc)return;if(_0x4d9bbb)this[_0x5548d0(0x3e1)](_0x226afe+_0x46a7fc['_baseX'],_0x52543a+_0x46a7fc[_0x5548d0(0x74a)],![]);_0x226afe+=_0x46a7fc['_baseX']-_0x46a7fc['_homeX'],_0x52543a+=_0x46a7fc[_0x5548d0(0x74a)]-_0x46a7fc[_0x5548d0(0xab7)],_0x46a7fc[_0x5548d0(0xa1e)](_0x226afe,_0x52543a,_0x2d6076);if(Imported[_0x5548d0(0x2e4)])_0x46a7fc[_0x5548d0(0x87b)](_0x516d1c||_0x5548d0(0x8d8));},Game_Battler['prototype'][_0x33ee77(0x511)]=function(_0x5b9320,_0x2bcc1d,_0x5e2ce1,_0x1f66eb,_0x17d7ef,_0x4c7788){const _0x64a30f=_0x33ee77;if(!$gameSystem['isSideView']())return;const _0xaf1003=this['battler']();if(!_0xaf1003)return;if(_0x5b9320===Infinity||_0x2bcc1d===Infinity)return;if(isNaN(_0x5b9320)||isNaN(_0x2bcc1d))return;_0x4c7788=_0x4c7788||0x0;if(_0x4c7788>0x0){if(_0xaf1003[_0x64a30f(0x1f7)]>_0x5b9320)_0x5b9320+=_0xaf1003['width']/0x2+_0x4c7788;if(_0xaf1003['_baseX']<_0x5b9320)_0x5b9320-=_0xaf1003[_0x64a30f(0x3d9)]/0x2+_0x4c7788;}if(_0x1f66eb)this[_0x64a30f(0x3e1)](_0x5b9320,_0x2bcc1d,![]);_0x5b9320-=_0xaf1003[_0x64a30f(0x2ca)],_0x2bcc1d-=_0xaf1003[_0x64a30f(0xab7)],_0xaf1003[_0x64a30f(0xa1e)](_0x5b9320,_0x2bcc1d,_0x5e2ce1);if(Imported[_0x64a30f(0x2e4)])_0xaf1003[_0x64a30f(0x87b)](_0x17d7ef||_0x64a30f(0x8d8));},Game_Battler[_0x33ee77(0x9a7)][_0x33ee77(0x838)]=function(_0x32657d,_0x351248,_0x1f4bd4,_0x55c91a,_0x43bd41){const _0x14b4aa=_0x33ee77;if(!$gameSystem[_0x14b4aa(0x7a6)]())return;const _0x1b3820=this[_0x14b4aa(0x157)]();if(!_0x1b3820)return;if(_0x55c91a)this[_0x14b4aa(0x3e1)](_0x32657d+_0x1b3820[_0x14b4aa(0x1f7)],_0x351248+_0x1b3820[_0x14b4aa(0x74a)],![]);_0x32657d+=_0x1b3820[_0x14b4aa(0x2ca)],_0x351248+=_0x1b3820[_0x14b4aa(0xab7)],_0x1b3820[_0x14b4aa(0x5b5)](_0x32657d,_0x351248,_0x1f4bd4,_0x43bd41),this[_0x14b4aa(0x62e)]=_0x32657d,this['_forcedHomeY']=_0x351248;},Game_Battler[_0x33ee77(0x9a7)][_0x33ee77(0xbc7)]=function(_0x100c9f,_0x106781,_0x493b48,_0x15f238,_0x444955,_0xbada63){const _0x38f5c8=_0x33ee77;if(!$gameSystem[_0x38f5c8(0x7a6)]())return;const _0x48028b=this[_0x38f5c8(0x157)]();if(!_0x48028b)return;_0xbada63=_0xbada63||0x0;if(_0xbada63>0x0){if(_0x48028b[_0x38f5c8(0x1f7)]>_0x100c9f)_0x100c9f+=_0x48028b['width']/0x2+_0xbada63;if(_0x48028b[_0x38f5c8(0x1f7)]<_0x100c9f)_0x100c9f-=_0x48028b[_0x38f5c8(0x3d9)]/0x2+_0xbada63;}if(_0x15f238)this[_0x38f5c8(0x3e1)](_0x100c9f,_0x106781,![]);_0x48028b[_0x38f5c8(0x5b5)](_0x100c9f,_0x106781,_0x493b48,_0x444955),this[_0x38f5c8(0x62e)]=_0x100c9f,this[_0x38f5c8(0x6ce)]=_0x106781;},Game_Battler[_0x33ee77(0x9a7)][_0x33ee77(0x3d5)]=function(_0x2c0cc4,_0x966ff0,_0x431b16){const _0x14170e=_0x33ee77;if(!$gameSystem[_0x14170e(0x7a6)]())return;const _0x24e6f5=this[_0x14170e(0x157)]();if(!_0x24e6f5)return;_0x24e6f5[_0x14170e(0x8f5)](_0x2c0cc4,_0x966ff0,_0x431b16);},Game_Battler['prototype'][_0x33ee77(0x1b3)]=function(_0x38ae6a,_0x521967){if(!$gameSystem['isSideView']())return;const _0x59a797=this['battler']();if(!_0x59a797)return;_0x59a797['startJump'](_0x38ae6a,_0x521967);},Game_Battler['prototype']['spinBattler']=function(_0x300c95,_0x329e84,_0x2b363d,_0x4a8f0b){const _0x128b4f=_0x33ee77;if(!$gameSystem[_0x128b4f(0x7a6)]())return;const _0x573e55=this[_0x128b4f(0x157)]();if(!_0x573e55)return;_0x573e55[_0x128b4f(0xadd)](_0x300c95,_0x329e84,_0x2b363d,_0x4a8f0b);},Game_Battler[_0x33ee77(0x9a7)][_0x33ee77(0x19c)]=function(_0xec3874,_0x1a0595,_0x1ce38e,_0x365842){const _0x22740a=_0x33ee77;if(!$gameSystem['isSideView']())return;const _0x3d81b7=this['battler']();if(!_0x3d81b7)return;this[_0x22740a(0x6c3)]()&&(_0xec3874*=-0x1,_0x1a0595*=-0x1),_0x3d81b7[_0x22740a(0x5d1)](_0xec3874,_0x1a0595,_0x1ce38e,_0x365842);},Game_Battler['prototype'][_0x33ee77(0x2df)]=function(_0x3faf4a,_0x2c0767,_0x52d708,_0x2dbdf4){const _0x12e1ee=_0x33ee77;if(!$gameSystem[_0x12e1ee(0x7a6)]())return;const _0x4b1c8c=this[_0x12e1ee(0x157)]();if(!_0x4b1c8c)return;_0x4b1c8c[_0x12e1ee(0x5a7)](_0x3faf4a,_0x2c0767,_0x52d708,_0x2dbdf4);},Game_Battler[_0x33ee77(0x9a7)]['changeBattlerOpacity']=function(_0x182d04,_0x475f07,_0x14dc1b){const _0x39ac02=_0x33ee77;if(!$gameSystem[_0x39ac02(0x7a6)]())return;const _0x3af111=this[_0x39ac02(0x157)]();if(!_0x3af111)return;_0x3af111['startOpacity'](_0x182d04,_0x475f07,_0x14dc1b);},Game_Battler[_0x33ee77(0x9a7)][_0x33ee77(0x35d)]=function(){const _0x1396ff=_0x33ee77,_0x54831b=!!this[_0x1396ff(0x4f2)];this[_0x1396ff(0x4f2)]=undefined,_0x54831b&&(this[_0x1396ff(0x3dd)](),this[_0x1396ff(0xbd3)]());},Game_Battler[_0x33ee77(0x9a7)]['clearFreezeMotionForWeapons']=function(){const _0x389568=_0x33ee77;if(!SceneManager[_0x389568(0x5d9)]())return;const _0x1e0fde=this[_0x389568(0x157)]();if(!_0x1e0fde)return;let _0x16ae9b=this[_0x389568(0x6c3)]()?_0x1e0fde[_0x389568(0x9ab)]:_0x1e0fde['_svBattlerSprite'][_0x389568(0x9ab)];_0x16ae9b&&_0x16ae9b[_0x389568(0x888)](0x0);},Game_Battler[_0x33ee77(0x9a7)][_0x33ee77(0xa3a)]=function(_0x52a89e,_0x7b4093,_0x58142b){const _0x1934ea=_0x33ee77;if(this[_0x1934ea(0x43e)]()&&!this[_0x1934ea(0x175)]())return;let _0x268c30=0x0,_0xaba1d5=0x0;_0x52a89e[_0x1934ea(0x7c1)](/ATTACK[ ](\d+)/i)&&(_0xaba1d5=Number(RegExp['$1']),_0xaba1d5--);if(this[_0x1934ea(0x6c3)]()){const _0x27950e=this[_0x1934ea(0x769)]();_0x268c30=_0x27950e[_0xaba1d5]?_0x27950e[_0xaba1d5]['wtypeId']:0x0;}else this[_0x1934ea(0x43e)]()&&(_0x268c30=this['svBattlerData']()['wtypeId']||0x0);const _0x31a21a=$dataSystem[_0x1934ea(0xab4)][_0x268c30];_0x52a89e[_0x1934ea(0x7c1)](/attack/i)&&(_0x52a89e=[_0x1934ea(0x606),_0x1934ea(0x4d1),_0x1934ea(0x617)][_0x31a21a[_0x1934ea(0xa0f)]]||_0x1934ea(0x4d1)),this[_0x1934ea(0x4f2)]={'motionType':_0x52a89e,'weaponImageId':_0x7b4093?_0x31a21a[_0x1934ea(0x889)]:0x0,'pattern':_0x58142b};},Game_Battler[_0x33ee77(0x9a7)][_0x33ee77(0x6e2)]=function(_0x5bab41){const _0x518b5e=_0x33ee77;if(!_0x5bab41)return![];return _0x5bab41[_0x518b5e(0x95f)]()===this[_0x518b5e(0x95f)]();},Game_Battler[_0x33ee77(0x9a7)]['isOpponent']=function(_0x24eb9c){const _0xa85cf5=_0x33ee77;if(!_0x24eb9c)return![];return _0x24eb9c['opponentsUnit']()===this[_0xa85cf5(0x95f)]();},Game_Battler[_0x33ee77(0x9a7)]['hasStaticSvBattler']=function(){return![];},Game_Actor[_0x33ee77(0x9a7)][_0x33ee77(0x3df)]=function(){const _0x3832e2=_0x33ee77;return this[_0x3832e2(0xaba)]()[_0x3832e2(0x7c1)](/\$/i);},Game_Enemy[_0x33ee77(0x9a7)][_0x33ee77(0x3df)]=function(){const _0x4a1514=_0x33ee77;return this[_0x4a1514(0x175)]()&&this[_0x4a1514(0x460)]()[_0x4a1514(0x7c1)](/\$/i);},VisuMZ['BattleCore'][_0x33ee77(0x45e)]=Game_Actor['prototype'][_0x33ee77(0x888)],Game_Actor['prototype'][_0x33ee77(0x888)]=function(_0x1614a8){const _0x103ec2=_0x33ee77;VisuMZ[_0x103ec2(0x993)][_0x103ec2(0x45e)][_0x103ec2(0x88f)](this,_0x1614a8),this[_0x103ec2(0x493)]();},Game_Actor[_0x33ee77(0x9a7)][_0x33ee77(0x493)]=function(){const _0x130e1f=_0x33ee77;this[_0x130e1f(0x88a)]='',this[_0x130e1f(0x2b0)]()&&this[_0x130e1f(0x2b0)]()[_0x130e1f(0x448)][_0x130e1f(0x7c1)](/<BATTLE (?:IMAGE|PORTRAIT):[ ](.*)>/i)&&(this[_0x130e1f(0x88a)]=String(RegExp['$1']));},Game_Actor[_0x33ee77(0x9a7)][_0x33ee77(0x744)]=function(){const _0xc45bfb=_0x33ee77;if(this[_0xc45bfb(0x2cd)]()!=='')return this[_0xc45bfb(0x2cd)]();else{if(Imported[_0xc45bfb(0x8a8)]&&this[_0xc45bfb(0x619)]()!=='')return this[_0xc45bfb(0x619)]();}return'';},Game_Actor[_0x33ee77(0x9a7)]['getBattlePortrait']=function(){if(this['_battlePortrait']===undefined)this['initBattlePortrait']();return this['_battlePortrait'];},Game_Actor[_0x33ee77(0x9a7)][_0x33ee77(0xa04)]=function(_0x13f042){const _0xf38ffe=_0x33ee77;if(this['_battlePortrait']===undefined)this[_0xf38ffe(0x493)]();this[_0xf38ffe(0x88a)]=_0x13f042;if(SceneManager[_0xf38ffe(0x5d9)]()&&$gameParty[_0xf38ffe(0xa6a)]()[_0xf38ffe(0x741)](this)){const _0x36b079=SceneManager['_scene']['_statusWindow'];_0x36b079&&_0x36b079['refreshActorPortrait'](this);}},Game_Actor['prototype'][_0x33ee77(0x2b2)]=function(){return!![];},Game_Actor[_0x33ee77(0x9a7)]['isAutoBattle']=function(){const _0x5738ec=_0x33ee77;if(!this[_0x5738ec(0x847)]()&&BattleManager[_0x5738ec(0x5bb)])return!![];return Game_Battler['prototype'][_0x5738ec(0x1cd)][_0x5738ec(0x88f)](this);},VisuMZ[_0x33ee77(0x993)][_0x33ee77(0x711)]=Game_Actor[_0x33ee77(0x9a7)][_0x33ee77(0x3ad)],Game_Actor[_0x33ee77(0x9a7)]['makeActionList']=function(){const _0x58aca8=_0x33ee77;if(BattleManager['_autoBattle']&&!ConfigManager['autoBattleUseSkills'])return this[_0x58aca8(0x53a)]();else{return VisuMZ['BattleCore'][_0x58aca8(0x711)][_0x58aca8(0x88f)](this);;}},Game_Actor['prototype'][_0x33ee77(0x53a)]=function(){const _0x25cc61=_0x33ee77,_0x38c158=[],_0xcddbc=new Game_Action(this);return _0xcddbc[_0x25cc61(0x528)](),_0x38c158[_0x25cc61(0x7ab)](_0xcddbc),_0x38c158;},Game_Actor['prototype'][_0x33ee77(0x8e9)]=function(){const _0x4d1ce1=_0x33ee77;return this['currentClass']()[_0x4d1ce1(0x448)]['match'](/<BATTLE COMMANDS>\s*([\s\S]*)\s*<\/BATTLE COMMANDS>/i)?String(RegExp['$1'])[_0x4d1ce1(0x22d)](/[\r\n]+/):VisuMZ[_0x4d1ce1(0x993)]['Settings']['ActorCmd']['BattleCmdList'];},Game_Actor['prototype'][_0x33ee77(0x931)]=function(){const _0x429dc3=_0x33ee77;if(this[_0x429dc3(0x79c)][_0x429dc3(0x38c)]!==undefined)return this[_0x429dc3(0x79c)][_0x429dc3(0x38c)];return this['actor']()['note'][_0x429dc3(0x7c1)](/<SIDEVIEW ANCHOR: (.*), (.*)>/i)?(this[_0x429dc3(0x79c)][_0x429dc3(0x38c)]=eval(RegExp['$1']),this[_0x429dc3(0x79c)][_0x429dc3(0x8e1)]=eval(RegExp['$2'])):this[_0x429dc3(0x79c)]['svAnchorX']=Game_Battler[_0x429dc3(0x9a7)]['svBattlerAnchorX']['call'](this),this['_cache'][_0x429dc3(0x38c)];},Game_Actor[_0x33ee77(0x9a7)]['svBattlerAnchorY']=function(){const _0x213a4c=_0x33ee77;if(this[_0x213a4c(0x79c)][_0x213a4c(0x8e1)]!==undefined)return this[_0x213a4c(0x79c)]['svAnchorY'];return this[_0x213a4c(0x2b0)]()[_0x213a4c(0x448)]['match'](/<SIDEVIEW ANCHOR: (.*), (.*)>/i)?(this[_0x213a4c(0x79c)][_0x213a4c(0x38c)]=eval(RegExp['$1']),this[_0x213a4c(0x79c)][_0x213a4c(0x8e1)]=eval(RegExp['$2'])):this['_cache']['svAnchorY']=Game_Battler[_0x213a4c(0x9a7)][_0x213a4c(0x851)][_0x213a4c(0x88f)](this),this['_cache'][_0x213a4c(0x8e1)];},Game_Actor[_0x33ee77(0x9a7)]['svBattlerShadowVisible']=function(){const _0x152923=_0x33ee77;if(this[_0x152923(0x79c)][_0x152923(0x9ce)]!==undefined)return this['_cache'][_0x152923(0x9ce)];if(this[_0x152923(0x2b0)]()[_0x152923(0x448)]['match'](/<SIDEVIEW SHOW SHADOW>/i))this['_cache'][_0x152923(0x9ce)]=!![];else this[_0x152923(0x2b0)]()['note'][_0x152923(0x7c1)](/<SIDEVIEW HIDE SHADOW>/i)?this['_cache'][_0x152923(0x9ce)]=![]:this[_0x152923(0x79c)][_0x152923(0x9ce)]=Game_Battler[_0x152923(0x9a7)][_0x152923(0x718)]['call'](this);return this[_0x152923(0x79c)]['svShadow'];},Game_Actor[_0x33ee77(0x9a7)][_0x33ee77(0x7b3)]=function(){const _0x11a031=_0x33ee77;return VisuMZ['BattleCore'][_0x11a031(0x12b)]['Actor'][_0x11a031(0x494)];},Game_Actor[_0x33ee77(0x9a7)]['performWeaponAnimation']=function(){const _0x394b19=_0x33ee77,_0x43b72d=this['weapons'](),_0x1446b2=_0x43b72d[0x0]?_0x43b72d[0x0][_0x394b19(0xb40)]:0x0,_0x5c93a0=$dataSystem['attackMotions'][_0x1446b2];_0x5c93a0&&this['startWeaponAnimation'](_0x5c93a0['weaponImageId']);},Game_Actor[_0x33ee77(0x9a7)][_0x33ee77(0x805)]=function(_0x102651){const _0x5117e7=_0x33ee77;Game_Battler[_0x5117e7(0x9a7)][_0x5117e7(0x805)]['call'](this,_0x102651),this[_0x5117e7(0x516)](_0x102651);},Game_Actor[_0x33ee77(0x9a7)][_0x33ee77(0x74d)]=function(){const _0x3b73dc=_0x33ee77,_0x4981bd=this[_0x3b73dc(0x769)](),_0x63704e=_0x4981bd[0x0]?_0x4981bd[0x0]['wtypeId']:0x0;return $dataSystem[_0x3b73dc(0xab4)][_0x63704e];},Game_Actor[_0x33ee77(0x9a7)][_0x33ee77(0x940)]=function(_0x21d73c){const _0x51d7f5=_0x33ee77;_0x21d73c=_0x21d73c||0x1,_0x21d73c--;const _0x323659=this['weapons']();return _0x323659[_0x21d73c]?_0x323659[_0x21d73c][_0x51d7f5(0xc12)]:0x0;},Game_Actor[_0x33ee77(0x9a7)][_0x33ee77(0xac8)]=function(_0x587718){const _0x3c1423=_0x33ee77;_0x587718=_0x587718||0x1,_0x587718--;const _0x352e9c=this[_0x3c1423(0x769)](),_0x2267c3=_0x352e9c[_0x587718]?_0x352e9c[_0x587718][_0x3c1423(0xb40)]:0x0;return $dataSystem[_0x3c1423(0xab4)][_0x2267c3];},Game_Actor[_0x33ee77(0x9a7)][_0x33ee77(0x675)]=function(_0x962ecb){const _0x3e1cb0=_0x33ee77;_0x962ecb=_0x962ecb||0x1,_0x962ecb--;const _0x50d43b=this[_0x3e1cb0(0x769)](),_0x1aa6c3=_0x50d43b[_0x962ecb]?_0x50d43b[_0x962ecb][_0x3e1cb0(0xb40)]:0x0,_0x1d056e=$dataSystem[_0x3e1cb0(0xab4)][_0x1aa6c3];if(_0x1d056e){if(_0x1d056e['type']===0x0)this[_0x3e1cb0(0x2a8)]('thrust');else{if(_0x1d056e[_0x3e1cb0(0xa0f)]===0x1)this[_0x3e1cb0(0x2a8)]('swing');else _0x1d056e[_0x3e1cb0(0xa0f)]===0x2&&this[_0x3e1cb0(0x2a8)]('missile');}this[_0x3e1cb0(0x944)](_0x1d056e['weaponImageId']);}},Game_Battler[_0x33ee77(0x9a7)][_0x33ee77(0x584)]=function(_0x2b2324){const _0x4ef9a5=_0x33ee77;if(this[_0x4ef9a5(0x6c3)]()){const _0x20eca7=this[_0x4ef9a5(0x769)]();if(_0x20eca7[_0x4ef9a5(0x70c)]>0x0){const _0x41a075=_0x20eca7[_0x2b2324];if(_0x41a075)_0x2b2324=this[_0x4ef9a5(0x4fa)]()['indexOf'](_0x41a075);}}this[_0x4ef9a5(0x3dc)]=_0x2b2324||0x0,this[_0x4ef9a5(0x79c)]={};},Game_Battler[_0x33ee77(0x9a7)]['nextActiveWeaponSlot']=function(){const _0x505006=_0x33ee77;this[_0x505006(0x3dc)]=this[_0x505006(0x3dc)]||0x0,this[_0x505006(0x3dc)]++,this[_0x505006(0x79c)]={};},Game_Battler[_0x33ee77(0x9a7)]['clearActiveWeaponSlot']=function(){const _0x25b025=_0x33ee77;this[_0x25b025(0x3dc)]=undefined,this[_0x25b025(0x79c)]={};},VisuMZ['BattleCore'][_0x33ee77(0xaf9)]=Game_Actor[_0x33ee77(0x9a7)][_0x33ee77(0x4fa)],Game_Actor[_0x33ee77(0x9a7)]['equips']=function(){const _0x533dbb=_0x33ee77;let _0x5bc2af=VisuMZ[_0x533dbb(0x993)][_0x533dbb(0xaf9)]['call'](this);if(this[_0x533dbb(0xaa9)])return _0x5bc2af;if(this[_0x533dbb(0x3dc)]!==undefined){this[_0x533dbb(0xaa9)]=!![];const _0x58f067=this[_0x533dbb(0x8cb)]();for(let _0x46e834=0x0;_0x46e834<_0x58f067['length'];_0x46e834++){_0x58f067[_0x46e834]===0x1&&this[_0x533dbb(0x3dc)]!==_0x46e834&&(_0x5bc2af[_0x46e834]=null);}this[_0x533dbb(0xaa9)]=undefined;}return _0x5bc2af;},VisuMZ[_0x33ee77(0x993)][_0x33ee77(0xacc)]=Game_BattlerBase[_0x33ee77(0x9a7)][_0x33ee77(0x68a)],Game_BattlerBase['prototype']['param']=function(_0x3f4dd5){const _0x254f9d=_0x33ee77;this[_0x254f9d(0x3dc)]!==undefined&&[0x0,0x1][_0x254f9d(0x741)](_0x3f4dd5)&&(this[_0x254f9d(0xaa9)]=!![]);const _0x4d836c=VisuMZ['BattleCore'][_0x254f9d(0xacc)][_0x254f9d(0x88f)](this,_0x3f4dd5);return this[_0x254f9d(0x3dc)]!==undefined&&[0x0,0x1][_0x254f9d(0x741)](_0x3f4dd5)&&(this[_0x254f9d(0xaa9)]=![]),_0x4d836c;},Window_BattleLog[_0x33ee77(0x9a7)][_0x33ee77(0xb53)]=function(_0x39d129){const _0x1ecd77=_0x33ee77;return _0x39d129[_0x1ecd77(0x6c3)]()?_0x39d129[_0x1ecd77(0x769)]()[_0x1ecd77(0x70c)]||0x1:0x1;},Window_BattleLog[_0x33ee77(0x9a7)][_0x33ee77(0x9fa)]=function(_0x3807ae,_0xe097bc){const _0x4d3a4c=_0x33ee77;_0x3807ae&&_0x3807ae[_0x4d3a4c(0x6c3)]()&&_0x3807ae[_0x4d3a4c(0x584)](_0xe097bc),this[_0x4d3a4c(0x337)]();},Window_BattleLog['prototype'][_0x33ee77(0x9e5)]=function(_0x20fbdf){const _0x3be090=_0x33ee77;_0x20fbdf&&_0x20fbdf[_0x3be090(0x6c3)]()&&_0x20fbdf['clearActiveWeaponSlot'](),this[_0x3be090(0x337)]();},Game_Actor[_0x33ee77(0x9a7)]['battleUIOffsetX']=function(){const _0x1592d6=_0x33ee77;let _0x4e72d2=_0x1592d6(0xa2e);if(this[_0x1592d6(0x7a8)](_0x4e72d2))return this['_cache'][_0x4e72d2];return this[_0x1592d6(0x79c)][_0x4e72d2]=this['createBattleUIOffsetX'](this[_0x1592d6(0x2b0)]()),this[_0x1592d6(0x79c)][_0x4e72d2];},Game_Actor[_0x33ee77(0x9a7)]['battleUIOffsetY']=function(){const _0x5c841a=_0x33ee77;let _0x36e135=_0x5c841a(0xabb);if(this[_0x5c841a(0x7a8)](_0x36e135))return this[_0x5c841a(0x79c)][_0x36e135];return this[_0x5c841a(0x79c)][_0x36e135]=this[_0x5c841a(0x958)](this[_0x5c841a(0x2b0)]()),this['_cache'][_0x36e135];},VisuMZ[_0x33ee77(0x993)][_0x33ee77(0x137)]=Game_Enemy[_0x33ee77(0x9a7)][_0x33ee77(0x888)],Game_Enemy[_0x33ee77(0x9a7)][_0x33ee77(0x888)]=function(_0x6b441b,_0xddc982,_0xd5a346){const _0x56581a=_0x33ee77;_0x6b441b=DataManager[_0x56581a(0x5ea)](_0x6b441b),VisuMZ['BattleCore'][_0x56581a(0x137)]['call'](this,_0x6b441b,_0xddc982,_0xd5a346),Imported[_0x56581a(0x98c)]&&this[_0x56581a(0x99a)](),this[_0x56581a(0x9f7)](),this[_0x56581a(0xab8)](),this['setupBattleCoreAspects'](),Imported['VisuMZ_1_ElementStatusCore']&&this[_0x56581a(0x2bd)]();},Game_Enemy[_0x33ee77(0x9a7)][_0x33ee77(0x9f7)]=function(){const _0x3c5005=_0x33ee77,_0xa0a3be=VisuMZ[_0x3c5005(0x993)][_0x3c5005(0x12b)][_0x3c5005(0xc1d)];this[_0x3c5005(0xb31)]=_0xa0a3be['AttackAnimation'],this[_0x3c5005(0x85d)]={},this[_0x3c5005(0x3e9)]();},Game_Enemy[_0x33ee77(0x9a7)][_0x33ee77(0xab8)]=function(){const _0x51b4be=_0x33ee77,_0x1cf7ef=VisuMZ['BattleCore'][_0x51b4be(0x12b)][_0x51b4be(0xc1d)],_0x138c54=this['enemy']()[_0x51b4be(0x448)];this[_0x51b4be(0x85d)]={'name':'','wtypeId':_0x1cf7ef['WtypeId'],'collapse':_0x1cf7ef[_0x51b4be(0x267)],'motionIdle':_0x1cf7ef[_0x51b4be(0x1eb)],'width':_0x1cf7ef['Width']||0x40,'height':_0x1cf7ef[_0x51b4be(0xb7b)]||0x40,'anchorX':_0x1cf7ef[_0x51b4be(0x633)]||0x0,'anchorY':_0x1cf7ef[_0x51b4be(0x621)]||0x0,'shadow':_0x1cf7ef[_0x51b4be(0xbd4)]};_0x138c54[_0x51b4be(0x7c1)](/<ATTACK ANIMATION:[ ](\d+)>/i)&&(this[_0x51b4be(0xb31)]=Number(RegExp['$1']));const _0x2dd083=this[_0x51b4be(0x85d)];if(_0x138c54[_0x51b4be(0x7c1)](/<SIDEVIEW BATTLER: (.*)>/i))_0x2dd083[_0x51b4be(0xac3)]=String(RegExp['$1']);else{if(_0x138c54['match'](/<SIDEVIEW BATTLERS>\s*([\s\S]*)\s*<\/SIDEVIEW BATTLERS>/i)){const _0x1319ed=String(RegExp['$1'])[_0x51b4be(0x22d)](/[\r\n]+/)[_0x51b4be(0x259)]('');_0x2dd083['name']=DataManager['processRandomizedData'](_0x1319ed);}}_0x138c54[_0x51b4be(0x7c1)](/<SIDEVIEW ANCHOR: (.*), (.*)>/i)&&(_0x2dd083[_0x51b4be(0x1f1)]=eval(RegExp['$1']),_0x2dd083[_0x51b4be(0xa2f)]=eval(RegExp['$2']));if(_0x138c54[_0x51b4be(0x7c1)](/<SIDEVIEW COLLAPSE>/i))_0x2dd083['collapse']=!![];else _0x138c54[_0x51b4be(0x7c1)](/<SIDEVIEW NO COLLAPSE>/i)&&(_0x2dd083[_0x51b4be(0x946)]=![]);if(_0x138c54['match'](/<SIDEVIEW SHOW SHADOW>/i))_0x2dd083[_0x51b4be(0x9fc)]=!![];else _0x138c54[_0x51b4be(0x7c1)](/<SIDEVIEW HIDE SHADOW>/i)&&(_0x2dd083['shadow']=![]);if(_0x138c54['match'](/<SIDEVIEW IDLE MOTION: (.*)>/i))_0x2dd083['motionIdle']=String(RegExp['$1'])[_0x51b4be(0x172)]()['trim']();else{if(_0x138c54['match'](/<SIDEVIEW IDLE MOTIONS>\s*([\s\S]*)\s*<\/SIDEVIEW IDLE MOTIONS>/i)){const _0x30b20c=String(RegExp['$1'])[_0x51b4be(0x22d)](/[\r\n]+/)[_0x51b4be(0x259)]('');_0x2dd083['motionIdle']=DataManager['processRandomizedData'](_0x30b20c);}}_0x138c54[_0x51b4be(0x7c1)](/<SIDEVIEW SIZE: (\d+), (\d+)>/i)&&(_0x2dd083[_0x51b4be(0x3d9)]=Number(RegExp['$1']),_0x2dd083[_0x51b4be(0x578)]=Number(RegExp['$2']));if(_0x138c54[_0x51b4be(0x7c1)](/<SIDEVIEW WEAPON: (.*)>/i))_0x2dd083[_0x51b4be(0xb40)]=DataManager[_0x51b4be(0x5c7)](RegExp['$1']);else{if(_0x138c54[_0x51b4be(0x7c1)](/<SIDEVIEW WEAPONS>\s*([\s\S]*)\s*<\/SIDEVIEW WEAPONS>/i)){const _0x3dd6db=String(RegExp['$1'])[_0x51b4be(0x22d)](/[\r\n]+/)[_0x51b4be(0x259)](''),_0x3ffb0c=DataManager['processRandomizedData'](_0x3dd6db);_0x2dd083[_0x51b4be(0xb40)]=DataManager[_0x51b4be(0x5c7)](_0x3ffb0c);}}if(Imported[_0x51b4be(0x98c)]){const _0x3931b6=this[_0x51b4be(0x757)]();for(const _0x3ff5c1 of _0x3931b6){const _0x283f6d=this[_0x51b4be(0x116)](_0x3ff5c1)[_0x51b4be(0x334)][_0x51b4be(0x46b)]()[_0x51b4be(0xaf2)](),_0x24ff74=_0x3ff5c1[_0x51b4be(0x46b)]()[_0x51b4be(0xaf2)]();if(_0x138c54[_0x51b4be(0x7c1)](VisuMZ[_0x51b4be(0x697)][_0x51b4be(0x4c1)][_0x51b4be(0x897)[_0x51b4be(0x23d)](_0x24ff74,_0x283f6d)]))_0x2dd083[_0x51b4be(0xac3)]=String(RegExp['$1']);else{if(_0x138c54[_0x51b4be(0x7c1)](VisuMZ[_0x51b4be(0x697)][_0x51b4be(0x4c1)][_0x51b4be(0x919)['format'](_0x24ff74,_0x283f6d)])){const _0x24cf31=String(RegExp['$1'])[_0x51b4be(0x22d)](/[\r\n]+/)[_0x51b4be(0x259)]('');_0x2dd083[_0x51b4be(0xac3)]=DataManager[_0x51b4be(0xb06)](_0x24cf31);}}if(_0x138c54[_0x51b4be(0x7c1)](VisuMZ[_0x51b4be(0x697)]['RegExp'][_0x51b4be(0x631)[_0x51b4be(0x23d)](_0x24ff74,_0x283f6d)]))_0x2dd083[_0x51b4be(0xb40)]=DataManager['getWtypeIdWithName'](RegExp['$1']);else{if(_0x138c54[_0x51b4be(0x7c1)](VisuMZ['ElementStatusCore'][_0x51b4be(0x4c1)]['SvWeaponMass-%1-%2'[_0x51b4be(0x23d)](_0x24ff74,_0x283f6d)])){const _0x6a910d=String(RegExp['$1'])[_0x51b4be(0x22d)](/[\r\n]+/)['remove'](''),_0x1db974=DataManager[_0x51b4be(0xb06)](_0x6a910d);_0x2dd083[_0x51b4be(0xb40)]=DataManager[_0x51b4be(0x5c7)](_0x1db974);}}if(_0x138c54[_0x51b4be(0x7c1)](VisuMZ['ElementStatusCore'][_0x51b4be(0x4c1)][_0x51b4be(0x647)[_0x51b4be(0x23d)](_0x24ff74,_0x283f6d)]))_0x2dd083[_0x51b4be(0x75a)]=String(RegExp['$1'])[_0x51b4be(0x172)]()['trim']();else{if(_0x138c54[_0x51b4be(0x7c1)](VisuMZ[_0x51b4be(0x697)][_0x51b4be(0x4c1)][_0x51b4be(0xbe7)[_0x51b4be(0x23d)](_0x24ff74,_0x283f6d)])){const _0xf7c221=String(RegExp['$1'])[_0x51b4be(0x22d)](/[\r\n]+/)[_0x51b4be(0x259)]('');_0x2dd083['motionIdle']=DataManager['processRandomizedData'](_0xf7c221);}}}}},Game_Enemy[_0x33ee77(0x9a7)]['attackAnimationId1']=function(){const _0xc22d2=_0x33ee77;return this[_0xc22d2(0xb31)]||0x0;},Game_Enemy[_0x33ee77(0x9a7)][_0x33ee77(0x942)]=function(){const _0x4917fa=_0x33ee77;return this[_0x4917fa(0x3b3)]();},Game_Enemy[_0x33ee77(0x9a7)][_0x33ee77(0x940)]=function(_0x4f0cf7){const _0x525f5c=_0x33ee77;return this[_0x525f5c(0x3b3)]();},Game_Enemy[_0x33ee77(0x9a7)][_0x33ee77(0x57a)]=function(){const _0x2860af=_0x33ee77;if(this[_0x2860af(0x246)]()[_0x2860af(0x448)][_0x2860af(0x7c1)](/<BATTLER SPRITE CANNOT MOVE>/i))return![];return Game_Battler['prototype'][_0x2860af(0x57a)][_0x2860af(0x88f)](this);},Game_Enemy[_0x33ee77(0x9a7)][_0x33ee77(0x61e)]=function(){const _0x1e45b1=_0x33ee77;if(this[_0x1e45b1(0x246)]()['note'][_0x1e45b1(0x7c1)](/<BATTLER SPRITE GROUNDED>/i))return!![];return![];},Game_Enemy[_0x33ee77(0x9a7)][_0x33ee77(0x29b)]=function(){const _0x36b62f=_0x33ee77,_0xabeb5a=[];for(const _0xd0dab4 of this[_0x36b62f(0x246)]()[_0x36b62f(0x935)]){const _0x3f7d32=$dataSkills[_0xd0dab4[_0x36b62f(0x74e)]];if(_0x3f7d32&&!_0xabeb5a['includes'](_0x3f7d32))_0xabeb5a[_0x36b62f(0x7ab)](_0x3f7d32);}return _0xabeb5a;},Game_Enemy[_0x33ee77(0x9a7)][_0x33ee77(0xa2e)]=function(){const _0x3e2140=_0x33ee77;let _0x364d29=_0x3e2140(0xa2e);if(this['checkCacheKey'](_0x364d29))return this[_0x3e2140(0x79c)][_0x364d29];return this[_0x3e2140(0x79c)][_0x364d29]=this['createBattleUIOffsetX'](this[_0x3e2140(0x246)]()),this[_0x3e2140(0x79c)][_0x364d29];},Game_Enemy[_0x33ee77(0x9a7)][_0x33ee77(0xabb)]=function(){const _0x11b539=_0x33ee77;let _0x2af311=_0x11b539(0xabb);if(this[_0x11b539(0x7a8)](_0x2af311))return this[_0x11b539(0x79c)][_0x2af311];return this[_0x11b539(0x79c)][_0x2af311]=this[_0x11b539(0x958)](this[_0x11b539(0x246)]()),this[_0x11b539(0x79c)][_0x2af311];},Game_Enemy[_0x33ee77(0x9a7)][_0x33ee77(0x949)]=function(){const _0x45b55e=_0x33ee77;if(this[_0x45b55e(0x85d)]!==undefined)return this[_0x45b55e(0x85d)];return this[_0x45b55e(0xab8)](),this[_0x45b55e(0x85d)];},Game_Enemy[_0x33ee77(0x9a7)]['hasSvBattler']=function(){return this['svBattlerData']()['name']!=='';},Game_Enemy['prototype'][_0x33ee77(0x460)]=function(){const _0x4c69a9=_0x33ee77;return this[_0x4c69a9(0x949)]()[_0x4c69a9(0xac3)];},Game_Enemy[_0x33ee77(0x9a7)]['battlerSmoothImage']=function(){const _0xe613c8=_0x33ee77;return this[_0xe613c8(0x175)]()?VisuMZ['BattleCore'][_0xe613c8(0x12b)][_0xe613c8(0x46f)]['SmoothImage']:VisuMZ[_0xe613c8(0x993)]['Settings'][_0xe613c8(0xc1d)][_0xe613c8(0x494)];},Game_Enemy[_0x33ee77(0x9a7)][_0x33ee77(0x805)]=function(_0x564963){const _0x5abbad=_0x33ee77;Game_Battler[_0x5abbad(0x9a7)]['performAction'][_0x5abbad(0x88f)](this,_0x564963);if(this['hasSvBattler']())this['performActionMotions'](_0x564963);},Game_Enemy['prototype'][_0x33ee77(0x695)]=function(){const _0x2ca77b=_0x33ee77,_0x115440=this[_0x2ca77b(0x949)]()[_0x2ca77b(0xb40)]||0x0,_0x4f0a84=$dataSystem['attackMotions'][_0x115440];if(_0x4f0a84){if(_0x4f0a84[_0x2ca77b(0xa0f)]===0x0)this[_0x2ca77b(0x2a8)](_0x2ca77b(0x606));else{if(_0x4f0a84[_0x2ca77b(0xa0f)]===0x1)this[_0x2ca77b(0x2a8)](_0x2ca77b(0x4d1));else _0x4f0a84['type']===0x2&&this[_0x2ca77b(0x2a8)](_0x2ca77b(0x617));}}},Game_Enemy[_0x33ee77(0x9a7)]['performWeaponAnimation']=function(){const _0x1f10f3=_0x33ee77,_0x389d43=this[_0x1f10f3(0x949)]()[_0x1f10f3(0xb40)]||0x0,_0x27153f=$dataSystem[_0x1f10f3(0xab4)][_0x389d43];_0x27153f&&this[_0x1f10f3(0x944)](_0x27153f[_0x1f10f3(0x889)]);},Game_Enemy['prototype'][_0x33ee77(0x74d)]=function(){const _0xab4ddd=_0x33ee77,_0xa5ac73=this['svBattlerData']()[_0xab4ddd(0xb40)]||0x0;return $dataSystem['attackMotions'][_0xa5ac73];},Game_Enemy['prototype'][_0x33ee77(0xac8)]=function(_0x10784b){const _0x3db18b=_0x33ee77;return this[_0x3db18b(0x74d)]();},Game_Enemy['prototype'][_0x33ee77(0xa53)]=function(){const _0x2d61ac=_0x33ee77;Game_Battler['prototype'][_0x2d61ac(0xa53)][_0x2d61ac(0x88f)](this),this[_0x2d61ac(0x2b2)]()&&this[_0x2d61ac(0x175)]()&&this[_0x2d61ac(0x2a8)](_0x2d61ac(0x2d7)),SoundManager['playEnemyDamage']();},Game_Enemy[_0x33ee77(0x9a7)][_0x33ee77(0xa00)]=function(){const _0x4e9762=_0x33ee77;Game_Battler[_0x4e9762(0x9a7)][_0x4e9762(0xa00)][_0x4e9762(0x88f)](this),this[_0x4e9762(0x2a8)]('evade');},Game_Enemy[_0x33ee77(0x9a7)][_0x33ee77(0x136)]=function(){const _0x13c8e7=_0x33ee77;Game_Battler[_0x13c8e7(0x9a7)][_0x13c8e7(0x136)]['call'](this),this[_0x13c8e7(0x2a8)](_0x13c8e7(0xa77));},Game_Enemy[_0x33ee77(0x9a7)][_0x33ee77(0x532)]=function(){const _0x3b8ea0=_0x33ee77;Game_Battler['prototype'][_0x3b8ea0(0x532)]['call'](this),this['performAttack']();},Game_Enemy['prototype'][_0x33ee77(0x2d0)]=function(){const _0x3b7ccb=_0x33ee77;if(this[_0x3b7ccb(0x175)]()){if(this['collapseType']()>=0x1)return!![];return this[_0x3b7ccb(0x949)]()[_0x3b7ccb(0x946)];}else return!![];},Game_Enemy[_0x33ee77(0x9a7)][_0x33ee77(0x931)]=function(){const _0x57d5d5=_0x33ee77;return this[_0x57d5d5(0x949)]()[_0x57d5d5(0x1f1)];},Game_Enemy['prototype'][_0x33ee77(0x851)]=function(){const _0x871f25=_0x33ee77;return this[_0x871f25(0x949)]()[_0x871f25(0xa2f)];},Game_Enemy[_0x33ee77(0x9a7)]['svBattlerShadowVisible']=function(){const _0xe7d15=_0x33ee77;return this[_0xe7d15(0x949)]()['shadow'];},VisuMZ['BattleCore']['Game_Enemy_transform']=Game_Enemy[_0x33ee77(0x9a7)][_0x33ee77(0x6c0)],Game_Enemy[_0x33ee77(0x9a7)][_0x33ee77(0x6c0)]=function(_0x4fe208){const _0x46c7e5=_0x33ee77;VisuMZ[_0x46c7e5(0x993)][_0x46c7e5(0x7ba)]['call'](this,_0x4fe208),this[_0x46c7e5(0x9f7)](),this[_0x46c7e5(0xab8)]();const _0x593b32=this[_0x46c7e5(0x157)]();_0x593b32&&(_0x593b32[_0x46c7e5(0x656)]=undefined,_0x593b32[_0x46c7e5(0x95b)](this));},Game_Enemy['prototype'][_0x33ee77(0x3e9)]=function(){const _0x329f09=_0x33ee77,_0x50ec92=VisuMZ[_0x329f09(0x993)][_0x329f09(0x12b)]['Enemy'];this['_nameTempVisibleDuration']=_0x50ec92[_0x329f09(0x40c)]??0x0;},Game_Enemy[_0x33ee77(0x9a7)][_0x33ee77(0x874)]=function(){const _0x2e2749=_0x33ee77;return this[_0x2e2749(0x74f)]&&this[_0x2e2749(0x74f)]>0x0;},Game_Enemy[_0x33ee77(0x9a7)][_0x33ee77(0x466)]=function(){const _0x30a49c=_0x33ee77;this[_0x30a49c(0x74f)]&&this[_0x30a49c(0x74f)]>0x0&&this['_nameTempVisibleDuration']--;},Game_Enemy['prototype'][_0x33ee77(0xa4b)]=function(){const _0x3bf857=_0x33ee77;this[_0x3bf857(0x74f)]=0x0;},Game_Enemy[_0x33ee77(0x9a7)]['setupBattleCoreAspects']=function(){const _0x215bc6=_0x33ee77;this[_0x215bc6(0x2f3)]();const _0x2ba7cd=this['enemy']()[_0x215bc6(0x448)]||'';if(_0x2ba7cd[_0x215bc6(0x7c1)](/<ASPECT NAME:[ ](.*)>/i)){const _0x492dda=String(RegExp['$1']);this[_0x215bc6(0x179)]()[_0x215bc6(0xac3)]=_0x492dda[_0x215bc6(0x23d)](this[_0x215bc6(0x375)]());}_0x2ba7cd[_0x215bc6(0x7c1)](/<ASPECT ICON:[ ](\d+)>/i)&&(this['getAspectData']()['iconIndex']=Number(RegExp['$1'])),_0x2ba7cd[_0x215bc6(0x7c1)](/<ASPECT COLOR:[ ](.*)>/i)&&(this[_0x215bc6(0x179)]()[_0x215bc6(0x510)]=String(RegExp['$1'])),_0x2ba7cd[_0x215bc6(0x7c1)](/<ASPECT DESCRIPTION>\s*([\s\S]*)\s*<\/ASPECT DESCRIPTION>/i)&&(this[_0x215bc6(0x179)]()[_0x215bc6(0x263)]=String(RegExp['$1']));},Game_Enemy['prototype'][_0x33ee77(0x2f3)]=function(){const _0x142123=_0x33ee77,_0x5a8e05=VisuMZ[_0x142123(0x993)][_0x142123(0x12b)]['Enemy'][_0x142123(0x556)]??_0x142123(0xb0a);this[_0x142123(0x658)]={'name':_0x5a8e05[_0x142123(0x23d)](this[_0x142123(0x375)]()),'iconIndex':VisuMZ[_0x142123(0x993)]['Settings'][_0x142123(0xc1d)][_0x142123(0x97f)]??0x1a,'nameColor':VisuMZ[_0x142123(0x993)][_0x142123(0x12b)]['Enemy'][_0x142123(0xade)]??'2','description':''};},Game_Enemy[_0x33ee77(0x9a7)]['getAspectData']=function(){const _0x309000=_0x33ee77;if(this[_0x309000(0x658)]===undefined)this[_0x309000(0x1a3)]();return this[_0x309000(0x658)];},Game_Enemy['prototype'][_0x33ee77(0x7f1)]=function(){const _0x1685de=_0x33ee77;return(this[_0x1685de(0x179)]()['description']||'')[_0x1685de(0x70c)]>0x0;},Game_BattlerBase[_0x33ee77(0x9a7)][_0x33ee77(0x7d1)]=function(){const _0x535169=_0x33ee77;return VisuMZ[_0x535169(0x993)]['Settings'][_0x535169(0x133)][_0x535169(0x9b8)];},Game_Enemy['prototype'][_0x33ee77(0x7d1)]=function(){const _0x419415=_0x33ee77,_0x21fbed=this[_0x419415(0x246)]()?this[_0x419415(0x246)]()[_0x419415(0x448)]||'':'';if(_0x21fbed[_0x419415(0x7c1)](/<POPUP POSITION: HEAD>/i))return'head';else{if(_0x21fbed[_0x419415(0x7c1)](/<POPUP POSITION: CENTER>/i))return _0x419415(0x614);else{if(_0x21fbed[_0x419415(0x7c1)](/<POPUP POSITION: BASE>/i))return _0x419415(0x44a);}}return Game_BattlerBase[_0x419415(0x9a7)][_0x419415(0x7d1)][_0x419415(0x88f)](this);},Game_BattlerBase[_0x33ee77(0x9a7)][_0x33ee77(0x2b3)]=function(){return 0x0;},Game_Enemy['prototype'][_0x33ee77(0x2b3)]=function(){const _0x397ffa=_0x33ee77,_0x24ef7d=this[_0x397ffa(0x246)]()?this['enemy']()[_0x397ffa(0x448)]||'':'';if(_0x24ef7d[_0x397ffa(0x7c1)](/<POPUP OFFSET X: ([\+\-]\d+)>/i))return Number(RegExp['$1']);return Game_BattlerBase['prototype'][_0x397ffa(0x2b3)][_0x397ffa(0x88f)](this);},Game_BattlerBase[_0x33ee77(0x9a7)][_0x33ee77(0x265)]=function(){return 0x0;},Game_Enemy['prototype'][_0x33ee77(0x265)]=function(){const _0x218269=_0x33ee77,_0x2f939e=this['enemy']()?this[_0x218269(0x246)]()[_0x218269(0x448)]||'':'';if(_0x2f939e[_0x218269(0x7c1)](/<POPUP OFFSET Y: ([\+\-]\d+)>/i))return Number(RegExp['$1']);return Game_BattlerBase['prototype'][_0x218269(0x265)]['call'](this);},Game_Unit[_0x33ee77(0x9a7)][_0x33ee77(0x29a)]=function(_0x4cbbe0){for(const _0x20625d of this['members']()){if(_0x20625d)_0x20625d['processBattleCoreJS'](_0x4cbbe0);}},Game_Unit['prototype'][_0x33ee77(0x43c)]=function(){const _0x44e29c=_0x33ee77,_0x70df56=this[_0x44e29c(0x373)]();return _0x70df56[Math[_0x44e29c(0x6bb)](_0x70df56[_0x44e29c(0x70c)])];},VisuMZ[_0x33ee77(0x993)][_0x33ee77(0x344)]=Game_Party['prototype'][_0x33ee77(0x1a6)],Game_Party[_0x33ee77(0x9a7)][_0x33ee77(0x1a6)]=function(_0x3c5153){const _0x1caedf=_0x33ee77;VisuMZ[_0x1caedf(0x993)][_0x1caedf(0x344)][_0x1caedf(0x88f)](this,_0x3c5153),BattleManager[_0x1caedf(0x5eb)]();},VisuMZ[_0x33ee77(0x993)][_0x33ee77(0x64b)]=Game_Party[_0x33ee77(0x9a7)][_0x33ee77(0x301)],Game_Party['prototype']['removeActor']=function(_0x29aebd){const _0x487e9=_0x33ee77;VisuMZ[_0x487e9(0x993)]['Game_Party_removeActor'][_0x487e9(0x88f)](this,_0x29aebd),BattleManager[_0x487e9(0x5eb)]();},VisuMZ['BattleCore'][_0x33ee77(0x912)]=Game_Troop[_0x33ee77(0x9a7)][_0x33ee77(0x888)],Game_Troop[_0x33ee77(0x9a7)][_0x33ee77(0x888)]=function(_0x5d8adf){const _0x48a989=_0x33ee77;$gameTemp['clearForcedGameTroopSettingsBattleCore'](),$gameTemp['applyForcedGameTroopSettingsBattleCore'](_0x5d8adf),VisuMZ[_0x48a989(0x993)][_0x48a989(0x912)][_0x48a989(0x88f)](this,_0x5d8adf),this[_0x48a989(0x20f)]();},VisuMZ['BattleCore'][_0x33ee77(0x97d)]=Game_Troop[_0x33ee77(0x9a7)][_0x33ee77(0x88d)],Game_Troop[_0x33ee77(0x9a7)]['expTotal']=function(){const _0x328054=_0x33ee77;let _0x59c7b8=VisuMZ[_0x328054(0x993)]['Game_Troop_expTotal']['call'](this);return this['expRate']&&(_0x59c7b8*=this['expRate']()),Math[_0x328054(0x399)](_0x59c7b8);},Game_Troop['prototype'][_0x33ee77(0xc1e)]=function(){return 0x1;},Game_Troop[_0x33ee77(0x9a7)][_0x33ee77(0x20f)]=function(){const _0x1f253a=_0x33ee77,_0x2c4f56=DataManager[_0x1f253a(0xbdd)](this[_0x1f253a(0x6ac)]()['id']);if(_0x2c4f56[_0x1f253a(0x7c1)](/<(?:EXTEND|ADD):[ ](.*?)>/i)){const _0x5b522d=RegExp['$1'][_0x1f253a(0x22d)](',')['map'](_0x4417cf=>Number(_0x4417cf));this[_0x1f253a(0x4c0)](),this[_0x1f253a(0x9a5)](_0x5b522d);}},Game_Troop[_0x33ee77(0x9a7)][_0x33ee77(0x4c0)]=function(){const _0x4385a0=_0x33ee77;let _0x5bf9da='Update\x20your\x20Battle\x20System\x20-\x20%1\x20to\x20the\x20latest'+'\x0a';_0x5bf9da+='version\x20in\x20order\x20to\x20use\x20the\x20<Extend:\x20x>\x20function.',Imported[_0x4385a0(0xbf3)]&&(VisuMZ['BattleSystemBTB'][_0x4385a0(0x71e)]<1.11&&(alert(_0x5bf9da[_0x4385a0(0x23d)](_0x4385a0(0x28b))),SceneManager[_0x4385a0(0x41d)]())),Imported['VisuMZ_2_BattleSystemCTB']&&(VisuMZ[_0x4385a0(0x8bf)][_0x4385a0(0x71e)]<1.19&&(alert(_0x5bf9da[_0x4385a0(0x23d)](_0x4385a0(0x3c7))),SceneManager['exit']())),Imported[_0x4385a0(0x249)]&&(VisuMZ[_0x4385a0(0x854)][_0x4385a0(0x71e)]<1.15&&(alert(_0x5bf9da['format'](_0x4385a0(0x37b))),SceneManager[_0x4385a0(0x41d)]()));},Game_Troop[_0x33ee77(0x9a7)][_0x33ee77(0x9a5)]=function(_0x3a10f4){const _0x345083=_0x33ee77;this[_0x345083(0xa52)]={};for(const _0x1da67b of this[_0x345083(0x32f)]()){if(!_0x1da67b)continue;_0x1da67b[_0x345083(0x572)]('');}for(const _0x1394f7 of _0x3a10f4){const _0x39d937=$dataTroops[_0x1394f7];if(_0x39d937)this[_0x345083(0x52b)](_0x39d937);}this[_0x345083(0xa99)]();},Game_Troop[_0x33ee77(0x9a7)][_0x33ee77(0x52b)]=function(_0x269504){const _0x3cd9b8=_0x33ee77;for(const _0x394cdc of _0x269504[_0x3cd9b8(0x32f)]){if($dataEnemies[_0x394cdc['enemyId']]){const _0x204e20=_0x394cdc[_0x3cd9b8(0x486)],_0x5bc24a=_0x394cdc['x'],_0x13e8dc=_0x394cdc['y'],_0x19278e=new Game_Enemy(_0x204e20,_0x5bc24a,_0x13e8dc);_0x394cdc[_0x3cd9b8(0x4e2)]&&_0x19278e[_0x3cd9b8(0x9ac)](),this[_0x3cd9b8(0x72d)]['push'](_0x19278e);}}},VisuMZ[_0x33ee77(0x993)][_0x33ee77(0x387)]=Game_Map[_0x33ee77(0x9a7)]['setupBattleback'],Game_Map[_0x33ee77(0x9a7)][_0x33ee77(0x5e6)]=function(){const _0x529312=_0x33ee77;VisuMZ['BattleCore'][_0x529312(0x387)][_0x529312(0x88f)](this),this['setupBattlebackBattleCore']();},Game_Map['prototype'][_0x33ee77(0x147)]=function(){const _0x43556d=_0x33ee77;this[_0x43556d(0xa82)]={},this[_0x43556d(0x28f)]={};if(!$dataMap)return;const _0x5f2c86=$dataMap[_0x43556d(0x448)];if(!_0x5f2c86)return;const _0xcfd874=_0x5f2c86[_0x43556d(0x7c1)](/<REGION (\d+) BATTLEBACK(\d+): (.*)>/gi);if(_0xcfd874)for(const _0x5f3da1 of _0xcfd874){_0x5f3da1[_0x43556d(0x7c1)](/<REGION (\d+) BATTLEBACK(\d+): (.*)>/i);const _0x5bd4a5=Number(RegExp['$1']),_0x16212e=Number(RegExp['$2']),_0x4dc10d=_0x16212e===0x1?this['_regionBattleback1']:this[_0x43556d(0x28f)],_0x145326=String(RegExp['$3']);_0x4dc10d[_0x5bd4a5]=_0x145326;}},VisuMZ[_0x33ee77(0x993)][_0x33ee77(0xbfd)]=Game_Map['prototype'][_0x33ee77(0x712)],Game_Map[_0x33ee77(0x9a7)][_0x33ee77(0x712)]=function(){const _0x48458b=_0x33ee77;if(!BattleManager[_0x48458b(0x26a)]()){const _0x5e33f8=$gamePlayer[_0x48458b(0x46a)]($gamePlayer['x'],$gamePlayer['y']);if(this[_0x48458b(0xa82)]&&this[_0x48458b(0xa82)][_0x5e33f8])return this[_0x48458b(0xa82)][_0x5e33f8];}return VisuMZ[_0x48458b(0x993)]['Game_Map_battleback1Name'][_0x48458b(0x88f)](this);},VisuMZ['BattleCore'][_0x33ee77(0x5bf)]=Game_Map['prototype']['battleback2Name'],Game_Map[_0x33ee77(0x9a7)][_0x33ee77(0x5e7)]=function(){const _0x2c8508=_0x33ee77;if(!BattleManager[_0x2c8508(0x26a)]()){const _0x1a33c6=$gamePlayer[_0x2c8508(0x46a)]($gamePlayer['x'],$gamePlayer['y']);if(this[_0x2c8508(0xa82)]&&this[_0x2c8508(0x28f)][_0x1a33c6])return this['_regionBattleback2'][_0x1a33c6];}return VisuMZ[_0x2c8508(0x993)]['Game_Map_battleback2Name'][_0x2c8508(0x88f)](this);},VisuMZ[_0x33ee77(0x993)]['Game_Map_encounterList']=Game_Map[_0x33ee77(0x9a7)][_0x33ee77(0x95c)],Game_Map['prototype'][_0x33ee77(0x95c)]=function(){const _0x38d04b=_0x33ee77;let _0x22159c=JsonEx[_0x38d04b(0x266)](VisuMZ[_0x38d04b(0x993)][_0x38d04b(0x69c)][_0x38d04b(0x88f)](this));return VisuMZ[_0x38d04b(0x993)][_0x38d04b(0x9e8)](_0x22159c);},VisuMZ[_0x33ee77(0x993)][_0x33ee77(0x9e8)]=function(_0xfb291a){const _0x10c4d8=_0x33ee77;var _0x2c4d06,_0x4d2080,_0x1b0180;for(_0x1b0180=_0xfb291a['length']-0x1;_0x1b0180>0x0;_0x1b0180--){_0x2c4d06=Math[_0x10c4d8(0x816)](Math[_0x10c4d8(0x3b9)]()*(_0x1b0180+0x1)),_0x4d2080=_0xfb291a[_0x1b0180],_0xfb291a[_0x1b0180]=_0xfb291a[_0x2c4d06],_0xfb291a[_0x2c4d06]=_0x4d2080;}return _0xfb291a;},VisuMZ[_0x33ee77(0x993)][_0x33ee77(0x9e4)]=Game_Interpreter[_0x33ee77(0x9a7)][_0x33ee77(0x3c4)],Game_Interpreter[_0x33ee77(0x9a7)][_0x33ee77(0x3c4)]=function(_0x595770){const _0x4c5c2b=_0x33ee77;return $gameTemp[_0x4c5c2b(0x1b2)](this),VisuMZ['BattleCore'][_0x4c5c2b(0x9e4)][_0x4c5c2b(0x88f)](this,_0x595770);},VisuMZ['BattleCore'][_0x33ee77(0xa55)]=Game_Interpreter['prototype'][_0x33ee77(0xba1)],Game_Interpreter['prototype'][_0x33ee77(0xba1)]=function(){const _0x4808bf=_0x33ee77;if(SceneManager[_0x4808bf(0x5d9)]())switch(this[_0x4808bf(0xb1e)]){case _0x4808bf(0x605):if(Imported['VisuMZ_3_ActSeqCamera']){if($gameScreen[_0x4808bf(0x7d3)]()[_0x4808bf(0x3d6)]>0x0)return!![];this['_waitMode']='';}break;case'battleAnimation':if(BattleManager['_spriteset'][_0x4808bf(0x69b)]())return!![];this[_0x4808bf(0xb1e)]='';break;case'battleBalloon':if(BattleManager[_0x4808bf(0x850)]['isAnyBattleBalloonPlaying']())return!![];this[_0x4808bf(0xb1e)]='';break;case _0x4808bf(0x2cc):if(Imported[_0x4808bf(0x596)]){if($gameScreen[_0x4808bf(0x7d3)]()[_0x4808bf(0x765)]>0x0)return!![];if($gameScreen[_0x4808bf(0x7d3)]()['cameraOffsetDuration']>0x0)return!![];this[_0x4808bf(0xb1e)]='';}break;case _0x4808bf(0x223):if(BattleManager[_0x4808bf(0x850)][_0x4808bf(0x849)]())return!![];this[_0x4808bf(0xb1e)]='';break;case _0x4808bf(0x8a5):if(BattleManager[_0x4808bf(0x850)][_0x4808bf(0x300)]())return!![];this['_waitMode']='';break;case'battleJump':if(BattleManager[_0x4808bf(0x850)][_0x4808bf(0x311)]())return!![];this['_waitMode']='';break;case _0x4808bf(0xa7c):if(BattleManager[_0x4808bf(0xb43)][_0x4808bf(0xa5d)]())return!![];this['_waitMode']='';break;case _0x4808bf(0x56b):if(BattleManager['_spriteset'][_0x4808bf(0x2af)]())return!![];this['_waitMode']='';break;case _0x4808bf(0x77b):if(BattleManager[_0x4808bf(0x850)][_0x4808bf(0x899)]())return!![];this[_0x4808bf(0xb1e)]='';break;case _0x4808bf(0x564):if(BattleManager['_spriteset']['isAnyoneGrowing']())return!![];this[_0x4808bf(0xb1e)]='';break;case'battleSpriteSkew':if(BattleManager[_0x4808bf(0x850)][_0x4808bf(0x62a)]())return!![];this[_0x4808bf(0xb1e)]='';break;case _0x4808bf(0x9af):if(Imported[_0x4808bf(0x4ca)]){if(BattleManager[_0x4808bf(0x850)][_0x4808bf(0x8da)]())return!![];this[_0x4808bf(0xb1e)]='';}break;case _0x4808bf(0x4d9):if(Imported[_0x4808bf(0x596)]){if($gameScreen['battleCameraData']()[_0x4808bf(0xba2)]>0x0)return!![];this['_waitMode']='';}break;case _0x4808bf(0x2ba):if(BattleManager['_spriteset'][_0x4808bf(0x63c)]())return!![];this[_0x4808bf(0xb1e)]='';break;case'battleZoom':if(Imported[_0x4808bf(0x596)]){if($gameScreen[_0x4808bf(0x7d3)]()['zoomDuration']>0x0)return!![];this['_waitMode']='';}break;case _0x4808bf(0x625):if(Imported['VisuMZ_3_ActSeqImpact']){if(BattleManager['_spriteset']['isAnyoneInjectAniPrepping']){if(BattleManager[_0x4808bf(0x850)]['isAnyoneInjectAniPrepping']())return!![];this[_0x4808bf(0xb1e)]=_0x4808bf(0x1e6);}else this[_0x4808bf(0xb1e)]='';break;}break;case _0x4808bf(0x1e6):if(Imported[_0x4808bf(0x15a)]){if(BattleManager[_0x4808bf(0x850)][_0x4808bf(0x475)]())return!![];this[_0x4808bf(0xb1e)]='';}break;}return VisuMZ[_0x4808bf(0x993)]['Game_Interpreter_updateWaitMode']['call'](this);},VisuMZ[_0x33ee77(0x993)][_0x33ee77(0x71d)]=Game_Interpreter[_0x33ee77(0x9a7)][_0x33ee77(0x304)],Game_Interpreter[_0x33ee77(0x9a7)][_0x33ee77(0x304)]=function(_0x5bddeb){const _0x219172=_0x33ee77;return!$gameParty[_0x219172(0x275)]()?this['command301_PreBattleEvent'](_0x5bddeb):VisuMZ[_0x219172(0x993)][_0x219172(0x71d)][_0x219172(0x88f)](this,_0x5bddeb);},Game_Interpreter[_0x33ee77(0x9a7)][_0x33ee77(0x6de)]=function(_0x3a2889){const _0x24955c=_0x33ee77;return VisuMZ['BattleCore'][_0x24955c(0x71d)][_0x24955c(0x88f)](this,_0x3a2889),BattleManager['setEventCallback'](_0x563879=>{const _0x10bb9c=_0x24955c;this[_0x10bb9c(0x930)][this[_0x10bb9c(0x3cd)]]=_0x563879;}),!![];},VisuMZ[_0x33ee77(0x993)]['CheckMapBattleEventValid']=function(_0x512e37){const _0x1d1df9=_0x33ee77,_0x5ecbdf=$dataCommonEvents[_0x512e37];if(!_0x5ecbdf)return![];if(_0x5ecbdf[_0x1d1df9(0x6a3)][_0x1d1df9(0x70c)]<=0x1)return![];return!![];},Game_Interpreter[_0x33ee77(0x9a7)]['command301_PreBattleEvent']=function(_0x57505d){const _0x1fbace=_0x33ee77,_0x23ed96=VisuMZ[_0x1fbace(0x993)][_0x1fbace(0x12b)][_0x1fbace(0x803)],_0x4f491b=_0x23ed96[_0x1fbace(0x825)],_0x28158d=$dataCommonEvents[_0x4f491b];if(_0x28158d&&VisuMZ[_0x1fbace(0x993)][_0x1fbace(0x6e9)](_0x4f491b)){const _0x3c4794=this['isOnCurrentMap']()?this[_0x1fbace(0xa29)]:0x0,_0x30ae4d=_0x28158d[_0x1fbace(0x6a3)];this['setupChild'](_0x30ae4d,_0x3c4794),this['_list']=JsonEx[_0x1fbace(0x266)](this[_0x1fbace(0x476)]);const _0x5155aa={'code':0xbc3,'indent':this[_0x1fbace(0x3cd)],'parameters':JsonEx[_0x1fbace(0x266)](_0x57505d)};return this[_0x1fbace(0x476)][_0x1fbace(0x47c)](this[_0x1fbace(0x383)]+0x1,0x0,_0x5155aa),!![];}else return VisuMZ[_0x1fbace(0x993)][_0x1fbace(0x71d)][_0x1fbace(0x88f)](this,_0x57505d);},VisuMZ['BattleCore'][_0x33ee77(0x870)]=BattleManager['onEncounter'],BattleManager[_0x33ee77(0x951)]=function(){const _0x43a6bd=_0x33ee77;VisuMZ[_0x43a6bd(0x993)][_0x43a6bd(0x870)][_0x43a6bd(0x88f)](this),this[_0x43a6bd(0x232)]();},BattleManager[_0x33ee77(0x232)]=function(){const _0xd60c3b=_0x33ee77,_0x5ddadd=VisuMZ['BattleCore'][_0xd60c3b(0x12b)][_0xd60c3b(0x803)],_0x1bd2a9=_0x5ddadd['BattleStartEvent'];_0x1bd2a9&&VisuMZ[_0xd60c3b(0x993)]['CheckMapBattleEventValid'](_0x1bd2a9)&&(this['_battleCoreBattleStartEvent']=!![],$gameTemp['reserveCommonEvent'](_0x5ddadd[_0xd60c3b(0x825)]),$gameMap[_0xd60c3b(0x4d3)](),$gameMap[_0xd60c3b(0x5e5)][_0xd60c3b(0x8c3)]=!![]),_0x5ddadd[_0xd60c3b(0x395)]>0x0&&(this[_0xd60c3b(0xc16)]=!![]);},VisuMZ[_0x33ee77(0x993)][_0x33ee77(0x244)]=Scene_Map[_0x33ee77(0x9a7)]['updateCallMenu'],Scene_Map[_0x33ee77(0x9a7)][_0x33ee77(0xae6)]=function(){const _0x10f157=_0x33ee77;if(BattleManager[_0x10f157(0x25f)])return;VisuMZ[_0x10f157(0x993)]['Scene_Map_updateCallMenu']['call'](this);},VisuMZ[_0x33ee77(0x993)]['Scene_Map_launchBattle']=Scene_Map[_0x33ee77(0x9a7)][_0x33ee77(0xaec)],Scene_Map[_0x33ee77(0x9a7)][_0x33ee77(0xaec)]=function(){const _0x1e8bbf=_0x33ee77;BattleManager[_0x1e8bbf(0x25f)]?this[_0x1e8bbf(0xb57)]():VisuMZ[_0x1e8bbf(0x993)][_0x1e8bbf(0x467)]['call'](this);},Scene_Map[_0x33ee77(0x9a7)][_0x33ee77(0xb57)]=function(){const _0x35e958=_0x33ee77;this[_0x35e958(0x161)]=!![];},VisuMZ[_0x33ee77(0x993)][_0x33ee77(0x581)]=SceneManager[_0x33ee77(0x590)],SceneManager[_0x33ee77(0x590)]=function(){const _0x172298=_0x33ee77;if(BattleManager['_battleCoreBattleStartEvent'])return![];return VisuMZ['BattleCore'][_0x172298(0x581)]['call'](this);},VisuMZ[_0x33ee77(0x993)][_0x33ee77(0xa67)]=Game_Interpreter[_0x33ee77(0x9a7)][_0x33ee77(0x2f8)],Game_Interpreter[_0x33ee77(0x9a7)][_0x33ee77(0x2f8)]=function(){const _0x1eaa00=_0x33ee77;VisuMZ[_0x1eaa00(0x993)][_0x1eaa00(0xa67)][_0x1eaa00(0x88f)](this),this[_0x1eaa00(0x8c3)]&&(this[_0x1eaa00(0x8c3)]=undefined,SceneManager['_scene']['battleCoreResumeLaunchBattle']());},Scene_Map[_0x33ee77(0x9a7)][_0x33ee77(0x7b7)]=function(){const _0x10e3f4=_0x33ee77;BattleManager[_0x10e3f4(0x25f)]=undefined,BattleManager[_0x10e3f4(0x86b)]=!![],this[_0x10e3f4(0x50d)]();},VisuMZ[_0x33ee77(0x993)][_0x33ee77(0x87f)]=Scene_Map[_0x33ee77(0x9a7)][_0x33ee77(0x54f)],Scene_Map[_0x33ee77(0x9a7)][_0x33ee77(0x54f)]=function(){const _0x528fe0=_0x33ee77;VisuMZ['BattleCore'][_0x528fe0(0x87f)][_0x528fe0(0x88f)](this),BattleManager[_0x528fe0(0x86b)]&&(this['_active']=!![],BattleManager['_battleCoreBattleResumeAfter']=undefined);},VisuMZ[_0x33ee77(0x993)][_0x33ee77(0x3e0)]=Scene_Map[_0x33ee77(0x9a7)]['initialize'],Scene_Map['prototype'][_0x33ee77(0x54f)]=function(){const _0x266bb7=_0x33ee77;VisuMZ[_0x266bb7(0x993)]['Scene_Map_initialize'][_0x266bb7(0x88f)](this),$gameTemp[_0x266bb7(0x26e)]();},VisuMZ[_0x33ee77(0x993)][_0x33ee77(0x4a0)]=Scene_ItemBase[_0x33ee77(0x9a7)][_0x33ee77(0x5f5)],Scene_ItemBase[_0x33ee77(0x9a7)][_0x33ee77(0x5f5)]=function(){const _0x359075=_0x33ee77;VisuMZ[_0x359075(0x993)][_0x359075(0x4a0)][_0x359075(0x88f)](this);if(this[_0x359075(0x5b0)]()[_0x359075(0x448)]['match'](/<BYPASS AUTO ACTION SEQUENCE>/i))return;this['item']()[_0x359075(0x448)][_0x359075(0x7c1)](/<CUSTOM ACTION SEQUENCE>/i)&&($gameTemp[_0x359075(0x33c)]=[]),DataManager[_0x359075(0x591)](this[_0x359075(0x5b0)]())&&($gameTemp[_0x359075(0x33c)]=[]);},VisuMZ['BattleCore'][_0x33ee77(0x873)]=Scene_Options[_0x33ee77(0x9a7)][_0x33ee77(0x472)],Scene_Options['prototype'][_0x33ee77(0x472)]=function(){const _0x3b50ad=_0x33ee77;let _0x21dde7=VisuMZ[_0x3b50ad(0x993)][_0x3b50ad(0x873)][_0x3b50ad(0x88f)](this);const _0x1e38b2=VisuMZ[_0x3b50ad(0x993)][_0x3b50ad(0x12b)];if(_0x1e38b2['AutoBattle']['AddOption']&&_0x1e38b2['AutoBattle'][_0x3b50ad(0x8a0)])_0x21dde7+=0x2;if(_0x1e38b2[_0x3b50ad(0x5d6)]['AddOption']&&_0x1e38b2[_0x3b50ad(0x5d6)][_0x3b50ad(0x8a0)])_0x21dde7+=0x1;return _0x21dde7;},VisuMZ[_0x33ee77(0x993)]['Scene_Battle_initialize']=Scene_Battle[_0x33ee77(0x9a7)][_0x33ee77(0x54f)],Scene_Battle['prototype'][_0x33ee77(0x54f)]=function(){const _0xff7155=_0x33ee77;VisuMZ['BattleCore'][_0xff7155(0x433)]['call'](this),this[_0xff7155(0x5c0)]();},VisuMZ[_0x33ee77(0x993)][_0x33ee77(0x689)]=Scene_Battle[_0x33ee77(0x9a7)][_0x33ee77(0x347)],Scene_Battle[_0x33ee77(0x9a7)]['start']=function(){const _0x570587=_0x33ee77;SceneManager['isPreviousSceneBattleTransitionable']()?(Scene_Message['prototype'][_0x570587(0x347)][_0x570587(0x88f)](this),this['_spriteset']&&this[_0x570587(0x850)][_0x570587(0x1b4)](),BattleManager[_0x570587(0x5f3)]&&BattleManager[_0x570587(0x613)]()):(VisuMZ[_0x570587(0x993)][_0x570587(0x689)][_0x570587(0x88f)](this),$gameTroop['onBattleStartOnceParallels']());},VisuMZ[_0x33ee77(0x993)]['Scene_Battle_stop']=Scene_Battle['prototype'][_0x33ee77(0x50d)],Scene_Battle['prototype'][_0x33ee77(0x50d)]=function(){const _0x1e50f4=_0x33ee77;SceneManager['isNextSceneBattleTransitionable']()?Scene_Message[_0x1e50f4(0x9a7)][_0x1e50f4(0x50d)][_0x1e50f4(0x88f)](this):VisuMZ[_0x1e50f4(0x993)]['Scene_Battle_stop'][_0x1e50f4(0x88f)](this);},VisuMZ['BattleCore'][_0x33ee77(0x3e6)]=Scene_Battle['prototype'][_0x33ee77(0x2f8)],Scene_Battle[_0x33ee77(0x9a7)][_0x33ee77(0x2f8)]=function(){const _0x1377d7=_0x33ee77;SceneManager[_0x1377d7(0x9d1)]()?Scene_Message['prototype']['terminate'][_0x1377d7(0x88f)](this):VisuMZ[_0x1377d7(0x993)][_0x1377d7(0x3e6)][_0x1377d7(0x88f)](this),$gameTemp['clearBattleBalloons'](),this[_0x1377d7(0x5c0)]();},Scene_Battle[_0x33ee77(0x9a7)][_0x33ee77(0xc26)]=function(){const _0x48e220=_0x33ee77;if(ConfigManager['uiMenuStyle']&&ConfigManager['uiInputPosition']!==undefined)return ConfigManager[_0x48e220(0x39d)];else{if(this[_0x48e220(0x7a9)]()===_0x48e220(0x2ea))return![];else{return Scene_Message[_0x48e220(0x9a7)][_0x48e220(0xc26)][_0x48e220(0x88f)](this);;}}},VisuMZ[_0x33ee77(0x993)][_0x33ee77(0x720)]=Scene_Battle[_0x33ee77(0x9a7)][_0x33ee77(0x22c)],Scene_Battle[_0x33ee77(0x9a7)][_0x33ee77(0x22c)]=function(){const _0x5b75ca=_0x33ee77;VisuMZ[_0x5b75ca(0x993)][_0x5b75ca(0x720)][_0x5b75ca(0x88f)](this),this['battleLayoutStyle']()===_0x5b75ca(0x2ea)&&this[_0x5b75ca(0x367)]();},Scene_Battle[_0x33ee77(0x9a7)][_0x33ee77(0x41b)]=function(_0xda3a4d){const _0x2f0c75=_0x33ee77;_0xda3a4d?(this['_windowLayer']['x']=(Graphics[_0x2f0c75(0x3d9)]-Graphics[_0x2f0c75(0x71a)])/0x2,this[_0x2f0c75(0xbfb)]['y']=(Graphics[_0x2f0c75(0x578)]-Graphics[_0x2f0c75(0x238)])/0x2):(this[_0x2f0c75(0xbfb)]['x']=Graphics[_0x2f0c75(0x3d9)]*0xa,this[_0x2f0c75(0xbfb)]['y']=Graphics[_0x2f0c75(0x578)]*0xa);},VisuMZ['BattleCore'][_0x33ee77(0x1ad)]=Scene_Battle[_0x33ee77(0x9a7)]['selectNextCommand'],Scene_Battle[_0x33ee77(0x9a7)][_0x33ee77(0x4dc)]=function(){const _0x29576f=_0x33ee77,_0x4913cd=BattleManager[_0x29576f(0x2b0)]();VisuMZ[_0x29576f(0x993)]['Scene_Battle_selectNextCommand'][_0x29576f(0x88f)](this);if(_0x4913cd){if(_0x4913cd===BattleManager[_0x29576f(0x2b0)]())return;if(_0x4913cd===BattleManager[_0x29576f(0x7c0)])return;if(_0x4913cd['battler']())_0x4913cd[_0x29576f(0x157)]()['stepBack']();}},VisuMZ[_0x33ee77(0x993)][_0x33ee77(0xbf8)]=Scene_Battle[_0x33ee77(0x9a7)][_0x33ee77(0xbb7)],Scene_Battle['prototype']['selectPreviousCommand']=function(){const _0xa52a3a=_0x33ee77,_0x4ed657=BattleManager[_0xa52a3a(0x2b0)]();if(_0x4ed657&&_0x4ed657[_0xa52a3a(0x157)])_0x4ed657['battler']()['stepBack']();VisuMZ[_0xa52a3a(0x993)][_0xa52a3a(0xbf8)]['call'](this);},VisuMZ['BattleCore'][_0x33ee77(0x969)]=Scene_Battle[_0x33ee77(0x9a7)]['createAllWindows'],Scene_Battle['prototype'][_0x33ee77(0x8ab)]=function(){const _0x5d8d40=_0x33ee77;this[_0x5d8d40(0xbc6)](),VisuMZ['BattleCore'][_0x5d8d40(0x969)]['call'](this),this[_0x5d8d40(0x1a0)]();},VisuMZ[_0x33ee77(0x993)]['Scene_Battle_logWindowRect']=Scene_Battle['prototype'][_0x33ee77(0x336)],Scene_Battle[_0x33ee77(0x9a7)][_0x33ee77(0x336)]=function(){const _0x48afeb=_0x33ee77;if(VisuMZ[_0x48afeb(0x993)]['Settings'][_0x48afeb(0x589)][_0x48afeb(0xb92)])return VisuMZ[_0x48afeb(0x993)][_0x48afeb(0x12b)][_0x48afeb(0x589)][_0x48afeb(0xb92)][_0x48afeb(0x88f)](this);return VisuMZ['BattleCore']['Scene_Battle_logWindowRect']['call'](this);},VisuMZ[_0x33ee77(0x993)]['Scene_Battle_createPartyCommandWindow']=Scene_Battle[_0x33ee77(0x9a7)][_0x33ee77(0x3c3)],Scene_Battle[_0x33ee77(0x9a7)][_0x33ee77(0x3c3)]=function(){const _0x5733d0=_0x33ee77;VisuMZ[_0x5733d0(0x993)][_0x5733d0(0x4d6)][_0x5733d0(0x88f)](this),this['createPartyCommandWindowBattleCore']();},Scene_Battle[_0x33ee77(0x9a7)]['createPartyCommandWindowBattleCore']=function(){const _0x31434c=_0x33ee77,_0x1014cc=this[_0x31434c(0x184)];_0x1014cc[_0x31434c(0xa11)](_0x31434c(0x886),this[_0x31434c(0x7a7)][_0x31434c(0x925)](this)),_0x1014cc[_0x31434c(0xa11)](_0x31434c(0x6be),this['commandOptions']['bind'](this));const _0x5d746a=this[_0x31434c(0x7a9)]();switch(_0x5d746a){case'xp':case _0x31434c(0x9f2):return this['_partyCommandWindow'][_0x31434c(0x17b)](0x1);break;}},Scene_Battle[_0x33ee77(0x9a7)][_0x33ee77(0x7a7)]=function(){const _0x48ec06=_0x33ee77;BattleManager['_autoBattle']=!![],$gameParty['makeActions'](),this['selectNextCommand'](),BattleManager[_0x48ec06(0x17e)]()&&(BattleManager[_0x48ec06(0x50b)]=![]);},Scene_Battle[_0x33ee77(0x9a7)][_0x33ee77(0x269)]=function(){const _0x356bee=_0x33ee77;this[_0x356bee(0x52e)]()?(this[_0x356bee(0x9f6)]=!![],this['_logWindow'][_0x356bee(0x7ab)](_0x356bee(0x25a),VisuMZ[_0x356bee(0x993)]['Settings'][_0x356bee(0xbe6)]['ActiveTpbOptionsMessage'])):this[_0x356bee(0x856)]();},Scene_Battle[_0x33ee77(0x9a7)]['isQueueOptionsMenu']=function(){const _0x5ca5c6=_0x33ee77;return BattleManager[_0x5ca5c6(0x6f3)]();},Scene_Battle[_0x33ee77(0x9a7)][_0x33ee77(0x856)]=function(){const _0x163abb=_0x33ee77;this[_0x163abb(0x9f6)]=![],this[_0x163abb(0x850)]['update'](),this[_0x163abb(0xbfb)][_0x163abb(0xb1c)]=![];if(BattleManager[_0x163abb(0x26a)]())($dataSystem['battleback1Name']||$dataSystem[_0x163abb(0x5e7)])&&SceneManager[_0x163abb(0x93b)]();else($gameMap[_0x163abb(0x712)]()||$gameMap[_0x163abb(0x5e7)]())&&SceneManager[_0x163abb(0x93b)]();SceneManager[_0x163abb(0x7ab)](Scene_Options),BattleManager['isTpb']()&&(BattleManager[_0x163abb(0x5f3)]=BattleManager[_0x163abb(0x2b0)]());},VisuMZ[_0x33ee77(0x993)][_0x33ee77(0x3c0)]=Scene_Battle[_0x33ee77(0x9a7)][_0x33ee77(0x524)],Scene_Battle['prototype'][_0x33ee77(0x524)]=function(){const _0x5c0a20=_0x33ee77;VisuMZ[_0x5c0a20(0x993)][_0x5c0a20(0x3c0)][_0x5c0a20(0x88f)](this);if(this[_0x5c0a20(0x9f6)]&&!BattleManager[_0x5c0a20(0x7c0)])this[_0x5c0a20(0x856)]();},VisuMZ[_0x33ee77(0x993)][_0x33ee77(0xb65)]=Scene_Battle[_0x33ee77(0x9a7)][_0x33ee77(0x1b4)],Scene_Battle[_0x33ee77(0x9a7)]['update']=function(){const _0x248279=_0x33ee77;VisuMZ[_0x248279(0x993)][_0x248279(0xb65)][_0x248279(0x88f)](this),this[_0x248279(0x635)]();},Scene_Battle[_0x33ee77(0x9a7)]['createAutoBattleWindow']=function(){const _0x1c18c9=_0x33ee77,_0x30d408=this[_0x1c18c9(0x343)]();this[_0x1c18c9(0x5ad)]=new Window_AutoBattleCancel(_0x30d408),this[_0x1c18c9(0x5ad)][_0x1c18c9(0x9ac)](),this['addChild'](this[_0x1c18c9(0x5ad)]);},Scene_Battle['prototype'][_0x33ee77(0x343)]=function(){const _0x58745b=_0x33ee77;return VisuMZ[_0x58745b(0x993)][_0x58745b(0x12b)]['AutoBattle']['AutoBattleRect'][_0x58745b(0x88f)](this);},Scene_Battle['prototype'][_0x33ee77(0x5c0)]=function(){const _0x48f224=_0x33ee77;this[_0x48f224(0x3fc)]=[];},Scene_Battle[_0x33ee77(0x9a7)][_0x33ee77(0x635)]=function(){const _0xb611d6=_0x33ee77;if(!this[_0xb611d6(0x3fc)])return;for(const _0x329844 of this[_0xb611d6(0x3fc)]){_0x329844&&_0x329844['update']();}},Scene_Battle[_0x33ee77(0x9a7)][_0x33ee77(0xb85)]=function(_0xbe8b65){const _0x28a881=_0x33ee77,_0x33efc1=$dataCommonEvents[_0xbe8b65];if(!_0x33efc1)return;const _0x511b3d=new Game_BattleOnceParallelInterpreter();this[_0x28a881(0xbf6)](_0x511b3d),_0x511b3d[_0x28a881(0xbf7)](_0xbe8b65);},Scene_Battle[_0x33ee77(0x9a7)][_0x33ee77(0xbf6)]=function(_0x39655c){const _0x32a552=_0x33ee77;this[_0x32a552(0x3fc)]=this[_0x32a552(0x3fc)]||[],this[_0x32a552(0x3fc)][_0x32a552(0x7ab)](_0x39655c);},Scene_Battle['prototype'][_0x33ee77(0x615)]=function(_0x289fa6){const _0x1eb43e=_0x33ee77;this[_0x1eb43e(0x3fc)]=this[_0x1eb43e(0x3fc)]||[],this['_onceParallelInterpreters'][_0x1eb43e(0x259)](_0x289fa6);},Game_Troop[_0x33ee77(0x9a7)][_0x33ee77(0xabe)]=function(){const _0xa174d7=_0x33ee77;for(const _0x599476 of this[_0xa174d7(0x6ac)]()[_0xa174d7(0xa41)]){if(!this[_0xa174d7(0x782)](_0x599476))continue;SceneManager['_scene'][_0xa174d7(0x820)](_0x599476);}},Game_Troop[_0x33ee77(0x9a7)][_0x33ee77(0x782)]=function(_0x2f22cf){const _0x46ccbb=_0x33ee77;if(!_0x2f22cf)return;for(const _0x2f670b of _0x2f22cf[_0x46ccbb(0x6a3)]){if([0x6c,0x198][_0x46ccbb(0x741)](_0x2f670b['code'])){const _0x2535ac=_0x2f670b['parameters'][0x0];if(_0x2535ac[_0x46ccbb(0x7c1)](/<ONCE PARALLEL WHEN START BATTLE>/i))return!![];}}return![];},Scene_Battle['prototype'][_0x33ee77(0x820)]=function(_0x257f48){const _0x49bfa5=_0x33ee77;if(!_0x257f48)return;const _0x2f93db=new Game_BattleOnceParallelInterpreter();this[_0x49bfa5(0xbf6)](_0x2f93db),_0x2f93db[_0x49bfa5(0x785)](_0x257f48);};function Game_BattleOnceParallelInterpreter(){const _0x529433=_0x33ee77;this[_0x529433(0x54f)](...arguments);}Game_BattleOnceParallelInterpreter[_0x33ee77(0x9a7)]=Object[_0x33ee77(0xa58)](Game_Interpreter['prototype']),Game_BattleOnceParallelInterpreter['prototype'][_0x33ee77(0xa94)]=Game_BattleOnceParallelInterpreter,Game_BattleOnceParallelInterpreter['prototype'][_0x33ee77(0xbf7)]=function(_0x4ef2a7){const _0x5e6f4f=_0x33ee77,_0x2500bf=$dataCommonEvents[_0x4ef2a7];_0x2500bf?this[_0x5e6f4f(0x888)](_0x2500bf[_0x5e6f4f(0x6a3)],0x0):this['terminate']();},Game_BattleOnceParallelInterpreter[_0x33ee77(0x9a7)][_0x33ee77(0x2f8)]=function(){const _0x3e6c50=_0x33ee77;if(!SceneManager[_0x3e6c50(0x5d9)]())return;SceneManager['_scene'][_0x3e6c50(0x615)](this),Game_Interpreter[_0x3e6c50(0x9a7)][_0x3e6c50(0x2f8)]['call'](this);},Game_BattleOnceParallelInterpreter[_0x33ee77(0x9a7)][_0x33ee77(0x785)]=function(_0x47c038){const _0x16798d=_0x33ee77;_0x47c038?this[_0x16798d(0x888)](_0x47c038[_0x16798d(0x6a3)],0x0):this[_0x16798d(0x2f8)]();},Scene_Battle[_0x33ee77(0x9a7)][_0x33ee77(0x815)]=function(){const _0xc91da3=_0x33ee77;return VisuMZ['BattleCore'][_0xc91da3(0x12b)][_0xc91da3(0xbe6)]['DisablePartyCmd'];},VisuMZ[_0x33ee77(0x993)][_0x33ee77(0x7f5)]=Scene_Battle[_0x33ee77(0x9a7)][_0x33ee77(0x3ef)],Scene_Battle['prototype'][_0x33ee77(0x3ef)]=function(){const _0x5d6a56=_0x33ee77;this[_0x5d6a56(0x815)]()?this[_0x5d6a56(0x150)]():VisuMZ[_0x5d6a56(0x993)]['Scene_Battle_startPartyCommandSelection'][_0x5d6a56(0x88f)](this);},Scene_Battle['prototype']['onDisabledPartyCommandSelection']=function(){const _0x260f4f=_0x33ee77;if(BattleManager['isDTB']())this[_0x260f4f(0x4dc)]();else BattleManager[_0x260f4f(0x17e)]()&&VisuMZ[_0x260f4f(0x993)][_0x260f4f(0x7f5)]['call'](this);},VisuMZ[_0x33ee77(0x993)][_0x33ee77(0xc22)]=Scene_Battle[_0x33ee77(0x9a7)][_0x33ee77(0x9b7)],Scene_Battle[_0x33ee77(0x9a7)]['commandFight']=function(){const _0x57007b=_0x33ee77;BattleManager[_0x57007b(0x17e)]()?(this[_0x57007b(0x4d2)](),this[_0x57007b(0x65a)]()):VisuMZ['BattleCore'][_0x57007b(0xc22)]['call'](this);},Scene_Battle['prototype'][_0x33ee77(0x4d2)]=function(){const _0x523c39=_0x33ee77;if(!VisuMZ[_0x523c39(0x993)][_0x523c39(0x515)])return;if(Imported[_0x523c39(0x357)]&&BattleManager['isCTB']())return;const _0x4f9044=$gameParty[_0x523c39(0x373)]()['filter'](_0x368c46=>_0x368c46['isTpbCharged']()&&_0x368c46[_0x523c39(0x6ca)]());BattleManager[_0x523c39(0x7ee)]=_0x4f9044[0x0]||null,BattleManager[_0x523c39(0x7ee)]&&BattleManager[_0x523c39(0x7ee)]['setActionState'](_0x523c39(0x132));},VisuMZ[_0x33ee77(0x993)][_0x33ee77(0x577)]=Scene_Battle[_0x33ee77(0x9a7)][_0x33ee77(0x3a2)],Scene_Battle[_0x33ee77(0x9a7)][_0x33ee77(0x3a2)]=function(){const _0x37a368=_0x33ee77;VisuMZ[_0x37a368(0x993)]['Scene_Battle_commandEscape'][_0x37a368(0x88f)](this);if(!BattleManager[_0x37a368(0x17e)]())BattleManager[_0x37a368(0x7ee)]=null;},VisuMZ['BattleCore']['Scene_Battle_createActorCommandWindow']=Scene_Battle[_0x33ee77(0x9a7)][_0x33ee77(0x4de)],Scene_Battle['prototype']['createActorCommandWindow']=function(){const _0x1eb570=_0x33ee77;VisuMZ['BattleCore'][_0x1eb570(0x7b0)][_0x1eb570(0x88f)](this),this[_0x1eb570(0x64e)]();},Scene_Battle[_0x33ee77(0x9a7)][_0x33ee77(0x64e)]=function(){const _0x152477=_0x33ee77,_0x26354f=this[_0x152477(0x85f)];_0x26354f[_0x152477(0xa11)]('escape',this[_0x152477(0x6ec)]['bind'](this)),_0x26354f[_0x152477(0xa11)](_0x152477(0x886),this[_0x152477(0x2da)][_0x152477(0x925)](this)),_0x26354f[_0x152477(0xa11)](_0x152477(0x663),this[_0x152477(0x6b4)]['bind'](this)),BattleManager[_0x152477(0x17e)]()&&(this['isPartyCommandWindowDisabled']()?delete _0x26354f[_0x152477(0xb7f)][_0x152477(0x4f9)]:_0x26354f[_0x152477(0xa11)](_0x152477(0x4f9),this[_0x152477(0x543)]['bind'](this)));},Scene_Battle[_0x33ee77(0x9a7)][_0x33ee77(0x6ec)]=function(){this['commandEscape']();},Scene_Battle[_0x33ee77(0x9a7)][_0x33ee77(0x2da)]=function(){const _0x500f76=_0x33ee77;BattleManager[_0x500f76(0x2b0)]()[_0x500f76(0x4f5)](),BattleManager[_0x500f76(0x678)](),BattleManager['selectNextActor'](),this[_0x500f76(0x425)]();},Scene_Battle[_0x33ee77(0x9a7)][_0x33ee77(0x6b4)]=function(){const _0x1648e5=_0x33ee77,_0x310a5f=BattleManager['inputtingAction'](),_0x413380=this[_0x1648e5(0x85f)][_0x1648e5(0x9ec)]();_0x310a5f['setSkill'](_0x413380),BattleManager['actor']()['setLastBattleSkill']($dataSkills[_0x413380]),this['onSelectAction']();},Scene_Battle[_0x33ee77(0x9a7)][_0x33ee77(0x543)]=function(){const _0x32aceb=_0x33ee77;this[_0x32aceb(0x65f)]()?this[_0x32aceb(0x54c)]():this[_0x32aceb(0x8fd)]();},VisuMZ[_0x33ee77(0x993)][_0x33ee77(0x515)]=![],Scene_Battle[_0x33ee77(0x9a7)][_0x33ee77(0x65f)]=function(){const _0x510318=_0x33ee77;if(Imported[_0x510318(0x357)]&&BattleManager[_0x510318(0x2dd)]())return![];else{if(!VisuMZ['BattleCore'][_0x510318(0x515)])return![];const _0x2e06f7=$gameParty['aliveMembers']()[_0x510318(0x313)](_0x3b88eb=>_0x3b88eb[_0x510318(0x939)]()&&_0x3b88eb[_0x510318(0x6ca)]());return _0x2e06f7[_0x510318(0x70c)]>0x0&&BattleManager[_0x510318(0x2b0)]()!==_0x2e06f7[_0x2e06f7['length']-0x1];}},Scene_Battle['prototype'][_0x33ee77(0x54c)]=function(){const _0x610894=_0x33ee77,_0x10cf34=BattleManager['actor'](),_0x1a801b=_0x10cf34['battler']();if(_0x1a801b)_0x1a801b[_0x610894(0x70a)]();const _0x79e06e=$gameParty[_0x610894(0x373)]()[_0x610894(0x313)](_0x1066fa=>_0x1066fa[_0x610894(0x939)]()&&_0x1066fa[_0x610894(0x6ca)]()),_0x5200ce=_0x79e06e[_0x610894(0xba4)](_0x10cf34),_0x24c06b=_0x79e06e[_0x5200ce+0x1];BattleManager[_0x610894(0x7ee)]=_0x24c06b||null;if(_0x24c06b)_0x24c06b[_0x610894(0x34a)]('inputting');_0x10cf34['setActionState']('undecided'),this[_0x610894(0x425)]();},Scene_Battle[_0x33ee77(0x9a7)][_0x33ee77(0x8fd)]=function(){const _0x5991fe=_0x33ee77;this[_0x5991fe(0x184)][_0x5991fe(0x888)](),this[_0x5991fe(0x85f)]['close']();if(!VisuMZ[_0x5991fe(0x993)]['TpbActiveChangeEnabled'])return;if(Imported[_0x5991fe(0x357)]&&BattleManager[_0x5991fe(0x2dd)]())return;if(BattleManager['_currentActor']){BattleManager[_0x5991fe(0x7ee)][_0x5991fe(0x34a)]('undecided');const _0x4e1292=BattleManager[_0x5991fe(0x7ee)][_0x5991fe(0x157)]();if(_0x4e1292)_0x4e1292['stepBack']();}BattleManager['_currentActor']=null;},VisuMZ['BattleCore']['Scene_Battle_createHelpWindow']=Scene_Battle[_0x33ee77(0x9a7)]['createHelpWindow'],Scene_Battle[_0x33ee77(0x9a7)][_0x33ee77(0x5f4)]=function(){const _0x509399=_0x33ee77;VisuMZ[_0x509399(0x993)][_0x509399(0x8fa)]['call'](this),this['createHelpWindowBattleCore']();},Scene_Battle[_0x33ee77(0x9a7)]['createHelpWindowBattleCore']=function(){const _0x1b2af4=_0x33ee77;this[_0x1b2af4(0x85f)][_0x1b2af4(0x15d)](this[_0x1b2af4(0xb58)]),this['_partyCommandWindow']['setHelpWindow'](this[_0x1b2af4(0xb58)]);},Scene_Battle['prototype'][_0x33ee77(0xbc6)]=function(){const _0xc31813=_0x33ee77;if(!VisuMZ[_0xc31813(0x993)][_0xc31813(0x12b)][_0xc31813(0xc1d)][_0xc31813(0x48b)])return;this[_0xc31813(0x94b)]=new Sprite(),this[_0xc31813(0x94b)]['x']=this[_0xc31813(0xbfb)]['x'],this[_0xc31813(0x94b)]['y']=this[_0xc31813(0xbfb)]['y'];const _0x597d2d=this[_0xc31813(0x724)][_0xc31813(0xba4)](this['_windowLayer']);this[_0xc31813(0x811)](this[_0xc31813(0x94b)],_0x597d2d);for(let _0xf97de5=0x0;_0xf97de5<0x8;_0xf97de5++){const _0x7fdfcb=new Window_EnemyName(_0xf97de5);this[_0xc31813(0x94b)]['addChild'](_0x7fdfcb);}},VisuMZ[_0x33ee77(0x993)][_0x33ee77(0x33e)]=Scene_Battle[_0x33ee77(0x9a7)][_0x33ee77(0x53f)],Scene_Battle[_0x33ee77(0x9a7)][_0x33ee77(0x53f)]=function(){const _0x497e1c=_0x33ee77;VisuMZ['BattleCore'][_0x497e1c(0x33e)]['call'](this),this['createMultiTargetWindows']();},Scene_Battle[_0x33ee77(0x9a7)][_0x33ee77(0x89b)]=function(){const _0x18f259=_0x33ee77;this[_0x18f259(0x192)](!![]),this[_0x18f259(0x192)](![]);},Scene_Battle['prototype'][_0x33ee77(0x733)]=function(_0x58e7e8){const _0x52ee76=_0x33ee77,_0x2495f5=Window_BattleMultiTarget['WIDTH'],_0x4d0a0b=this['calcWindowHeight'](0x1,!![]);let _0x11c6da=_0x58e7e8?Graphics[_0x52ee76(0x71a)]-_0x2495f5:0x0;_0x11c6da+=_0x58e7e8?Window_BattleMultiTarget[_0x52ee76(0x2ad)]:Window_BattleMultiTarget[_0x52ee76(0xa2a)];const _0x3870c9=[_0x52ee76(0x178)][_0x52ee76(0x741)](this[_0x52ee76(0x7a9)]())?0x0:this[_0x52ee76(0x189)][_0x52ee76(0x578)];let _0x2cffa0=Graphics[_0x52ee76(0x238)]-_0x3870c9-_0x4d0a0b;return _0x2cffa0+=_0x58e7e8?Window_BattleMultiTarget[_0x52ee76(0x8de)]:Window_BattleMultiTarget['ENEMY_OFFSET_Y'],new Rectangle(_0x11c6da,_0x2cffa0,_0x2495f5,_0x4d0a0b);},Scene_Battle[_0x33ee77(0x9a7)][_0x33ee77(0x192)]=function(_0x298209){const _0x46ca21=_0x33ee77,_0x2a7225=this[_0x46ca21(0x733)](_0x298209),_0x348e22=new Window_BattleMultiTarget(_0x2a7225,_0x298209);this[_0x46ca21(0x4f7)](_0x348e22),_0x298209?this[_0x46ca21(0x308)]=_0x348e22:this[_0x46ca21(0x6e0)]=_0x348e22;},VisuMZ[_0x33ee77(0x993)][_0x33ee77(0x27d)]=Scene_Battle['prototype']['needsInputWindowChange'],Scene_Battle[_0x33ee77(0x9a7)]['needsInputWindowChange']=function(){const _0x3996fa=_0x33ee77;if(this[_0x3996fa(0xaed)])return![];return VisuMZ[_0x3996fa(0x993)][_0x3996fa(0x27d)][_0x3996fa(0x88f)](this);},VisuMZ[_0x33ee77(0x993)]['Scene_Battle_updateCancelButton']=Scene_Battle[_0x33ee77(0x9a7)][_0x33ee77(0xa21)],Scene_Battle['prototype'][_0x33ee77(0xa21)]=function(){const _0xa1da4b=_0x33ee77;if(this[_0xa1da4b(0x8b0)]&&this[_0xa1da4b(0xaed)]){this[_0xa1da4b(0x8b0)][_0xa1da4b(0xb1c)]=!![];return;}VisuMZ[_0xa1da4b(0x993)][_0xa1da4b(0x540)][_0xa1da4b(0x88f)](this);},VisuMZ[_0x33ee77(0x993)][_0x33ee77(0x907)]=Scene_Battle[_0x33ee77(0x9a7)][_0x33ee77(0x361)],Scene_Battle[_0x33ee77(0x9a7)][_0x33ee77(0x361)]=function(){const _0x37a4f9=_0x33ee77;if(this[_0x37a4f9(0xaed)])return![];return VisuMZ['BattleCore'][_0x37a4f9(0x907)][_0x37a4f9(0x88f)](this);},VisuMZ['BattleCore'][_0x33ee77(0x417)]=Scene_Battle[_0x33ee77(0x9a7)][_0x33ee77(0x8ab)],Scene_Battle[_0x33ee77(0x9a7)][_0x33ee77(0x8ab)]=function(){const _0x60650c=_0x33ee77;VisuMZ[_0x60650c(0x993)][_0x60650c(0x417)][_0x60650c(0x88f)](this),this[_0x60650c(0x8bd)]();},VisuMZ[_0x33ee77(0x993)]['Scene_Battle_createPartyCommandWindowIBS']=Scene_Battle[_0x33ee77(0x9a7)]['createPartyCommandWindow'],Scene_Battle[_0x33ee77(0x9a7)]['createPartyCommandWindow']=function(){const _0x5d372a=_0x33ee77;VisuMZ[_0x5d372a(0x993)]['Scene_Battle_createPartyCommandWindowIBS'][_0x5d372a(0x88f)](this);const _0x1d5d25=this[_0x5d372a(0x184)];_0x1d5d25[_0x5d372a(0xa11)]('status',this['startInBattleStatus']['bind'](this,_0x1d5d25));},VisuMZ[_0x33ee77(0x993)]['Scene_Battle_createActorCommandWindowIBS']=Scene_Battle[_0x33ee77(0x9a7)][_0x33ee77(0x4de)],Scene_Battle[_0x33ee77(0x9a7)][_0x33ee77(0x4de)]=function(){const _0x5f0381=_0x33ee77;VisuMZ[_0x5f0381(0x993)]['Scene_Battle_createActorCommandWindowIBS'][_0x5f0381(0x88f)](this);const _0x5b4b48=this[_0x5f0381(0x85f)];_0x5b4b48['setHandler'](_0x5f0381(0xc0d),this['startInBattleStatus'][_0x5f0381(0x925)](this,_0x5b4b48));},Scene_Battle['prototype'][_0x33ee77(0x8bd)]=function(){const _0x4e28cb=_0x33ee77,_0xbfb1b3=this['inBattleStatusWindowRect'](),_0x647ab2=new Window_InBattleStatus(_0xbfb1b3);this['addWindow'](_0x647ab2),_0x647ab2[_0x4e28cb(0x9ac)](),_0x647ab2[_0x4e28cb(0xa49)](),this['_inBattleStatusWindow']=_0x647ab2;},Scene_Battle[_0x33ee77(0x9a7)][_0x33ee77(0xafa)]=function(){const _0x54d3aa=_0x33ee77;if(VisuMZ[_0x54d3aa(0x993)][_0x54d3aa(0x12b)][_0x54d3aa(0x471)][_0x54d3aa(0x81a)])return VisuMZ[_0x54d3aa(0x993)]['Settings'][_0x54d3aa(0x471)][_0x54d3aa(0x81a)][_0x54d3aa(0x88f)](this);const _0x143941=Graphics[_0x54d3aa(0x71a)]>0x3e8?0x78:0x0,_0x42cf58=this['_helpWindow']['y']+this[_0x54d3aa(0xb58)][_0x54d3aa(0x578)],_0x22d211=Graphics[_0x54d3aa(0x71a)]-_0x143941*0x2,_0xa7e95d=Graphics[_0x54d3aa(0x238)]-_0x42cf58-this[_0x54d3aa(0x66d)]();return new Rectangle(_0x143941,_0x42cf58,_0x22d211,_0xa7e95d);},Scene_Battle[_0x33ee77(0x9a7)]['startInBattleStatus']=function(_0xd280f4){const _0x56d6a2=_0x33ee77;this['addWindow'](this['_inBattleStatusWindow']),this[_0x56d6a2(0xaed)]=!![],this[_0x56d6a2(0xb58)][_0x56d6a2(0x6e7)]();const _0x3d5f53=['xp',_0x56d6a2(0x9f2),_0x56d6a2(0x2ea),'sideview_ui','frontview_ui'];let _0x5787fe=_0x3d5f53['includes'](this[_0x56d6a2(0x7a9)]());_0x5787fe&&(_0xd280f4[_0x56d6a2(0x9ac)](),_0xd280f4[_0x56d6a2(0xa49)]()),this[_0x56d6a2(0xb75)][_0x56d6a2(0x95b)](BattleManager['actor']()||$gameParty['battleMembers']()[0x0]),this[_0x56d6a2(0xb75)][_0x56d6a2(0x302)](_0xd280f4),this[_0x56d6a2(0xb75)][_0x56d6a2(0x6e7)](),this[_0x56d6a2(0xb75)][_0x56d6a2(0x71f)]();},Scene_Battle['prototype'][_0x33ee77(0x891)]=function(){const _0x1c2c35=_0x33ee77;this['_inBattleStatusMode']=![],this['_helpWindow'][_0x1c2c35(0x9ac)]();const _0x27ba2c=this[_0x1c2c35(0xb75)][_0x1c2c35(0xaaa)]();_0x27ba2c['show'](),_0x27ba2c[_0x1c2c35(0x71f)](),_0x27ba2c[_0x1c2c35(0x143)](),this[_0x1c2c35(0xb75)][_0x1c2c35(0x9ac)](),this['_inBattleStatusWindow'][_0x1c2c35(0xa49)]();},Scene_Battle['prototype']['battleLayoutStyle']=function(){const _0x390564=_0x33ee77;if($gameTemp[_0x390564(0xb87)]!==undefined)return $gameTemp[_0x390564(0xb87)];if(this[_0x390564(0xad8)])return this[_0x390564(0xad8)];return this[_0x390564(0xad8)]=VisuMZ[_0x390564(0x993)]['Settings']['BattleLayout'][_0x390564(0xaab)][_0x390564(0x172)]()[_0x390564(0xaf2)](),this[_0x390564(0xad8)]===_0x390564(0x2c6)&&!Imported['VisuMZ_3_SideviewBattleUI']&&(this[_0x390564(0xad8)]=_0x390564(0x331)),this[_0x390564(0xad8)]===_0x390564(0x178)&&!Imported[_0x390564(0x762)]&&(this[_0x390564(0xad8)]=_0x390564(0x331)),this[_0x390564(0xad8)];},VisuMZ['BattleCore'][_0x33ee77(0x677)]=Scene_Battle[_0x33ee77(0x9a7)]['windowAreaHeight'],Scene_Battle[_0x33ee77(0x9a7)][_0x33ee77(0x66d)]=function(){const _0x94db5d=_0x33ee77,_0x30c8e6=this[_0x94db5d(0x7a9)]();switch(_0x30c8e6){case _0x94db5d(0x6a3):return this['calcWindowHeight'](Math[_0x94db5d(0x657)](0x1,$gameParty[_0x94db5d(0x28c)]()),!![]);break;case _0x94db5d(0x2ea):return this[_0x94db5d(0x65e)](0x4,!![]);break;default:return VisuMZ[_0x94db5d(0x993)][_0x94db5d(0x677)][_0x94db5d(0x88f)](this);break;}},VisuMZ[_0x33ee77(0x993)][_0x33ee77(0xa24)]=Scene_Battle[_0x33ee77(0x9a7)]['helpWindowRect'],Scene_Battle[_0x33ee77(0x9a7)][_0x33ee77(0xbf2)]=function(){const _0x31506f=_0x33ee77,_0x177e0a=this[_0x31506f(0x7a9)]();switch(_0x177e0a){case _0x31506f(0x2ea):return this[_0x31506f(0x6e8)]();break;case _0x31506f(0x331):case _0x31506f(0x6a3):case'xp':case _0x31506f(0x9f2):default:return VisuMZ[_0x31506f(0x993)][_0x31506f(0xa24)][_0x31506f(0x88f)](this);break;}},Scene_Battle[_0x33ee77(0x9a7)][_0x33ee77(0x602)]=function(){const _0x445298=_0x33ee77,_0x12d6c4=this[_0x445298(0x7a9)]();switch(_0x12d6c4){case'xp':case _0x445298(0x9f2):return this[_0x445298(0x954)]();break;case _0x445298(0x2ea):return this['statusWindowRectBorderStyle']();break;case _0x445298(0x331):case _0x445298(0x6a3):default:return this['statusWindowRectDefaultStyle']();break;}},VisuMZ[_0x33ee77(0x993)][_0x33ee77(0xab1)]=Scene_Battle[_0x33ee77(0x9a7)]['partyCommandWindowRect'],Scene_Battle[_0x33ee77(0x9a7)][_0x33ee77(0x5c4)]=function(){const _0x39463a=_0x33ee77,_0x132122=this[_0x39463a(0x7a9)]();switch(_0x132122){case'xp':case _0x39463a(0x9f2):return this['partyCommandWindowRectXPStyle']();break;case'border':return this[_0x39463a(0x218)]();case _0x39463a(0x331):case _0x39463a(0x6a3):default:return this[_0x39463a(0x67b)]();break;}},Scene_Battle[_0x33ee77(0x9a7)][_0x33ee77(0x67b)]=function(){const _0x5bdff0=_0x33ee77,_0x57d42f=VisuMZ['BattleCore'][_0x5bdff0(0x12b)][_0x5bdff0(0x826)],_0x71ba60=_0x57d42f[_0x5bdff0(0xaa2)]||0xc0,_0x1260ac=this[_0x5bdff0(0x66d)](),_0x4cae87=this['isRightInputMode']()?Graphics[_0x5bdff0(0x71a)]-_0x71ba60:0x0,_0x113810=Graphics[_0x5bdff0(0x238)]-_0x1260ac;return new Rectangle(_0x4cae87,_0x113810,_0x71ba60,_0x1260ac);},Scene_Battle['prototype']['actorCommandWindowRect']=function(){const _0x3de9b9=_0x33ee77;return this[_0x3de9b9(0x5c4)]();},VisuMZ[_0x33ee77(0x993)][_0x33ee77(0x7ed)]=Scene_Battle['prototype'][_0x33ee77(0xbf0)],Scene_Battle[_0x33ee77(0x9a7)][_0x33ee77(0xbf0)]=function(){const _0x10acec=_0x33ee77;if(this[_0x10acec(0xaed)])return;const _0x91c11c=this[_0x10acec(0x7a9)]();switch(_0x91c11c){case'xp':case _0x10acec(0x9f2):case _0x10acec(0x2ea):break;case _0x10acec(0x331):case _0x10acec(0x6a3):default:VisuMZ['BattleCore'][_0x10acec(0x7ed)][_0x10acec(0x88f)](this);break;}},Scene_Battle[_0x33ee77(0x9a7)][_0x33ee77(0x7de)]=function(){const _0x1a18a1=_0x33ee77,_0x57bedd=VisuMZ['BattleCore'][_0x1a18a1(0x12b)][_0x1a18a1(0x826)],_0x1a6fc2=Window_BattleStatus[_0x1a18a1(0x9a7)][_0x1a18a1(0x96f)](),_0x4c0f50=Graphics['boxWidth']-(_0x57bedd['CommandWidth']||0xc0),_0x2a622c=this[_0x1a18a1(0x66d)]()+_0x1a6fc2,_0x4366f3=this[_0x1a18a1(0xc26)]()?0x0:Graphics['boxWidth']-_0x4c0f50,_0x473409=Graphics[_0x1a18a1(0x238)]-_0x2a622c+_0x1a6fc2;return new Rectangle(_0x4366f3,_0x473409,_0x4c0f50,_0x2a622c);},Scene_Battle[_0x33ee77(0x9a7)][_0x33ee77(0x954)]=function(){const _0x20cfe4=_0x33ee77,_0x489055=Window_BattleStatus[_0x20cfe4(0x9a7)][_0x20cfe4(0x96f)](),_0x1bcc09=Graphics[_0x20cfe4(0x71a)],_0x4f939a=this['windowAreaHeight']()+_0x489055,_0x503221=0x0,_0x414d6a=Graphics[_0x20cfe4(0x238)]-_0x4f939a+_0x489055;return new Rectangle(_0x503221,_0x414d6a,_0x1bcc09,_0x4f939a);},Scene_Battle[_0x33ee77(0x9a7)][_0x33ee77(0xb7d)]=function(){const _0xc0d3cb=_0x33ee77,_0xd727b=Graphics[_0xc0d3cb(0x71a)]/0x2,_0x2a4811=this[_0xc0d3cb(0x65e)](VisuMZ[_0xc0d3cb(0x993)]['Settings'][_0xc0d3cb(0x826)][_0xc0d3cb(0x415)],!![]),_0x39390c=Math[_0xc0d3cb(0x20e)]((Graphics[_0xc0d3cb(0x71a)]-_0xd727b)/0x2),_0x52afad=Graphics[_0xc0d3cb(0x238)]-_0x2a4811-this[_0xc0d3cb(0x954)]()['height'];return new Rectangle(_0x39390c,_0x52afad,_0xd727b,_0x2a4811);},Scene_Battle[_0x33ee77(0x9a7)][_0x33ee77(0x6e8)]=function(){const _0xcedc2a=_0x33ee77,_0x3506b6=Graphics[_0xcedc2a(0x3d9)],_0x4028d5=Math[_0xcedc2a(0x20e)]((Graphics[_0xcedc2a(0x71a)]-_0x3506b6)/0x2),_0x4df52c=this[_0xcedc2a(0x83f)](),_0x40e16e=(Graphics[_0xcedc2a(0x578)]-Graphics['boxHeight'])/-0x2;return new Rectangle(_0x4028d5,_0x40e16e,_0x3506b6,_0x4df52c);},Scene_Battle[_0x33ee77(0x9a7)]['statusWindowRectBorderStyle']=function(){const _0x1e5eab=_0x33ee77,_0x8a1400=Graphics['width'],_0xf570f=Math[_0x1e5eab(0x20e)]((Graphics['boxWidth']-_0x8a1400)/0x2),_0xf56cdd=this[_0x1e5eab(0x65e)](0x4,!![]),_0x591d37=Graphics['boxHeight']-_0xf56cdd+(Graphics[_0x1e5eab(0x578)]-Graphics[_0x1e5eab(0x238)])/0x2;return new Rectangle(_0xf570f,_0x591d37,_0x8a1400,_0xf56cdd);},Scene_Battle[_0x33ee77(0x9a7)][_0x33ee77(0x218)]=function(){const _0x1532f6=_0x33ee77,_0x915227=Math['floor'](Graphics[_0x1532f6(0x3d9)]/0x3),_0x286504=this[_0x1532f6(0xc26)]()?(Graphics['width']+Graphics[_0x1532f6(0x71a)])/0x2-_0x915227:(Graphics[_0x1532f6(0x3d9)]-Graphics[_0x1532f6(0x71a)])/-0x2,_0x33c010=this['helpWindowRectBorderStyle'](),_0x4cde65=_0x33c010['y']+_0x33c010['height'],_0x261e05=this[_0x1532f6(0xa18)](),_0x552a21=_0x261e05['y']-_0x4cde65;return new Rectangle(_0x286504,_0x4cde65,_0x915227,_0x552a21);},Scene_Battle[_0x33ee77(0x9a7)][_0x33ee77(0xbd9)]=function(){const _0x855a95=_0x33ee77,_0x8bd21a=Math['ceil'](Graphics[_0x855a95(0x3d9)]/0x3),_0x427ec4=Math[_0x855a95(0x20e)]((Graphics[_0x855a95(0x71a)]-_0x8bd21a)/0x2),_0x6ca2d8=this[_0x855a95(0x218)](),_0x3909c1=_0x6ca2d8['y'],_0x1d2254=_0x6ca2d8[_0x855a95(0x578)];return new Rectangle(_0x427ec4,_0x3909c1,_0x8bd21a,_0x1d2254);},Scene_Battle[_0x33ee77(0x9a7)][_0x33ee77(0x367)]=function(){const _0x1c31e9=_0x33ee77;this['_cancelButton']['y']=this[_0x1c31e9(0xb58)]['y']+this['_helpWindow'][_0x1c31e9(0x578)],this[_0x1c31e9(0xc26)]()?this[_0x1c31e9(0x7a9)]()===_0x1c31e9(0x2ea)?this['_cancelButton']['x']=0x8:this[_0x1c31e9(0x8b0)]['x']=-this[_0x1c31e9(0x8b0)][_0x1c31e9(0x3d9)]-0x4:this[_0x1c31e9(0x8b0)]['x']=Graphics[_0x1c31e9(0x3d9)]-(Graphics[_0x1c31e9(0x3d9)]-Graphics[_0x1c31e9(0x71a)])/0x2-this[_0x1c31e9(0x8b0)][_0x1c31e9(0x3d9)]-0x4;},VisuMZ[_0x33ee77(0x993)][_0x33ee77(0x974)]=Scene_Battle[_0x33ee77(0x9a7)][_0x33ee77(0x22f)],Scene_Battle[_0x33ee77(0x9a7)][_0x33ee77(0x22f)]=function(){const _0x1bc768=_0x33ee77;if(this[_0x1bc768(0x7a9)]()==='border')return this[_0x1bc768(0xbd9)]();else return this[_0x1bc768(0xa12)]()?this[_0x1bc768(0x786)]():VisuMZ[_0x1bc768(0x993)][_0x1bc768(0x974)]['call'](this);},VisuMZ[_0x33ee77(0x993)][_0x33ee77(0x3f7)]=Scene_Battle['prototype'][_0x33ee77(0x2d9)],Scene_Battle[_0x33ee77(0x9a7)][_0x33ee77(0x2d9)]=function(){const _0x40975e=_0x33ee77;if(this['battleLayoutStyle']()===_0x40975e(0x2ea))return this[_0x40975e(0xbd9)]();else return this[_0x40975e(0xa12)]()?this[_0x40975e(0x786)]():VisuMZ[_0x40975e(0x993)][_0x40975e(0x3f7)]['call'](this);},Scene_Battle[_0x33ee77(0x9a7)][_0x33ee77(0xa12)]=function(){const _0x10ed70=_0x33ee77;return VisuMZ[_0x10ed70(0x993)][_0x10ed70(0x12b)][_0x10ed70(0x826)][_0x10ed70(0x512)];},Scene_Battle['prototype']['skillItemWindowRectMiddle']=function(){const _0x4d9068=_0x33ee77,_0x6d4b18=Sprite_Button[_0x4d9068(0x9a7)]['blockWidth']()*0x2+0x4;let _0x3457da=Graphics[_0x4d9068(0x71a)]-_0x6d4b18;Imported[_0x4d9068(0x2e4)]&&SceneManager[_0x4d9068(0x1df)]()&&(_0x3457da+=_0x6d4b18);const _0x3d9bce=this[_0x4d9068(0xb5a)](),_0x1616df=Graphics[_0x4d9068(0x238)]-_0x3d9bce-this[_0x4d9068(0x602)]()[_0x4d9068(0x578)]+Window_BattleStatus[_0x4d9068(0x9a7)][_0x4d9068(0x96f)](),_0x20d5f7=0x0;return new Rectangle(_0x20d5f7,_0x3d9bce,_0x3457da,_0x1616df);},VisuMZ['BattleCore'][_0x33ee77(0x4c7)]=Scene_Battle['prototype'][_0x33ee77(0x372)],Scene_Battle[_0x33ee77(0x9a7)]['startActorSelection']=function(){const _0x71f983=_0x33ee77;VisuMZ[_0x71f983(0x993)][_0x71f983(0x4c7)][_0x71f983(0x88f)](this),this[_0x71f983(0x989)]();},VisuMZ[_0x33ee77(0x993)][_0x33ee77(0x7ec)]=Scene_Battle[_0x33ee77(0x9a7)][_0x33ee77(0xa35)],Scene_Battle[_0x33ee77(0x9a7)][_0x33ee77(0xa35)]=function(){const _0x8be18e=_0x33ee77;VisuMZ['BattleCore'][_0x8be18e(0x7ec)]['call'](this),this[_0x8be18e(0x7d5)][_0x8be18e(0xbb9)](),this[_0x8be18e(0x989)]();},Scene_Battle[_0x33ee77(0x9a7)][_0x33ee77(0x989)]=function(){const _0x990140=_0x33ee77,_0x1547d9=this[_0x990140(0x7a9)]();['xp','portrait',_0x990140(0x2ea)]['includes'](_0x1547d9)&&this[_0x990140(0x85f)][_0x990140(0xa49)](),(_0x1547d9===_0x990140(0x2ea)||this[_0x990140(0xa12)]())&&(this['_skillWindow'][_0x990140(0xa49)](),this[_0x990140(0x3d3)][_0x990140(0xa49)]());},VisuMZ[_0x33ee77(0x993)][_0x33ee77(0x4a2)]=Scene_Battle['prototype'][_0x33ee77(0x1c6)],Scene_Battle[_0x33ee77(0x9a7)]['onActorOk']=function(){const _0xa1d3ad=_0x33ee77;VisuMZ[_0xa1d3ad(0x993)]['Scene_Battle_onActorOk']['call'](this),this[_0xa1d3ad(0xbff)]();},Scene_Battle[_0x33ee77(0x9a7)]['isNonSubmenuCancel']=function(){const _0x34f391=_0x33ee77;return[_0x34f391(0x4c5),_0x34f391(0x462),_0x34f391(0x663)]['includes'](this[_0x34f391(0x85f)][_0x34f391(0x80f)]());},VisuMZ[_0x33ee77(0x993)]['Scene_Battle_onActorCancel']=Scene_Battle['prototype'][_0x33ee77(0x35b)],Scene_Battle[_0x33ee77(0x9a7)]['onActorCancel']=function(){const _0x5b730e=_0x33ee77;this[_0x5b730e(0x1c9)]()?(this[_0x5b730e(0x189)][_0x5b730e(0x6e7)](),this[_0x5b730e(0x78a)][_0x5b730e(0x9ac)](),this['_actorCommandWindow']['activate']()):VisuMZ['BattleCore']['Scene_Battle_onActorCancel'][_0x5b730e(0x88f)](this),this[_0x5b730e(0x71b)]();},VisuMZ[_0x33ee77(0x993)][_0x33ee77(0x978)]=Scene_Battle[_0x33ee77(0x9a7)]['onEnemyOk'],Scene_Battle[_0x33ee77(0x9a7)][_0x33ee77(0x719)]=function(){const _0x307d12=_0x33ee77;if(!this['_enemyWindow']['enemy']()){this[_0x307d12(0x7d5)]['activate']();return;}const _0x3fb660=BattleManager[_0x307d12(0x21e)]();_0x3fb660['setTargetBattlerKey'](this[_0x307d12(0x7d5)][_0x307d12(0x246)]()),this[_0x307d12(0x7d5)]['closeBattleActorWindow'](),VisuMZ[_0x307d12(0x993)][_0x307d12(0x978)][_0x307d12(0x88f)](this),this['okTargetSelectionVisibility']();},VisuMZ[_0x33ee77(0x993)][_0x33ee77(0x90b)]=Scene_Battle[_0x33ee77(0x9a7)][_0x33ee77(0x273)],Scene_Battle[_0x33ee77(0x9a7)][_0x33ee77(0x273)]=function(){const _0x2a764a=_0x33ee77;this[_0x2a764a(0x1c9)]()?(this['_statusWindow']['show'](),this[_0x2a764a(0x7d5)][_0x2a764a(0x9ac)](),this['_actorCommandWindow'][_0x2a764a(0x143)]()):VisuMZ[_0x2a764a(0x993)][_0x2a764a(0x90b)][_0x2a764a(0x88f)](this),this[_0x2a764a(0x71b)](),this[_0x2a764a(0x7d5)][_0x2a764a(0xa07)]();},Scene_Battle[_0x33ee77(0x9a7)]['okTargetSelectionVisibility']=function(){const _0x2f7122=_0x33ee77,_0x4a0f4c=this[_0x2f7122(0x7a9)]();(_0x4a0f4c===_0x2f7122(0x2ea)||this[_0x2f7122(0xa12)]())&&(this[_0x2f7122(0x700)][_0x2f7122(0x71f)](),this[_0x2f7122(0x700)][_0x2f7122(0x5c8)]&&this[_0x2f7122(0x700)][_0x2f7122(0x6e7)](),this[_0x2f7122(0x3d3)][_0x2f7122(0x71f)](),this[_0x2f7122(0x3d3)][_0x2f7122(0x5c8)]&&this[_0x2f7122(0x3d3)][_0x2f7122(0x6e7)]());},Scene_Battle[_0x33ee77(0x9a7)][_0x33ee77(0x71b)]=function(){const _0x5f1bdb=_0x33ee77,_0x5f1ece=this[_0x5f1bdb(0x7a9)]();['xp',_0x5f1bdb(0x9f2),'border'][_0x5f1bdb(0x741)](_0x5f1ece)&&this[_0x5f1bdb(0x85f)]['open'](),this[_0x5f1bdb(0xbff)]();},Sprite_Battler['_motionSpeed']=VisuMZ[_0x33ee77(0x993)][_0x33ee77(0x12b)][_0x33ee77(0x46f)]['MotionSpeed'],VisuMZ[_0x33ee77(0x993)][_0x33ee77(0x4a6)]=Sprite_Battler[_0x33ee77(0x9a7)][_0x33ee77(0xb4c)],Sprite_Battler[_0x33ee77(0x9a7)][_0x33ee77(0xb4c)]=function(){const _0x2a92f3=_0x33ee77;VisuMZ['BattleCore'][_0x2a92f3(0x4a6)][_0x2a92f3(0x88f)](this),this['initMembersBattleCore']();if(this['constructor']===Sprite_Enemy)this[_0x2a92f3(0x122)]();this[_0x2a92f3(0xbc1)]();},Sprite_Battler[_0x33ee77(0x9a7)][_0x33ee77(0x9e3)]=function(){const _0x5692c4=_0x33ee77;this[_0x5692c4(0x1f7)]=0x0,this[_0x5692c4(0x74a)]=0x0,this['_floatHeight']=0x0,this[_0x5692c4(0x660)]=0x0,this['_floatDuration']=0x0,this['_floatWholeDuration']=0x0,this['_floatEasing']=_0x5692c4(0x8d8),this[_0x5692c4(0xb69)]=0x0,this[_0x5692c4(0x2a5)]=0x0,this[_0x5692c4(0x2e3)]=0x0,this[_0x5692c4(0x8a7)]=0x0,this[_0x5692c4(0x855)]=0xff,this[_0x5692c4(0x979)]=0x0,this[_0x5692c4(0x758)]=0x0,this[_0x5692c4(0xc05)]='Linear',this[_0x5692c4(0x5e0)]=0x0,this[_0x5692c4(0x441)]=0x0,this[_0x5692c4(0x761)]=0x0,this[_0x5692c4(0x60b)]=0x0,this['_angleEasing']=_0x5692c4(0x8d8),this[_0x5692c4(0x573)]=!![],this[_0x5692c4(0x3ea)]=0x0,this[_0x5692c4(0x9f1)]=0x0,this[_0x5692c4(0x93f)]=0x0,this[_0x5692c4(0x19d)]=0x0,this[_0x5692c4(0xb35)]=0x0,this['_skewWholeDuration']=0x0,this[_0x5692c4(0x17a)]=_0x5692c4(0x8d8),this['_growX']=0x1,this[_0x5692c4(0x7a0)]=0x1,this[_0x5692c4(0x8cc)]=0x1,this[_0x5692c4(0xbde)]=0x1,this[_0x5692c4(0x1b5)]=0x0,this[_0x5692c4(0x233)]=0x0,this[_0x5692c4(0xa69)]=_0x5692c4(0x8d8),this[_0x5692c4(0x48a)]=0x1,this['_targetHomeX']=0x0,this[_0x5692c4(0x5a1)]=0x0,this['_homeDuration']=0x0,this[_0x5692c4(0xb2e)]=0x0,this[_0x5692c4(0xba0)]=_0x5692c4(0x8d8),this[_0x5692c4(0x2d2)]=0x0,this['_shakeFlinchPower']=0x0;},Sprite_Battler[_0x33ee77(0x9a7)][_0x33ee77(0x122)]=function(){const _0x573ed6=_0x33ee77;this[_0x573ed6(0x205)]=new Sprite(),this['_shadowSprite']['bitmap']=ImageManager['loadSystem'](_0x573ed6(0x276)),this['_shadowSprite'][_0x573ed6(0x490)]['smooth']=VisuMZ[_0x573ed6(0x993)][_0x573ed6(0x12b)][_0x573ed6(0x46f)][_0x573ed6(0x494)],this[_0x573ed6(0x205)][_0x573ed6(0xbbb)]['x']=0.5,this[_0x573ed6(0x205)][_0x573ed6(0xbbb)]['y']=0.5,this['_shadowSprite']['y']=-0x2,this['_shadowSprite'][_0x573ed6(0xb1c)]=![],this[_0x573ed6(0xb83)](this[_0x573ed6(0x205)]);},Sprite_Battler[_0x33ee77(0x9a7)]['createDistortionSprite']=function(){const _0x1e33a3=_0x33ee77;this[_0x1e33a3(0x495)]=new Sprite(),this['_distortionSprite'][_0x1e33a3(0xbbb)]['x']=0.5,this[_0x1e33a3(0x495)][_0x1e33a3(0xbbb)]['y']=0.5,this[_0x1e33a3(0xb83)](this[_0x1e33a3(0x495)]);},Sprite_Battler[_0x33ee77(0x9a7)][_0x33ee77(0x9d6)]=function(){const _0x294509=_0x33ee77;if(this[_0x294509(0x168)]&&this[_0x294509(0x168)]()){Sprite[_0x294509(0x9a7)][_0x294509(0x9d6)]['call'](this);return;}const _0x5b2e08=this[_0x294509(0x495)];if(!_0x5b2e08)return;!_0x5b2e08[_0x294509(0x176)]&&_0x5b2e08[_0x294509(0xc25)](),_0x5b2e08['_colorFilter'][_0x294509(0x315)](this['_hue']),_0x5b2e08['_colorFilter']['setBlendColor'](this[_0x294509(0x9c6)]),_0x5b2e08['_colorFilter'][_0x294509(0x185)](this[_0x294509(0x67e)]);},Sprite_Battler[_0x33ee77(0x9a7)]['attachSpritesToDistortionSprite']=function(){const _0x4ec2f5=_0x33ee77;if(!this[_0x4ec2f5(0x495)])return;if(this['_shadowSprite']){const _0x1c99f3=this[_0x4ec2f5(0xa23)](this['_distortionSprite']);this['addChildAt'](this[_0x4ec2f5(0x205)],_0x1c99f3),this[_0x4ec2f5(0x57c)]();}this[_0x4ec2f5(0x57e)]&&this['_distortionSprite'][_0x4ec2f5(0xb83)](this[_0x4ec2f5(0x57e)]),this[_0x4ec2f5(0x9ab)]&&this[_0x4ec2f5(0x495)]['addChild'](this[_0x4ec2f5(0x9ab)]),this[_0x4ec2f5(0xab3)]&&this[_0x4ec2f5(0x495)]['addChild'](this[_0x4ec2f5(0xab3)]),this[_0x4ec2f5(0x3c1)]&&this[_0x4ec2f5(0x495)][_0x4ec2f5(0xb83)](this[_0x4ec2f5(0x3c1)]),this['_dragonbonesSpriteContainer']&&this[_0x4ec2f5(0x495)][_0x4ec2f5(0xb83)](this[_0x4ec2f5(0x5df)]);},Sprite_Battler['prototype'][_0x33ee77(0x57c)]=function(){const _0x52763f=_0x33ee77;if(!this['_shadowSprite'])return;if(this[_0x52763f(0x17c)]&&this[_0x52763f(0x17c)][_0x52763f(0x718)]()){const _0x7aa1ee=this[_0x52763f(0x205)][_0x52763f(0x490)];this['_shadowSprite'][_0x52763f(0x56f)](0x0,0x0,_0x7aa1ee[_0x52763f(0x3d9)],_0x7aa1ee[_0x52763f(0x578)]);}else this[_0x52763f(0x205)]['setFrame'](0x0,0x0,0x0,0x0);},Sprite_Battler[_0x33ee77(0x9a7)][_0x33ee77(0x7a3)]=function(){const _0x2c8f85=_0x33ee77;return SceneManager['isSceneBattle']()?SceneManager[_0x2c8f85(0x473)][_0x2c8f85(0x850)][_0x2c8f85(0x5ba)]:this['parent'];},Sprite_Battler[_0x33ee77(0x9a7)][_0x33ee77(0x160)]=function(_0xbf8c2,_0x223fbb){const _0x2f4b76=_0x33ee77;if(!this[_0x2f4b76(0x17c)][_0x2f4b76(0x2b2)]())return;if(BattleManager[_0x2f4b76(0x1d9)]())return;const _0x5a7c35=VisuMZ[_0x2f4b76(0x993)][_0x2f4b76(0x12b)][_0x2f4b76(0x133)],_0x1449d4=new Sprite_Damage();_0x1449d4[_0x2f4b76(0x68e)]=_0x5a7c35[_0x2f4b76(0x715)],this[_0x2f4b76(0xa3e)](_0x1449d4),_0x1449d4['setupTextPopup'](_0xbf8c2,_0x223fbb),this['addDamageSprite'](_0x1449d4);},Sprite_Battler[_0x33ee77(0x9a7)][_0x33ee77(0xb0b)]=function(_0xb1a3d3,_0x5b79e0,_0x467bfa){const _0x92ad48=_0x33ee77;if(!this[_0x92ad48(0x17c)][_0x92ad48(0x2b2)]())return;if(BattleManager['shouldHideBattleEndPopups']())return;const _0x3bec00=VisuMZ[_0x92ad48(0x993)][_0x92ad48(0x12b)][_0x92ad48(0x133)],_0x562cec=new Sprite_Damage();_0x562cec[_0x92ad48(0x68e)]=_0x3bec00[_0x92ad48(0x715)],this[_0x92ad48(0xa3e)](_0x562cec),_0x562cec[_0x92ad48(0xb0b)](_0xb1a3d3,_0x5b79e0,_0x467bfa),this[_0x92ad48(0x418)](_0x562cec);},Sprite_Battler[_0x33ee77(0x9a7)][_0x33ee77(0x221)]=function(){const _0x1f5374=_0x33ee77;if(!this[_0x1f5374(0x17c)][_0x1f5374(0x94f)]())return;while(this[_0x1f5374(0x17c)][_0x1f5374(0x94f)]()){this[_0x1f5374(0x17c)][_0x1f5374(0x2b2)]()&&this[_0x1f5374(0x44e)]();}this['_battler'][_0x1f5374(0x43d)](),this[_0x1f5374(0x17c)][_0x1f5374(0x170)]();},Sprite_Battler['prototype']['createDamageSprite']=function(){const _0x352854=_0x33ee77;if(BattleManager[_0x352854(0x1d9)]())return;const _0x1e3a6c=VisuMZ[_0x352854(0x993)][_0x352854(0x12b)][_0x352854(0x133)],_0x6e4b94=new Sprite_Damage();_0x6e4b94[_0x352854(0x68e)]=_0x1e3a6c[_0x352854(0x715)],this['sortDamageSprites'](_0x6e4b94),_0x6e4b94[_0x352854(0x888)](this['_battler']),_0x6e4b94[_0x352854(0x4ed)](this[_0x352854(0x17c)]),this[_0x352854(0x418)](_0x6e4b94);},Sprite_Battler[_0x33ee77(0x9a7)][_0x33ee77(0x418)]=function(_0x327d70){const _0x152565=_0x33ee77;this[_0x152565(0x42c)][_0x152565(0x7ab)](_0x327d70);if(this[_0x152565(0xad0)]()){const _0x386a13=SceneManager[_0x152565(0x473)][_0x152565(0x189)];if(_0x386a13)_0x386a13['addDamageSprite'](_0x327d70,this[_0x152565(0x17c)]);}else{this[_0x152565(0x7a3)]()['addChild'](_0x327d70);if(SceneManager[_0x152565(0x8ad)]())_0x327d70[_0x152565(0x293)]['x']=-0x1;}},Sprite_Battler[_0x33ee77(0x9a7)][_0x33ee77(0xad0)]=function(){const _0x1851b9=_0x33ee77;return!$gameSystem[_0x1851b9(0x7a6)]()&&this['_battler']&&this[_0x1851b9(0x17c)][_0x1851b9(0x6c3)]();return!$gameSystem['isSideView']()&&this[_0x1851b9(0x17c)]&&this['_battler'][_0x1851b9(0x6c3)]()&&Window_BattleStatus[_0x1851b9(0x9a7)][_0x1851b9(0x7a9)]()==='portrait';},Sprite_Battler[_0x33ee77(0x9a7)]['sortDamageSprites']=function(_0x129d5a){const _0x3a6dfa=_0x33ee77;this[_0x3a6dfa(0x6ff)](_0x129d5a,!![]);const _0x2a5851=VisuMZ[_0x3a6dfa(0x993)]['Settings'][_0x3a6dfa(0x133)],_0x4eb63f=SceneManager[_0x3a6dfa(0x8ad)]()?-0x1:0x1;if(_0x2a5851[_0x3a6dfa(0x8ef)])for(const _0x42a421 of this[_0x3a6dfa(0x42c)]){_0x42a421['x']+=_0x2a5851['PopupShiftX']*_0x4eb63f,_0x42a421['y']+=_0x2a5851['PopupShiftY'];}else{const _0x331f6d=this['_damages'][this['_damages'][_0x3a6dfa(0x70c)]-0x1];_0x331f6d&&(_0x129d5a['x']=_0x331f6d['x']+_0x2a5851[_0x3a6dfa(0x197)]*_0x4eb63f,_0x129d5a['y']=_0x331f6d['y']+_0x2a5851[_0x3a6dfa(0x1f6)]);}},Sprite_Battler[_0x33ee77(0x9a7)][_0x33ee77(0x6ff)]=function(_0x1c9e92,_0x1087df){const _0x5475ae=_0x33ee77,_0x1e5768=SceneManager[_0x5475ae(0x8ad)]()?-0x1:0x1;let _0x3ed349=this[_0x5475ae(0x1f7)];_0x3ed349+=this[_0x5475ae(0x48f)]();let _0x1f3b48=this[_0x5475ae(0x74a)];const _0x239367=this['_distortionSprite'][_0x5475ae(0x293)]['y'];_0x1f3b48+=this[_0x5475ae(0x204)]();const _0x148861=SceneManager[_0x5475ae(0x473)]['_statusWindow'];if(_0x148861&&this[_0x5475ae(0x693)]===_0x148861){_0x3ed349+=_0x148861['x']-this[_0x5475ae(0x7cc)]();const _0x15723b=_0x148861['lineHeight']()*0x3/0x4;_0x1f3b48=_0x148861['y']+_0x15723b,_0x1f3b48=Math['min'](_0x1f3b48,_0x148861['y']+this['y']-this[_0x5475ae(0x578)]+_0x15723b);}_0x1c9e92['x']=Math['round'](_0x3ed349+this[_0x5475ae(0x7cc)]()*_0x1e5768),_0x1c9e92['y']=Math[_0x5475ae(0x20e)](_0x1f3b48+this['damageOffsetY']());},VisuMZ[_0x33ee77(0x993)][_0x33ee77(0x8e7)]=Sprite_Battler[_0x33ee77(0x9a7)]['damageOffsetX'],Sprite_Battler[_0x33ee77(0x9a7)][_0x33ee77(0x7cc)]=function(){const _0x258f66=_0x33ee77;let _0x968a26=VisuMZ[_0x258f66(0x993)]['Sprite_Battler_damageOffsetX'][_0x258f66(0x88f)](this),_0x3ff657=VisuMZ[_0x258f66(0x993)][_0x258f66(0x12b)][_0x258f66(0x133)][_0x258f66(0x18f)]||0x0;return _0x3ff657+=this[_0x258f66(0x17c)][_0x258f66(0x2b3)](),Math[_0x258f66(0x20e)](_0x968a26+_0x3ff657);},VisuMZ[_0x33ee77(0x993)]['Sprite_Battler_damageOffsetY']=Sprite_Battler[_0x33ee77(0x9a7)]['damageOffsetY'],Sprite_Battler['prototype'][_0x33ee77(0x455)]=function(){const _0x264609=_0x33ee77;let _0x280397=VisuMZ[_0x264609(0x993)][_0x264609(0x63a)][_0x264609(0x88f)](this);switch(this[_0x264609(0x17c)]['damagePopupPosition']()){case'head':_0x280397-=this[_0x264609(0x578)]*this[_0x264609(0x293)]['y'];break;case'center':_0x280397-=this['height']*this[_0x264609(0x293)]['y']*0.5;break;}let _0x2d2c59=VisuMZ[_0x264609(0x993)][_0x264609(0x12b)][_0x264609(0x133)][_0x264609(0x6ea)]||0x0;return _0x2d2c59+=this['_battler'][_0x264609(0x265)](),Math['round'](_0x280397+_0x2d2c59);},Sprite_Actor[_0x33ee77(0x9a7)][_0x33ee77(0x7cc)]=function(){const _0x294750=_0x33ee77;return Sprite_Battler[_0x294750(0x9a7)][_0x294750(0x7cc)][_0x294750(0x88f)](this);},Sprite_Actor[_0x33ee77(0x9a7)][_0x33ee77(0x455)]=function(){const _0x3abffe=_0x33ee77;return Sprite_Battler['prototype']['damageOffsetY'][_0x3abffe(0x88f)](this);},Sprite_Battler[_0x33ee77(0x9a7)][_0x33ee77(0x45d)]=function(_0x59140f){const _0x2f750d=_0x33ee77;this[_0x2f750d(0xad0)]()?SceneManager['_scene'][_0x2f750d(0x189)]['removeDamageSprite'](_0x59140f):(this[_0x2f750d(0x7a3)]()[_0x2f750d(0x1e0)](_0x59140f),this[_0x2f750d(0x42c)][_0x2f750d(0x259)](_0x59140f),_0x59140f[_0x2f750d(0x7a5)]());},VisuMZ['BattleCore']['Sprite_Battler_setHome']=Sprite_Battler[_0x33ee77(0x9a7)][_0x33ee77(0x474)],Sprite_Battler[_0x33ee77(0x9a7)]['setHome']=function(_0x4836c5,_0x55071e){const _0x1d4d12=_0x33ee77,_0x1c21f2=VisuMZ['BattleCore'][_0x1d4d12(0x12b)];if(this[_0x1d4d12(0xa94)]===Sprite_Actor)_0x4836c5+=_0x1c21f2['Actor']['OffsetX']||0x0,_0x55071e+=_0x1c21f2[_0x1d4d12(0x46f)]['OffsetY']||0x0;else this[_0x1d4d12(0xa94)]===Sprite_Enemy&&(_0x4836c5+=_0x1c21f2['Enemy']['OffsetX']||0x0,_0x55071e+=_0x1c21f2['Enemy']['OffsetY']||0x0);this[_0x1d4d12(0x17c)]&&(_0x4836c5=this[_0x1d4d12(0x17c)]['_forcedHomeX']??_0x4836c5,_0x55071e=this[_0x1d4d12(0x17c)][_0x1d4d12(0x6ce)]??_0x55071e),VisuMZ['BattleCore'][_0x1d4d12(0x836)][_0x1d4d12(0x88f)](this,_0x4836c5,_0x55071e),this[_0x1d4d12(0x5aa)]=this['_homeX'],this['_targetHomeY']=this[_0x1d4d12(0xab7)],this[_0x1d4d12(0x6f9)]=0x0,this[_0x1d4d12(0xb2e)]=0x0,this[_0x1d4d12(0xba0)]=_0x1d4d12(0x8d8);},VisuMZ[_0x33ee77(0x993)][_0x33ee77(0xa3d)]=Sprite_Battler[_0x33ee77(0x9a7)][_0x33ee77(0x1b4)],Sprite_Battler[_0x33ee77(0x9a7)][_0x33ee77(0x1b4)]=function(){const _0x4ea7de=_0x33ee77;VisuMZ[_0x4ea7de(0x993)][_0x4ea7de(0xa3d)][_0x4ea7de(0x88f)](this),!this[_0x4ea7de(0x17c)]&&this[_0x4ea7de(0x26d)]&&(this[_0x4ea7de(0x26d)][_0x4ea7de(0xb1c)]=![]);},VisuMZ[_0x33ee77(0x993)][_0x33ee77(0x853)]=Sprite_Battler[_0x33ee77(0x9a7)][_0x33ee77(0x831)],Sprite_Battler[_0x33ee77(0x9a7)]['updateMain']=function(){const _0x3a1190=_0x33ee77;this['updateScale'](),this['updateSkew'](),this[_0x3a1190(0x7c7)](),this[_0x3a1190(0x843)](),VisuMZ[_0x3a1190(0x993)][_0x3a1190(0x853)]['call'](this),this[_0x3a1190(0xb07)](),this[_0x3a1190(0x2ac)]();if(this[_0x3a1190(0xa94)]===Sprite_Enemy)this['updateShadow']();},VisuMZ[_0x33ee77(0x993)]['Sprite_Battler_updatePosition']=Sprite_Battler[_0x33ee77(0x9a7)][_0x33ee77(0x23b)],Sprite_Battler['prototype'][_0x33ee77(0x23b)]=function(){const _0x5d6778=_0x33ee77;this[_0x5d6778(0x84c)](),VisuMZ[_0x5d6778(0x993)][_0x5d6778(0xa10)][_0x5d6778(0x88f)](this),this[_0x5d6778(0x1cb)](),this[_0x5d6778(0x86f)]();},Sprite_Battler['prototype'][_0x33ee77(0x6c8)]=function(){const _0x3201a8=_0x33ee77,_0x2b437d=this[_0x3201a8(0x6ab)]();if(this['_battler']['isSelected']())this[_0x3201a8(0xbcd)]++,Graphics[_0x3201a8(0x7c3)]%0x1e<0xf?_0x2b437d[_0x3201a8(0x82b)]([0xff,0xff,0xff,0x40]):_0x2b437d[_0x3201a8(0x82b)]([0x0,0x0,0x0,0x0]);else this['_selectionEffectCount']>0x0&&(this['_selectionEffectCount']=0x0,_0x2b437d[_0x3201a8(0x82b)]([0x0,0x0,0x0,0x0]));},Sprite_Battler[_0x33ee77(0x9a7)][_0x33ee77(0xb71)]=function(_0x562bd6,_0x13bade){const _0x35e824=_0x33ee77,_0x5bba66=VisuMZ[_0x35e824(0x993)][_0x35e824(0x12b)];if(this['constructor']===Sprite_Actor)_0x562bd6+=_0x5bba66[_0x35e824(0x46f)][_0x35e824(0x680)]||0x0,_0x13bade+=_0x5bba66[_0x35e824(0x46f)][_0x35e824(0x995)]||0x0;else this[_0x35e824(0xa94)]===Sprite_Enemy&&(_0x562bd6+=_0x5bba66[_0x35e824(0xc1d)][_0x35e824(0x680)]||0x0,_0x13bade+=_0x5bba66[_0x35e824(0xc1d)][_0x35e824(0x995)]||0x0);const _0x10d759=_0x562bd6-this[_0x35e824(0x2ca)],_0x2c08ef=_0x13bade-this['_homeY'];this[_0x35e824(0x2ca)]=_0x562bd6,this[_0x35e824(0xab7)]=_0x13bade,this[_0x35e824(0xbb2)]-=_0x10d759,this[_0x35e824(0x8b1)]-=_0x2c08ef,this[_0x35e824(0x310)]-=_0x10d759,this[_0x35e824(0x548)]-=_0x2c08ef,this[_0x35e824(0x23b)]();},Sprite_Battler[_0x33ee77(0x9a7)]['startHomeMove']=function(_0x160de0,_0x1f291b,_0x3a8cb6,_0x3bbea1){const _0x26409c=_0x33ee77,_0x5fc307=VisuMZ['BattleCore'][_0x26409c(0x12b)];if(this['constructor']===Sprite_Actor)_0x160de0+=_0x5fc307[_0x26409c(0x46f)][_0x26409c(0x680)]||0x0,_0x1f291b+=_0x5fc307[_0x26409c(0x46f)][_0x26409c(0x995)]||0x0;else this['constructor']===Sprite_Enemy&&(_0x160de0+=_0x5fc307['Enemy'][_0x26409c(0x680)]||0x0,_0x1f291b+=_0x5fc307[_0x26409c(0xc1d)]['OffsetY']||0x0);(this[_0x26409c(0x5aa)]!==_0x160de0||this[_0x26409c(0x5a1)]!==_0x1f291b)&&(this[_0x26409c(0x5aa)]=_0x160de0,this[_0x26409c(0x5a1)]=_0x1f291b,this[_0x26409c(0x6f9)]=_0x3a8cb6,this[_0x26409c(0xb2e)]=_0x3a8cb6,this[_0x26409c(0xba0)]=_0x3bbea1,_0x3a8cb6<=0x0&&this['onHomeMoveEnd']());},Sprite_Battler[_0x33ee77(0x9a7)]['updateHomeMove']=function(){const _0x493147=_0x33ee77;if(this[_0x493147(0x6f9)]<=0x0)return;const _0x26ea43=this[_0x493147(0x6f9)],_0x232291=this[_0x493147(0xb2e)],_0x1f222d=this[_0x493147(0xba0)];Imported[_0x493147(0x2e4)]?(this[_0x493147(0x2ca)]=this[_0x493147(0xa9b)](this['_homeX'],this['_targetHomeX'],_0x26ea43,_0x232291,_0x1f222d),this[_0x493147(0xab7)]=this[_0x493147(0xa9b)](this[_0x493147(0xab7)],this[_0x493147(0x5a1)],_0x26ea43,_0x232291,_0x1f222d)):(this[_0x493147(0x2ca)]=(this[_0x493147(0x2ca)]*(_0x26ea43-0x1)+this[_0x493147(0x5aa)])/_0x26ea43,this[_0x493147(0xab7)]=(this[_0x493147(0xab7)]*(_0x26ea43-0x1)+this[_0x493147(0x5a1)])/_0x26ea43);this['_homeDuration']--;if(this[_0x493147(0x6f9)]<=0x0)this[_0x493147(0x1d3)]();},Sprite_Battler[_0x33ee77(0x9a7)]['onHomeMoveEnd']=function(){const _0x21fdd5=_0x33ee77;this[_0x21fdd5(0x2ca)]=this[_0x21fdd5(0x5aa)],this[_0x21fdd5(0xab7)]=this[_0x21fdd5(0x5a1)];},Sprite_Battler[_0x33ee77(0x9a7)][_0x33ee77(0x1cb)]=function(){const _0x1bd307=_0x33ee77;this[_0x1bd307(0x1f7)]=this['x'],this['_baseY']=this['y'],this[_0x1bd307(0x563)](),this[_0x1bd307(0x42e)](),this['x']+=this[_0x1bd307(0x48f)](),this['y']+=this['extraPositionY'](),this['y']+=this[_0x1bd307(0x9fb)](),this['x']=Math['floor'](this['x']),this['y']=Math[_0x1bd307(0x816)](this['y']);},Sprite_Battler[_0x33ee77(0x9a7)][_0x33ee77(0x48f)]=function(){let _0x49073a=0x0;return _0x49073a;},Sprite_Battler['prototype']['extraPositionY']=function(){const _0xfb0945=_0x33ee77;let _0x3faca2=0x0;return this[_0xfb0945(0x17c)]&&!this[_0xfb0945(0x17c)][_0xfb0945(0x61e)]()&&(_0x3faca2-=this['_floatHeight'],_0x3faca2-=this[_0xfb0945(0xb69)]),_0x3faca2;},Sprite_Battler['prototype']['extraPositionScaledY']=function(){const _0x4a90c1=_0x33ee77;let _0x2153e8=0x0;if(this[_0x4a90c1(0x495)]&&this[_0x4a90c1(0xa94)]!==Sprite_SvEnemy){const _0x31c56d=this[_0x4a90c1(0x495)][_0x4a90c1(0x293)]['y'];_0x2153e8-=(_0x31c56d-0x1)*this[_0x4a90c1(0x578)];}return _0x2153e8;},Sprite_Battler[_0x33ee77(0x9a7)]['updateFlip']=function(){const _0x112433=_0x33ee77,_0x27dcdf=this[_0x112433(0x17c)]&&this['_battler'][_0x112433(0x94d)]();this[_0x112433(0x48a)]=(_0x27dcdf?-0x1:0x1)*Math[_0x112433(0x960)](this['scale']['x']);},Sprite_Battler[_0x33ee77(0x9a7)][_0x33ee77(0x8f5)]=function(_0x3c8162,_0x162d49,_0x2f0c70){const _0x284a18=_0x33ee77;if(!this[_0x284a18(0x3f3)]())return;if(this['_targetFloatHeight']===_0x3c8162)return;this['_targetFloatHeight']=_0x3c8162,this[_0x284a18(0x438)]=_0x162d49,this[_0x284a18(0x4cc)]=_0x162d49,this[_0x284a18(0x3d8)]=_0x2f0c70||_0x284a18(0x8d8);if(_0x162d49<=0x0)this[_0x284a18(0x3b6)]=_0x3c8162;},Sprite_Battler[_0x33ee77(0x9a7)]['updateFloat']=function(){const _0x490a56=_0x33ee77;if(this[_0x490a56(0x438)]<=0x0)return;const _0x2f2a67=this[_0x490a56(0x438)],_0xe64dcd=this['_floatWholeDuration'],_0x5c20da=this[_0x490a56(0x3d8)];Imported[_0x490a56(0x2e4)]?this['_floatHeight']=this[_0x490a56(0xa9b)](this[_0x490a56(0x3b6)],this[_0x490a56(0x660)],_0x2f2a67,_0xe64dcd,_0x5c20da):this[_0x490a56(0x3b6)]=(this[_0x490a56(0x3b6)]*(_0x2f2a67-0x1)+this['_targetFloatHeight'])/_0x2f2a67;this['_floatDuration']--;if(this[_0x490a56(0x438)]<=0x0)this[_0x490a56(0x5a9)]();},Sprite_Battler[_0x33ee77(0x9a7)][_0x33ee77(0x5a9)]=function(){const _0x3d82ea=_0x33ee77;this[_0x3d82ea(0x3b6)]=this[_0x3d82ea(0x660)];},Sprite_Battler['prototype']['isFloating']=function(){const _0x302cbc=_0x33ee77;return this[_0x302cbc(0x438)]>0x0;},Sprite_Battler['prototype'][_0x33ee77(0x5d2)]=function(_0x3e6009,_0x51f3e2){const _0x2889a4=_0x33ee77;if(!this[_0x2889a4(0x3f3)]())return;if(_0x51f3e2<=0x0)return;this[_0x2889a4(0x2a5)]=_0x3e6009,this[_0x2889a4(0x2e3)]=_0x51f3e2,this[_0x2889a4(0x8a7)]=_0x51f3e2;},Sprite_Battler[_0x33ee77(0x9a7)]['updateJump']=function(){const _0xde24e7=_0x33ee77;if(this[_0xde24e7(0x2e3)]<=0x0)return;const _0x27d966=this[_0xde24e7(0x8a7)]-this[_0xde24e7(0x2e3)],_0x3439ea=this[_0xde24e7(0x8a7)]/0x2,_0x57ba76=this['_jumpMaxHeight'],_0x12eba2=-_0x57ba76/Math[_0xde24e7(0xbed)](_0x3439ea,0x2);this['_jumpHeight']=_0x12eba2*Math[_0xde24e7(0xbed)](_0x27d966-_0x3439ea,0x2)+_0x57ba76,this[_0xde24e7(0x2e3)]--;if(this['_jumpDuration']<=0x0)return this['onJumpEnd']();},Sprite_Battler['prototype'][_0x33ee77(0xac4)]=function(){const _0x1fff71=_0x33ee77;this[_0x1fff71(0xb69)]=0x0;},Sprite_Battler[_0x33ee77(0x9a7)][_0x33ee77(0x470)]=function(){const _0x7cfd33=_0x33ee77;return this[_0x7cfd33(0x2e3)]>0x0;},Sprite_Battler[_0x33ee77(0x9a7)][_0x33ee77(0x306)]=function(_0x3e49a4,_0x22e5bf,_0x3ecb9f){const _0x3efe60=_0x33ee77;if(this[_0x3efe60(0x855)]===_0x3e49a4)return;this[_0x3efe60(0x855)]=_0x3e49a4,this[_0x3efe60(0x979)]=_0x22e5bf,this[_0x3efe60(0x758)]=_0x22e5bf,this['_opacityEasing']=_0x3ecb9f||_0x3efe60(0x8d8);if(_0x22e5bf<=0x0)this[_0x3efe60(0x7fd)]=_0x3e49a4;},Sprite_Battler['prototype'][_0x33ee77(0x86f)]=function(){const _0x3840ca=_0x33ee77;if(this[_0x3840ca(0xa94)][_0x3840ca(0xac3)]===_0x3840ca(0x1aa))return;if(this[_0x3840ca(0x979)]<=0x0)return;const _0x267439=this[_0x3840ca(0x979)],_0xbe123e=this[_0x3840ca(0x758)],_0x429323=this[_0x3840ca(0xc05)];Imported[_0x3840ca(0x2e4)]?this[_0x3840ca(0x7fd)]=this['applyEasing'](this[_0x3840ca(0x7fd)],this['_targetOpacity'],_0x267439,_0xbe123e,_0x429323):this['opacity']=(this['opacity']*(_0x267439-0x1)+this['_targetOpacity'])/_0x267439;this[_0x3840ca(0x979)]--;if(this[_0x3840ca(0x979)]<=0x0)this[_0x3840ca(0x26f)]();},Sprite_Battler[_0x33ee77(0x9a7)]['onOpacityEnd']=function(){const _0x5c9e07=_0x33ee77;this[_0x5c9e07(0x7fd)]=this[_0x5c9e07(0x855)];},Sprite_Battler[_0x33ee77(0x9a7)][_0x33ee77(0xb33)]=function(){const _0x4b9b0e=_0x33ee77;return this[_0x4b9b0e(0x979)]>0x0;},Sprite_Battler[_0x33ee77(0x9a7)][_0x33ee77(0x1a2)]=function(){const _0x184dcf=_0x33ee77;this[_0x184dcf(0x205)]['visible']=this[_0x184dcf(0x17c)]['hasSvBattler'](),this[_0x184dcf(0x93d)]();},Sprite_Battler[_0x33ee77(0x9a7)][_0x33ee77(0x93d)]=function(){const _0x5c671b=_0x33ee77;if(!this[_0x5c671b(0x205)])return;this['_shadowSprite']['y']=this[_0x5c671b(0x74a)]-this['y']-0x2;},Sprite_Battler['prototype']['updateShadowScale']=function(){const _0x4fb1c5=_0x33ee77;if(!this['_battler'])return;this['_shadowScaleX']=this[_0x4fb1c5(0x17c)][_0x4fb1c5(0x908)](),this[_0x4fb1c5(0x307)]=this[_0x4fb1c5(0x17c)][_0x4fb1c5(0x24f)]();},Game_BattlerBase[_0x33ee77(0x9a7)][_0x33ee77(0x908)]=function(){const _0x15b21f=_0x33ee77,_0x1fc970=this['isActor']()?this['actor']():this[_0x15b21f(0x246)]();if(_0x1fc970){const _0x4c9627=_0x1fc970[_0x15b21f(0x448)];if(_0x4c9627[_0x15b21f(0x7c1)](/<SIDEVIEW SHADOW (?:SCALE|SCALE X):[ ](\d+)([%％])>/i))return Number(RegExp['$1'])*0.01;else{if(_0x4c9627[_0x15b21f(0x7c1)](/<SIDEVIEW SHADOW (?:SCALE|SCALE X):[ ](.*)>/i))return Number(RegExp['$1'])||0x0;}}return 0x1;},Game_BattlerBase[_0x33ee77(0x9a7)][_0x33ee77(0x24f)]=function(){const _0x1b95ba=_0x33ee77,_0x56a9de=this[_0x1b95ba(0x6c3)]()?this[_0x1b95ba(0x2b0)]():this[_0x1b95ba(0x246)]();if(_0x56a9de){const _0xe16641=_0x56a9de[_0x1b95ba(0x448)];if(_0xe16641[_0x1b95ba(0x7c1)](/<SIDEVIEW SHADOW (?:SCALE|SCALE Y):[ ](\d+)([%％])>/i))return Number(RegExp['$1'])*0.01;else{if(_0xe16641['match'](/<SIDEVIEW SHADOW (?:SCALE|SCALE Y):[ ](.*)>/i))return Number(RegExp['$1'])||0x0;}}return 0x1;},Sprite_Battler[_0x33ee77(0x9a7)][_0x33ee77(0x629)]=function(){const _0x3f001f=_0x33ee77;if(this[_0x3f001f(0xa94)]===Sprite_SvEnemy)return;this[_0x3f001f(0x65d)](),this[_0x3f001f(0x413)]();},Sprite_Battler[_0x33ee77(0x9a7)][_0x33ee77(0x413)]=function(){const _0x3f340a=_0x33ee77,_0x103989=this[_0x3f340a(0x495)];_0x103989&&(_0x103989[_0x3f340a(0x293)]['x']=this['mainSpriteScaleX'](),_0x103989['scale']['y']=this[_0x3f340a(0x272)]());},Sprite_Battler[_0x33ee77(0x9a7)][_0x33ee77(0x5f2)]=function(){const _0x399383=_0x33ee77;let _0x166bfa=0x1;return _0x166bfa*=this['_flipScaleX'],_0x166bfa*=this[_0x399383(0x3f2)],_0x166bfa;},Sprite_Battler[_0x33ee77(0x9a7)][_0x33ee77(0x272)]=function(){return 0x1*this['_growY'];},Sprite_Battler['prototype']['mainSpriteWidth']=function(){const _0x2f0239=_0x33ee77;return this[_0x2f0239(0x3d9)]*this[_0x2f0239(0x5f2)]();},Sprite_Battler[_0x33ee77(0x9a7)][_0x33ee77(0xafe)]=function(){const _0x4f8502=_0x33ee77;return this[_0x4f8502(0x578)]*this[_0x4f8502(0x272)]();},Sprite_Battler[_0x33ee77(0x9a7)][_0x33ee77(0x5a7)]=function(_0x40e925,_0x51faa1,_0x1e57d9,_0x48edfe){const _0x305547=_0x33ee77;if(!this[_0x305547(0x3f3)]())return;if(!this[_0x305547(0x495)])return;if(this[_0x305547(0x8cc)]===_0x40e925&&this[_0x305547(0xbde)]===_0x51faa1)return;this[_0x305547(0x8cc)]=_0x40e925,this[_0x305547(0xbde)]=_0x51faa1,this[_0x305547(0x1b5)]=_0x1e57d9,this['_growWholeDuration']=_0x1e57d9,this[_0x305547(0xa69)]=_0x48edfe||_0x305547(0x8d8),_0x1e57d9<=0x0&&(this['_growX']=this[_0x305547(0x8cc)],this[_0x305547(0x7a0)]=this['_targetGrowY']);},Sprite_Battler['prototype'][_0x33ee77(0x65d)]=function(){const _0x3d51d2=_0x33ee77;if(this['_growDuration']<=0x0)return;if(!this[_0x3d51d2(0x495)])return;const _0x3c8bd3=this[_0x3d51d2(0x1b5)],_0x1eab5c=this[_0x3d51d2(0x233)],_0x130a35=this[_0x3d51d2(0xa69)];Imported[_0x3d51d2(0x2e4)]?(this[_0x3d51d2(0x3f2)]=this[_0x3d51d2(0xa9b)](this[_0x3d51d2(0x3f2)],this['_targetGrowX'],_0x3c8bd3,_0x1eab5c,_0x130a35),this['_growY']=this[_0x3d51d2(0xa9b)](this['_growY'],this[_0x3d51d2(0xbde)],_0x3c8bd3,_0x1eab5c,_0x130a35)):(this[_0x3d51d2(0x3f2)]=(this[_0x3d51d2(0x3f2)]*(_0x3c8bd3-0x1)+this['_targetGrowX'])/_0x3c8bd3,this['_growY']=(this[_0x3d51d2(0x7a0)]*(_0x3c8bd3-0x1)+this['_targetGrowY'])/_0x3c8bd3);this[_0x3d51d2(0x1b5)]--;if(this[_0x3d51d2(0x1b5)]<=0x0)this[_0x3d51d2(0xac7)]();},Sprite_Battler[_0x33ee77(0x9a7)]['onGrowEnd']=function(){const _0x3db525=_0x33ee77;this[_0x3db525(0x3f2)]=this[_0x3db525(0x8cc)],this[_0x3db525(0x7a0)]=this[_0x3db525(0xbde)];},Sprite_Battler[_0x33ee77(0x9a7)]['isGrowing']=function(){const _0xe603f9=_0x33ee77;return this[_0xe603f9(0x1b5)]>0x0;},Sprite_Battler[_0x33ee77(0x9a7)][_0x33ee77(0x5d1)]=function(_0x1381f1,_0x4f84ee,_0x53d60f,_0x4eb0b0){const _0x5ae5c7=_0x33ee77;if(!this['canMove']())return;if(!this[_0x5ae5c7(0x495)])return;if(this[_0x5ae5c7(0x93f)]===_0x1381f1&&this['_targetSkewY']===_0x4f84ee)return;this[_0x5ae5c7(0x93f)]=_0x1381f1,this[_0x5ae5c7(0x19d)]=_0x4f84ee,this[_0x5ae5c7(0xb35)]=_0x53d60f,this[_0x5ae5c7(0x8bb)]=_0x53d60f,this[_0x5ae5c7(0x17a)]=_0x4eb0b0||_0x5ae5c7(0x8d8),_0x53d60f<=0x0&&(this[_0x5ae5c7(0x495)][_0x5ae5c7(0x414)]['x']=this[_0x5ae5c7(0x93f)],this[_0x5ae5c7(0x495)][_0x5ae5c7(0x414)]['y']=this[_0x5ae5c7(0x19d)]);},Sprite_Battler['prototype'][_0x33ee77(0x829)]=function(){const _0x56d04e=_0x33ee77;if(this[_0x56d04e(0xb35)]<=0x0)return;if(!this[_0x56d04e(0x495)])return;const _0x2001f8=this[_0x56d04e(0xb35)],_0x2d1e93=this[_0x56d04e(0x8bb)],_0x4096e2=this[_0x56d04e(0x17a)],_0x5bcb9b=this[_0x56d04e(0x495)];Imported['VisuMZ_0_CoreEngine']?(_0x5bcb9b[_0x56d04e(0x414)]['x']=this['applyEasing'](_0x5bcb9b[_0x56d04e(0x414)]['x'],this[_0x56d04e(0x93f)],_0x2001f8,_0x2d1e93,_0x4096e2),_0x5bcb9b[_0x56d04e(0x414)]['y']=this[_0x56d04e(0xa9b)](_0x5bcb9b[_0x56d04e(0x414)]['y'],this['_targetSkewY'],_0x2001f8,_0x2d1e93,_0x4096e2)):(_0x5bcb9b[_0x56d04e(0x414)]['x']=(_0x5bcb9b[_0x56d04e(0x414)]['x']*(_0x2001f8-0x1)+this['_targetSkewX'])/_0x2001f8,_0x5bcb9b[_0x56d04e(0x414)]['y']=(_0x5bcb9b[_0x56d04e(0x414)]['y']*(_0x2001f8-0x1)+this[_0x56d04e(0x19d)])/_0x2001f8);this[_0x56d04e(0xb35)]--;if(this['_skewDuration']<=0x0)this['onSkewEnd']();},Sprite_Battler[_0x33ee77(0x9a7)][_0x33ee77(0x5ed)]=function(){const _0x51492d=_0x33ee77;this[_0x51492d(0x495)]['skew']['x']=this[_0x51492d(0x93f)],this[_0x51492d(0x495)][_0x51492d(0x414)]['y']=this['_targetSkewY'];},Sprite_Battler[_0x33ee77(0x9a7)][_0x33ee77(0x82f)]=function(){const _0x5dae5e=_0x33ee77;return this[_0x5dae5e(0xb35)]>0x0;},Sprite_Battler[_0x33ee77(0x9a7)][_0x33ee77(0xadd)]=function(_0x532620,_0x77622b,_0x6fc4ad,_0x662feb){const _0x32f82e=_0x33ee77;if(!this['canMove']())return;if(!this[_0x32f82e(0x495)])return;if(this['_targetAngle']===_0x532620)return;this[_0x32f82e(0x441)]=_0x532620,this[_0x32f82e(0x761)]=_0x77622b,this['_angleWholeDuration']=_0x77622b,this[_0x32f82e(0x53e)]=_0x6fc4ad||_0x32f82e(0x8d8),this[_0x32f82e(0x573)]=_0x662feb,this['_angleRevertOnFinish']===undefined&&(this[_0x32f82e(0x573)]=!![]),_0x77622b<=0x0&&(this[_0x32f82e(0x5e0)]=_0x532620,this[_0x32f82e(0x573)]&&(this[_0x32f82e(0x441)]=0x0,this[_0x32f82e(0x5e0)]=0x0));},Sprite_Battler[_0x33ee77(0x9a7)][_0x33ee77(0x7c7)]=function(){const _0x57ca89=_0x33ee77;this['updateAngleCalculations'](),this[_0x57ca89(0xb9d)]();},Sprite_Battler[_0x33ee77(0x9a7)]['updateAngleCalculations']=function(){const _0x115ec4=_0x33ee77;if(this['_angleDuration']<=0x0)return;const _0x1716a1=this['_angleDuration'],_0x207f0e=this[_0x115ec4(0x60b)],_0x30e497=this[_0x115ec4(0x53e)];Imported[_0x115ec4(0x2e4)]?this[_0x115ec4(0x5e0)]=this[_0x115ec4(0xa9b)](this[_0x115ec4(0x5e0)],this[_0x115ec4(0x441)],_0x1716a1,_0x207f0e,_0x30e497):this[_0x115ec4(0x5e0)]=(this[_0x115ec4(0x5e0)]*(_0x1716a1-0x1)+this[_0x115ec4(0x441)])/_0x1716a1;this['_angleDuration']--;if(this[_0x115ec4(0x761)]<=0x0)this[_0x115ec4(0xbb3)]();},Sprite_Battler[_0x33ee77(0x9a7)][_0x33ee77(0xbb3)]=function(){const _0x1d4888=_0x33ee77;this[_0x1d4888(0x5e0)]=this['_targetAngle'],this[_0x1d4888(0x573)]&&(this[_0x1d4888(0x441)]=0x0,this[_0x1d4888(0x5e0)]=0x0);},Sprite_Battler['prototype'][_0x33ee77(0xb81)]=function(){return this['_angleDuration']>0x0;},Sprite_Battler[_0x33ee77(0x9a7)][_0x33ee77(0xb9d)]=function(){const _0x5c693d=_0x33ee77;if(!this[_0x5c693d(0x495)])return;const _0x460703=this['_currentAngle'],_0x2cb8de=this[_0x5c693d(0x293)]['x'],_0x1295a1=this['_battler'][_0x5c693d(0x6c3)]()?-0x1:0x1;this[_0x5c693d(0x495)][_0x5c693d(0x416)]=_0x460703*_0x2cb8de*_0x1295a1;const _0x7f7f5c=this['_distortionSprite'][_0x5c693d(0x293)]['y'];this['_distortionSprite']['y']=this[_0x5c693d(0x578)]*-0.5*(0x2-_0x7f7f5c),this[_0x5c693d(0x495)]['y']=Math[_0x5c693d(0x399)](this[_0x5c693d(0x495)]['y']);const _0x2b7f59=[this['_mainSprite'],this[_0x5c693d(0x57e)],this[_0x5c693d(0x5df)]];for(const _0x2c135f of _0x2b7f59){if(!_0x2c135f)continue;_0x2c135f['y']=this[_0x5c693d(0x578)]*0.5;}this[_0x5c693d(0x205)]&&(this[_0x5c693d(0x7fb)]=this['_shadowScaleX']??0x1,this['_shadowScaleY']=this['_shadowScaleY']??0x1,this['_shadowSprite'][_0x5c693d(0x293)]['x']=this[_0x5c693d(0x495)][_0x5c693d(0x293)]['x']*this[_0x5c693d(0x7fb)],this['_shadowSprite']['scale']['y']=this[_0x5c693d(0x495)]['scale']['y']*this['_shadowScaleY']);},VisuMZ['BattleCore']['Sprite_Actor_createStateSprite']=Sprite_Actor[_0x33ee77(0x9a7)][_0x33ee77(0x876)],Sprite_Actor[_0x33ee77(0x9a7)][_0x33ee77(0x876)]=function(){const _0x215383=_0x33ee77;VisuMZ['BattleCore']['Sprite_Actor_createStateSprite'][_0x215383(0x88f)](this),VisuMZ['BattleCore'][_0x215383(0x12b)][_0x215383(0x5d6)][_0x215383(0x368)]&&this[_0x215383(0x12f)]();},VisuMZ[_0x33ee77(0x993)][_0x33ee77(0x3f5)]=Sprite_Enemy[_0x33ee77(0x9a7)][_0x33ee77(0x2a6)],Sprite_Enemy['prototype'][_0x33ee77(0x2a6)]=function(){const _0x1769a4=_0x33ee77;VisuMZ[_0x1769a4(0x993)][_0x1769a4(0x12b)]['HpGauge']['ShowEnemyGauge']&&this[_0x1769a4(0x12f)](),VisuMZ['BattleCore'][_0x1769a4(0x3f5)][_0x1769a4(0x88f)](this);},Sprite_Battler['prototype'][_0x33ee77(0x12f)]=function(){const _0x4c31ba=_0x33ee77;if(!ConfigManager[_0x4c31ba(0xafd)])return;if(this[_0x4c31ba(0xa94)]===Sprite_SvEnemy)return;const _0x896556=VisuMZ[_0x4c31ba(0x993)]['Settings'][_0x4c31ba(0x5d6)],_0x32f705=new Sprite_HpGauge();_0x32f705[_0x4c31ba(0xbbb)]['x']=_0x896556['AnchorX'],_0x32f705['anchor']['y']=_0x896556['AnchorY'],_0x32f705[_0x4c31ba(0x293)]['x']=_0x32f705[_0x4c31ba(0x293)]['y']=_0x896556[_0x4c31ba(0x2c7)],this[_0x4c31ba(0x26d)]=_0x32f705,this['addChild'](this['_hpGaugeSprite']),Spriteset_Battle[_0x4c31ba(0xba9)]&&BattleManager[_0x4c31ba(0x408)](this['_hpGaugeSprite']);},VisuMZ['BattleCore'][_0x33ee77(0x40f)]=Sprite_Battler[_0x33ee77(0x9a7)]['setBattler'],Sprite_Battler[_0x33ee77(0x9a7)][_0x33ee77(0x95b)]=function(_0x73edf0){const _0x5bb266=_0x33ee77,_0x38b8d4=this[_0x5bb266(0x17c)];VisuMZ[_0x5bb266(0x993)]['Sprite_Battler_setBattler'][_0x5bb266(0x88f)](this,_0x73edf0),this[_0x5bb266(0x599)](_0x73edf0);if(_0x38b8d4!==_0x73edf0)this[_0x5bb266(0x7d8)]();},Sprite_Battler[_0x33ee77(0x9a7)]['setupHpGaugeSprite']=function(_0xb21cfe){const _0x3555e5=_0x33ee77;if(!_0xb21cfe)return;if(!this[_0x3555e5(0x26d)])return;if(_0xb21cfe[_0x3555e5(0x6c3)]()){}else{if(_0xb21cfe['isEnemy']()){if(this[_0x3555e5(0xa94)]===Sprite_SvEnemy&&!_0xb21cfe['hasSvBattler']())return;}}this[_0x3555e5(0x26d)][_0x3555e5(0x888)](_0xb21cfe,'hp');},Sprite_Battler[_0x33ee77(0x9a7)][_0x33ee77(0x3df)]=function(){const _0x57a040=_0x33ee77;return this['_battler']&&this[_0x57a040(0x17c)][_0x57a040(0x3df)]();},Sprite_Battler[_0x33ee77(0x9a7)][_0x33ee77(0xa3b)]=function(){const _0x39a51a=_0x33ee77,_0x2f241a=this[_0x39a51a(0xab3)]['bitmap'];if(!_0x2f241a)return;const _0x57a01e=_0x2f241a[_0x39a51a(0x3d9)];let _0x4d5436=_0x2f241a[_0x39a51a(0x578)];if(this[_0x39a51a(0x17c)][_0x39a51a(0x385)]()){if(this['_frame'])_0x4d5436=Math[_0x39a51a(0x657)](0x0,this[_0x39a51a(0x9b4)][_0x39a51a(0x578)]-0x4);}this[_0x39a51a(0xab3)][_0x39a51a(0x56f)](0x0,0x0,_0x57a01e,_0x4d5436),this[_0x39a51a(0x56f)](0x0,0x0,_0x57a01e,_0x4d5436);},Sprite_Battler['prototype'][_0x33ee77(0xb07)]=function(){const _0xece722=_0x33ee77;if(!this['_battler'])return;if(!this[_0xece722(0x26d)])return;const _0xc7fabd=VisuMZ[_0xece722(0x993)][_0xece722(0x12b)][_0xece722(0x5d6)],_0xfe973d=this['_hpGaugeSprite'];_0xfe973d['visible']=this[_0xece722(0x984)]();const _0xd6ba7d=_0xc7fabd[_0xece722(0x680)],_0x32ab05=_0xc7fabd[_0xece722(0x995)];_0xfe973d['x']=_0xd6ba7d,_0xfe973d['x']+=this[_0xece722(0x17c)]['battleUIOffsetX'](),_0xfe973d['y']=-this['height']+_0x32ab05,_0xfe973d['y']+=this[_0xece722(0x17c)][_0xece722(0xabb)](),Spriteset_Battle[_0xece722(0xba9)]&&SceneManager[_0xece722(0x473)][_0xece722(0x850)]&&(_0xfe973d['x']+=this['x'],_0xfe973d['y']+=this['y']);},Sprite_Battler[_0x33ee77(0x9a7)]['isVisualHpGaugeDisplayed']=function(){const _0x5f353d=_0x33ee77;if(!this['_battler'])return![];if(this[_0x5f353d(0x17c)][_0x5f353d(0x6c3)]())return!![];if(this[_0x5f353d(0x17c)][_0x5f353d(0xa72)]())return![];if(this['opacity']<=0x0)return![];const _0x5e82cb=this[_0x5f353d(0x17c)][_0x5f353d(0x246)]()[_0x5f353d(0x448)];if(_0x5e82cb[_0x5f353d(0x7c1)](/<SHOW HP GAUGE>/i))return!![];if(_0x5e82cb[_0x5f353d(0x7c1)](/<HIDE HP GAUGE>/i))return![];const _0x69d209=VisuMZ['BattleCore'][_0x5f353d(0x12b)][_0x5f353d(0x5d6)];if(_0x69d209[_0x5f353d(0x4db)]){if(_0x69d209[_0x5f353d(0x937)]&&BattleManager[_0x5f353d(0x26a)]())return!![];if(this[_0x5f353d(0x17c)][_0x5f353d(0x932)])return![];return this[_0x5f353d(0x17c)][_0x5f353d(0x92a)]();}return!![];},VisuMZ[_0x33ee77(0x993)][_0x33ee77(0x760)]=Sprite_Battler[_0x33ee77(0x9a7)][_0x33ee77(0x14e)],Sprite_Battler[_0x33ee77(0x9a7)][_0x33ee77(0x14e)]=function(){const _0x12c5a9=_0x33ee77;if(!this[_0x12c5a9(0x17c)])return![];if(this[_0x12c5a9(0x6f9)]>0x0)return!![];return VisuMZ[_0x12c5a9(0x993)][_0x12c5a9(0x760)]['call'](this);},VisuMZ[_0x33ee77(0x993)][_0x33ee77(0x533)]=Sprite_Battler['prototype'][_0x33ee77(0xa1e)],Sprite_Battler[_0x33ee77(0x9a7)][_0x33ee77(0xa1e)]=function(_0x2af20f,_0x65f5a4,_0x496041){const _0x129ccc=_0x33ee77;this['canMove']()&&VisuMZ[_0x129ccc(0x993)]['Sprite_Battler_startMove'][_0x129ccc(0x88f)](this,_0x2af20f,_0x65f5a4,_0x496041);},Sprite_Battler[_0x33ee77(0x9a7)][_0x33ee77(0x3f3)]=function(){const _0x514cca=_0x33ee77;if(this[_0x514cca(0x17c)]&&this[_0x514cca(0x17c)][_0x514cca(0x385)]())return![];if(this[_0x514cca(0x17c)]&&!this[_0x514cca(0x17c)][_0x514cca(0x57a)]())return![];return $gameSystem[_0x514cca(0x7a6)]();},Sprite_Battler[_0x33ee77(0x9a7)]['stepForward']=function(){},Sprite_Battler['prototype']['stepBack']=function(){const _0x38ed2e=_0x33ee77;this[_0x38ed2e(0xa1e)](0x0,0x0,0xc);},Sprite_Battler[_0x33ee77(0x9a7)]['retreat']=function(){},Sprite_Battler[_0x33ee77(0x9a7)][_0x33ee77(0x396)]=function(){const _0x305bf8=_0x33ee77,_0xbea561=VisuMZ[_0x305bf8(0x993)][_0x305bf8(0x12b)][_0x305bf8(0x46f)],_0x234e53=this[_0x305bf8(0x17c)]&&this[_0x305bf8(0x17c)]['isActor']()?0x1:-0x1,_0x27f46f=this['_baseX']-this['_homeX']+_0x234e53*_0xbea561['FlinchDistanceX'],_0x164809=this[_0x305bf8(0x74a)]-this[_0x305bf8(0xab7)]+_0x234e53*_0xbea561[_0x305bf8(0x655)],_0x16db54=_0xbea561[_0x305bf8(0xb24)];this[_0x305bf8(0xa1e)](_0x27f46f,_0x164809,_0x16db54);},Sprite_Battler['prototype']['startShakeFlinch']=function(_0x1818d4,_0x574980){const _0x246caa=_0x33ee77,_0x435500=VisuMZ[_0x246caa(0x993)]['Settings']['Actor'];this[_0x246caa(0x2d2)]=Math[_0x246caa(0x399)]((_0x435500['ShakeFlinchDuration']??0x18)*_0x574980),this[_0x246caa(0x597)]=Math[_0x246caa(0x657)](this[_0x246caa(0x597)],_0x1818d4);},Sprite_Battler[_0x33ee77(0x9a7)]['updateShakeFlinch']=function(){const _0x18b767=_0x33ee77,_0x34a113=VisuMZ[_0x18b767(0x993)][_0x18b767(0x12b)]['Actor'];if(!(_0x34a113[_0x18b767(0x8e3)]??![]))return;if(this['_shakeFlinchDuration']>0x0){const _0x50e167=this[_0x18b767(0x2d2)];this[_0x18b767(0x597)]=this[_0x18b767(0x597)]*(_0x50e167-0x1)/_0x50e167,this[_0x18b767(0x2d2)]--,this[_0x18b767(0x2d2)]<=0x0&&(this[_0x18b767(0x597)]=0x0);}this[_0x18b767(0x597)]>0x0?(this['_mainSprite']['x']=Math[_0x18b767(0x6bb)](this[_0x18b767(0x597)])*(Math[_0x18b767(0x3b9)]()<0.5?-0x1:0x1),this['_baseY']!==this['y']&&(this[_0x18b767(0xab3)]['y']=this[_0x18b767(0x578)]*0.5,this[_0x18b767(0xab3)]['y']+=Math[_0x18b767(0x6bb)](this['_shakeFlinchPower'])*(Math[_0x18b767(0x3b9)]()<0.5?-0x1:0x1))):(this['_mainSprite']['x']=0x0,this['_mainSprite']['y']=this['height']*0.5);},VisuMZ[_0x33ee77(0x993)][_0x33ee77(0x80e)]=Sprite_Actor[_0x33ee77(0x9a7)][_0x33ee77(0xb4c)],Sprite_Actor[_0x33ee77(0x9a7)][_0x33ee77(0xb4c)]=function(){const _0x5d05eb=_0x33ee77;VisuMZ[_0x5d05eb(0x993)][_0x5d05eb(0x80e)]['call'](this),this[_0x5d05eb(0x297)]();},Sprite_Actor['prototype']['mainSprite']=function(){const _0x46b100=_0x33ee77;return this[_0x46b100(0x495)]||this[_0x46b100(0xab3)]||this;},VisuMZ[_0x33ee77(0x993)][_0x33ee77(0x1c3)]=Sprite_Actor[_0x33ee77(0x9a7)][_0x33ee77(0x7bc)],Sprite_Actor[_0x33ee77(0x9a7)][_0x33ee77(0x7bc)]=function(){},Sprite_Actor['prototype'][_0x33ee77(0x691)]=function(_0x3547fe){const _0x1b96b1=_0x33ee77;if(SceneManager[_0x1b96b1(0x4b6)]())return;if(!_0x3547fe)return;if(!_0x3547fe[_0x1b96b1(0x3f3)]())return;VisuMZ[_0x1b96b1(0x993)][_0x1b96b1(0x1c3)][_0x1b96b1(0x88f)](this);},VisuMZ[_0x33ee77(0x993)][_0x33ee77(0x309)]=Sprite_Actor[_0x33ee77(0x9a7)][_0x33ee77(0x40a)],Sprite_Actor[_0x33ee77(0x9a7)][_0x33ee77(0x40a)]=function(_0x407714){const _0xbe6af3=_0x33ee77;VisuMZ[_0xbe6af3(0x993)][_0xbe6af3(0x12b)][_0xbe6af3(0x46f)]['HomePosJS']?VisuMZ[_0xbe6af3(0x993)][_0xbe6af3(0x12b)][_0xbe6af3(0x46f)][_0xbe6af3(0xb50)][_0xbe6af3(0x88f)](this,_0x407714):VisuMZ[_0xbe6af3(0x993)]['Sprite_Actor_setActorHome'][_0xbe6af3(0x88f)](this,_0x407714);},VisuMZ[_0x33ee77(0x993)][_0x33ee77(0x997)]=Sprite_Actor[_0x33ee77(0x9a7)][_0x33ee77(0x95b)],Sprite_Actor[_0x33ee77(0x9a7)][_0x33ee77(0x95b)]=function(_0x17b5f){const _0x46a73c=_0x33ee77;VisuMZ[_0x46a73c(0x993)][_0x46a73c(0x997)][_0x46a73c(0x88f)](this,_0x17b5f),this['setBattlerBattleCore'](_0x17b5f);},Sprite_Actor[_0x33ee77(0x9a7)][_0x33ee77(0x4f1)]=function(_0x416616){const _0x42e73e=_0x33ee77;if(!_0x416616)return;if(!this[_0x42e73e(0xab3)])return;this[_0x42e73e(0xab3)][_0x42e73e(0xbbb)]['x']=this['_actor'][_0x42e73e(0x931)](),this[_0x42e73e(0xab3)]['anchor']['y']=this[_0x42e73e(0x261)][_0x42e73e(0x851)](),this[_0x42e73e(0x57c)]();},VisuMZ[_0x33ee77(0x993)][_0x33ee77(0x8f0)]=Sprite_Actor[_0x33ee77(0x9a7)][_0x33ee77(0x1b4)],Sprite_Actor['prototype']['update']=function(){const _0x4902a3=_0x33ee77;VisuMZ[_0x4902a3(0x993)]['Sprite_Actor_update'][_0x4902a3(0x88f)](this),this['_actor']&&(this['updateStateSprite'](),this[_0x4902a3(0x94c)]());},VisuMZ[_0x33ee77(0x993)]['Sprite_Actor_updateBitmap']=Sprite_Actor[_0x33ee77(0x9a7)]['updateBitmap'],Sprite_Actor['prototype'][_0x33ee77(0x82e)]=function(){const _0x4c7eea=_0x33ee77;VisuMZ['BattleCore'][_0x4c7eea(0x6db)]['call'](this),this[_0x4c7eea(0xab3)]&&this[_0x4c7eea(0xab3)][_0x4c7eea(0x490)]&&this[_0x4c7eea(0x17c)]&&(this[_0x4c7eea(0xab3)]['bitmap']['smooth']!==this[_0x4c7eea(0x17c)][_0x4c7eea(0x7b3)]()&&(this[_0x4c7eea(0xab3)]['bitmap']['smooth']=this[_0x4c7eea(0x17c)][_0x4c7eea(0x7b3)]()));},VisuMZ[_0x33ee77(0x993)]['Sprite_Actor_updateShadow']=Sprite_Actor[_0x33ee77(0x9a7)][_0x33ee77(0x1a2)],Sprite_Actor['prototype'][_0x33ee77(0x1a2)]=function(){const _0x13f9f6=_0x33ee77;VisuMZ[_0x13f9f6(0x993)]['Sprite_Actor_updateShadow'][_0x13f9f6(0x88f)](this),this[_0x13f9f6(0x545)]();},Sprite_Actor[_0x33ee77(0x9a7)]['updateShadowBattleCore']=function(){const _0x2f1602=_0x33ee77;if(!this[_0x2f1602(0xab3)])return;if(!this[_0x2f1602(0x205)])return;this['updateShadowVisibility'](),this[_0x2f1602(0x93d)]();},Sprite_Actor['prototype'][_0x33ee77(0xbd2)]=function(){const _0x5ea096=_0x33ee77;{this[_0x5ea096(0x5f6)][_0x5ea096(0x293)]['x']=0x1/(this['scale']['x']||0.001),this[_0x5ea096(0x5f6)][_0x5ea096(0x293)]['y']=0x1/(this[_0x5ea096(0x293)]['y']||0.001);}{this[_0x5ea096(0x5f6)]['x']=0x0,this[_0x5ea096(0x5f6)]['y']=-this[_0x5ea096(0x578)]-0x20+0x60;const _0x2d819a=VisuMZ[_0x5ea096(0x993)][_0x5ea096(0x12b)][_0x5ea096(0x46f)];this[_0x5ea096(0x5f6)]['x']+=_0x2d819a['StateOverlayOffsetX']??0x0,this['_stateSprite']['y']+=_0x2d819a[_0x5ea096(0x523)]??0x0;}},Sprite_Actor[_0x33ee77(0x9a7)][_0x33ee77(0x94c)]=function(){const _0x1025d1=_0x33ee77;if(!$gameSystem[_0x1025d1(0x7a6)]()&&this['constructor']===Sprite_Actor){const _0x5d43bb=Scene_Battle[_0x1025d1(0x9a7)][_0x1025d1(0x7a9)]();[_0x1025d1(0x331),'list',_0x1025d1(0x9f2),'border']['includes'](_0x5d43bb)&&(this[_0x1025d1(0x7fd)]=0x0);}},Sprite_Actor[_0x33ee77(0x9a7)]['refreshMotion']=function(){const _0x2028b3=_0x33ee77,_0x291330=this[_0x2028b3(0x261)];if(_0x291330){if(_0x291330['_performDamageMotion'])return;const _0x43095a=_0x291330[_0x2028b3(0x717)]();if(_0x291330[_0x2028b3(0x9bd)]()||_0x291330[_0x2028b3(0x921)]())this[_0x2028b3(0x537)](_0x2028b3(0xb09));else{if(_0x43095a===0x3)this[_0x2028b3(0x537)](_0x2028b3(0x47e));else{if(_0x43095a===0x2)this[_0x2028b3(0x537)](_0x2028b3(0xa1d));else{if(this[_0x2028b3(0x1bc)])this[_0x2028b3(0x537)](_0x2028b3(0xb2c));else{if(_0x291330[_0x2028b3(0x457)]())this[_0x2028b3(0x537)]('wait');else{if(_0x291330[_0x2028b3(0xc0f)]())this[_0x2028b3(0x537)](_0x2028b3(0xc07));else{if(_0x291330[_0x2028b3(0x14f)]()||_0x291330[_0x2028b3(0x7b9)]())this[_0x2028b3(0x537)](_0x2028b3(0x462));else{if(_0x43095a===0x1)this[_0x2028b3(0x537)](_0x2028b3(0x6d0));else{if(_0x291330[_0x2028b3(0xba5)]())this[_0x2028b3(0x537)](_0x2028b3(0x1e3));else{if(_0x291330['isUndecided']())this[_0x2028b3(0x537)](_0x2028b3(0xb09));else _0x291330[_0x2028b3(0x628)]()?this['startMotion'](_0x2028b3(0xc10)):this[_0x2028b3(0x537)](_0x2028b3(0xb09));}}}}}}}}}}},Sprite_Actor[_0x33ee77(0x9a7)]['retreat']=function(){const _0x545664=_0x33ee77,_0xeb75df=0xa,_0x58a827=0x12c*_0xeb75df,_0x5613c6=0x1e*_0xeb75df;this[_0x545664(0xa1e)](_0x58a827,0x0,_0x5613c6);},Sprite_Actor[_0x33ee77(0x9a7)][_0x33ee77(0x393)]=function(){const _0x4f7072=_0x33ee77;Sprite_Battler[_0x4f7072(0x9a7)]['onMoveEnd'][_0x4f7072(0x88f)](this);},Sprite_Actor[_0x33ee77(0x9a7)]['motionSpeed']=function(){const _0x5119a8=_0x33ee77;return Sprite_Battler[_0x5119a8(0x9d4)];},Sprite_Weapon[_0x33ee77(0x9a7)][_0x33ee77(0xa5e)]=function(){return Sprite_Battler['_motionSpeed'];},Sprite_Actor[_0x33ee77(0x9a7)][_0x33ee77(0x911)]=function(){},Sprite_Actor[_0x33ee77(0x9a7)][_0x33ee77(0x3cc)]=function(){},Sprite_Actor[_0x33ee77(0x9a7)][_0x33ee77(0x9f3)]=function(){const _0x1d1ec6=_0x33ee77;if(this[_0x1d1ec6(0xc2c)]&&++this['_motionCount']>=this[_0x1d1ec6(0x6b8)]()){if(this[_0x1d1ec6(0xc2c)][_0x1d1ec6(0xaf1)])this[_0x1d1ec6(0xb0e)]=(this[_0x1d1ec6(0xb0e)]+0x1)%0x4;else{if(this[_0x1d1ec6(0xb0e)]<0x2)this[_0x1d1ec6(0xb0e)]++;else{const _0x6c3514=this[_0x1d1ec6(0x261)];if(_0x6c3514)_0x6c3514[_0x1d1ec6(0x13f)]=undefined;this[_0x1d1ec6(0xa8f)]();}}this[_0x1d1ec6(0x4fb)]=0x0;}},Sprite_Actor[_0x33ee77(0x9a7)][_0x33ee77(0xad6)]=function(_0x2f6b92){const _0x5848f1=_0x33ee77;if(this[_0x5848f1(0x17c)]&&this['_battler'][_0x5848f1(0x385)]()){this[_0x5848f1(0xc2c)]=Sprite_Actor['MOTIONS']['dead'];return;}const _0x2f005c=Sprite_Actor[_0x5848f1(0x46c)][_0x2f6b92];this[_0x5848f1(0xc2c)]=_0x2f005c,this[_0x5848f1(0x4fb)]=0x0,this[_0x5848f1(0xb0e)]=0x0;},Sprite_Actor['prototype'][_0x33ee77(0x3ab)]=function(_0x36bd67){const _0x78c030=_0x33ee77;if(this[_0x78c030(0x3df)]())return;this[_0x78c030(0x4eb)](),this['_weaponSprite'][_0x78c030(0x888)](_0x36bd67),this[_0x78c030(0x261)]['clearWeaponAnimation']();},Sprite_Actor[_0x33ee77(0x9a7)][_0x33ee77(0x4eb)]=function(){const _0x4ab304=_0x33ee77;let _0x36fd43=-0x10,_0x116156=this[_0x4ab304(0x578)]*0.5;const _0x58b5c8=/<SIDEVIEW WEAPON OFFSET:[ ]([\+\-]\d+),[ ]([\+\-]\d+)>/i,_0x24c9b1=this[_0x4ab304(0x17c)][_0x4ab304(0x335)]()[_0x4ab304(0x6f2)](_0x4ef234=>_0x4ef234&&_0x4ef234[_0x4ab304(0x448)][_0x4ab304(0x7c1)](_0x58b5c8)?Number(RegExp['$1']):0x0),_0x30daef=this['_battler'][_0x4ab304(0x335)]()[_0x4ab304(0x6f2)](_0x386fbf=>_0x386fbf&&_0x386fbf['note']['match'](_0x58b5c8)?Number(RegExp['$2']):0x0);_0x36fd43=_0x24c9b1[_0x4ab304(0x424)]((_0x309e69,_0x5ef37b)=>_0x309e69+_0x5ef37b,_0x36fd43),_0x116156=_0x30daef[_0x4ab304(0x424)]((_0x2a6ef0,_0x17f3fe)=>_0x2a6ef0+_0x17f3fe,_0x116156),this[_0x4ab304(0x9ab)]['x']=_0x36fd43,this['_weaponSprite']['y']=_0x116156,this[_0x4ab304(0x9ab)][_0x4ab304(0x1b4)]();},Sprite_Weapon[_0x33ee77(0x9a7)][_0x33ee77(0x888)]=function(_0x26373c){const _0x3b71a2=_0x33ee77;this[_0x3b71a2(0x999)]=_0x26373c,this[_0x3b71a2(0x65b)]=-0x1,this[_0x3b71a2(0xb0e)]=0x0,this[_0x3b71a2(0x936)](),this[_0x3b71a2(0xa7f)]();},Sprite_Actor[_0x33ee77(0x9a7)][_0x33ee77(0x465)]=function(){},Sprite_Actor['prototype']['stepForward']=function(){const _0x1b9718=_0x33ee77,_0xee2465=VisuMZ[_0x1b9718(0x993)][_0x1b9718(0x12b)][_0x1b9718(0x3f4)],_0x22ae9d=_0xee2465[_0x1b9718(0xa06)],_0x3fc8c0=_0xee2465[_0x1b9718(0x62f)],_0x30dfa1=_0xee2465[_0x1b9718(0x11f)];this[_0x1b9718(0xa1e)](-_0x22ae9d,-_0x3fc8c0,_0x30dfa1);},VisuMZ['BattleCore']['Sprite_Actor_updateFrame']=Sprite_Actor['prototype']['updateFrame'],Sprite_Actor[_0x33ee77(0x9a7)][_0x33ee77(0xa7f)]=function(){const _0x3b3ea8=_0x33ee77;this[_0x3b3ea8(0x3df)]()?this[_0x3b3ea8(0xa3b)]():(this['applyFreezeMotionFrames'](),VisuMZ[_0x3b3ea8(0x993)][_0x3b3ea8(0x1d2)][_0x3b3ea8(0x88f)](this));},Sprite_Actor[_0x33ee77(0x9a7)][_0x33ee77(0x7a4)]=function(){const _0x23fc24=_0x33ee77;if(this[_0x23fc24(0x17c)]&&this['_battler'][_0x23fc24(0x4f2)]){const _0x2ccad2=this[_0x23fc24(0x17c)][_0x23fc24(0x4f2)];this['_motion']=Sprite_Actor['MOTIONS'][_0x2ccad2[_0x23fc24(0x35a)]],this[_0x23fc24(0xb0e)]=_0x2ccad2[_0x23fc24(0x37c)];const _0xc51672=this[_0x23fc24(0x9ab)];_0xc51672[_0x23fc24(0x7f7)](_0x2ccad2[_0x23fc24(0x889)],_0x2ccad2[_0x23fc24(0x37c)]),this[_0x23fc24(0x4eb)]();}},Sprite_Weapon[_0x33ee77(0x9a7)]['freezeFrame']=function(_0x1353b7,_0x188271){const _0x45a011=_0x33ee77;this['_weaponImageId']=_0x1353b7,this[_0x45a011(0x65b)]=-Infinity,this[_0x45a011(0xb0e)]=_0x188271,this[_0x45a011(0x936)](),this[_0x45a011(0xa7f)]();},Sprite_Enemy[_0x33ee77(0x9a7)]['initMembers']=function(){const _0x4368d1=_0x33ee77;Sprite_Battler['prototype'][_0x4368d1(0xb4c)][_0x4368d1(0x88f)](this),this['_enemy']=null,this[_0x4368d1(0x5d0)]=![],this['_battlerName']='',this[_0x4368d1(0x30d)]=0x0,this['_effectType']=null,this[_0x4368d1(0x278)]=0x0,this[_0x4368d1(0x48c)]=0x0,this['createMainSprite'](),this[_0x4368d1(0x2a6)]();},VisuMZ[_0x33ee77(0x993)]['Sprite_Enemy_update']=Sprite_Enemy[_0x33ee77(0x9a7)][_0x33ee77(0x1b4)],Sprite_Enemy[_0x33ee77(0x9a7)][_0x33ee77(0x1b4)]=function(){const _0x19c78d=_0x33ee77;VisuMZ[_0x19c78d(0x993)][_0x19c78d(0x793)][_0x19c78d(0x88f)](this),this[_0x19c78d(0x57c)](),this[_0x19c78d(0x466)]();},Sprite_Enemy['prototype'][_0x33ee77(0x62d)]=function(){const _0x5dad85=_0x33ee77;this[_0x5dad85(0xab3)]=new Sprite(),this[_0x5dad85(0xab3)][_0x5dad85(0xbbb)]['x']=0.5,this[_0x5dad85(0xab3)][_0x5dad85(0xbbb)]['y']=0x1,this[_0x5dad85(0xb83)](this[_0x5dad85(0xab3)]),this[_0x5dad85(0x297)]();},Sprite_Enemy['prototype'][_0x33ee77(0x6ab)]=function(){const _0x5f3b72=_0x33ee77;return this[_0x5f3b72(0x495)]||this['_mainSprite']||this;},Sprite_Enemy[_0x33ee77(0x9a7)][_0x33ee77(0x936)]=function(_0xb196f0){const _0x18a323=_0x33ee77;this[_0x18a323(0x490)]=new Bitmap(0x1,0x1);if(this[_0x18a323(0x175)]()){const _0xa68947=this['_enemy'][_0x18a323(0x949)]();this[_0x18a323(0x490)]=new Bitmap(_0xa68947[_0x18a323(0x3d9)],_0xa68947[_0x18a323(0x578)]),this[_0x18a323(0xab3)][_0x18a323(0x490)]=new Bitmap(0x1,0x1);}else{if($gameSystem[_0x18a323(0x7a6)]()){const _0x57e12d=ImageManager[_0x18a323(0x8d9)](_0xb196f0);_0x57e12d['addLoadListener'](this[_0x18a323(0xb3d)][_0x18a323(0x925)](this,_0x57e12d));}else{const _0x535e80=ImageManager[_0x18a323(0x4e1)](_0xb196f0);_0x535e80[_0x18a323(0x410)](this[_0x18a323(0xb3d)][_0x18a323(0x925)](this,_0x535e80));}}},Sprite_Enemy[_0x33ee77(0x9a7)]['onStaticEnemyBitmapLoad']=function(_0x4337bc){const _0x4713f3=_0x33ee77;this['_mainSprite'][_0x4713f3(0x490)]=_0x4337bc,this[_0x4713f3(0x490)]=new Bitmap(_0x4337bc['width'],_0x4337bc[_0x4713f3(0x578)]);},VisuMZ['BattleCore']['Sprite_Enemy_setHue']=Sprite_Enemy[_0x33ee77(0x9a7)][_0x33ee77(0x315)],Sprite_Enemy[_0x33ee77(0x9a7)]['setHue']=function(_0x244ce8){const _0x29cd0e=_0x33ee77;this[_0x29cd0e(0xab3)]&&this['_mainSprite']['setHue'](_0x244ce8);},VisuMZ[_0x33ee77(0x993)][_0x33ee77(0x434)]=Sprite_Enemy['prototype']['initVisibility'],Sprite_Enemy['prototype']['initVisibility']=function(){const _0x123d16=_0x33ee77;this[_0x123d16(0x2d0)]()?VisuMZ[_0x123d16(0x993)]['Sprite_Enemy_initVisibility'][_0x123d16(0x88f)](this):(this['_appeared']=!this[_0x123d16(0x3a0)][_0x123d16(0xa72)](),!this['_appeared']&&(this[_0x123d16(0x7fd)]=0x0));},VisuMZ['BattleCore'][_0x33ee77(0x754)]=Sprite_Enemy[_0x33ee77(0x9a7)][_0x33ee77(0xb8b)],Sprite_Enemy['prototype'][_0x33ee77(0xb8b)]=function(){const _0x4cfe75=_0x33ee77;if(this['allowCollapse']())VisuMZ[_0x4cfe75(0x993)][_0x4cfe75(0x754)][_0x4cfe75(0x88f)](this);},Sprite_Enemy[_0x33ee77(0x9a7)][_0x33ee77(0xa7f)]=function(){const _0x24c759=_0x33ee77;Sprite_Battler[_0x24c759(0x9a7)][_0x24c759(0xa7f)]['call'](this);const _0x1b6dbc=this['mainSprite']()||this;if(!_0x1b6dbc)return;!_0x1b6dbc['bitmap']&&(_0x1b6dbc['bitmap']=new Bitmap(this[_0x24c759(0x3d9)]||0x1,this['height']||0x1));if(this['_effectType']===_0x24c759(0xa0a))this[_0x24c759(0xab3)][_0x24c759(0x56f)](0x0,0x0,this[_0x24c759(0xab3)][_0x24c759(0x3d9)]||0x1,this['_effectDuration']);else{let _0x16b721=0x1;if(_0x1b6dbc&&_0x1b6dbc[_0x24c759(0x490)])_0x16b721=_0x1b6dbc['bitmap'][_0x24c759(0x3d9)];let _0x4682ae=0x1;if(this[_0x24c759(0x490)])_0x4682ae=this[_0x24c759(0x490)]['height'];_0x1b6dbc[_0x24c759(0x56f)](0x0,0x0,_0x16b721,_0x4682ae);}},VisuMZ[_0x33ee77(0x993)]['Sprite_Enemy_updateBossCollapse']=Sprite_Enemy[_0x33ee77(0x9a7)][_0x33ee77(0x864)],Sprite_Enemy[_0x33ee77(0x9a7)][_0x33ee77(0x864)]=function(){const _0x49c54d=_0x33ee77;if(this[_0x49c54d(0x2d0)]())VisuMZ['BattleCore'][_0x49c54d(0xae2)][_0x49c54d(0x88f)](this);},Sprite_Enemy[_0x33ee77(0x9a7)][_0x33ee77(0x14e)]=function(){const _0x51a146=_0x33ee77;return Sprite_Battler[_0x51a146(0x9a7)][_0x51a146(0x14e)][_0x51a146(0x88f)](this);},VisuMZ[_0x33ee77(0x993)][_0x33ee77(0xb0d)]=Sprite_Enemy[_0x33ee77(0x9a7)]['updateStateSprite'],Sprite_Enemy[_0x33ee77(0x9a7)][_0x33ee77(0xbd2)]=function(){const _0x33a76=_0x33ee77;VisuMZ['BattleCore'][_0x33a76(0xb0d)][_0x33a76(0x88f)](this),this['updateStateSpriteBattleCore']();},Sprite_Enemy[_0x33ee77(0x9a7)][_0x33ee77(0x9c7)]=function(){const _0x191762=_0x33ee77,_0x1f4332=VisuMZ[_0x191762(0x993)][_0x191762(0x12b)][_0x191762(0xc1d)];if(_0x1f4332[_0x191762(0x6fd)]&&!_0x1f4332[_0x191762(0x48b)]){this['_stateIconSprite'][_0x191762(0x7fd)]=0x0;return;}this['_stateIconSprite']['x']=0x0,this[_0x191762(0x5f9)]['x']+=this[_0x191762(0x17c)][_0x191762(0xa2e)]();let _0x2a6a4f=0x1;if(this[_0x191762(0x490)])_0x2a6a4f=this[_0x191762(0x490)]['height'];this[_0x191762(0x5f9)]['y']=-_0x2a6a4f-this[_0x191762(0x5f9)][_0x191762(0x578)]-0x4,this['_stateIconSprite']['y']+=this[_0x191762(0x17c)][_0x191762(0xabb)](),this[_0x191762(0x5f9)][_0x191762(0x293)]['x']=0x1/(this[_0x191762(0x293)]['x']||0.001),this['_stateIconSprite'][_0x191762(0x293)]['y']=0x1/(this['scale']['y']||0.001),this[_0x191762(0x175)]()&&(this[_0x191762(0x57e)][_0x191762(0x5f6)][_0x191762(0x293)]['x']=-0x1/(this[_0x191762(0x293)]['x']||0.001),this[_0x191762(0x57e)][_0x191762(0x5f6)][_0x191762(0x293)]['y']=0x1/(this[_0x191762(0x293)]['y']||0.001));},Sprite_Enemy['prototype']['updateNameTempVisibility']=function(){const _0x265e9d=_0x33ee77;this['_battler']&&this[_0x265e9d(0x17c)][_0x265e9d(0x466)]();},VisuMZ[_0x33ee77(0x993)][_0x33ee77(0x125)]=Sprite_Enemy[_0x33ee77(0x9a7)][_0x33ee77(0x95b)],Sprite_Enemy['prototype'][_0x33ee77(0x95b)]=function(_0x2b3c0d){const _0x3f217d=_0x33ee77;VisuMZ['BattleCore'][_0x3f217d(0x125)][_0x3f217d(0x88f)](this,_0x2b3c0d),this[_0x3f217d(0x7c9)](_0x2b3c0d);},Sprite_Enemy[_0x33ee77(0x9a7)][_0x33ee77(0x7c9)]=function(_0xcf5d0c){const _0x421b9f=_0x33ee77;!this[_0x421b9f(0x57e)]&&(this[_0x421b9f(0x57e)]=new Sprite_SvEnemy(_0xcf5d0c),this[_0x421b9f(0x297)]()),this[_0x421b9f(0x57e)]['setBattler'](_0xcf5d0c);},Sprite_Enemy[_0x33ee77(0x9a7)][_0x33ee77(0x175)]=function(){const _0x13c86b=_0x33ee77;return this[_0x13c86b(0x3a0)]&&this[_0x13c86b(0x3a0)][_0x13c86b(0x175)]();},Sprite_Enemy['prototype'][_0x33ee77(0x2d0)]=function(){const _0x3ff645=_0x33ee77;return this[_0x3ff645(0x175)]()?this[_0x3ff645(0x3a0)][_0x3ff645(0x2d0)]():!![];},Sprite_Enemy['prototype']['refreshMotion']=function(){const _0x49f365=_0x33ee77;this[_0x49f365(0x175)]()&&this['_svBattlerSprite'][_0x49f365(0xa8f)]();},Sprite_Enemy['prototype']['forceMotion']=function(_0x52dbcd){const _0x4fb005=_0x33ee77;if(this[_0x4fb005(0x175)]())this[_0x4fb005(0x57e)]['forceMotion'](_0x52dbcd);},Sprite_Enemy['prototype']['forceWeaponAnimation']=function(_0x12b07a){const _0x4f5e72=_0x33ee77;if(this[_0x4f5e72(0x175)]())this[_0x4f5e72(0x57e)]['forceWeaponAnimation'](_0x12b07a);},Sprite_Enemy['prototype'][_0x33ee77(0x340)]=function(){const _0x46c3ac=_0x33ee77,_0x317d0d=VisuMZ[_0x46c3ac(0x993)][_0x46c3ac(0x12b)]['ActionSequence'],_0x3f2d3b=_0x317d0d[_0x46c3ac(0xa06)],_0x5ceed5=_0x317d0d[_0x46c3ac(0x62f)],_0x2c6228=_0x317d0d[_0x46c3ac(0x11f)];this[_0x46c3ac(0xa1e)](_0x3f2d3b,_0x5ceed5,_0x2c6228);};function Sprite_SvEnemy(){this['initialize'](...arguments);}Sprite_SvEnemy[_0x33ee77(0x9a7)]=Object[_0x33ee77(0xa58)](Sprite_Actor[_0x33ee77(0x9a7)]),Sprite_SvEnemy[_0x33ee77(0x9a7)][_0x33ee77(0xa94)]=Sprite_SvEnemy,Sprite_SvEnemy['prototype'][_0x33ee77(0x54f)]=function(_0x115df1){const _0x94f8a2=_0x33ee77;Sprite_Actor[_0x94f8a2(0x9a7)][_0x94f8a2(0x54f)][_0x94f8a2(0x88f)](this,_0x115df1),this['scale']['x']=-0x1,this[_0x94f8a2(0x5f6)][_0x94f8a2(0x293)]['x']=-0x1;},Sprite_SvEnemy[_0x33ee77(0x9a7)][_0x33ee77(0x122)]=function(){},Sprite_SvEnemy[_0x33ee77(0x9a7)]['moveToStartPosition']=function(){},Sprite_SvEnemy[_0x33ee77(0x9a7)]['setActorHome']=function(_0x125610){},Sprite_SvEnemy[_0x33ee77(0x9a7)]['updateShadow']=function(){},Sprite_SvEnemy[_0x33ee77(0x9a7)]['updateShadowPosition']=function(){},Sprite_SvEnemy[_0x33ee77(0x9a7)][_0x33ee77(0xbd2)]=function(){const _0x3c71cd=_0x33ee77;this[_0x3c71cd(0x5f6)][_0x3c71cd(0xb1c)]=![];},Sprite_SvEnemy[_0x33ee77(0x9a7)][_0x33ee77(0x82e)]=function(){const _0x57aeab=_0x33ee77;Sprite_Battler['prototype'][_0x57aeab(0x82e)][_0x57aeab(0x88f)](this);const _0x769c73=this[_0x57aeab(0x261)][_0x57aeab(0x460)]();this[_0x57aeab(0x656)]!==_0x769c73&&(this[_0x57aeab(0x656)]=_0x769c73,this[_0x57aeab(0xab3)][_0x57aeab(0x490)]=ImageManager[_0x57aeab(0x8be)](_0x769c73)),this[_0x57aeab(0xab3)]&&this[_0x57aeab(0xab3)][_0x57aeab(0x490)]&&this[_0x57aeab(0x17c)]&&(this[_0x57aeab(0xab3)][_0x57aeab(0x490)][_0x57aeab(0x236)]!==this[_0x57aeab(0x17c)]['battlerSmoothImage']()&&(this['_mainSprite']['bitmap'][_0x57aeab(0x236)]=this[_0x57aeab(0x17c)][_0x57aeab(0x7b3)]()));},Sprite_SvEnemy[_0x33ee77(0x9a7)][_0x33ee77(0xb70)]=function(){},Sprite_SvEnemy[_0x33ee77(0x9a7)][_0x33ee77(0xa1e)]=function(_0x254e33,_0x4737ee,_0x4837a2){const _0x22f984=_0x33ee77;if(this[_0x22f984(0x693)])this['parent'][_0x22f984(0xa1e)](_0x254e33,_0x4737ee,_0x4837a2);},Sprite_SvEnemy[_0x33ee77(0x9a7)][_0x33ee77(0xa8f)]=function(){const _0x5a8b6b=_0x33ee77,_0x5c5d57=this[_0x5a8b6b(0x261)];if(_0x5c5d57){const _0x5b9ed7=_0x5c5d57['stateMotionIndex']();if(_0x5c5d57[_0x5a8b6b(0x9bd)]()||_0x5c5d57[_0x5a8b6b(0x921)]())this['startMotion'](_0x5a8b6b(0xb09));else{if(_0x5b9ed7===0x3)this[_0x5a8b6b(0x537)](_0x5a8b6b(0x47e));else{if(_0x5b9ed7===0x2)this[_0x5a8b6b(0x537)](_0x5a8b6b(0xa1d));else{if(_0x5c5d57[_0x5a8b6b(0xc0f)]())this[_0x5a8b6b(0x537)](_0x5a8b6b(0xc07));else{if(_0x5c5d57[_0x5a8b6b(0x14f)]()||_0x5c5d57[_0x5a8b6b(0x7b9)]())this[_0x5a8b6b(0x537)](_0x5a8b6b(0x462));else{if(_0x5b9ed7===0x1)this[_0x5a8b6b(0x537)](_0x5a8b6b(0x6d0));else{if(_0x5c5d57[_0x5a8b6b(0xba5)]())this[_0x5a8b6b(0x537)](_0x5a8b6b(0x1e3));else _0x5c5d57['isUndecided']()?this['startMotion'](_0x5c5d57['svBattlerData']()[_0x5a8b6b(0x75a)]||_0x5a8b6b(0xb09)):this[_0x5a8b6b(0x537)](_0x5c5d57[_0x5a8b6b(0x949)]()[_0x5a8b6b(0x75a)]||'walk');}}}}}}}},Sprite_SvEnemy[_0x33ee77(0x9a7)][_0x33ee77(0xa83)]=function(){const _0x1efaa5=_0x33ee77;return this[_0x1efaa5(0x693)]?this[_0x1efaa5(0x693)][_0x1efaa5(0xbb2)]===0x0&&this[_0x1efaa5(0x693)][_0x1efaa5(0x8b1)]===0x0:!![];},Sprite_SvEnemy[_0x33ee77(0x9a7)][_0x33ee77(0x843)]=function(){},VisuMZ[_0x33ee77(0x993)][_0x33ee77(0x9ee)]=Sprite_Animation[_0x33ee77(0x9a7)]['targetSpritePosition'],Sprite_Animation[_0x33ee77(0x9a7)][_0x33ee77(0x219)]=function(_0xd57dfc){const _0x352826=_0x33ee77;return _0xd57dfc[_0x352826(0x495)]?this[_0x352826(0x8d3)](_0xd57dfc):VisuMZ[_0x352826(0x993)][_0x352826(0x9ee)][_0x352826(0x88f)](this,_0xd57dfc);},Sprite_Animation['prototype'][_0x33ee77(0x8d3)]=function(_0x2b9a48){const _0x87023f=_0x33ee77;let _0x5da572=_0x2b9a48['x'],_0x3b2bc1=_0x2b9a48['y'],_0x2b0c09=_0x2b9a48[_0x87023f(0x578)],_0x3f1c7a=_0x2b9a48[_0x87023f(0x495)][_0x87023f(0x293)]['y'];_0x2b9a48['x']=_0x2b9a48[_0x87023f(0x1f7)]+_0x2b9a48[_0x87023f(0x48f)](),_0x2b9a48['y']=_0x2b9a48['_baseY']+_0x2b9a48[_0x87023f(0x204)](),_0x2b9a48[_0x87023f(0x578)]*=_0x3f1c7a;let _0x538e4f=VisuMZ[_0x87023f(0x993)][_0x87023f(0x9ee)]['call'](this,_0x2b9a48);return _0x2b9a48['x']=_0x5da572,_0x2b9a48['y']=_0x3b2bc1,_0x2b9a48[_0x87023f(0x578)]=_0x2b0c09,_0x538e4f;},Sprite_Animation[_0x33ee77(0x9a7)][_0x33ee77(0x16a)]=function(){const _0xa82c9f=_0x33ee77;if(this[_0xa82c9f(0xc23)])return![];return this[_0xa82c9f(0x492)]&&this[_0xa82c9f(0x492)][_0xa82c9f(0xac3)]&&this[_0xa82c9f(0x492)]['name']['match'](/<UNDER>/gi);},VisuMZ[_0x33ee77(0x993)]['Sprite_AnimationMV_updatePosition']=Sprite_AnimationMV[_0x33ee77(0x9a7)][_0x33ee77(0x23b)],Sprite_AnimationMV[_0x33ee77(0x9a7)]['updatePosition']=function(){const _0x2aae67=_0x33ee77;VisuMZ[_0x2aae67(0x993)][_0x2aae67(0x58e)][_0x2aae67(0x88f)](this);if(!SceneManager[_0x2aae67(0x5d9)]())return;if(this[_0x2aae67(0x492)][_0x2aae67(0x4ab)]===0x3)this['x']=Math[_0x2aae67(0x20e)](Graphics[_0x2aae67(0x71a)]/0x2),this['y']=Math['round'](Graphics[_0x2aae67(0x238)]/0x2);else{if(this[_0x2aae67(0x534)])return;}},Sprite_AnimationMV[_0x33ee77(0x9a7)][_0x33ee77(0x16a)]=function(){const _0x7f1f31=_0x33ee77;if(this[_0x7f1f31(0xc23)])return![];return this[_0x7f1f31(0x492)]&&this[_0x7f1f31(0x492)]['name']&&this[_0x7f1f31(0x492)]['name']['match'](/<UNDER>/gi);},Sprite_Damage['prototype']['setupBattleCore']=function(_0xa7d5ca){const _0x54fb04=_0x33ee77,_0x4a13cf=_0xa7d5ca[_0x54fb04(0x7fe)]()||_0xa7d5ca['result']();if(_0x4a13cf['missed']||_0x4a13cf[_0x54fb04(0xb2d)])this['_colorType']=0x0,this[_0x54fb04(0x3bc)]();else{if(_0x4a13cf[_0x54fb04(0x8f3)])this[_0x54fb04(0x98f)]=_0x4a13cf[_0x54fb04(0x3a5)]>=0x0?0x0:0x1,this['createDigits'](_0x4a13cf[_0x54fb04(0x3a5)]);else _0xa7d5ca[_0x54fb04(0x4ad)]()&&_0x4a13cf[_0x54fb04(0x182)]!==0x0&&(this['_colorType']=_0x4a13cf[_0x54fb04(0x182)]>=0x0?0x2:0x3,this['createDigits'](_0x4a13cf['mpDamage']));}_0x4a13cf['critical']&&this[_0x54fb04(0xabc)]();},Sprite_Damage[_0x33ee77(0x9a7)][_0x33ee77(0x888)]=function(_0x12bce3){},Sprite_Damage[_0x33ee77(0x9a7)][_0x33ee77(0x61f)]=function(_0x5bb0de){const _0x31efb5=_0x33ee77;let _0x3045a5=this[_0x31efb5(0x412)](_0x5bb0de);const _0x59cb04=this['fontSize'](),_0x3382d0=Math['floor'](_0x59cb04*0.75);for(let _0x4ec7f9=0x0;_0x4ec7f9<_0x3045a5[_0x31efb5(0x70c)];_0x4ec7f9++){const _0x1788f4=this[_0x31efb5(0x788)](_0x3382d0,_0x59cb04);_0x1788f4[_0x31efb5(0x490)][_0x31efb5(0x45a)](_0x3045a5[_0x4ec7f9],0x0,0x0,_0x3382d0,_0x59cb04,_0x31efb5(0x614)),_0x1788f4['x']=(_0x4ec7f9-(_0x3045a5[_0x31efb5(0x70c)]-0x1)/0x2)*_0x3382d0,_0x1788f4['dy']=-_0x4ec7f9;}},Sprite_Damage['prototype']['createString']=function(_0x1b7f8f){const _0x56ddf3=_0x33ee77;let _0x34bab2=Math[_0x56ddf3(0x960)](_0x1b7f8f)['toString']();this['useDigitGrouping']()&&(_0x34bab2=VisuMZ[_0x56ddf3(0x5d4)](_0x34bab2));const _0x53355f=VisuMZ[_0x56ddf3(0x993)][_0x56ddf3(0x12b)][_0x56ddf3(0x133)];let _0xf7b3e8='',_0xe6bde4='';switch(this[_0x56ddf3(0x98f)]){case 0x0:_0xf7b3e8=_0x53355f['hpDamageFmt']||_0x56ddf3(0xb46),_0xe6bde4=TextManager['hp'];if(_0x1b7f8f===0x0)_0xf7b3e8='%1';break;case 0x1:_0xf7b3e8=_0x53355f[_0x56ddf3(0x183)]||'+%1',_0xe6bde4=TextManager['hp'];break;case 0x2:_0xf7b3e8=_0x53355f[_0x56ddf3(0xaef)]||'-%1\x20MP',_0xe6bde4=TextManager['mp'];break;case 0x3:_0xf7b3e8=_0x53355f[_0x56ddf3(0x8e0)]||_0x56ddf3(0x9e9),_0xe6bde4=TextManager['mp'];break;}return _0xf7b3e8[_0x56ddf3(0x23d)](_0x34bab2,_0xe6bde4)[_0x56ddf3(0xaf2)]();},Sprite_Damage[_0x33ee77(0x9a7)][_0x33ee77(0x22a)]=function(){const _0xe0e603=_0x33ee77;return Imported[_0xe0e603(0x2e4)]?VisuMZ[_0xe0e603(0x36f)][_0xe0e603(0x12b)]['QoL']['DigitGroupingDamageSprites']:![];},Sprite_Damage[_0x33ee77(0x9a7)][_0x33ee77(0xabc)]=function(){const _0x38d3c5=_0x33ee77,_0x8d2610=VisuMZ[_0x38d3c5(0x993)][_0x38d3c5(0x12b)]['Damage'];_0x8d2610[_0x38d3c5(0x9a0)]=_0x8d2610[_0x38d3c5(0x9a0)]||[0x0,0x0,0x0,0x0],this[_0x38d3c5(0xb99)]=_0x8d2610[_0x38d3c5(0x9a0)][_0x38d3c5(0x9fd)](0x0),this[_0x38d3c5(0x731)]=_0x8d2610['CriticalDuration']||0x1;},Sprite_Damage[_0x33ee77(0x9a7)][_0x33ee77(0x160)]=function(_0x52c06c,_0x22dda6){const _0x57ff97=_0x33ee77;this[_0x57ff97(0xb99)]=_0x22dda6['flashColor']||[0x0,0x0,0x0,0x0],this[_0x57ff97(0xb99)]=JsonEx[_0x57ff97(0x266)](this[_0x57ff97(0xb99)]),this[_0x57ff97(0x731)]=_0x22dda6[_0x57ff97(0x5ff)]||0x0;const _0x32f9ed=this[_0x57ff97(0x898)](),_0x478d65=Math[_0x57ff97(0x816)](_0x32f9ed*0x1e),_0x293f58=this['createChildSprite'](_0x478d65,_0x32f9ed);_0x293f58[_0x57ff97(0x490)][_0x57ff97(0x6c7)]=ColorManager['getColor'](_0x22dda6[_0x57ff97(0x6c7)]),_0x293f58[_0x57ff97(0x490)][_0x57ff97(0x45a)](_0x52c06c,0x0,0x0,_0x478d65,_0x32f9ed,_0x57ff97(0x614)),_0x293f58['dy']=0x0;},Sprite_Damage['prototype']['setupIconTextPopup']=function(_0x1171d1,_0xfef422,_0x1e5cf5){const _0x97657d=_0x33ee77,_0xe1e48d=Math[_0x97657d(0x657)](this[_0x97657d(0x898)](),ImageManager['iconHeight']),_0xf08734=Math[_0x97657d(0x816)](_0xe1e48d*0x1e),_0x21a6d7=this[_0x97657d(0x788)](_0xf08734,_0xe1e48d),_0x447bca=ImageManager['iconWidth']/0x2,_0x2244d3=_0x21a6d7[_0x97657d(0x490)][_0x97657d(0x1fe)](_0xfef422+'\x20');_0x21a6d7[_0x97657d(0x490)][_0x97657d(0x6c7)]=ColorManager[_0x97657d(0x4fc)](_0x1e5cf5[_0x97657d(0x6c7)]),_0x21a6d7[_0x97657d(0x490)][_0x97657d(0x45a)](_0xfef422,_0x447bca,0x0,_0xf08734-_0x447bca,_0xe1e48d,'center');const _0x1d95f3=Math[_0x97657d(0x20e)]((_0xe1e48d-ImageManager['iconHeight'])/0x2),_0xd2e40e=_0xf08734/0x2-ImageManager[_0x97657d(0x95e)]-_0x2244d3/0x2+_0x447bca/0x2,_0x591f80=ImageManager[_0x97657d(0xa9d)](_0x97657d(0x77e)),_0x41f65c=ImageManager[_0x97657d(0x95e)],_0x3024ee=ImageManager['iconHeight'],_0x23a407=_0x1171d1%0x10*_0x41f65c,_0xcc1ece=Math[_0x97657d(0x816)](_0x1171d1/0x10)*_0x3024ee;_0x21a6d7[_0x97657d(0x490)][_0x97657d(0x2a9)](_0x591f80,_0x23a407,_0xcc1ece,_0x41f65c,_0x3024ee,_0xd2e40e,_0x1d95f3),this[_0x97657d(0xb99)]=_0x1e5cf5[_0x97657d(0x158)]||[0x0,0x0,0x0,0x0],this[_0x97657d(0xb99)]=JsonEx[_0x97657d(0x266)](this['_flashColor']),this[_0x97657d(0x731)]=_0x1e5cf5['flashDuration']||0x0,_0x21a6d7['dy']=0x0,_0x1e5cf5[_0x97657d(0x5e3)]&&(_0x21a6d7['x']+=_0x1e5cf5['offsetX']),_0x1e5cf5[_0x97657d(0x673)]&&(_0x21a6d7['dy']+=_0x1e5cf5[_0x97657d(0x673)]);},VisuMZ['BattleCore']['Sprite_Damage_createChildSprite']=Sprite_Damage['prototype'][_0x33ee77(0x788)],Sprite_Damage[_0x33ee77(0x9a7)]['createChildSprite']=function(_0x25b33f,_0x5817d4){const _0x242220=_0x33ee77;return _0x5817d4=Math[_0x242220(0x20e)](_0x5817d4*1.2),VisuMZ['BattleCore']['Sprite_Damage_createChildSprite'][_0x242220(0x88f)](this,_0x25b33f,_0x5817d4);},VisuMZ['BattleCore'][_0x33ee77(0xb54)]=Sprite_StateIcon[_0x33ee77(0x9a7)][_0x33ee77(0xa7f)],Sprite_StateIcon[_0x33ee77(0x9a7)]['updateFrame']=function(){const _0x4a8600=_0x33ee77;VisuMZ[_0x4a8600(0x993)][_0x4a8600(0xb54)][_0x4a8600(0x88f)](this),this[_0x4a8600(0x7fd)]=this[_0x4a8600(0x44b)]>0x0?0xff:0x0;},VisuMZ['BattleCore'][_0x33ee77(0x206)]=Sprite_Weapon[_0x33ee77(0x9a7)][_0x33ee77(0x936)],Sprite_Weapon[_0x33ee77(0x9a7)][_0x33ee77(0x936)]=function(){const _0x3b075d=_0x33ee77;VisuMZ[_0x3b075d(0x993)][_0x3b075d(0x206)][_0x3b075d(0x88f)](this),this['bitmap']&&(this[_0x3b075d(0x490)]['smooth']=VisuMZ['BattleCore']['Settings'][_0x3b075d(0x46f)][_0x3b075d(0x494)]);},VisuMZ[_0x33ee77(0x993)]['Sprite_Gauge_smoothness']=Sprite_Gauge[_0x33ee77(0x9a7)][_0x33ee77(0x3a4)],Sprite_Gauge[_0x33ee77(0x9a7)]['smoothness']=function(){const _0x430b42=_0x33ee77;return this['_statusType']!==_0x430b42(0x144)?VisuMZ[_0x430b42(0x993)]['Settings'][_0x430b42(0x5d6)]['AniDuration']??0x14:VisuMZ[_0x430b42(0x993)][_0x430b42(0x127)]['call'](this);};function Sprite_GaugeRate(){const _0x5c3068=_0x33ee77;this[_0x5c3068(0x54f)](...arguments);}Sprite_GaugeRate[_0x33ee77(0x9a7)]=Object[_0x33ee77(0xa58)](Sprite_Gauge['prototype']),Sprite_GaugeRate[_0x33ee77(0x9a7)][_0x33ee77(0xa94)]=Sprite_GaugeRate,Sprite_GaugeRate['prototype'][_0x33ee77(0x54f)]=function(){const _0x3373c5=_0x33ee77;Sprite_Gauge[_0x3373c5(0x9a7)]['initialize'][_0x3373c5(0x88f)](this),this[_0x3373c5(0x9d2)]=![];},Sprite_GaugeRate[_0x33ee77(0x9a7)]['updateTargetValue']=function(_0x3d0b2c,_0x3114c6){const _0x2986a2=_0x33ee77;this[_0x2986a2(0x9d2)]=!![],Sprite_Gauge[_0x2986a2(0x9a7)][_0x2986a2(0xb5d)][_0x2986a2(0x88f)](this,_0x3d0b2c,_0x3114c6),this['_updateTargetValue']=![];},Sprite_GaugeRate[_0x33ee77(0x9a7)][_0x33ee77(0x5f0)]=function(){const _0x36ed00=_0x33ee77;if(this[_0x36ed00(0x9d2)]){const _0x1082e4=Sprite_Gauge['prototype']['currentValue'][_0x36ed00(0x88f)](this),_0x213f0a=this[_0x36ed00(0x36a)]();if(_0x213f0a<=0x0)return'100%';return Math[_0x36ed00(0x816)](_0x1082e4/_0x213f0a*0x64)+'%';}else return Sprite_Gauge['prototype']['currentValue']['call'](this);},Sprite_GaugeRate[_0x33ee77(0x9a7)][_0x33ee77(0x6ef)]=function(){const _0x3c7b8a=_0x33ee77,_0x3ee964=Sprite_Gauge[_0x3c7b8a(0x9a7)]['currentValue'][_0x3c7b8a(0x88f)](this),_0x39e014=this[_0x3c7b8a(0x36a)]();if(_0x39e014<=0x0)return _0x3c7b8a(0xb98);return Math['floor'](_0x3ee964/_0x39e014*0x64)+'%';},Sprite_GaugeRate[_0x33ee77(0x9a7)]['gaugeRate']=function(){const _0x461d41=_0x33ee77;if(this['currentMaxValue']()<=0x0)return 0x1;return Sprite_Gauge['prototype'][_0x461d41(0xb9b)][_0x461d41(0x88f)](this);},Sprite_GaugeRate[_0x33ee77(0x9a7)]['valueColor']=function(){const _0x4b7ab6=_0x33ee77;if(this['currentMaxValue']()<=0x0)return ColorManager[_0x4b7ab6(0x3e3)]();return Sprite_Gauge[_0x4b7ab6(0x9a7)][_0x4b7ab6(0x49c)][_0x4b7ab6(0x88f)](this);},Sprite_GaugeRate[_0x33ee77(0x9a7)][_0x33ee77(0x601)]=function(){const _0x41f9f=_0x33ee77;this['_statusType']==='mp'&&this[_0x41f9f(0x36a)]()<=0x0&&($gameTemp[_0x41f9f(0xbe8)]=!![]),Sprite_Gauge[_0x41f9f(0x9a7)][_0x41f9f(0x601)][_0x41f9f(0x88f)](this),$gameTemp[_0x41f9f(0xbe8)]=undefined;},VisuMZ[_0x33ee77(0x993)]['ColorManager_mpColor']=ColorManager[_0x33ee77(0xae0)],ColorManager[_0x33ee77(0xae0)]=function(_0x3a7900){const _0x4eb0ce=_0x33ee77;if($gameTemp['redrawForGaugeRate'])return ColorManager[_0x4eb0ce(0x3e3)]();return VisuMZ['BattleCore']['ColorManager_mpColor'][_0x4eb0ce(0x88f)](this,_0x3a7900);};function Sprite_HpGauge(){const _0x49bad9=_0x33ee77;this[_0x49bad9(0x54f)](...arguments);}Sprite_HpGauge[_0x33ee77(0x9a7)]=Object['create'](Sprite_Gauge['prototype']),Sprite_HpGauge[_0x33ee77(0x9a7)][_0x33ee77(0xa94)]=Sprite_HpGauge,Sprite_HpGauge[_0x33ee77(0x9a7)]['initialize']=function(){const _0x4dc928=_0x33ee77;Sprite_Gauge['prototype'][_0x4dc928(0x54f)][_0x4dc928(0x88f)](this);},Sprite_HpGauge[_0x33ee77(0x9a7)][_0x33ee77(0x64c)]=function(){return 0x0;},Sprite_HpGauge[_0x33ee77(0x9a7)]['redraw']=function(){const _0x5ced2a=_0x33ee77;this['bitmap'][_0x5ced2a(0x7aa)]();const _0x47fb07=this[_0x5ced2a(0x5f0)]();!isNaN(_0x47fb07)&&this[_0x5ced2a(0xb2b)]();};function Sprite_EnemyName(){const _0x1dfdc2=_0x33ee77;this[_0x1dfdc2(0x54f)](...arguments);}Sprite_EnemyName[_0x33ee77(0x9a7)]=Object[_0x33ee77(0xa58)](Sprite_Name[_0x33ee77(0x9a7)]),Sprite_EnemyName[_0x33ee77(0x9a7)]['constructor']=Sprite_EnemyName,Sprite_EnemyName['prototype'][_0x33ee77(0x54f)]=function(){const _0x59ce95=_0x33ee77;Sprite_Name[_0x59ce95(0x9a7)][_0x59ce95(0x54f)][_0x59ce95(0x88f)](this),this['createAttachedSprites']();},Sprite_EnemyName['prototype']['initMembers']=function(){const _0x963fad=_0x33ee77;Sprite_Name[_0x963fad(0x9a7)][_0x963fad(0xb4c)]['call'](this),this['opacity']=0x0,this['_linkedSprite']=null,this[_0x963fad(0xbbb)]['x']=0.5,this['anchor']['y']=0x0;},Sprite_EnemyName['prototype']['createAttachedSprites']=function(){const _0x5ab000=_0x33ee77;VisuMZ[_0x5ab000(0x993)][_0x5ab000(0x12b)][_0x5ab000(0xc1d)][_0x5ab000(0x6fd)]&&(this[_0x5ab000(0x5f9)]=new Sprite_StateIcon(),this[_0x5ab000(0xb83)](this[_0x5ab000(0x5f9)]));},Sprite_EnemyName[_0x33ee77(0x9a7)][_0x33ee77(0x8eb)]=function(){return Graphics['boxWidth'];},Sprite_EnemyName[_0x33ee77(0x9a7)][_0x33ee77(0x992)]=function(){const _0x1e88a7=_0x33ee77;return this[_0x1e88a7(0x4cf)]=this['_lineHeight']||Window_Base['prototype'][_0x1e88a7(0x6dd)]()||0x24,this[_0x1e88a7(0x4cf)]*0x4;},Sprite_EnemyName[_0x33ee77(0x9a7)][_0x33ee77(0x898)]=function(){const _0x1a8be2=_0x33ee77;return VisuMZ[_0x1a8be2(0x993)][_0x1a8be2(0x12b)][_0x1a8be2(0xc1d)][_0x1a8be2(0x4df)]||$gameSystem[_0x1a8be2(0xaa5)]();},Sprite_EnemyName[_0x33ee77(0x9a7)]['linkSprite']=function(_0x316c49){const _0x5d810c=_0x33ee77;this[_0x5d810c(0xa01)]=_0x316c49;},Sprite_EnemyName[_0x33ee77(0x9a7)][_0x33ee77(0x1b4)]=function(){const _0x3d9e14=_0x33ee77;Sprite_Name[_0x3d9e14(0x9a7)][_0x3d9e14(0x1b4)][_0x3d9e14(0x88f)](this),this[_0x3d9e14(0x152)](),this[_0x3d9e14(0x23b)](),this[_0x3d9e14(0x798)](),this[_0x3d9e14(0x86f)]();},Sprite_EnemyName[_0x33ee77(0x9a7)][_0x33ee77(0x601)]=function(){const _0x3753f8=_0x33ee77;this['_cacheTextWidth']=undefined;const _0x51e96b=this[_0x3753f8(0xac3)](),_0x5414b1=this[_0x3753f8(0x8eb)](),_0x5898d5=Window_Base[_0x3753f8(0x9a7)][_0x3753f8(0x6dd)]();this['setupFont'](),this[_0x3753f8(0x490)][_0x3753f8(0x7aa)](),this[_0x3753f8(0x490)]['drawText'](_0x51e96b,0x0,0x0,_0x5414b1,_0x5898d5,_0x3753f8(0x614));},Sprite_EnemyName[_0x33ee77(0x9a7)][_0x33ee77(0x152)]=function(){const _0x1cb4fb=_0x33ee77;if(!this[_0x1cb4fb(0xa01)])return;this[_0x1cb4fb(0x17c)]!==this[_0x1cb4fb(0xa01)][_0x1cb4fb(0x17c)]&&this[_0x1cb4fb(0x888)](this[_0x1cb4fb(0xa01)]['_battler']);},Sprite_EnemyName['prototype'][_0x33ee77(0x23b)]=function(){const _0x228c0c=_0x33ee77;if(!this[_0x228c0c(0xa01)])return;this['_lineHeight']=this[_0x228c0c(0x4cf)]||Window_Base[_0x228c0c(0x9a7)][_0x228c0c(0x6dd)](),this['x']=Math[_0x228c0c(0x20e)](this[_0x228c0c(0xa01)]['_baseX']),this['y']=Math['round'](this[_0x228c0c(0xa01)][_0x228c0c(0x74a)]-this[_0x228c0c(0x4cf)]*0.5);const _0x196adb=VisuMZ[_0x228c0c(0x993)][_0x228c0c(0x12b)]['Enemy'];this['x']+=Math[_0x228c0c(0x20e)](_0x196adb[_0x228c0c(0x73a)]||0x0),this['y']+=Math['round'](_0x196adb['NameOffsetY']||0x0);},Sprite_EnemyName['prototype'][_0x33ee77(0x798)]=function(){const _0x51ce29=_0x33ee77;this[_0x51ce29(0x49d)]();},Sprite_EnemyName[_0x33ee77(0x9a7)][_0x33ee77(0x49d)]=function(){const _0x463702=_0x33ee77;if(!this[_0x463702(0x5f9)])return;this[_0x463702(0x17c)]!==this[_0x463702(0x5f9)]['_battler']&&this['_stateIconSprite']['setup'](this['_battler']);const _0x280cb3=this['textWidth']();this[_0x463702(0x4cf)]=this[_0x463702(0x4cf)]||Window_Base[_0x463702(0x9a7)][_0x463702(0x6dd)](),this['_stateIconSprite']['x']=Math[_0x463702(0x20e)]((_0x280cb3+ImageManager[_0x463702(0x95e)])/0x2)+0x8,this[_0x463702(0x5f9)]['y']=this[_0x463702(0x4cf)]/0x2;const _0x4a2155=VisuMZ[_0x463702(0x993)]['Settings'][_0x463702(0xc1d)];this['_stateIconSprite']['x']+=_0x4a2155[_0x463702(0x5a8)]||0x0,this[_0x463702(0x5f9)]['y']+=_0x4a2155[_0x463702(0x40d)]||0x0;},Sprite_EnemyName[_0x33ee77(0x9a7)][_0x33ee77(0x86f)]=function(){const _0x102714=_0x33ee77,_0x22211f=this['visibilityState']();if(_0x22211f&&this[_0x102714(0x7fd)]<0xff)this[_0x102714(0x7fd)]+=0x10;else!_0x22211f&&this[_0x102714(0x7fd)]>0x0&&(this[_0x102714(0x7fd)]-=0x10);},Sprite_EnemyName['prototype'][_0x33ee77(0x668)]=function(){const _0x54ff66=_0x33ee77;if(this[_0x54ff66(0x809)]())return![];else{if(!this[_0x54ff66(0x17c)])return![];else{if(!this[_0x54ff66(0x17c)][_0x54ff66(0xbdf)]())return![];else{if(this[_0x54ff66(0x3fb)]())return!![];else{if(this[_0x54ff66(0x17c)][_0x54ff66(0x385)]())return![];else{if(this[_0x54ff66(0x860)]())return!![];else{if(this[_0x54ff66(0x623)]())return!![];else{if(this[_0x54ff66(0x748)]())return!![];else{if(this['isIncludedInEnemyWindow']())return!![];else{if(this[_0x54ff66(0x7fd)]>0x0)return![];}}}}}}}}}},Sprite_EnemyName['prototype'][_0x33ee77(0x3fb)]=function(){const _0x588c97=_0x33ee77;return this[_0x588c97(0x17c)]&&this[_0x588c97(0x17c)]['isNameTemporarilyVisible']();},Sprite_EnemyName['prototype'][_0x33ee77(0x809)]=function(){const _0x385f9a=_0x33ee77;return VisuMZ[_0x385f9a(0x993)]['Settings'][_0x385f9a(0xc1d)][_0x385f9a(0x82a)];},Sprite_EnemyName[_0x33ee77(0x9a7)][_0x33ee77(0x860)]=function(){const _0x43bbb2=_0x33ee77;if(!VisuMZ[_0x43bbb2(0x993)]['Settings'][_0x43bbb2(0xc1d)][_0x43bbb2(0x89c)])return![];if(BattleManager[_0x43bbb2(0x9bd)]()&&!BattleManager[_0x43bbb2(0x6f3)]())return![];return this[_0x43bbb2(0x17c)]&&BattleManager[_0x43bbb2(0x7c0)]&&BattleManager[_0x43bbb2(0x3ae)]['includes'](this[_0x43bbb2(0x17c)]);},Sprite_EnemyName[_0x33ee77(0x9a7)]['compatibilityVisible']=function(){return![];},Sprite_EnemyName[_0x33ee77(0x9a7)][_0x33ee77(0x748)]=function(){const _0x2960b8=_0x33ee77;return VisuMZ[_0x2960b8(0x993)]['Settings'][_0x2960b8(0xc1d)]['NameAlwaysVisible'];},Sprite_EnemyName[_0x33ee77(0x9a7)][_0x33ee77(0xaa7)]=function(){const _0xfba2a5=_0x33ee77;return VisuMZ[_0xfba2a5(0x993)][_0xfba2a5(0x12b)][_0xfba2a5(0xc1d)][_0xfba2a5(0x73d)]?this['_battler'][_0xfba2a5(0x7a2)]():SceneManager['_scene'][_0xfba2a5(0x7d5)]&&SceneManager[_0xfba2a5(0x473)][_0xfba2a5(0x7d5)][_0xfba2a5(0x5c8)]&&SceneManager[_0xfba2a5(0x473)]['_enemyWindow'][_0xfba2a5(0x72d)][_0xfba2a5(0x741)](this[_0xfba2a5(0x17c)]);},Sprite_EnemyName[_0x33ee77(0x9a7)][_0x33ee77(0x4be)]=function(){const _0x1e2457=_0x33ee77;if(!this[_0x1e2457(0x17c)])return 0x0;if(this[_0x1e2457(0xb94)])return this['_cacheTextWidth'];let _0xf7043f=this[_0x1e2457(0xac3)]();return this[_0x1e2457(0x2e7)](),Imported[_0x1e2457(0x3ba)]&&TextManager[_0x1e2457(0x1bb)]&&(_0xf7043f=TextManager[_0x1e2457(0x1bb)](_0xf7043f)),this['_cacheTextWidth']=this['bitmap'][_0x1e2457(0x1fe)](_0xf7043f)||0x1,this['_cacheTextWidth'];},VisuMZ[_0x33ee77(0x993)][_0x33ee77(0x764)]=Sprite_Battleback[_0x33ee77(0x9a7)][_0x33ee77(0x7d9)],Sprite_Battleback['prototype'][_0x33ee77(0x7d9)]=function(){const _0x4ad2fb=_0x33ee77,_0x41c93f=VisuMZ[_0x4ad2fb(0x993)]['Settings'][_0x4ad2fb(0xbeb)];if(!_0x41c93f)return VisuMZ[_0x4ad2fb(0x993)]['Sprite_Battleback_adjustPosition'][_0x4ad2fb(0x88f)](this);const _0x12be5f=String(_0x41c93f['DefaultStyle'])||'MZ';switch(_0x12be5f){case'MZ':VisuMZ[_0x4ad2fb(0x993)]['Sprite_Battleback_adjustPosition'][_0x4ad2fb(0x88f)](this);break;case _0x4ad2fb(0x397):this[_0x4ad2fb(0x2a0)]();break;case _0x4ad2fb(0xa47):this[_0x4ad2fb(0x727)]();break;case _0x4ad2fb(0x750):this['adjustPosition_ScaleDown']();break;case'ScaleUp':this['adjustPosition_ScaleUp']();break;}},Sprite_Battleback['prototype'][_0x33ee77(0x2a0)]=function(){const _0x9f70c6=_0x33ee77,_0x3d7639=VisuMZ[_0x9f70c6(0x993)][_0x9f70c6(0x12b)][_0x9f70c6(0xbeb)];if(_0x3d7639&&_0x3d7639[_0x9f70c6(0xa0c)])return _0x3d7639[_0x9f70c6(0xa0c)][_0x9f70c6(0x88f)](this);this[_0x9f70c6(0x3d9)]=Graphics['width'],this[_0x9f70c6(0x578)]=Graphics[_0x9f70c6(0x578)];const _0x5850e6=0x1;this[_0x9f70c6(0x293)]['x']=_0x5850e6,this[_0x9f70c6(0x293)]['y']=_0x5850e6,this['x']=0x0,this['y']=0x0;},Sprite_Battleback[_0x33ee77(0x9a7)][_0x33ee77(0x727)]=function(){const _0x313ab6=_0x33ee77,_0x4f2cbc=VisuMZ[_0x313ab6(0x993)]['Settings']['BattlebackScale'];if(_0x4f2cbc&&_0x4f2cbc[_0x313ab6(0x177)])return _0x4f2cbc[_0x313ab6(0x177)][_0x313ab6(0x88f)](this);this[_0x313ab6(0x3d9)]=Graphics[_0x313ab6(0x3d9)],this['height']=Graphics['height'];const _0x31f832=this[_0x313ab6(0x3d9)]/this[_0x313ab6(0x490)][_0x313ab6(0x3d9)],_0x4f91f8=this[_0x313ab6(0x578)]/this[_0x313ab6(0x490)][_0x313ab6(0x578)],_0x17ed77=Math['max'](_0x31f832,_0x4f91f8);this[_0x313ab6(0x293)]['x']=_0x17ed77,this[_0x313ab6(0x293)]['y']=_0x17ed77,this['x']=(Graphics[_0x313ab6(0x3d9)]-this[_0x313ab6(0x3d9)])/0x2,this['y']=Graphics[_0x313ab6(0x578)]-this['height'];},Sprite_Battleback['prototype'][_0x33ee77(0x2f2)]=function(){const _0x4f52aa=_0x33ee77,_0xf27271=VisuMZ[_0x4f52aa(0x993)][_0x4f52aa(0x12b)][_0x4f52aa(0xbeb)];if(_0xf27271&&_0xf27271[_0x4f52aa(0x14b)])return _0xf27271[_0x4f52aa(0x14b)][_0x4f52aa(0x88f)](this);this['width']=Graphics['width'],this[_0x4f52aa(0x578)]=Graphics['height'];const _0x2d6958=Math[_0x4f52aa(0x480)](0x1,this[_0x4f52aa(0x3d9)]/this[_0x4f52aa(0x490)][_0x4f52aa(0x3d9)]),_0x1bf5a8=Math[_0x4f52aa(0x480)](0x1,this['height']/this[_0x4f52aa(0x490)]['height']),_0x259cf7=Math[_0x4f52aa(0x657)](_0x2d6958,_0x1bf5a8);this[_0x4f52aa(0x293)]['x']=_0x259cf7,this[_0x4f52aa(0x293)]['y']=_0x259cf7,this['x']=(Graphics[_0x4f52aa(0x3d9)]-this[_0x4f52aa(0x3d9)])/0x2,this['y']=Graphics[_0x4f52aa(0x578)]-this[_0x4f52aa(0x578)];},Sprite_Battleback[_0x33ee77(0x9a7)][_0x33ee77(0x4d7)]=function(){const _0x3b2512=_0x33ee77,_0x59253a=VisuMZ[_0x3b2512(0x993)][_0x3b2512(0x12b)][_0x3b2512(0xbeb)];if(_0x59253a&&_0x59253a['jsScaleUp'])return _0x59253a[_0x3b2512(0x4ee)][_0x3b2512(0x88f)](this);this['width']=Graphics[_0x3b2512(0x3d9)],this[_0x3b2512(0x578)]=Graphics[_0x3b2512(0x578)];const _0xba7c70=Math[_0x3b2512(0x657)](0x1,this['width']/this[_0x3b2512(0x490)][_0x3b2512(0x3d9)]),_0x34c8ab=Math[_0x3b2512(0x657)](0x1,this[_0x3b2512(0x578)]/this[_0x3b2512(0x490)][_0x3b2512(0x578)]),_0x103cd6=Math[_0x3b2512(0x657)](_0xba7c70,_0x34c8ab);this['scale']['x']=_0x103cd6,this[_0x3b2512(0x293)]['y']=_0x103cd6,this['x']=(Graphics[_0x3b2512(0x3d9)]-this[_0x3b2512(0x3d9)])/0x2,this['y']=Graphics['height']-this[_0x3b2512(0x578)];},Spriteset_Battle['ANTI_TINT_UI']=VisuMZ[_0x33ee77(0x993)][_0x33ee77(0x12b)][_0x33ee77(0x826)]['AntiTintUiElements']??!![],Spriteset_Battle[_0x33ee77(0x9a7)]['isFlipped']=function(){const _0x1b6d96=_0x33ee77;if(!$gameSystem[_0x1b6d96(0x7a6)]())return![];return![];},Spriteset_Battle[_0x33ee77(0x9a7)][_0x33ee77(0x8b5)]=function(){return 0x0;},Spriteset_Battle[_0x33ee77(0x9a7)]['animationNextDelay']=function(){return 0x0;},VisuMZ[_0x33ee77(0x993)]['Spriteset_Battle_createLowerLayer']=Spriteset_Battle['prototype'][_0x33ee77(0x2f0)],Spriteset_Battle['prototype']['createLowerLayer']=function(){const _0x582bd8=_0x33ee77;VisuMZ[_0x582bd8(0x993)]['Spriteset_Battle_createLowerLayer'][_0x582bd8(0x88f)](this),this[_0x582bd8(0x5dd)](),this[_0x582bd8(0x13b)]();},VisuMZ['BattleCore'][_0x33ee77(0x721)]=Spriteset_Battle[_0x33ee77(0x9a7)][_0x33ee77(0x1b4)],Spriteset_Battle[_0x33ee77(0x9a7)][_0x33ee77(0x1b4)]=function(){const _0x19f312=_0x33ee77;VisuMZ[_0x19f312(0x993)]['Spriteset_Battle_update']['call'](this),this[_0x19f312(0x2e0)](),this[_0x19f312(0x8fe)](),this[_0x19f312(0x9ea)](),this[_0x19f312(0x36d)]();},Spriteset_Battle['prototype'][_0x33ee77(0x5dd)]=function(){const _0x252729=_0x33ee77;this[_0x252729(0x9d5)]=new Weather(),this[_0x252729(0xa17)]['addChild'](this[_0x252729(0x9d5)]);},Spriteset_Battle[_0x33ee77(0x9a7)][_0x33ee77(0x9ea)]=function(){const _0x7bd6db=_0x33ee77;this[_0x7bd6db(0x9d5)][_0x7bd6db(0xa0f)]=$gameScreen['weatherType'](),this['_weather']['power']=$gameScreen[_0x7bd6db(0x280)]();},Game_Interpreter[_0x33ee77(0x9a7)][_0x33ee77(0x7dc)]=function(_0x46be2a){const _0x1a1184=_0x33ee77;$gameScreen[_0x1a1184(0xa84)](_0x46be2a[0x0],_0x46be2a[0x1],_0x46be2a[0x2]);if(_0x46be2a[0x3])this[_0x1a1184(0xc10)](_0x46be2a[0x2]);return!![];},VisuMZ[_0x33ee77(0x993)][_0x33ee77(0x58c)]=Game_Interpreter[_0x33ee77(0x9a7)]['command283'],Game_Interpreter[_0x33ee77(0x9a7)][_0x33ee77(0x50a)]=function(_0x10dd47){const _0xbeb2ae=_0x33ee77;return VisuMZ[_0xbeb2ae(0x993)][_0xbeb2ae(0x58c)][_0xbeb2ae(0x88f)](this,_0x10dd47),SceneManager[_0xbeb2ae(0x5d9)]()&&SceneManager[_0xbeb2ae(0x473)][_0xbeb2ae(0x850)][_0xbeb2ae(0x8dc)](_0x10dd47[0x0],_0x10dd47[0x1]),!![];},Sprite_Battleback[_0x33ee77(0x9a7)][_0x33ee77(0x712)]=function(){const _0x4e85d9=_0x33ee77;if($gameMap[_0x4e85d9(0x712)]()!==null)return $gameMap[_0x4e85d9(0x712)]();else{if(BattleManager[_0x4e85d9(0x26a)]())return $dataSystem[_0x4e85d9(0x712)];else return $gameMap['isOverworld']()?this[_0x4e85d9(0x81b)]():'';}},Sprite_Battleback[_0x33ee77(0x9a7)][_0x33ee77(0x5e7)]=function(){const _0x337632=_0x33ee77;if($gameMap[_0x337632(0x5e7)]()!==null)return $gameMap['battleback2Name']();else{if(BattleManager[_0x337632(0x26a)]())return $dataSystem[_0x337632(0x5e7)];else return $gameMap['isOverworld']()?this[_0x337632(0x822)]():'';}},Spriteset_Battle[_0x33ee77(0x9a7)]['updateBattlebackBitmap']=function(_0x3f6d13,_0x123284){const _0x1bbe0f=_0x33ee77;_0x3f6d13[_0x1bbe0f(0x490)]=_0x123284;},Spriteset_Battle[_0x33ee77(0x9a7)][_0x33ee77(0x8dc)]=function(_0x3f299a,_0x275a01){const _0x59acff=_0x33ee77;_0x3f299a=_0x3f299a||'',_0x275a01=_0x275a01||'';_0x3f299a===''&&_0x275a01===''&&(_0x3f299a=this[_0x59acff(0x5ee)][_0x59acff(0x712)](),_0x275a01=this['_back2Sprite']['battleback2Name']());const _0x5a78f0=ImageManager[_0x59acff(0x799)](_0x3f299a),_0x22e42d=ImageManager[_0x59acff(0x30b)](_0x275a01);_0x5a78f0[_0x59acff(0x410)](this[_0x59acff(0x905)][_0x59acff(0x925)](this,this[_0x59acff(0x5ee)],this[_0x59acff(0x6cd)],_0x5a78f0,_0x22e42d));},Spriteset_Battle[_0x33ee77(0x9a7)]['updateBattlebackBitmap1']=function(_0x19d65f,_0x11c90b,_0x222680,_0x231235){const _0x2fd82d=_0x33ee77;_0x231235[_0x2fd82d(0x410)](this[_0x2fd82d(0x8ed)][_0x2fd82d(0x925)](this,_0x19d65f,_0x11c90b,_0x222680,_0x231235));},Spriteset_Battle['prototype'][_0x33ee77(0x8ed)]=function(_0x36ca06,_0x288eed,_0x18ce6f,_0x35b9ae){const _0x31223f=_0x33ee77;_0x36ca06['bitmap']=_0x18ce6f,_0x288eed[_0x31223f(0x490)]=_0x35b9ae,_0x36ca06[_0x31223f(0x7d9)](),_0x288eed['adjustPosition']();},VisuMZ[_0x33ee77(0x993)][_0x33ee77(0xa6e)]=Spriteset_Battle[_0x33ee77(0x9a7)]['createBattleField'],Spriteset_Battle['prototype'][_0x33ee77(0x3f1)]=function(){const _0x235033=_0x33ee77;VisuMZ[_0x235033(0x993)][_0x235033(0xa6e)]['call'](this),this[_0x235033(0x5a2)]();},Spriteset_Battle[_0x33ee77(0x9a7)][_0x33ee77(0x5a2)]=function(){const _0xcfe6b2=_0x33ee77;this['createBattleFieldContainer'](),this[_0xcfe6b2(0x9b2)](),this[_0xcfe6b2(0x1b8)](),this[_0xcfe6b2(0x200)](),this[_0xcfe6b2(0x89f)]();},Spriteset_Battle[_0x33ee77(0x9a7)][_0x33ee77(0xadf)]=function(){const _0x2d0916=_0x33ee77;this[_0x2d0916(0xaad)]=new Sprite(),this[_0x2d0916(0xa17)][_0x2d0916(0xb83)](this[_0x2d0916(0xaad)]),this[_0x2d0916(0x128)]=new Sprite(),this['_battleField'][_0x2d0916(0xb83)](this[_0x2d0916(0x128)]);},Spriteset_Battle['prototype']['createAnimationContainer']=function(){const _0x1a7114=_0x33ee77;this[_0x1a7114(0x98b)]=new Sprite(),Spriteset_Battle[_0x1a7114(0xba9)]?this[_0x1a7114(0xb83)](this[_0x1a7114(0x98b)]):this[_0x1a7114(0xa17)]['addChild'](this['_animationContainer']);},Spriteset_Battle[_0x33ee77(0x9a7)]['createDamageContainer']=function(){const _0x220dd8=_0x33ee77;this[_0x220dd8(0x5ba)]=new Sprite(),this[_0x220dd8(0x5ba)]['x']=this[_0x220dd8(0xa17)]['x'],this[_0x220dd8(0x5ba)]['y']=this['_battleField']['y'],this[_0x220dd8(0xb83)](this['_damageContainer']);},Spriteset_Battle[_0x33ee77(0x9a7)]['adjustFlippedBattlefield']=function(){const _0x58df37=_0x33ee77;if(!this[_0x58df37(0x713)]())return;this[_0x58df37(0x128)][_0x58df37(0x293)]['x']=-0x1,this[_0x58df37(0x128)]['x']=this['_battleField'][_0x58df37(0x3d9)],this[_0x58df37(0x857)]['scale']['x']=-0x1,this['_uiContainer']['x']=this[_0x58df37(0xa17)][_0x58df37(0x3d9)],this[_0x58df37(0x98b)][_0x58df37(0x293)]['x']=-0x1,this[_0x58df37(0x98b)]['x']=this[_0x58df37(0xa17)][_0x58df37(0x3d9)],this[_0x58df37(0x5ba)][_0x58df37(0x293)]['x']=-0x1,this[_0x58df37(0x5ba)]['x']=this[_0x58df37(0xa17)]['x']+this[_0x58df37(0xa17)][_0x58df37(0x3d9)];},Spriteset_Battle['prototype'][_0x33ee77(0x53c)]=function(){const _0x3e71e7=_0x33ee77;Imported[_0x3e71e7(0x2e4)]&&this['coreEngineRepositionEnemies']()&&this[_0x3e71e7(0xac1)]();const _0x217606=$gameTroop[_0x3e71e7(0x32f)](),_0x465e46=[];for(const _0x42c75c of _0x217606){_0x465e46[_0x3e71e7(0x7ab)](new Sprite_Enemy(_0x42c75c));}_0x465e46[_0x3e71e7(0x4d5)](this[_0x3e71e7(0x9cd)]['bind'](this));for(const _0xb71c33 of _0x465e46){this[_0x3e71e7(0x128)]['addChild'](_0xb71c33);}this[_0x3e71e7(0x3f0)]=_0x465e46;},Spriteset_Battle[_0x33ee77(0x9a7)][_0x33ee77(0xb4d)]=function(){const _0x58ef95=_0x33ee77;this[_0x58ef95(0x123)]=[];for(let _0x2b0453=0x0;_0x2b0453<$gameParty[_0x58ef95(0x28c)]();_0x2b0453++){const _0x229028=$gameParty['battleMembers']()[_0x2b0453],_0x3adaa0=new Sprite_Actor();_0x3adaa0['moveToStartPositionBattleCore'](_0x229028),_0x3adaa0[_0x58ef95(0x95b)](_0x229028),_0x3adaa0[_0x58ef95(0x1b4)](),this[_0x58ef95(0x123)]['push'](_0x3adaa0),this['_battlerContainer'][_0x58ef95(0xb83)](_0x3adaa0);}},Spriteset_Battle['prototype'][_0x33ee77(0x4bb)]=function(_0x1d2906,_0x17ec8e,_0x862f7e,_0x16c724){const _0x48f941=_0x33ee77,_0xd1bdb6=this[_0x48f941(0xb44)](_0x17ec8e),_0x525567=new(_0xd1bdb6?Sprite_AnimationMV:Sprite_Animation)(),_0x44207b=this['makeTargetSprites'](_0x1d2906);this[_0x48f941(0x90c)](_0x1d2906[0x0])&&(_0x862f7e=!_0x862f7e),_0x525567[_0x48f941(0xb27)]=_0x1d2906,_0x525567[_0x48f941(0x888)](_0x44207b,_0x17ec8e,_0x862f7e,_0x16c724),this[_0x48f941(0x592)](_0x525567);},Spriteset_Battle[_0x33ee77(0x9a7)][_0x33ee77(0x592)]=function(_0x536ef8){const _0x6fe47=_0x33ee77;this[_0x6fe47(0x567)](_0x536ef8)?(this[_0x6fe47(0x5cb)]()['addChild'](_0x536ef8),_0x536ef8[_0x6fe47(0x534)]=!![]):(Spriteset_Battle[_0x6fe47(0xba9)]&&(this[_0x6fe47(0x98b)]['x']=this['_effectsContainer']['x'],this['_animationContainer']['y']=this['_effectsContainer']['y']),this['_underAnimationContainer']&&_0x536ef8[_0x6fe47(0x16a)]&&_0x536ef8['isUnderAnimation']()?(this[_0x6fe47(0xaad)]['addChild'](_0x536ef8),this[_0x6fe47(0xaad)]['x']=this[_0x6fe47(0x98b)]['x'],this[_0x6fe47(0xaad)]['y']=this['_animationContainer']['y']):this[_0x6fe47(0x98b)][_0x6fe47(0xb83)](_0x536ef8)),this['_animationSprites']['push'](_0x536ef8);},Spriteset_Battle[_0x33ee77(0x9a7)][_0x33ee77(0x567)]=function(_0x44f7e6){const _0x2122bc=_0x33ee77;if(!_0x44f7e6)return![];if(!_0x44f7e6[_0x2122bc(0x492)])return![];if(!_0x44f7e6['targetObjects'][0x0])return![];if(_0x44f7e6[_0x2122bc(0xb27)][0x0][_0x2122bc(0x6c3)]&&!_0x44f7e6['targetObjects'][0x0][_0x2122bc(0x6c3)]())return![];if($gameSystem[_0x2122bc(0x7a6)]())return![];if(!this[_0x2122bc(0x5cb)]())return![];if(_0x44f7e6[_0x2122bc(0xa94)]===Sprite_Animation){const _0x32a6f9=VisuMZ[_0x2122bc(0x993)]['Settings']['Actor'];_0x32a6f9[_0x2122bc(0x389)]=_0x32a6f9[_0x2122bc(0x389)]??!![];if(_0x44f7e6[_0x2122bc(0x492)][_0x2122bc(0x12e)]===0x0&&!_0x32a6f9[_0x2122bc(0x389)])return![];_0x32a6f9['FvAniCenterAll']=_0x32a6f9[_0x2122bc(0x6d7)]??!![];if(_0x44f7e6[_0x2122bc(0x492)][_0x2122bc(0x12e)]===0x1&&!_0x32a6f9[_0x2122bc(0x6d7)])return![];_0x32a6f9[_0x2122bc(0x794)]=_0x32a6f9['FvAniCenterScreen']??![];if(_0x44f7e6[_0x2122bc(0x492)]['displayType']===0x2&&!_0x32a6f9[_0x2122bc(0x794)])return![];}else{if(_0x44f7e6[_0x2122bc(0xa94)]===Sprite_AnimationMV){if(_0x44f7e6[_0x2122bc(0x492)][_0x2122bc(0x4ab)]===0x3)return![];}}return!![];const _0x41c3cb=Window_BattleStatus[_0x2122bc(0x9a7)][_0x2122bc(0x7a9)]();return['xp',_0x2122bc(0x9f2)][_0x2122bc(0x6e1)](_0x41c3cb);},Spriteset_Battle['prototype']['battleStatusWindowAnimationContainer']=function(){const _0x374071=_0x33ee77;if(!SceneManager[_0x374071(0x473)])return null;if(!SceneManager['_scene']['_statusWindow'])return null;if(!SceneManager['_scene']['_statusWindow']['_effectsContainer'])return null;return SceneManager['_scene']['_statusWindow']['_effectsContainer'];},Spriteset_Battle['prototype']['removeAnimation']=function(_0x58b501){const _0x4cdfe4=_0x33ee77;this[_0x4cdfe4(0xc0a)](_0x58b501);for(const _0x1c7979 of _0x58b501[_0x4cdfe4(0xb27)]){_0x1c7979[_0x4cdfe4(0x66a)]&&_0x1c7979[_0x4cdfe4(0x66a)]();}_0x58b501[_0x4cdfe4(0x7a5)]();},Spriteset_Battle[_0x33ee77(0x9a7)]['removeAnimationFromContainer']=function(_0xae5128){const _0x3f3404=_0x33ee77;this['isAnimationShownOnBattlePortrait'](_0xae5128)?this[_0x3f3404(0x5cb)]()['removeChild'](_0xae5128):this[_0x3f3404(0x98b)][_0x3f3404(0x1e0)](_0xae5128);this[_0x3f3404(0xaad)]&&this[_0x3f3404(0xaad)]['removeChild'](_0xae5128);this[_0x3f3404(0xa97)][_0x3f3404(0x1e0)](_0xae5128),this[_0x3f3404(0x98b)][_0x3f3404(0x1e0)](_0xae5128),this[_0x3f3404(0x70e)][_0x3f3404(0x259)](_0xae5128);if(this[_0x3f3404(0x835)])this[_0x3f3404(0x835)][_0x3f3404(0x259)](_0xae5128);},VisuMZ['BattleCore'][_0x33ee77(0x43f)]=Spriteset_Battle[_0x33ee77(0x9a7)][_0x33ee77(0x813)],Spriteset_Battle['prototype']['updateActors']=function(){const _0x1c2bab=_0x33ee77;VisuMZ[_0x1c2bab(0x993)][_0x1c2bab(0x43f)]['call'](this),this[_0x1c2bab(0x2e0)]();},Spriteset_Battle[_0x33ee77(0x9a7)]['updateBattlerContainer']=function(){const _0x3ca251=_0x33ee77;this[_0x3ca251(0x128)][_0x3ca251(0x724)][_0x3ca251(0x4d5)](this[_0x3ca251(0x654)][_0x3ca251(0x925)](this)),this[_0x3ca251(0x404)]();if(!this[_0x3ca251(0x128)])return;this[_0x3ca251(0x128)][_0x3ca251(0x7fd)]=this[_0x3ca251(0xbb6)]();},Spriteset_Battle[_0x33ee77(0x9a7)][_0x33ee77(0x654)]=function(_0x4751eb,_0xa38c81){const _0x307ddd=_0x33ee77;if(VisuMZ[_0x307ddd(0x993)][_0x307ddd(0x12b)][_0x307ddd(0x46f)][_0x307ddd(0x2c2)]){if(_0x4751eb[_0x307ddd(0x17c)]&&_0xa38c81['_battler']){if(_0x4751eb[_0x307ddd(0x17c)][_0x307ddd(0x6c3)]()&&_0xa38c81[_0x307ddd(0x17c)][_0x307ddd(0x43e)]())return 0x1;else{if(_0xa38c81['_battler']['isActor']()&&_0x4751eb['_battler'][_0x307ddd(0x43e)]())return-0x1;}}}return _0x4751eb[_0x307ddd(0x74a)]!==_0xa38c81[_0x307ddd(0x74a)]?_0x4751eb[_0x307ddd(0x74a)]-_0xa38c81['_baseY']:_0xa38c81[_0x307ddd(0x902)]-_0x4751eb[_0x307ddd(0x902)];},Spriteset_Battle['prototype'][_0x33ee77(0x404)]=function(){const _0x33e221=_0x33ee77;if(!VisuMZ[_0x33e221(0x993)]['Settings'][_0x33e221(0x46f)][_0x33e221(0xc2b)])return;const _0xa6b00e=BattleManager['_subject'];if(_0xa6b00e){if(_0xa6b00e['isActor']()&&!$gameSystem[_0x33e221(0x7a6)]())return;if(_0xa6b00e===BattleManager['actor']())return;const _0x5f0c05=_0xa6b00e[_0x33e221(0x157)]();if(_0x5f0c05&&_0xa6b00e[_0x33e221(0x6c3)]())this[_0x33e221(0x128)][_0x33e221(0xb83)](_0x5f0c05);}},Spriteset_Battle[_0x33ee77(0x9a7)]['processEscape']=function(){const _0x332ce5=_0x33ee77;for(const _0x244001 of $gameParty[_0x332ce5(0x373)]()){if(!_0x244001)continue;if(!_0x244001[_0x332ce5(0x157)]())continue;_0x244001[_0x332ce5(0x157)]()[_0x332ce5(0x1bc)]=!![],_0x244001[_0x332ce5(0x157)]()[_0x332ce5(0xb70)]();}},Spriteset_Battle['prototype'][_0x33ee77(0x9b2)]=function(){const _0x1fb89a=_0x33ee77;this[_0x1fb89a(0x857)]=new Sprite(),Spriteset_Battle[_0x1fb89a(0xba9)]?this[_0x1fb89a(0xb83)](this[_0x1fb89a(0x857)]):this['_battleField'][_0x1fb89a(0xb83)](this[_0x1fb89a(0x857)]),SceneManager[_0x1fb89a(0x473)]['_uiContainer']=this[_0x1fb89a(0x857)];},Spriteset_Battle[_0x33ee77(0x9a7)]['createEnemyNames']=function(){const _0xff9acf=_0x33ee77;if(VisuMZ['BattleCore'][_0xff9acf(0x12b)][_0xff9acf(0xc1d)][_0xff9acf(0x48b)])return;this[_0xff9acf(0x94b)]=new Sprite(),BattleManager['addChildToUiContainer'](this[_0xff9acf(0x94b)]);for(const _0x21b86f of this[_0xff9acf(0x3f0)]){const _0x9a7f32=new Sprite_EnemyName();this['_enemyNameContainer'][_0xff9acf(0xb83)](_0x9a7f32),_0x9a7f32[_0xff9acf(0x662)](_0x21b86f);}},Spriteset_Battle[_0x33ee77(0x9a7)]['updateUiContainerPosition']=function(){const _0x49d0f8=_0x33ee77;if(!this['_damageContainer'])return;if(!this[_0x49d0f8(0x857)])return;const _0x1e6c34=Spriteset_Battle['ANTI_TINT_UI']?this['_damageContainer']['x']:0x0,_0x2e9aee=Spriteset_Battle['ANTI_TINT_UI']?this['_damageContainer']['y']:0x0,_0x120b94=Imported[_0x49d0f8(0x596)]?this[_0x49d0f8(0xa17)]['x']:0x0,_0x12865e=Imported['VisuMZ_3_ActSeqCamera']?this[_0x49d0f8(0xa17)]['y']:0x0;this[_0x49d0f8(0x857)]['x']=_0x1e6c34+_0x120b94,this[_0x49d0f8(0x857)]['y']=_0x2e9aee+_0x12865e;},BattleManager[_0x33ee77(0x408)]=function(_0x4d738d){const _0x5db94e=_0x33ee77;if(!SceneManager[_0x5db94e(0x473)]['_uiContainer'])return;SceneManager[_0x5db94e(0x473)][_0x5db94e(0x857)][_0x5db94e(0xb83)](_0x4d738d);},BattleManager[_0x33ee77(0xbd0)]=function(_0x189c1c){const _0x1ba912=_0x33ee77;if(!SceneManager[_0x1ba912(0x473)]['_uiContainer'])return;SceneManager[_0x1ba912(0x473)]['_uiContainer']['removeChild'](_0x189c1c);},Spriteset_Battle[_0x33ee77(0x9a7)][_0x33ee77(0xbb6)]=function(){return 0xff;},Spriteset_Battle[_0x33ee77(0x9a7)]['isBusy']=function(){return![];},Spriteset_Battle[_0x33ee77(0x9a7)][_0x33ee77(0x300)]=function(){const _0x4c29e9=_0x33ee77;return this[_0x4c29e9(0xb8e)]()[_0x4c29e9(0x1d1)](_0x5638aa=>_0x5638aa[_0x4c29e9(0x6f7)]());},Spriteset_Battle[_0x33ee77(0x9a7)][_0x33ee77(0x311)]=function(){const _0x11a5c5=_0x33ee77;return this[_0x11a5c5(0xb8e)]()[_0x11a5c5(0x1d1)](_0x52f6c7=>_0x52f6c7[_0x11a5c5(0x470)]());},Spriteset_Battle['prototype']['isAnyoneGrowing']=function(){const _0x164458=_0x33ee77;return this['battlerSprites']()['some'](_0x11f266=>_0x11f266[_0x164458(0x1a1)]());},Spriteset_Battle[_0x33ee77(0x9a7)]['isAnyoneSkewing']=function(){const _0xe96d90=_0x33ee77;return this['battlerSprites']()['some'](_0x5bd2ec=>_0x5bd2ec[_0xe96d90(0x82f)]());},Spriteset_Battle[_0x33ee77(0x9a7)][_0x33ee77(0x63c)]=function(){const _0x46e705=_0x33ee77;return this[_0x46e705(0xb8e)]()[_0x46e705(0x1d1)](_0x568053=>_0x568053[_0x46e705(0xb81)]());},Spriteset_Battle[_0x33ee77(0x9a7)][_0x33ee77(0x899)]=function(){const _0x146073=_0x33ee77;return this[_0x146073(0xb8e)]()['some'](_0x35621b=>_0x35621b[_0x146073(0xb33)]());},VisuMZ[_0x33ee77(0x993)][_0x33ee77(0x50e)]=Window_ItemList[_0x33ee77(0x9a7)]['maxCols'],Window_ItemList[_0x33ee77(0x9a7)][_0x33ee77(0x48d)]=function(){const _0x4ca097=_0x33ee77;return SceneManager[_0x4ca097(0x5d9)]()?SceneManager['_scene'][_0x4ca097(0x7a9)]()===_0x4ca097(0x2ea)?VisuMZ[_0x4ca097(0x993)][_0x4ca097(0x12b)][_0x4ca097(0x826)][_0x4ca097(0x2d4)]:VisuMZ['BattleCore'][_0x4ca097(0x12b)][_0x4ca097(0x826)]['SkillItemStandardCols']:VisuMZ[_0x4ca097(0x993)][_0x4ca097(0x50e)]['call'](this);},VisuMZ[_0x33ee77(0x993)][_0x33ee77(0x454)]=Window_SkillList[_0x33ee77(0x9a7)]['maxCols'],Window_SkillList[_0x33ee77(0x9a7)][_0x33ee77(0x48d)]=function(){const _0x419ac7=_0x33ee77;return SceneManager[_0x419ac7(0x5d9)]()?SceneManager['_scene']['battleLayoutStyle']()===_0x419ac7(0x2ea)?VisuMZ[_0x419ac7(0x993)][_0x419ac7(0x12b)]['BattleLayout'][_0x419ac7(0x2d4)]:VisuMZ[_0x419ac7(0x993)][_0x419ac7(0x12b)][_0x419ac7(0x826)][_0x419ac7(0x732)]:VisuMZ['BattleCore'][_0x419ac7(0x454)][_0x419ac7(0x88f)](this);},VisuMZ[_0x33ee77(0x993)][_0x33ee77(0x957)]=Window_Options[_0x33ee77(0x9a7)][_0x33ee77(0xb4f)],Window_Options[_0x33ee77(0x9a7)][_0x33ee77(0xb4f)]=function(){const _0x2cb8fb=_0x33ee77;VisuMZ['BattleCore'][_0x2cb8fb(0x957)][_0x2cb8fb(0x88f)](this),this['addAutoBattleCommands'](),this[_0x2cb8fb(0x6b0)]();},Window_Options[_0x33ee77(0x9a7)]['addAutoBattleCommands']=function(){const _0x2ddc37=_0x33ee77;VisuMZ['BattleCore'][_0x2ddc37(0x12b)][_0x2ddc37(0x27f)][_0x2ddc37(0xc02)]&&(this['addBattleCoreAutoBattleStartupCommand'](),this[_0x2ddc37(0x6b5)]());},Window_Options[_0x33ee77(0x9a7)]['addShowHpGaugeCommand']=function(){const _0x2b678b=_0x33ee77;if(!VisuMZ[_0x2b678b(0x993)][_0x2b678b(0x12b)][_0x2b678b(0x5d6)][_0x2b678b(0x26c)])return;const _0x12a0f1=TextManager[_0x2b678b(0xafd)],_0x326ffc='visualHpGauge';this['addCommand'](_0x12a0f1,_0x326ffc);},Window_Options[_0x33ee77(0x9a7)][_0x33ee77(0x610)]=function(){const _0x555a95=_0x33ee77,_0x572efb=TextManager[_0x555a95(0x7df)],_0x3cd2f6=_0x555a95(0x9b0);this['addCommand'](_0x572efb,_0x3cd2f6);},Window_Options[_0x33ee77(0x9a7)][_0x33ee77(0x6b5)]=function(){const _0x3ef2ff=_0x33ee77,_0x5ef835=TextManager[_0x3ef2ff(0x880)],_0x2c51c4=_0x3ef2ff(0x403);this[_0x3ef2ff(0x41a)](_0x5ef835,_0x2c51c4);},VisuMZ[_0x33ee77(0x993)][_0x33ee77(0x648)]=Window_Options[_0x33ee77(0x9a7)]['statusText'],Window_Options[_0x33ee77(0x9a7)][_0x33ee77(0x9a9)]=function(_0xe350db){const _0x4f8612=_0x33ee77,_0x630774=this[_0x4f8612(0xbb1)](_0xe350db);return _0x630774===_0x4f8612(0x403)?this[_0x4f8612(0x405)]():VisuMZ[_0x4f8612(0x993)]['Window_Options_statusText'][_0x4f8612(0x88f)](this,_0xe350db);},Window_Options['prototype'][_0x33ee77(0x405)]=function(){const _0xd4cd19=_0x33ee77,_0xc40c5f=VisuMZ[_0xd4cd19(0x993)]['Settings'][_0xd4cd19(0x27f)],_0x53e859=this[_0xd4cd19(0xb77)](_0xd4cd19(0x403));return _0x53e859?_0xc40c5f[_0xd4cd19(0xb26)]:_0xc40c5f[_0xd4cd19(0x31f)];},Window_ShopStatus[_0x33ee77(0x9a7)]['getItemDamageAmountLabelBattleCore']=function(){const _0x32ee14=_0x33ee77,_0x92f5bb=DataManager[_0x32ee14(0x47b)](this['_item']),_0x1fbb6e=VisuMZ[_0x32ee14(0x994)][_0x92f5bb];if(!_0x1fbb6e)return this[_0x32ee14(0xb9f)]();const _0x26a511=_0x32ee14(0xa4f)[_0x32ee14(0x23d)](this['_item'][_0x32ee14(0x2d7)][_0x32ee14(0xa0f)]),_0x21e478=[null,TextManager['hp'],TextManager['mp'],TextManager['hp'],TextManager['mp'],TextManager['hp'],TextManager['mp']][this[_0x32ee14(0xbcf)][_0x32ee14(0x2d7)]['type']];return _0x1fbb6e[_0x26a511][_0x32ee14(0x23d)](_0x21e478);},Window_ShopStatus[_0x33ee77(0x9a7)]['getItemDamageAmountTextBattleCore']=function(){const _0x1561f1=_0x33ee77,_0x119415=DataManager[_0x1561f1(0x47b)](this[_0x1561f1(0xbcf)]),_0x532e89=VisuMZ[_0x1561f1(0x994)][_0x119415];if(!_0x532e89)return this['getItemDamageAmountTextOriginal']();return _0x532e89[_0x1561f1(0x4b1)][_0x1561f1(0x88f)](this);},VisuMZ[_0x33ee77(0x993)][_0x33ee77(0x446)]=Window_PartyCommand[_0x33ee77(0x9a7)][_0x33ee77(0x54f)],Window_PartyCommand[_0x33ee77(0x9a7)]['initialize']=function(_0x36a1ab){const _0x31c2b4=_0x33ee77;VisuMZ[_0x31c2b4(0x993)][_0x31c2b4(0x446)][_0x31c2b4(0x88f)](this,_0x36a1ab),this[_0x31c2b4(0x5fb)](_0x36a1ab);},Window_PartyCommand['prototype'][_0x33ee77(0x5fb)]=function(_0x4c0aa4){const _0x486d4a=_0x33ee77,_0x15134f=new Rectangle(0x0,0x0,_0x4c0aa4[_0x486d4a(0x3d9)],_0x4c0aa4['height']);this[_0x486d4a(0x910)]=new Window_Base(_0x15134f),this[_0x486d4a(0x910)][_0x486d4a(0x7fd)]=0x0,this[_0x486d4a(0xb83)](this[_0x486d4a(0x910)]),this[_0x486d4a(0x7eb)]();},Window_PartyCommand[_0x33ee77(0x9a7)][_0x33ee77(0x71c)]=function(){const _0x1f859d=_0x33ee77;Window_Command['prototype'][_0x1f859d(0x71c)][_0x1f859d(0x88f)](this);if(this[_0x1f859d(0x910)])this[_0x1f859d(0x7eb)]();},Window_PartyCommand[_0x33ee77(0x9a7)]['updateCommandNameWindow']=function(){const _0x42275e=_0x33ee77,_0x57cfae=this[_0x42275e(0x910)];_0x57cfae[_0x42275e(0x3a6)][_0x42275e(0x7aa)]();const _0xdfc59=this[_0x42275e(0x916)](this['index']());if(_0xdfc59===_0x42275e(0x187)&&this['maxItems']()>0x0){const _0x3f433a=this['itemLineRect'](this['index']());let _0x275b42=this['commandName'](this[_0x42275e(0xa63)]());_0x275b42=_0x275b42[_0x42275e(0x7dd)](/\\I\[(\d+)\]/gi,''),_0x57cfae['resetFontSettings'](),this['commandNameWindowDrawBackground'](_0x275b42,_0x3f433a),this[_0x42275e(0xa98)](_0x275b42,_0x3f433a),this[_0x42275e(0xa50)](_0x275b42,_0x3f433a);}},Window_PartyCommand[_0x33ee77(0x9a7)][_0x33ee77(0x705)]=function(_0x1e8ce0,_0x372e71){},Window_PartyCommand[_0x33ee77(0x9a7)][_0x33ee77(0xa98)]=function(_0x3b0216,_0x15033b){const _0x1efcfd=_0x33ee77,_0x3ff541=this[_0x1efcfd(0x910)];_0x3ff541['drawText'](_0x3b0216,0x0,_0x15033b['y'],_0x3ff541[_0x1efcfd(0x802)],'center');},Window_PartyCommand['prototype'][_0x33ee77(0xa50)]=function(_0x224f20,_0x1da3a5){const _0xb9ce33=_0x33ee77,_0x4f7a28=this['_commandNameWindow'],_0x1bec80=$gameSystem[_0xb9ce33(0x8c9)](),_0x57858d=_0x1da3a5['x']+Math[_0xb9ce33(0x816)](_0x1da3a5[_0xb9ce33(0x3d9)]/0x2)+_0x1bec80;_0x4f7a28['x']=_0x4f7a28[_0xb9ce33(0x3d9)]/-0x2+_0x57858d,_0x4f7a28['y']=Math[_0xb9ce33(0x816)](_0x1da3a5[_0xb9ce33(0x578)]/0x2);},Window_PartyCommand['prototype'][_0x33ee77(0xad7)]=function(){const _0x25890=_0x33ee77;this[_0x25890(0x64d)](),this[_0x25890(0x955)](),this[_0x25890(0x21f)](),this[_0x25890(0x142)](),this[_0x25890(0x292)](),this[_0x25890(0x739)]();},Window_PartyCommand[_0x33ee77(0x9a7)][_0x33ee77(0x64d)]=function(){const _0x1cd5d=_0x33ee77,_0x56ca0d=this[_0x1cd5d(0xbe0)](),_0xd162c8=VisuMZ[_0x1cd5d(0x993)][_0x1cd5d(0x12b)][_0x1cd5d(0xbe6)][_0x1cd5d(0x6cc)],_0x333f65=_0x56ca0d==='text'?TextManager[_0x1cd5d(0x842)]:_0x1cd5d(0x3be)[_0x1cd5d(0x23d)](_0xd162c8,TextManager[_0x1cd5d(0x842)]),_0x33408f=this[_0x1cd5d(0x54d)]();this[_0x1cd5d(0x41a)](_0x333f65,_0x1cd5d(0x842),_0x33408f);},Window_PartyCommand[_0x33ee77(0x9a7)][_0x33ee77(0x54d)]=function(){return!![];},Window_PartyCommand[_0x33ee77(0x9a7)][_0x33ee77(0x955)]=function(){const _0x2cd03c=_0x33ee77;if(!this[_0x2cd03c(0x1af)]())return;const _0x337cac=this['commandStyle'](),_0x242953=VisuMZ[_0x2cd03c(0x993)][_0x2cd03c(0x12b)][_0x2cd03c(0xbe6)]['CmdIconAutoBattle'],_0x338c46=_0x337cac===_0x2cd03c(0xb52)?TextManager[_0x2cd03c(0x886)]:_0x2cd03c(0x3be)[_0x2cd03c(0x23d)](_0x242953,TextManager[_0x2cd03c(0x886)]),_0x11e313=this[_0x2cd03c(0x30e)]();this['addCommand'](_0x338c46,_0x2cd03c(0x886),_0x11e313);},Window_PartyCommand[_0x33ee77(0x9a7)][_0x33ee77(0x1af)]=function(){const _0x19a617=_0x33ee77;return VisuMZ[_0x19a617(0x993)][_0x19a617(0x12b)]['PartyCmd']['CommandAddAutoBattle'];},Window_PartyCommand[_0x33ee77(0x9a7)]['isAutoBattleCommandEnabled']=function(){return!![];},Window_PartyCommand['prototype'][_0x33ee77(0x21f)]=function(){},Window_PartyCommand[_0x33ee77(0x9a7)][_0x33ee77(0x142)]=function(){const _0x47f98d=_0x33ee77,_0x270c0f=VisuMZ['BattleCore']['Settings']['PartyCmd']['CommandAddStatus']??!![];if(!_0x270c0f)return;const _0x494020=this['commandStyle'](),_0x172c54=VisuMZ[_0x47f98d(0x993)][_0x47f98d(0x12b)]['InBattleStatus'][_0x47f98d(0x96e)]??0x57,_0x36a4b8=_0x494020===_0x47f98d(0xb52)?TextManager[_0x47f98d(0xc0d)]:_0x47f98d(0x3be)[_0x47f98d(0x23d)](_0x172c54,TextManager['status']),_0x3a4beb=!![];this['addCommand'](_0x36a4b8,_0x47f98d(0xc0d),_0x3a4beb);},Window_PartyCommand['prototype']['addOptionsCommand']=function(){const _0x5b7ff4=_0x33ee77;if(!this[_0x5b7ff4(0x7d0)]())return;const _0x2b98ac=this[_0x5b7ff4(0xbe0)](),_0x3e2d54=VisuMZ[_0x5b7ff4(0x993)][_0x5b7ff4(0x12b)][_0x5b7ff4(0xbe6)][_0x5b7ff4(0x3a9)],_0x58e833=_0x2b98ac==='text'?TextManager['options']:_0x5b7ff4(0x3be)[_0x5b7ff4(0x23d)](_0x3e2d54,TextManager[_0x5b7ff4(0x6be)]),_0x4fdd38=this['isOptionsCommandEnabled']();this[_0x5b7ff4(0x41a)](_0x58e833,_0x5b7ff4(0x6be),_0x4fdd38);},Window_PartyCommand[_0x33ee77(0x9a7)][_0x33ee77(0x7d0)]=function(){const _0x4b1f4f=_0x33ee77;return VisuMZ[_0x4b1f4f(0x993)][_0x4b1f4f(0x12b)]['PartyCmd'][_0x4b1f4f(0xae5)];},Window_PartyCommand['prototype'][_0x33ee77(0x7b4)]=function(){return!![];},Window_PartyCommand['prototype'][_0x33ee77(0x739)]=function(){const _0x2192e2=_0x33ee77,_0x5690ef=this[_0x2192e2(0xbe0)](),_0x5a784f=VisuMZ[_0x2192e2(0x993)][_0x2192e2(0x12b)][_0x2192e2(0xbe6)]['CmdIconEscape'],_0x481b51=_0x5690ef==='text'?TextManager['escape']:_0x2192e2(0x3be)[_0x2192e2(0x23d)](_0x5a784f,TextManager['escape']),_0x4c08c0=this['isEscapeCommandEnabled']();this[_0x2192e2(0x41a)](_0x481b51,'escape',_0x4c08c0);},Window_PartyCommand[_0x33ee77(0x9a7)][_0x33ee77(0x2ae)]=function(){return BattleManager['canEscape']();},Window_PartyCommand[_0x33ee77(0x9a7)][_0x33ee77(0x9c5)]=function(){const _0xf9f7e5=_0x33ee77;return VisuMZ[_0xf9f7e5(0x993)][_0xf9f7e5(0x12b)][_0xf9f7e5(0xbe6)][_0xf9f7e5(0x877)];},Window_PartyCommand[_0x33ee77(0x9a7)][_0x33ee77(0x80b)]=function(_0x2c6c52){const _0x1a3ccd=_0x33ee77,_0x1a0c95=this['commandStyleCheck'](_0x2c6c52);if(_0x1a0c95===_0x1a3ccd(0x7e7))this[_0x1a3ccd(0x91a)](_0x2c6c52);else _0x1a0c95===_0x1a3ccd(0x187)?this['drawItemStyleIcon'](_0x2c6c52):Window_Command[_0x1a3ccd(0x9a7)][_0x1a3ccd(0x80b)][_0x1a3ccd(0x88f)](this,_0x2c6c52);},Window_PartyCommand['prototype']['commandStyle']=function(){const _0x1ce8ac=_0x33ee77;return VisuMZ[_0x1ce8ac(0x993)][_0x1ce8ac(0x12b)]['PartyCmd'][_0x1ce8ac(0x5ef)];},Window_PartyCommand['prototype'][_0x33ee77(0x916)]=function(_0x5ae7fa){const _0x1802d1=_0x33ee77;if(_0x5ae7fa<0x0)return'text';const _0x16e49b=this[_0x1802d1(0xbe0)]();if(_0x16e49b!==_0x1802d1(0x257))return _0x16e49b;else{if(this[_0x1802d1(0x649)]()>0x0){const _0x209855=this[_0x1802d1(0x28d)](_0x5ae7fa);if(_0x209855[_0x1802d1(0x7c1)](/\\I\[(\d+)\]/i)){const _0x4662ef=this[_0x1802d1(0x525)](_0x5ae7fa),_0x2e9c75=this[_0x1802d1(0x8f6)](_0x209855)[_0x1802d1(0x3d9)];return _0x2e9c75<=_0x4662ef[_0x1802d1(0x3d9)]?_0x1802d1(0x7e7):'icon';}}}return _0x1802d1(0xb52);},Window_PartyCommand['prototype'][_0x33ee77(0x91a)]=function(_0x3f2807){const _0x4aa36f=_0x33ee77,_0x16c963=this[_0x4aa36f(0x525)](_0x3f2807),_0x37b388=this[_0x4aa36f(0x28d)](_0x3f2807),_0x2870db=this[_0x4aa36f(0x8f6)](_0x37b388)['width'];this[_0x4aa36f(0x7e5)](this[_0x4aa36f(0x6b2)](_0x3f2807));const _0x26c7ed=this['itemTextAlign']();if(_0x26c7ed===_0x4aa36f(0x409))this[_0x4aa36f(0x4ce)](_0x37b388,_0x16c963['x']+_0x16c963['width']-_0x2870db,_0x16c963['y'],_0x2870db);else{if(_0x26c7ed===_0x4aa36f(0x614)){const _0x5455c5=_0x16c963['x']+Math[_0x4aa36f(0x816)]((_0x16c963[_0x4aa36f(0x3d9)]-_0x2870db)/0x2);this[_0x4aa36f(0x4ce)](_0x37b388,_0x5455c5,_0x16c963['y'],_0x2870db);}else this['drawTextEx'](_0x37b388,_0x16c963['x'],_0x16c963['y'],_0x2870db);}},Window_PartyCommand[_0x33ee77(0x9a7)]['drawItemStyleIcon']=function(_0x243b1b){const _0x53488e=_0x33ee77;this[_0x53488e(0x28d)](_0x243b1b)[_0x53488e(0x7c1)](/\\I\[(\d+)\]/i);const _0x82d700=Number(RegExp['$1'])||0x0,_0x3f89ea=this[_0x53488e(0x525)](_0x243b1b),_0x5a7118=_0x3f89ea['x']+Math['floor']((_0x3f89ea[_0x53488e(0x3d9)]-ImageManager['iconWidth'])/0x2),_0x2af660=_0x3f89ea['y']+(_0x3f89ea[_0x53488e(0x578)]-ImageManager['iconHeight'])/0x2;this['drawIcon'](_0x82d700,_0x5a7118,_0x2af660);},Window_PartyCommand[_0x33ee77(0x9a7)][_0x33ee77(0x9ac)]=function(){},Window_PartyCommand['prototype'][_0x33ee77(0x143)]=function(){const _0x5db60e=_0x33ee77;Window_Command[_0x5db60e(0x9a7)][_0x5db60e(0x143)]['call'](this);const _0x5285ec=this[_0x5db60e(0x7a9)]();_0x5285ec===_0x5db60e(0x2ea)&&this[_0x5db60e(0x6a0)]();},Window_PartyCommand['prototype']['battleLayoutStyle']=function(){const _0x22dea6=_0x33ee77;if(this[_0x22dea6(0xad8)])return this['_battleLayoutStyle'];return this[_0x22dea6(0xad8)]=SceneManager[_0x22dea6(0x473)]['battleLayoutStyle'](),this[_0x22dea6(0xad8)];},Window_PartyCommand['prototype'][_0x33ee77(0xa36)]=function(){const _0x5e4dbe=_0x33ee77,_0x535c85=VisuMZ[_0x5e4dbe(0x993)][_0x5e4dbe(0x12b)][_0x5e4dbe(0xbe6)],_0x457382=this['currentSymbol']();switch(_0x457382){case _0x5e4dbe(0x842):this[_0x5e4dbe(0xb58)][_0x5e4dbe(0xa78)](_0x535c85[_0x5e4dbe(0x75f)]);break;case _0x5e4dbe(0x886):this[_0x5e4dbe(0xb58)]['setText'](_0x535c85[_0x5e4dbe(0xb62)]);break;case _0x5e4dbe(0x6be):this['_helpWindow'][_0x5e4dbe(0xa78)](_0x535c85['HelpOptions']);break;case'escape':this[_0x5e4dbe(0xb58)]['setText'](_0x535c85['HelpEscape']);break;case'status':this[_0x5e4dbe(0xb58)]['setText'](Window_InBattleStatus['SETTINGS'][_0x5e4dbe(0x554)]);break;default:this[_0x5e4dbe(0xb58)]['setText']('');break;}},VisuMZ['BattleCore'][_0x33ee77(0x91d)]=Window_ActorCommand['prototype'][_0x33ee77(0x54f)],Window_ActorCommand[_0x33ee77(0x9a7)][_0x33ee77(0x54f)]=function(_0x4cea97){const _0x3db30=_0x33ee77;VisuMZ[_0x3db30(0x993)][_0x3db30(0x91d)][_0x3db30(0x88f)](this,_0x4cea97),this['createCommandNameWindow'](_0x4cea97);},Window_ActorCommand[_0x33ee77(0x9a7)]['createCommandNameWindow']=function(_0x4c4997){const _0x393ec4=_0x33ee77,_0x1d4687=new Rectangle(0x0,0x0,_0x4c4997[_0x393ec4(0x3d9)],_0x4c4997['height']);this[_0x393ec4(0x910)]=new Window_Base(_0x1d4687),this[_0x393ec4(0x910)][_0x393ec4(0x7fd)]=0x0,this[_0x393ec4(0xb83)](this['_commandNameWindow']),this[_0x393ec4(0x7eb)]();},Window_ActorCommand[_0x33ee77(0x9a7)][_0x33ee77(0x71c)]=function(){const _0xc7ccc0=_0x33ee77;Window_Command[_0xc7ccc0(0x9a7)][_0xc7ccc0(0x71c)][_0xc7ccc0(0x88f)](this);if(this['_commandNameWindow'])this[_0xc7ccc0(0x7eb)]();},Window_ActorCommand[_0x33ee77(0x9a7)]['updateCommandNameWindow']=function(){const _0x35e621=_0x33ee77,_0x5b437b=this[_0x35e621(0x910)];_0x5b437b[_0x35e621(0x3a6)][_0x35e621(0x7aa)]();const _0x51fc3b=this['commandStyleCheck'](this['index']());if(_0x51fc3b===_0x35e621(0x187)&&this[_0x35e621(0x649)]()>0x0){const _0x48c3a4=this[_0x35e621(0x525)](this[_0x35e621(0xa63)]());let _0x4353b1=this['commandName'](this[_0x35e621(0xa63)]());_0x4353b1=_0x4353b1[_0x35e621(0x7dd)](/\\I\[(\d+)\]/gi,''),_0x5b437b['resetFontSettings'](),this[_0x35e621(0x705)](_0x4353b1,_0x48c3a4),this[_0x35e621(0xa98)](_0x4353b1,_0x48c3a4),this[_0x35e621(0xa50)](_0x4353b1,_0x48c3a4);}},Window_ActorCommand[_0x33ee77(0x9a7)][_0x33ee77(0x705)]=function(_0x295ef4,_0x65b3a5){},Window_ActorCommand[_0x33ee77(0x9a7)][_0x33ee77(0xa98)]=function(_0x156244,_0x56c015){const _0x138469=_0x33ee77,_0x373ca4=this['_commandNameWindow'];_0x373ca4[_0x138469(0x45a)](_0x156244,0x0,_0x56c015['y'],_0x373ca4[_0x138469(0x802)],_0x138469(0x614));},Window_ActorCommand[_0x33ee77(0x9a7)][_0x33ee77(0xa50)]=function(_0x34d85a,_0x320a45){const _0x531945=_0x33ee77,_0x3c8a94=this[_0x531945(0x910)],_0x430939=$gameSystem[_0x531945(0x8c9)](),_0x2fbefe=_0x320a45['x']+Math[_0x531945(0x816)](_0x320a45[_0x531945(0x3d9)]/0x2)+_0x430939;_0x3c8a94['x']=_0x3c8a94['width']/-0x2+_0x2fbefe,_0x3c8a94['y']=Math[_0x531945(0x816)](_0x320a45[_0x531945(0x578)]/0x2);},Window_ActorCommand[_0x33ee77(0x9a7)][_0x33ee77(0xad7)]=function(){const _0x30682b=_0x33ee77;if(!this[_0x30682b(0x261)])return;const _0x170b60=this[_0x30682b(0x261)]['battleCommands']();for(const _0x5d49f5 of _0x170b60){this[_0x30682b(0x8b7)](_0x5d49f5[_0x30682b(0x46b)]()[_0x30682b(0xaf2)]());}},Window_ActorCommand[_0x33ee77(0x9a7)][_0x33ee77(0x8b7)]=function(_0x7ad0d2){const _0x24c60a=_0x33ee77;_0x7ad0d2===_0x24c60a(0xae4)&&this['addAttackCommand']();['STYPES','SKILLS'][_0x24c60a(0x741)](_0x7ad0d2)&&this[_0x24c60a(0xbc9)]();_0x7ad0d2===_0x24c60a(0x59a)&&this[_0x24c60a(0x4b4)]();_0x7ad0d2===_0x24c60a(0x392)&&this[_0x24c60a(0xb8c)]();_0x7ad0d2===_0x24c60a(0x173)&&this[_0x24c60a(0x142)]();_0x7ad0d2==='ESCAPE'&&this['addEscapeCommand']();_0x7ad0d2===_0x24c60a(0x3db)&&this[_0x24c60a(0x955)]();if(_0x7ad0d2[_0x24c60a(0x7c1)](/STYPE: (\d+)/i)){const _0x3a21dc=Number(RegExp['$1']);this[_0x24c60a(0x818)](_0x3a21dc);}else{if(_0x7ad0d2[_0x24c60a(0x7c1)](/STYPE: (.*)/i)){const _0x3b8d82=DataManager[_0x24c60a(0xb16)](RegExp['$1']);this[_0x24c60a(0x818)](_0x3b8d82);}}_0x7ad0d2==='ALL\x20SKILLS'&&this[_0x24c60a(0xac9)]();if(_0x7ad0d2[_0x24c60a(0x7c1)](/SKILL: (\d+)/i)){const _0x481dd4=Number(RegExp['$1']);this[_0x24c60a(0x19b)]($dataSkills[_0x481dd4]);}else{if(_0x7ad0d2[_0x24c60a(0x7c1)](/SKILL: (.*)/i)){const _0x16bec0=DataManager['getSkillIdWithName'](RegExp['$1']);this[_0x24c60a(0x19b)]($dataSkills[_0x16bec0]);}}_0x7ad0d2===_0x24c60a(0x8d4)&&Imported[_0x24c60a(0xbc0)]&&this['addPartyCommand'](),[_0x24c60a(0x840),_0x24c60a(0x8d2)][_0x24c60a(0x741)](_0x7ad0d2)&&Imported[_0x24c60a(0x6b7)]&&this[_0x24c60a(0xaf8)](),_0x7ad0d2===_0x24c60a(0x61a)&&Imported['VisuMZ_2_WeaponSwapSystem']&&this[_0x24c60a(0x2a7)](!![]),_0x7ad0d2===_0x24c60a(0x64f)&&Imported[_0x24c60a(0x620)]&&this[_0x24c60a(0x81d)]();},Window_ActorCommand['prototype'][_0x33ee77(0x279)]=function(){const _0x1ae19b=_0x33ee77,_0x540f01=$dataSkills[this[_0x1ae19b(0x261)][_0x1ae19b(0x8a4)]()];if(!_0x540f01)return;if(!this[_0x1ae19b(0xad1)](_0x540f01))return;const _0x125caf=this['commandStyle'](),_0xd77a45=DataManager[_0x1ae19b(0xa6c)](_0x540f01),_0x4e275b=DataManager[_0x1ae19b(0xa88)](_0x540f01),_0x2ed636=_0x125caf===_0x1ae19b(0xb52)?_0xd77a45:_0x1ae19b(0x3be)[_0x1ae19b(0x23d)](_0x4e275b,_0xd77a45);this[_0x1ae19b(0x41a)](_0x2ed636,_0x1ae19b(0x4c5),this['_actor'][_0x1ae19b(0x830)]());},Window_ActorCommand['prototype'][_0x33ee77(0x4b4)]=function(){const _0x37690c=_0x33ee77,_0x2a4d83=$dataSkills[this[_0x37690c(0x261)]['guardSkillId']()];if(!_0x2a4d83)return;if(!this[_0x37690c(0xad1)](_0x2a4d83))return;const _0x253067=this['commandStyle'](),_0x3946f0=DataManager[_0x37690c(0xa6c)](_0x2a4d83),_0x122663=DataManager['battleCommandIcon'](_0x2a4d83),_0x2515bc=_0x253067===_0x37690c(0xb52)?_0x3946f0:_0x37690c(0x3be)[_0x37690c(0x23d)](_0x122663,_0x3946f0);this[_0x37690c(0x41a)](_0x2515bc,_0x37690c(0x462),this[_0x37690c(0x261)][_0x37690c(0xa5c)]());},Window_ActorCommand[_0x33ee77(0x9a7)][_0x33ee77(0xb8c)]=function(){const _0x29e122=_0x33ee77,_0x200721=this[_0x29e122(0xbe0)](),_0x36dc15=VisuMZ[_0x29e122(0x993)]['Settings'][_0x29e122(0xbbd)][_0x29e122(0x726)],_0x3e8d9a=_0x200721===_0x29e122(0xb52)?TextManager[_0x29e122(0x5b0)]:'\x5cI[%1]%2'[_0x29e122(0x23d)](_0x36dc15,TextManager[_0x29e122(0x5b0)]),_0x54f728=this['isItemCommandEnabled']();this[_0x29e122(0x41a)](_0x3e8d9a,_0x29e122(0x5b0),_0x54f728);},Window_ActorCommand[_0x33ee77(0x9a7)][_0x33ee77(0x41e)]=function(){return this['_actor']&&this['_actor']['canUseItemCommand']();},Window_ActorCommand[_0x33ee77(0x9a7)]['addSkillCommands']=function(){const _0x41bc43=_0x33ee77,_0x48450d=this['_actor'][_0x41bc43(0x52f)]();for(const _0x332e03 of _0x48450d){this['addSkillTypeCommand'](_0x332e03);}},Window_ActorCommand[_0x33ee77(0x9a7)]['addSkillTypeCommand']=function(_0x27b9aa){const _0x1d7465=_0x33ee77;let _0x115c2f=$dataSystem[_0x1d7465(0x52f)][_0x27b9aa];if(!_0x115c2f)return;let _0x288b8c=_0x115c2f;const _0x15c630=this[_0x1d7465(0xbe0)]();if(_0x15c630==='text')_0x288b8c=_0x288b8c['replace'](/\x1I\[(\d+)\]/gi,''),_0x288b8c=_0x288b8c[_0x1d7465(0x7dd)](/\\I\[(\d+)\]/gi,'');else{if(!_0x115c2f['match'](/\\I\[(\d+)\]/i)){const _0xee4ab2=Imported[_0x1d7465(0x4e6)]?VisuMZ[_0x1d7465(0xb11)][_0x1d7465(0x12b)]['Skills']:VisuMZ['BattleCore']['Settings'][_0x1d7465(0xbbd)],_0x4c1236=$dataSystem[_0x1d7465(0x4ef)][_0x1d7465(0x741)](_0x27b9aa),_0x59f9bf=_0x4c1236?_0xee4ab2[_0x1d7465(0x32d)]:_0xee4ab2[_0x1d7465(0x288)];_0x288b8c='\x5cI[%1]%2'[_0x1d7465(0x23d)](_0x59f9bf,_0x115c2f);}}this[_0x1d7465(0x41a)](_0x288b8c,_0x1d7465(0x24b),!![],_0x27b9aa);},Window_ActorCommand[_0x33ee77(0x9a7)][_0x33ee77(0xac9)]=function(){const _0x2a85dc=_0x33ee77,_0x468c2e=this[_0x2a85dc(0x261)][_0x2a85dc(0x52f)](),_0x24a886=this[_0x2a85dc(0x261)][_0x2a85dc(0x29b)]();for(const _0x3ccf7c of _0x24a886){if(!_0x3ccf7c)continue;if(Imported['VisuMZ_1_SkillsStatesCore']){if(this['noSimilarSTypes'](_0x3ccf7c))continue;if(this['isHiddenSkill'](_0x3ccf7c))continue;}else{if(!_0x468c2e[_0x2a85dc(0x741)](_0x3ccf7c[_0x2a85dc(0x740)]))continue;}this['addSingleSkillCommand'](_0x3ccf7c);}},Window_ActorCommand[_0x33ee77(0x9a7)]['noSimilarSTypes']=function(_0x20edfc){const _0x420208=_0x33ee77,_0x50d006=this[_0x420208(0x261)]['skillTypes'](),_0x5be719=_0x50d006['filter'](_0x523c38=>DataManager[_0x420208(0x2e9)](_0x20edfc)[_0x420208(0x741)](_0x523c38));return _0x5be719[_0x420208(0x70c)]<=0x0;},Window_ActorCommand[_0x33ee77(0x9a7)][_0x33ee77(0x808)]=function(_0x57ef48){const _0x7ee8c6=_0x33ee77;if(Imported[_0x7ee8c6(0x4e6)]){if(VisuMZ[_0x7ee8c6(0xb11)][_0x7ee8c6(0x71e)]>=1.24){if(this['_actor']){if(!VisuMZ[_0x7ee8c6(0xb11)]['CheckVisibleBattleNotetags'](this[_0x7ee8c6(0x261)],_0x57ef48))return!![];if(!VisuMZ[_0x7ee8c6(0xb11)][_0x7ee8c6(0xbe2)](this[_0x7ee8c6(0x261)],_0x57ef48))return!![];if(!VisuMZ['SkillsStatesCore'][_0x7ee8c6(0x5a4)](this[_0x7ee8c6(0x261)],_0x57ef48))return!![];}}else{if(!Window_SkillList['prototype'][_0x7ee8c6(0x664)][_0x7ee8c6(0x88f)](this,_0x57ef48))return!![];if(!Window_SkillList[_0x7ee8c6(0x9a7)]['checkShowHideSwitchNotetags']['call'](this,_0x57ef48))return!![];if(!Window_SkillList[_0x7ee8c6(0x9a7)]['checkShowHideSkillNotetags']['call'](this,_0x57ef48))return!![];}}return![];},Window_ActorCommand[_0x33ee77(0x9a7)][_0x33ee77(0x19b)]=function(_0x25df7d){const _0x38289c=_0x33ee77;if(!_0x25df7d)return;if(!this[_0x38289c(0xad1)](_0x25df7d))return;const _0xe5c610=this[_0x38289c(0xbe0)](),_0x54be8d=DataManager[_0x38289c(0xa6c)](_0x25df7d),_0x43f728=DataManager[_0x38289c(0xa88)](_0x25df7d),_0x1e661e=_0xe5c610===_0x38289c(0xb52)?_0x54be8d:_0x38289c(0x3be)[_0x38289c(0x23d)](_0x43f728,_0x54be8d),_0x2b746b=this['_actor'][_0x38289c(0x6aa)](_0x25df7d);this[_0x38289c(0x41a)](_0x1e661e,_0x38289c(0x663),_0x2b746b,_0x25df7d['id']);},Window_ActorCommand['prototype'][_0x33ee77(0xad1)]=function(_0xed2ccf){const _0x4d202a=_0x33ee77,_0x9c2381=_0xed2ccf[_0x4d202a(0x448)];if(_0x9c2381['match'](/<COMMAND REQUIRE LEARN>/i)){if(!this[_0x4d202a(0x261)][_0x4d202a(0x2f9)](_0xed2ccf['id']))return![];}if(_0x9c2381[_0x4d202a(0x7c1)](/<COMMAND REQUIRE ACCESS>/i)){if(!this[_0x4d202a(0x261)][_0x4d202a(0x6da)](_0xed2ccf['id']))return![];}const _0x36326d=VisuMZ[_0x4d202a(0x993)][_0x4d202a(0x240)](_0xed2ccf,'CommandVisible');if(VisuMZ[_0x4d202a(0x993)]['JS'][_0x36326d]){if(!VisuMZ[_0x4d202a(0x993)]['JS'][_0x36326d][_0x4d202a(0x88f)](this,this['_actor'],_0xed2ccf))return![];}return VisuMZ[_0x4d202a(0x993)][_0x4d202a(0xa64)](_0xed2ccf);},VisuMZ[_0x33ee77(0x993)][_0x33ee77(0xa64)]=function(_0x585f33){const _0x2ca0b0=_0x33ee77,_0x57bea4=_0x585f33[_0x2ca0b0(0x448)];if(_0x57bea4['match'](/<COMMAND SHOW[ ](?:SW|SWITCH|SWITCHES):[ ]*(\d+(?:\s*,\s*\d+)*)>/i)){const _0x40dd18=JSON[_0x2ca0b0(0x33b)]('['+RegExp['$1'][_0x2ca0b0(0x7c1)](/\d+/g)+']');for(const _0x5d0cc0 of _0x40dd18){if(!$gameSwitches[_0x2ca0b0(0x5ce)](_0x5d0cc0))return![];}return!![];}if(_0x57bea4[_0x2ca0b0(0x7c1)](/<COMMAND SHOW ALL[ ](?:SW|SWITCH|SWITCHES):[ ]*(\d+(?:\s*,\s*\d+)*)>/i)){const _0x5ac068=JSON[_0x2ca0b0(0x33b)]('['+RegExp['$1']['match'](/\d+/g)+']');for(const _0x2a663e of _0x5ac068){if(!$gameSwitches[_0x2ca0b0(0x5ce)](_0x2a663e))return![];}return!![];}if(_0x57bea4[_0x2ca0b0(0x7c1)](/<COMMAND SHOW ANY[ ](?:SW|SWITCH|SWITCHES):[ ]*(\d+(?:\s*,\s*\d+)*)>/i)){const _0x4a8287=JSON[_0x2ca0b0(0x33b)]('['+RegExp['$1']['match'](/\d+/g)+']');for(const _0x2ed9d7 of _0x4a8287){if($gameSwitches[_0x2ca0b0(0x5ce)](_0x2ed9d7))return!![];}return![];}if(_0x57bea4[_0x2ca0b0(0x7c1)](/<COMMAND HIDE[ ](?:SW|SWITCH|SWITCHES):[ ]*(\d+(?:\s*,\s*\d+)*)>/i)){const _0x4478ba=JSON[_0x2ca0b0(0x33b)]('['+RegExp['$1'][_0x2ca0b0(0x7c1)](/\d+/g)+']');for(const _0x2c01a8 of _0x4478ba){if(!$gameSwitches[_0x2ca0b0(0x5ce)](_0x2c01a8))return!![];}return![];}if(_0x57bea4[_0x2ca0b0(0x7c1)](/<COMMAND HIDE ALL[ ](?:SW|SWITCH|SWITCHES):[ ]*(\d+(?:\s*,\s*\d+)*)>/i)){const _0x58ae7c=JSON['parse']('['+RegExp['$1'][_0x2ca0b0(0x7c1)](/\d+/g)+']');for(const _0x5a5028 of _0x58ae7c){if(!$gameSwitches['value'](_0x5a5028))return!![];}return![];}if(_0x57bea4[_0x2ca0b0(0x7c1)](/<COMMAND HIDE ANY[ ](?:SW|SWITCH|SWITCHES):[ ]*(\d+(?:\s*,\s*\d+)*)>/i)){const _0x46794a=JSON[_0x2ca0b0(0x33b)]('['+RegExp['$1'][_0x2ca0b0(0x7c1)](/\d+/g)+']');for(const _0x11de9f of _0x46794a){if($gameSwitches[_0x2ca0b0(0x5ce)](_0x11de9f))return![];}return!![];}return!![];},Window_ActorCommand[_0x33ee77(0x9a7)]['addStatusCommand']=function(){const _0x1ed2b7=_0x33ee77,_0x5abb40=this[_0x1ed2b7(0xbe0)](),_0x2122fb=VisuMZ['BattleCore'][_0x1ed2b7(0x12b)][_0x1ed2b7(0x471)][_0x1ed2b7(0x96e)]??0x57,_0x3399dc=_0x5abb40==='text'?TextManager[_0x1ed2b7(0xc0d)]:_0x1ed2b7(0x3be)['format'](_0x2122fb,TextManager[_0x1ed2b7(0xc0d)]),_0x51b9ef=!![];this[_0x1ed2b7(0x41a)](_0x3399dc,_0x1ed2b7(0xc0d),_0x51b9ef);},Window_ActorCommand[_0x33ee77(0x9a7)]['addEscapeCommand']=function(){const _0x1b0414=_0x33ee77,_0x141721=this['commandStyle'](),_0x561f4e=VisuMZ['BattleCore']['Settings'][_0x1b0414(0xbe6)][_0x1b0414(0xb3c)],_0x214405=_0x141721==='text'?TextManager[_0x1b0414(0xb2c)]:_0x1b0414(0x3be)[_0x1b0414(0x23d)](_0x561f4e,TextManager['escape']),_0x3f01de=this[_0x1b0414(0x2ae)]();this[_0x1b0414(0x41a)](_0x214405,_0x1b0414(0xb2c),_0x3f01de);},Window_ActorCommand['prototype']['isEscapeCommandEnabled']=function(){const _0x56da9f=_0x33ee77;return BattleManager[_0x56da9f(0xafc)]();},Window_ActorCommand[_0x33ee77(0x9a7)][_0x33ee77(0x955)]=function(){const _0x431aec=_0x33ee77,_0x2680b3=this['commandStyle'](),_0xed70d1=VisuMZ[_0x431aec(0x993)]['Settings'][_0x431aec(0xbe6)][_0x431aec(0x4da)],_0x1b4447=_0x2680b3==='text'?TextManager[_0x431aec(0x886)]:'\x5cI[%1]%2'[_0x431aec(0x23d)](_0xed70d1,TextManager[_0x431aec(0x886)]),_0x3a8bf5=this['isAutoBattleCommandEnabled']();this[_0x431aec(0x41a)](_0x1b4447,'autoBattle',_0x3a8bf5);},Window_ActorCommand[_0x33ee77(0x9a7)][_0x33ee77(0x30e)]=function(){return!![];},Window_ActorCommand[_0x33ee77(0x9a7)][_0x33ee77(0x9c5)]=function(){const _0x560a21=_0x33ee77;return VisuMZ[_0x560a21(0x993)][_0x560a21(0x12b)][_0x560a21(0xbbd)][_0x560a21(0x877)];},Window_ActorCommand[_0x33ee77(0x9a7)][_0x33ee77(0x80b)]=function(_0xd680c3){const _0x5b2b7f=_0x33ee77,_0x254737=this['commandStyleCheck'](_0xd680c3);if(_0x254737===_0x5b2b7f(0x7e7))this[_0x5b2b7f(0x91a)](_0xd680c3);else _0x254737===_0x5b2b7f(0x187)?this[_0x5b2b7f(0xb9c)](_0xd680c3):Window_Command['prototype'][_0x5b2b7f(0x80b)][_0x5b2b7f(0x88f)](this,_0xd680c3);this[_0x5b2b7f(0x252)](_0xd680c3);},Window_ActorCommand[_0x33ee77(0x9a7)][_0x33ee77(0xbe0)]=function(){const _0x5ccd78=_0x33ee77;return VisuMZ[_0x5ccd78(0x993)]['Settings']['ActorCmd'][_0x5ccd78(0x5ef)];},Window_ActorCommand[_0x33ee77(0x9a7)][_0x33ee77(0x916)]=function(_0x2bb6b9){const _0x1b7a32=_0x33ee77;if(_0x2bb6b9<0x0)return _0x1b7a32(0xb52);const _0x2dbf09=this[_0x1b7a32(0xbe0)]();if(_0x2dbf09!==_0x1b7a32(0x257))return _0x2dbf09;else{if(this[_0x1b7a32(0x649)]()>0x0){const _0x36b73e=this[_0x1b7a32(0x28d)](_0x2bb6b9);if(_0x36b73e[_0x1b7a32(0x7c1)](/\\I\[(\d+)\]/i)){const _0x3d003c=this['itemLineRect'](_0x2bb6b9),_0x3f8b43=this[_0x1b7a32(0x8f6)](_0x36b73e)[_0x1b7a32(0x3d9)];return _0x3f8b43<=_0x3d003c[_0x1b7a32(0x3d9)]?'iconText':_0x1b7a32(0x187);}}}return _0x1b7a32(0xb52);},Window_ActorCommand[_0x33ee77(0x9a7)][_0x33ee77(0x91a)]=function(_0xfdcbfa){const _0x243be4=_0x33ee77,_0x5858b5=this[_0x243be4(0x525)](_0xfdcbfa),_0x192dc=this[_0x243be4(0x28d)](_0xfdcbfa),_0x21b868=this['textSizeEx'](_0x192dc)[_0x243be4(0x3d9)];this[_0x243be4(0x7e5)](this[_0x243be4(0x6b2)](_0xfdcbfa));const _0x18d9f2=this[_0x243be4(0x9c5)]();if(_0x18d9f2===_0x243be4(0x409))this[_0x243be4(0x4ce)](_0x192dc,_0x5858b5['x']+_0x5858b5[_0x243be4(0x3d9)]-_0x21b868,_0x5858b5['y'],_0x21b868);else{if(_0x18d9f2===_0x243be4(0x614)){const _0x326fbf=_0x5858b5['x']+Math[_0x243be4(0x816)]((_0x5858b5[_0x243be4(0x3d9)]-_0x21b868)/0x2);this[_0x243be4(0x4ce)](_0x192dc,_0x326fbf,_0x5858b5['y'],_0x21b868);}else this[_0x243be4(0x4ce)](_0x192dc,_0x5858b5['x'],_0x5858b5['y'],_0x21b868);}},Window_ActorCommand['prototype'][_0x33ee77(0xb9c)]=function(_0x22f17d){const _0x25428b=_0x33ee77;this[_0x25428b(0x28d)](_0x22f17d)[_0x25428b(0x7c1)](/\\I\[(\d+)\]/i);const _0x5b95c2=Number(RegExp['$1'])||0x0,_0x1e6de4=this[_0x25428b(0x525)](_0x22f17d),_0x1f6d15=_0x1e6de4['x']+Math['floor']((_0x1e6de4[_0x25428b(0x3d9)]-ImageManager[_0x25428b(0x95e)])/0x2),_0x524780=_0x1e6de4['y']+(_0x1e6de4[_0x25428b(0x578)]-ImageManager['iconHeight'])/0x2;this['drawIcon'](_0x5b95c2,_0x1f6d15,_0x524780);},Window_ActorCommand[_0x33ee77(0x9a7)][_0x33ee77(0x252)]=function(_0x439cff){const _0x38b14d=_0x33ee77;if(!(VisuMZ[_0x38b14d(0x993)][_0x38b14d(0x12b)][_0x38b14d(0xbbd)][_0x38b14d(0x514)]??!![]))return;const _0x296484=this[_0x38b14d(0xbb1)](_0x439cff);if(![_0x38b14d(0x4c5),'guard','singleSkill'][_0x38b14d(0x741)](_0x296484))return;const _0x464c83=this[_0x38b14d(0x525)](_0x439cff);let _0x1feac3=null;if(_0x296484===_0x38b14d(0x4c5))_0x1feac3=$dataSkills[this[_0x38b14d(0x261)]['attackSkillId']()];else _0x296484===_0x38b14d(0x462)?_0x1feac3=$dataSkills[this[_0x38b14d(0x261)][_0x38b14d(0x743)]()]:_0x1feac3=$dataSkills[this['_list'][_0x439cff][_0x38b14d(0x593)]];this['drawSkillCost'](this[_0x38b14d(0x261)],_0x1feac3,_0x464c83['x'],_0x464c83['y'],_0x464c83[_0x38b14d(0x3d9)]);},Window_ActorCommand[_0x33ee77(0x9a7)]['drawSkillCost']=function(_0x2f68d2,_0x19a3c1,_0x11a567,_0x26ac24,_0x22f5aa){const _0xf09ab7=_0x33ee77;if(!_0x19a3c1)return;Imported[_0xf09ab7(0x4e6)]?Window_Command['prototype'][_0xf09ab7(0x407)][_0xf09ab7(0x88f)](this,_0x2f68d2,_0x19a3c1,_0x11a567,_0x26ac24,_0x22f5aa):Window_SkillList[_0xf09ab7(0x9a7)][_0xf09ab7(0x407)][_0xf09ab7(0x88f)](this,_0x19a3c1,_0x11a567,_0x26ac24,_0x22f5aa);},Window_ActorCommand[_0x33ee77(0x9a7)][_0x33ee77(0x9ac)]=function(){},Window_ActorCommand[_0x33ee77(0x9a7)][_0x33ee77(0x143)]=function(){const _0x4e17db=_0x33ee77;Window_Command[_0x4e17db(0x9a7)][_0x4e17db(0x143)]['call'](this);const _0x3c4e51=this[_0x4e17db(0x7a9)]();_0x3c4e51===_0x4e17db(0x2ea)&&this[_0x4e17db(0x6a0)]();},Window_ActorCommand[_0x33ee77(0x9a7)]['battleLayoutStyle']=function(){const _0x2cc87c=_0x33ee77;if(this[_0x2cc87c(0xad8)])return this[_0x2cc87c(0xad8)];return this[_0x2cc87c(0xad8)]=SceneManager['_scene'][_0x2cc87c(0x7a9)](),this[_0x2cc87c(0xad8)];},VisuMZ['BattleCore'][_0x33ee77(0x97b)]=Window_ActorCommand['prototype']['setup'],Window_ActorCommand['prototype'][_0x33ee77(0x888)]=function(_0x533f1f){const _0x5621ee=_0x33ee77,_0xd0d276=this[_0x5621ee(0x7a9)]();if(_0x533f1f&&['xp','portrait']['includes'](_0xd0d276))this[_0x5621ee(0x53d)](_0x533f1f);else _0x533f1f&&[_0x5621ee(0x2ea)][_0x5621ee(0x741)](_0xd0d276)&&(this[_0x5621ee(0x8a1)](_0x533f1f),this[_0x5621ee(0x6a0)]());VisuMZ[_0x5621ee(0x993)][_0x5621ee(0x97b)][_0x5621ee(0x88f)](this,_0x533f1f),_0x533f1f&&$gameTroop[_0x5621ee(0x373)]()[_0x5621ee(0x70c)]>0x0&&_0x533f1f['battler']()&&_0x533f1f[_0x5621ee(0x157)]()[_0x5621ee(0x340)]();},Window_ActorCommand['prototype'][_0x33ee77(0x53d)]=function(_0x52d70b){const _0x3d7b8e=_0x33ee77,_0x4f3520=VisuMZ[_0x3d7b8e(0x993)][_0x3d7b8e(0x12b)][_0x3d7b8e(0x826)][_0x3d7b8e(0xaa2)],_0x465ea9=Math[_0x3d7b8e(0x20e)](Graphics[_0x3d7b8e(0x71a)]/0x3),_0x56eaad=Math['round'](Graphics[_0x3d7b8e(0x71a)]/$gameParty[_0x3d7b8e(0xa6a)]()[_0x3d7b8e(0x70c)]),_0x5ee994=Math[_0x3d7b8e(0x657)](Math[_0x3d7b8e(0x480)](_0x465ea9,_0x56eaad),_0x4f3520),_0x1ec438=this[_0x3d7b8e(0x130)](VisuMZ[_0x3d7b8e(0x993)][_0x3d7b8e(0x12b)][_0x3d7b8e(0x826)][_0x3d7b8e(0x415)]),_0x5beb7f=Math[_0x3d7b8e(0x816)]((Graphics[_0x3d7b8e(0x71a)]-Graphics[_0x3d7b8e(0x3d9)])/0x2),_0x17b67e=Graphics['boxWidth']-_0x5beb7f,_0x475237=(Math[_0x3d7b8e(0x20e)](_0x56eaad*_0x52d70b['index']())+Math['round']((_0x56eaad-_0x5ee994)/0x2))[_0x3d7b8e(0x6a9)](_0x5beb7f,_0x17b67e-_0x5ee994),_0x4e7390=Math[_0x3d7b8e(0x20e)](SceneManager[_0x3d7b8e(0x473)][_0x3d7b8e(0x189)]['y']-_0x1ec438);this[_0x3d7b8e(0x4ac)](_0x475237,_0x4e7390,_0x5ee994,_0x1ec438),this['createContents'](),this['setBackgroundType'](0x1);},Window_ActorCommand[_0x33ee77(0x9a7)][_0x33ee77(0x8a1)]=function(_0x59bf8b){const _0x5c91f8=_0x33ee77,_0x388bd8=SceneManager[_0x5c91f8(0x473)][_0x5c91f8(0x218)]();this[_0x5c91f8(0x4ac)](_0x388bd8['x'],_0x388bd8['y'],_0x388bd8['width'],_0x388bd8['height']),this[_0x5c91f8(0xaa6)](),this[_0x5c91f8(0x17b)](0x0);},Window_ActorCommand[_0x33ee77(0x9a7)][_0x33ee77(0x1a7)]=function(){const _0x1e5683=_0x33ee77;if(this[_0x1e5683(0x40e)]){const _0x57ac01=this[_0x1e5683(0x40e)][_0x1e5683(0x490)],_0x11f135=this[_0x1e5683(0x3d9)]-0x8,_0x1d3053=this['height'],_0xb1403e=this[_0x1e5683(0x869)],_0x4003be=ColorManager['dimColor1'](),_0x5332de=ColorManager[_0x1e5683(0x745)]();this[_0x1e5683(0x40e)]['x']=0x4,_0x57ac01['resize'](_0x11f135,_0x1d3053),_0x57ac01['gradientFillRect'](0x0,0x0,_0x11f135,_0xb1403e,_0x5332de,_0x4003be,!![]),_0x57ac01[_0x1e5683(0x736)](0x0,_0xb1403e,_0x11f135,_0x1d3053-_0xb1403e*0x2,_0x4003be),_0x57ac01[_0x1e5683(0x38e)](0x0,_0x1d3053-_0xb1403e,_0x11f135,_0xb1403e,_0x4003be,_0x5332de,!![]),this[_0x1e5683(0x40e)][_0x1e5683(0x56f)](0x0,0x0,_0x11f135,_0x1d3053);}},Window_ActorCommand[_0x33ee77(0x9a7)]['updateHelp']=function(){const _0x3013d6=_0x33ee77;if(!this[_0x3013d6(0x261)])return;const _0x5055a8=VisuMZ[_0x3013d6(0x993)][_0x3013d6(0x12b)]['ActorCmd'],_0x84c690=this[_0x3013d6(0x80f)]();switch(_0x84c690){case _0x3013d6(0x4c5):this[_0x3013d6(0x505)]($dataSkills[this[_0x3013d6(0x261)][_0x3013d6(0x8a4)]()]);break;case _0x3013d6(0x462):this[_0x3013d6(0x505)]($dataSkills[this['_actor'][_0x3013d6(0x743)]()]);break;case _0x3013d6(0x24b):const _0x414c33=_0x5055a8[_0x3013d6(0xa95)],_0x280376=_0x414c33[_0x3013d6(0x23d)]($dataSystem[_0x3013d6(0x52f)][this['currentExt']()]);this[_0x3013d6(0xb58)][_0x3013d6(0xa78)](_0x280376);break;case _0x3013d6(0x663):this[_0x3013d6(0x505)]($dataSkills[this['currentExt']()]);break;case _0x3013d6(0x5b0):this[_0x3013d6(0xb58)][_0x3013d6(0xa78)](_0x5055a8[_0x3013d6(0x79d)]);break;case _0x3013d6(0xb2c):this['_helpWindow'][_0x3013d6(0xa78)](_0x5055a8[_0x3013d6(0x47a)]);break;case'autoBattle':this['_helpWindow'][_0x3013d6(0xa78)](_0x5055a8[_0x3013d6(0xb62)]);break;case _0x3013d6(0xc0d):this[_0x3013d6(0xb58)][_0x3013d6(0xa78)](Window_InBattleStatus['SETTINGS'][_0x3013d6(0x554)]);break;default:this[_0x3013d6(0xb58)][_0x3013d6(0xa78)]('');break;}},Window_ActorCommand['prototype']['selectLast']=function(){const _0x22874a=_0x33ee77;this[_0x22874a(0xa45)](0x0);if(this[_0x22874a(0x261)]&&ConfigManager[_0x22874a(0x561)]){const _0x4a9861=this[_0x22874a(0x261)]['lastCommandSymbol']();this[_0x22874a(0x8d5)](_0x4a9861);if(_0x4a9861==='skill'){const _0x5ce552=this[_0x22874a(0x261)][_0x22874a(0xb3e)]();if(_0x5ce552){const _0x188cb8=this[_0x22874a(0x6d4)](_0x22874a(0x24b),_0x5ce552[_0x22874a(0x740)]);this[_0x22874a(0x92b)](_0x188cb8||0x0);}}else{if(_0x4a9861===_0x22874a(0x663)){const _0x2fb059=this[_0x22874a(0x261)][_0x22874a(0xb3e)]();if(_0x2fb059){const _0x1fc84f=this[_0x22874a(0x6d4)]('singleSkill',_0x2fb059['id']);this[_0x22874a(0x92b)](_0x1fc84f||0x0);}}}}},Window_ActorCommand[_0x33ee77(0x9a7)][_0x33ee77(0x6d4)]=function(_0x1bf624,_0x2c081b){const _0x28efbd=_0x33ee77;return this[_0x28efbd(0x476)][_0x28efbd(0x378)](_0x167ee8=>_0x167ee8[_0x28efbd(0x2bb)]===_0x1bf624&&_0x167ee8[_0x28efbd(0x593)]===_0x2c081b);},VisuMZ[_0x33ee77(0x993)]['Window_BattleStatus_initialize']=Window_BattleStatus[_0x33ee77(0x9a7)][_0x33ee77(0x54f)],Window_BattleStatus[_0x33ee77(0x9a7)]['initialize']=function(_0x42265f){const _0x19cf93=_0x33ee77;VisuMZ[_0x19cf93(0x993)][_0x19cf93(0x159)][_0x19cf93(0x88f)](this,_0x42265f),this[_0x19cf93(0x282)](),this[_0x19cf93(0x1ef)]();},Window_BattleStatus[_0x33ee77(0x9a7)][_0x33ee77(0x7a9)]=function(){const _0x3ed472=_0x33ee77;if(this['_battleLayoutStyle'])return this[_0x3ed472(0xad8)];return this['_battleLayoutStyle']=SceneManager['_scene']['battleLayoutStyle'](),this[_0x3ed472(0xad8)];},Window_BattleStatus['prototype']['initBattleCore']=function(){const _0x3d5290=_0x33ee77;this[_0x3d5290(0x884)]=this[_0x3d5290(0x84f)]();const _0x3ac87c=VisuMZ['BattleCore']['Settings'][_0x3d5290(0x826)];_0x3ac87c[_0x3d5290(0x645)]&&(this[_0x3d5290(0x7fd)]=0x0);},Window_BattleStatus[_0x33ee77(0x9a7)][_0x33ee77(0x84f)]=function(){const _0x4e3f24=_0x33ee77,_0x4f14e2=VisuMZ[_0x4e3f24(0x993)][_0x4e3f24(0x12b)][_0x4e3f24(0x826)];if(_0x4f14e2[_0x4e3f24(0x18c)])return!![];const _0x302f78=this[_0x4e3f24(0x7a9)]();switch(_0x302f78){case _0x4e3f24(0x6a3):case'border':return!![];break;case _0x4e3f24(0x331):case'xp':case'portrait':default:return![];break;}},Window_BattleStatus[_0x33ee77(0x9a7)][_0x33ee77(0x96f)]=function(){const _0x40b557=_0x33ee77;return this[_0x40b557(0x84f)]()?0x0:0xa;},Window_BattleStatus[_0x33ee77(0x9a7)][_0x33ee77(0x48d)]=function(){const _0x1434c7=_0x33ee77,_0x5d6173=this[_0x1434c7(0x7a9)]();switch(_0x5d6173){case _0x1434c7(0x6a3):return 0x1;break;case'xp':case _0x1434c7(0x9f2):return $gameParty[_0x1434c7(0xa6a)]()['length'];break;case'default':default:return $gameParty[_0x1434c7(0x28c)]();break;}},Window_BattleStatus[_0x33ee77(0x9a7)][_0x33ee77(0x4e3)]=function(){const _0x8c3454=_0x33ee77,_0x1f084d=this['battleLayoutStyle']();switch(_0x1f084d){case _0x8c3454(0x6a3):return Window_StatusBase[_0x8c3454(0x9a7)]['itemHeight']['call'](this);break;case _0x8c3454(0x331):case'xp':case _0x8c3454(0x9f2):default:return this[_0x8c3454(0x2a1)];break;}},Window_BattleStatus['prototype'][_0x33ee77(0x80c)]=function(){const _0x14ece5=_0x33ee77,_0x3254fc=this[_0x14ece5(0x7a9)]();switch(_0x3254fc){case _0x14ece5(0x6a3):return Window_StatusBase[_0x14ece5(0x9a7)][_0x14ece5(0x80c)][_0x14ece5(0x88f)](this);break;case _0x14ece5(0x331):case'xp':case _0x14ece5(0x9f2):default:return 0x0;break;}},Window_BattleStatus[_0x33ee77(0x9a7)]['updatePadding']=function(){const _0x3f25f4=_0x33ee77;this[_0x3f25f4(0x84f)]()?Window_StatusBase['prototype'][_0x3f25f4(0x96c)][_0x3f25f4(0x88f)](this):this[_0x3f25f4(0x869)]=0x8;},Window_BattleStatus[_0x33ee77(0x9a7)][_0x33ee77(0x28a)]=function(){const _0x4b05f2=_0x33ee77,_0x36a8a6=VisuMZ[_0x4b05f2(0x993)][_0x4b05f2(0x12b)][_0x4b05f2(0x826)];_0x36a8a6['StatusWindowSkinFilename']?this['windowskin']=ImageManager[_0x4b05f2(0xa9d)](_0x36a8a6[_0x4b05f2(0x18c)]):Window_StatusBase[_0x4b05f2(0x9a7)][_0x4b05f2(0x28a)][_0x4b05f2(0x88f)](this);},Window_BattleStatus['prototype'][_0x33ee77(0xa8a)]=function(_0xbc77f4){const _0x5d36a9=_0x33ee77,_0x6978c8=VisuMZ[_0x5d36a9(0x993)][_0x5d36a9(0x12b)][_0x5d36a9(0x826)];if(_0x6978c8['StatusWindowSelectableBackHide'])return;Window_StatusBase[_0x5d36a9(0x9a7)]['drawItemBackground']['call'](this,_0xbc77f4);},Window_BattleStatus[_0x33ee77(0x9a7)][_0x33ee77(0x9d7)]=function(){const _0x498749=_0x33ee77;this[_0x498749(0xbb8)]=!![];},Window_BattleStatus['prototype'][_0x33ee77(0x1b4)]=function(){const _0x286ed2=_0x33ee77;Window_StatusBase['prototype'][_0x286ed2(0x1b4)]['call'](this),this['updateRefresh'](),this[_0x286ed2(0xb6a)]();if(this['battleLayoutStyle']()===_0x286ed2(0x2ea))this[_0x286ed2(0xbda)]();},Window_BattleStatus['prototype'][_0x33ee77(0x6c6)]=function(){const _0x262951=_0x33ee77;if($gameTemp[_0x262951(0x286)]())this[_0x262951(0x9c2)](),this[_0x262951(0xbb8)]=![],$gameTemp[_0x262951(0x99f)]();else this['_requestRefresh']&&(this['_requestRefresh']=![],this[_0x262951(0x8d6)](),this[_0x262951(0x766)]());},Window_BattleStatus[_0x33ee77(0x9a7)][_0x33ee77(0x6e7)]=function(){const _0x54cbbc=_0x33ee77;Window_StatusBase['prototype'][_0x54cbbc(0x6e7)]['call'](this);if(!$gameSystem[_0x54cbbc(0x7a6)]())this[_0x54cbbc(0x8d6)]();},Window_BattleStatus[_0x33ee77(0x9a7)][_0x33ee77(0x9ac)]=function(){const _0x59c181=_0x33ee77;if(this[_0x59c181(0xa94)]===Window_BattleStatus)return;Window_StatusBase[_0x59c181(0x9a7)][_0x59c181(0x9ac)]['call'](this);},Window_BattleStatus[_0x33ee77(0x9a7)][_0x33ee77(0x191)]=function(_0x4b9278){const _0x4a711a=_0x33ee77,_0x1eb7c8=this[_0x4a711a(0x7a9)]();switch(_0x1eb7c8){case'xp':case _0x4a711a(0x9f2):break;case _0x4a711a(0x331):case _0x4a711a(0x6a3):case _0x4a711a(0x2ea):default:return Window_StatusBase[_0x4a711a(0x9a7)][_0x4a711a(0x191)][_0x4a711a(0x88f)](this,_0x4b9278);break;}},VisuMZ[_0x33ee77(0x993)]['Window_BattleStatus_drawItemImage']=Window_BattleStatus[_0x33ee77(0x9a7)][_0x33ee77(0xb7c)],Window_BattleStatus[_0x33ee77(0x9a7)][_0x33ee77(0xb7c)]=function(_0x2828f9){const _0x564235=_0x33ee77,_0x1856a3=this[_0x564235(0x7a9)]();switch(_0x1856a3){case _0x564235(0x6a3):this['drawItemImageListStyle'](_0x2828f9);break;case'xp':this['drawItemImageXPStyle'](_0x2828f9);break;case _0x564235(0x9f2):this['drawItemImagePortraitStyle'](_0x2828f9);break;case _0x564235(0x331):case _0x564235(0x2ea):default:VisuMZ['BattleCore'][_0x564235(0x977)][_0x564235(0x88f)](this,_0x2828f9);break;}},Window_BattleStatus[_0x33ee77(0x9a7)][_0x33ee77(0x3fd)]=function(_0x39930c){const _0x36df09=_0x33ee77,_0x12c7ab=this['battleLayoutStyle']();if(!$gameSystem['isSideView']())this[_0x36df09(0xa89)](_0x39930c);switch(_0x12c7ab){case _0x36df09(0x6a3):this[_0x36df09(0x443)](_0x39930c);break;case'xp':case _0x36df09(0x9f2):case _0x36df09(0x331):case _0x36df09(0x2ea):default:this['drawItemStatusXPStyle'](_0x39930c);break;}},Window_BattleStatus[_0x33ee77(0x9a7)][_0x33ee77(0x72a)]=function(){const _0x226a40=_0x33ee77,_0x1fd425=this[_0x226a40(0x7a9)]();if(['xp'][_0x226a40(0x741)](_0x1fd425)&&!$gameSystem[_0x226a40(0x7a6)]()){this['setCursorRect'](0x0,0x0,0x0,0x0);return;}Window_StatusBase[_0x226a40(0x9a7)][_0x226a40(0x72a)][_0x226a40(0x88f)](this);},Window_BattleStatus[_0x33ee77(0x9a7)]['centerFrontViewSprite']=function(_0x229837){const _0xd58a7b=_0x33ee77,_0x9f7103=this[_0xd58a7b(0x2b0)](_0x229837)[_0xd58a7b(0x157)]();if(!_0x9f7103)return;const _0x1e3014=this[_0xd58a7b(0x7a9)](),_0x35ccb5=this[_0xd58a7b(0x987)](_0x229837);let _0x2aaec1=Math[_0xd58a7b(0x20e)](_0x35ccb5['x']+_0x35ccb5['width']/0x2)+this['padding'];[_0xd58a7b(0x6a3)]['includes'](_0x1e3014)&&(_0x2aaec1=_0x35ccb5['width']/$gameParty[_0xd58a7b(0xa6a)]()['length'],_0x2aaec1*=_0x229837,_0x2aaec1+=_0x35ccb5[_0xd58a7b(0x3d9)]/$gameParty[_0xd58a7b(0xa6a)]()[_0xd58a7b(0x70c)]/0x2);let _0x60c147=Math[_0xd58a7b(0x20e)](this[_0xd58a7b(0x585)](_0x229837,_0x9f7103,_0x35ccb5));_0x9f7103['setHome'](_0x2aaec1,_0x60c147),this[_0xd58a7b(0x811)](_0x9f7103,0x1),_0x9f7103['show'](),this[_0xd58a7b(0x84e)](),this['updateAttachmentSprites']();},Window_BattleStatus['prototype']['frontviewSpriteY']=function(_0x3ae5b0,_0xf748a3,_0x57401a){const _0x33cd67=_0x33ee77,_0x27d93c=VisuMZ[_0x33cd67(0x993)][_0x33cd67(0x12b)][_0x33cd67(0x826)],_0x2004eb=this['battleLayoutStyle']();if(_0x2004eb==='xp'){const _0x41a3a0=_0x27d93c[_0x33cd67(0x91e)];switch(_0x41a3a0[_0x33cd67(0x172)]()[_0x33cd67(0xaf2)]()){case _0x33cd67(0x8f8):return _0x57401a[_0x33cd67(0x578)]-_0xf748a3[_0x33cd67(0x205)][_0x33cd67(0x578)]/0x4;break;case _0x33cd67(0x614):const _0x2faf1c=_0x27d93c[_0x33cd67(0x388)];return(_0x57401a[_0x33cd67(0x578)]+(_0xf748a3[_0x33cd67(0x578)]||_0x2faf1c))/0x2;break;case _0x33cd67(0xb47):return 0x0;case'name':default:return this[_0x33cd67(0x7d6)](_0x57401a);break;}}else{if(_0x2004eb===_0x33cd67(0x9f2)){}}return _0xf748a3[_0x33cd67(0x578)];},Sprite_Name[_0x33ee77(0x9a7)]['bitmapHeight']=function(){return 0x24;},Sprite_Name[_0x33ee77(0x9a7)]['redraw']=function(){const _0x45c2fd=_0x33ee77,_0x27d76c=this['name'](),_0x50a90f=this['bitmapWidth'](),_0x378b7b=this[_0x45c2fd(0x992)]();this['setupFont'](),this[_0x45c2fd(0x490)][_0x45c2fd(0x7aa)](),this[_0x45c2fd(0x490)][_0x45c2fd(0x287)](_0x27d76c,0x4,0x0,_0x50a90f,_0x378b7b,'left');},Bitmap[_0x33ee77(0x9a7)][_0x33ee77(0x287)]=function(_0x36c420,_0x470b62,_0x5ddf7d,_0x375b7e,_0x3f02fa,_0x990d6e){const _0x2270ed=_0x33ee77;TextManager[_0x2270ed(0x1bb)]&&(_0x36c420=TextManager[_0x2270ed(0x1bb)](_0x36c420));const _0x402633=this[_0x2270ed(0x2d6)],_0x3c55e0=_0x402633[_0x2270ed(0x86c)];_0x375b7e=_0x375b7e||0xffffffff;let _0x4be436=_0x470b62,_0x16c789=Math[_0x2270ed(0x20e)](_0x5ddf7d+0x18/0x2+this[_0x2270ed(0x898)]*0.35);_0x990d6e===_0x2270ed(0x614)&&(_0x4be436+=_0x375b7e/0x2),_0x990d6e===_0x2270ed(0x409)&&(_0x4be436+=_0x375b7e),_0x402633[_0x2270ed(0xbaf)](),_0x402633[_0x2270ed(0xb61)]=this[_0x2270ed(0x23e)](),_0x402633[_0x2270ed(0x222)]=_0x990d6e,_0x402633[_0x2270ed(0x1dd)]=_0x2270ed(0x2b9),_0x402633[_0x2270ed(0x86c)]=0x1,this[_0x2270ed(0x243)](_0x36c420,_0x4be436,_0x16c789,_0x375b7e),_0x402633[_0x2270ed(0x86c)]=_0x3c55e0,this[_0x2270ed(0x659)](_0x36c420,_0x4be436,_0x16c789,_0x375b7e),_0x402633[_0x2270ed(0x9cf)](),this[_0x2270ed(0xbcc)][_0x2270ed(0x1b4)]();},Window_BattleStatus[_0x33ee77(0x9a7)][_0x33ee77(0x7d6)]=function(_0x4c1390){const _0x48588e=_0x33ee77;return this[_0x48588e(0x20a)](_0x4c1390)-this['gaugeLineHeight']();},Window_BattleStatus['prototype'][_0x33ee77(0xb51)]=function(_0x3c675b){const _0x18e060=_0x33ee77;if(!VisuMZ['BattleCore'][_0x18e060(0x12b)][_0x18e060(0x826)][_0x18e060(0x833)])return;const _0x428d3e=this[_0x18e060(0x2b0)](_0x3c675b),_0x13959a=this['itemRect'](_0x3c675b);_0x13959a[_0x18e060(0x3d9)]=ImageManager['faceWidth'],_0x13959a[_0x18e060(0x578)]-=0x2,this['drawActorFace'](_0x428d3e,_0x13959a['x']+0x1,_0x13959a['y']+0x1,_0x13959a['width'],_0x13959a['height']);},Window_BattleStatus[_0x33ee77(0x9a7)]['drawItemStatusListStyle']=function(_0x559709){const _0x448b8b=_0x33ee77,_0x463d2f=VisuMZ[_0x448b8b(0x993)]['Settings'][_0x448b8b(0x826)],_0xae12d4=$dataSystem[_0x448b8b(0xb78)]?0x4:0x3,_0x2d87ca=_0xae12d4*0x80+(_0xae12d4-0x1)*0x8+0x4,_0x41dded=this['actor'](_0x559709),_0x2aee09=this[_0x448b8b(0x987)](_0x559709);let _0x400827=_0x2aee09['x']+this['padding'];_0x463d2f[_0x448b8b(0x833)]?_0x400827=_0x2aee09['x']+ImageManager[_0x448b8b(0x212)]+0x8:_0x400827+=ImageManager[_0x448b8b(0x95e)];const _0x5b682b=Math[_0x448b8b(0x20e)](Math[_0x448b8b(0x480)](_0x2aee09['x']+_0x2aee09[_0x448b8b(0x3d9)]-_0x2d87ca,_0x400827)),_0x1c7af9=Math[_0x448b8b(0x20e)](_0x2aee09['y']+(_0x2aee09['height']-Sprite_Name[_0x448b8b(0x9a7)]['bitmapHeight']())/0x2),_0x220d90=Math['round'](_0x5b682b-ImageManager[_0x448b8b(0x95e)]/0x2-0x4),_0x283252=Math[_0x448b8b(0x20e)](_0x2aee09['y']+(_0x2aee09[_0x448b8b(0x578)]-ImageManager[_0x448b8b(0xabd)])/0x2+ImageManager[_0x448b8b(0xabd)]/0x2);let _0x5609c0=_0x5b682b+0x88;const _0x499f07=_0x1c7af9;this[_0x448b8b(0x32b)](_0x41dded,_0x5b682b-0x4+(_0x463d2f[_0x448b8b(0x863)]||0x0),_0x1c7af9+(_0x463d2f[_0x448b8b(0x646)]||0x0)),this['placeActorName'](_0x41dded,_0x5b682b+(_0x463d2f[_0x448b8b(0x73a)]||0x0),_0x1c7af9+(_0x463d2f[_0x448b8b(0x445)]||0x0)),this[_0x448b8b(0x4e4)](_0x41dded,_0x220d90+(_0x463d2f[_0x448b8b(0x67d)]||0x0),_0x283252+(_0x463d2f[_0x448b8b(0x43b)]||0x0)),this[_0x448b8b(0xc1a)](_0x41dded,'hp',_0x5609c0+0x88*0x0+(_0x463d2f[_0x448b8b(0x692)]||0x0),_0x499f07+(_0x463d2f[_0x448b8b(0x41f)]||0x0)),this[_0x448b8b(0xc1a)](_0x41dded,'mp',_0x5609c0+0x88*0x1+(_0x463d2f['MpGaugeOffsetX']||0x0),_0x499f07+(_0x463d2f[_0x448b8b(0x469)]||0x0)),$dataSystem[_0x448b8b(0xb78)]&&this['placeGauge'](_0x41dded,'tp',_0x5609c0+0x88*0x2+(_0x463d2f[_0x448b8b(0x696)]||0x0),_0x499f07+(_0x463d2f[_0x448b8b(0x328)]||0x0));},Window_BattleStatus[_0x33ee77(0x9a7)]['drawItemImageXPStyle']=function(_0x564e46){const _0x37a326=_0x33ee77;if(!$gameSystem[_0x37a326(0x7a6)]())return;VisuMZ[_0x37a326(0x993)][_0x37a326(0x977)]['call'](this,_0x564e46);},Window_BattleStatus[_0x33ee77(0x9a7)][_0x33ee77(0x7f4)]=function(_0x4d6e5e){const _0x3a85ff=_0x33ee77,_0x41e230=VisuMZ[_0x3a85ff(0x993)]['Settings'][_0x3a85ff(0x826)],_0x4bb6c7=this[_0x3a85ff(0x2b0)](_0x4d6e5e),_0x44e27a=this[_0x3a85ff(0x987)](_0x4d6e5e),_0x485a17=Math[_0x3a85ff(0x20e)](_0x44e27a['x']+(_0x44e27a[_0x3a85ff(0x3d9)]-0x80)/0x2),_0x137dd8=this['nameY'](_0x44e27a);let _0x2968fb=_0x485a17-ImageManager[_0x3a85ff(0x95e)]/0x2-0x4,_0x1beebf=_0x137dd8+ImageManager[_0x3a85ff(0xabd)]/0x2;_0x2968fb-ImageManager[_0x3a85ff(0x95e)]/0x2<_0x44e27a['x']&&(_0x2968fb=_0x485a17+ImageManager[_0x3a85ff(0x95e)]/0x2-0x4,_0x1beebf=_0x137dd8-ImageManager[_0x3a85ff(0xabd)]/0x2);const _0x1a3c79=_0x485a17,_0x2b650b=this[_0x3a85ff(0x20a)](_0x44e27a);this['placeTimeGauge'](_0x4bb6c7,_0x485a17+(_0x41e230['TpbGaugeOffsetX']||0x0),_0x137dd8+(_0x41e230[_0x3a85ff(0x646)]||0x0)),this[_0x3a85ff(0x892)](_0x4bb6c7,_0x485a17+(_0x41e230[_0x3a85ff(0x73a)]||0x0),_0x137dd8+(_0x41e230[_0x3a85ff(0x445)]||0x0)),this[_0x3a85ff(0x4e4)](_0x4bb6c7,_0x2968fb+(_0x41e230[_0x3a85ff(0x67d)]||0x0),_0x1beebf+(_0x41e230[_0x3a85ff(0x43b)]||0x0)),this[_0x3a85ff(0xc1a)](_0x4bb6c7,'hp',_0x1a3c79+(_0x41e230[_0x3a85ff(0x692)]||0x0),_0x2b650b+(_0x41e230[_0x3a85ff(0x41f)]||0x0)),this[_0x3a85ff(0xc1a)](_0x4bb6c7,'mp',_0x1a3c79+(_0x41e230[_0x3a85ff(0x9cb)]||0x0),_0x2b650b+this['gaugeLineHeight']()+(_0x41e230[_0x3a85ff(0x469)]||0x0)),$dataSystem['optDisplayTp']&&this[_0x3a85ff(0xc1a)](_0x4bb6c7,'tp',_0x1a3c79+(_0x41e230['TpGaugeOffsetX']||0x0),_0x2b650b+this[_0x3a85ff(0x508)]()*0x2+(_0x41e230[_0x3a85ff(0x328)]||0x0));},Window_BattleStatus[_0x33ee77(0x9a7)]['showPortraits']=function(_0x1a01c9){const _0xd60ddc=_0x33ee77;if(!VisuMZ[_0xd60ddc(0x993)]['Settings']['BattleLayout'][_0xd60ddc(0x868)])return![];if(_0x1a01c9['getBattlePortrait']())return!![];return Imported[_0xd60ddc(0x8a8)]&&_0x1a01c9[_0xd60ddc(0x619)]();},Game_Actor['prototype'][_0x33ee77(0x2b8)]=function(){const _0x31716e=_0x33ee77;if(this[_0x31716e(0x2b0)]()[_0x31716e(0x448)]['match'](/<BATTLE (?:IMAGE|PORTRAIT) OFFSET X:[ ]([\+\-]\d+)>/i))return Number(RegExp['$1']);else{if(this[_0x31716e(0x2b0)]()['note']['match'](/<BATTLE (?:IMAGE|PORTRAIT) OFFSET:[ ]([\+\-]\d+),[ ]([\+\-]\d+)>/i))return Number(RegExp['$1']);}return 0x0;},Game_Actor[_0x33ee77(0x9a7)][_0x33ee77(0x83d)]=function(){const _0x278b82=_0x33ee77;if(this['actor']()[_0x278b82(0x448)][_0x278b82(0x7c1)](/<BATTLE (?:IMAGE|PORTRAIT) OFFSET Y:[ ]([\+\-]\d+)>/i))return Number(RegExp['$1']);else{if(this['actor']()[_0x278b82(0x448)]['match'](/<BATTLE (?:IMAGE|PORTRAIT) OFFSET:[ ]([\+\-]\d+),[ ]([\+\-]\d+)>/i))return Number(RegExp['$2']);}return 0x0;},Window_BattleStatus[_0x33ee77(0x9a7)]['drawItemImagePortraitStyle']=function(_0x11704c){const _0x3722ff=_0x33ee77,_0x11d4fd=this[_0x3722ff(0x2b0)](_0x11704c);if(this[_0x3722ff(0x59b)](_0x11d4fd)){const _0x58cd3d=_0x3722ff(0x421)[_0x3722ff(0x23d)](_0x11d4fd[_0x3722ff(0xb36)]()),_0x1dbbe6=this[_0x3722ff(0x4c8)](_0x58cd3d,Sprite),_0x4f4f7c=_0x11d4fd[_0x3722ff(0x744)]();_0x4f4f7c!==''?_0x1dbbe6[_0x3722ff(0x490)]=ImageManager[_0x3722ff(0xbf5)](_0x4f4f7c):_0x1dbbe6['bitmap']=ImageManager[_0x3722ff(0x67a)];const _0x7fe450=this[_0x3722ff(0x987)](_0x11704c);_0x1dbbe6[_0x3722ff(0xbbb)]['x']=0.5,_0x1dbbe6[_0x3722ff(0xbbb)]['y']=0x1;let _0x365f97=Math[_0x3722ff(0x20e)](_0x7fe450['x']+_0x7fe450['width']/0x2)+this['padding'];_0x365f97+=_0x11d4fd[_0x3722ff(0x2b8)]();let _0x394c3c=Math[_0x3722ff(0x20e)](this[_0x3722ff(0x578)]);_0x394c3c+=_0x11d4fd['getBattlePortraitOffsetY'](),_0x1dbbe6[_0x3722ff(0x4ac)](_0x365f97,_0x394c3c);const _0x3d20d3=VisuMZ[_0x3722ff(0x993)][_0x3722ff(0x12b)]['BattleLayout'][_0x3722ff(0x9bb)];_0x1dbbe6['scale']['x']=_0x3d20d3,_0x1dbbe6[_0x3722ff(0x293)]['y']=_0x3d20d3,_0x1dbbe6[_0x3722ff(0x6e7)]();}else{const _0x328825=this[_0x3722ff(0x131)](_0x11704c);this[_0x3722ff(0x983)](_0x11d4fd,_0x328825['x'],_0x328825['y'],_0x328825[_0x3722ff(0x3d9)],_0x328825['height']);}},Window_BattleStatus[_0x33ee77(0x9a7)]['createInnerPortrait']=function(_0x29b73e,_0x51c912){const _0x2ff86b=_0x33ee77,_0x3b36c0=this[_0x2ff86b(0x52c)];if(_0x3b36c0[_0x29b73e])return _0x3b36c0[_0x29b73e];else{const _0x39bfb3=new _0x51c912();return _0x3b36c0[_0x29b73e]=_0x39bfb3,this[_0x2ff86b(0x644)](_0x39bfb3),this['addChildToBack'](this[_0x2ff86b(0x7c2)]),_0x39bfb3;}},Window_BattleStatus[_0x33ee77(0x9a7)][_0x33ee77(0x972)]=function(){const _0x470e60=_0x33ee77;this[_0x470e60(0xb23)](),this[_0x470e60(0x134)](),Window_StatusBase[_0x470e60(0x9a7)][_0x470e60(0x972)][_0x470e60(0x88f)](this),this[_0x470e60(0x781)]();},Window_BattleStatus['prototype'][_0x33ee77(0xb23)]=function(){const _0x1112ac=_0x33ee77;this['_cursorArea']=new Sprite(),this['_cursorArea'][_0x1112ac(0x264)]=[new PIXI['filters'][(_0x1112ac(0x195))]()],this['_cursorArea'][_0x1112ac(0x171)]=new Rectangle(),this['_cursorArea']['move'](this[_0x1112ac(0xb0f)],this['_padding']),this['addChild'](this[_0x1112ac(0x7c2)]);},Window_BattleStatus[_0x33ee77(0x9a7)][_0x33ee77(0x134)]=function(){const _0x124692=_0x33ee77;this[_0x124692(0xa97)]=new Sprite(),this[_0x124692(0xb83)](this[_0x124692(0xa97)]);},Window_BattleStatus[_0x33ee77(0x9a7)][_0x33ee77(0x84e)]=function(){const _0x34734a=_0x33ee77;this[_0x34734a(0xa97)]&&this[_0x34734a(0xb83)](this['_effectsContainer']);},Window_BattleStatus[_0x33ee77(0x9a7)][_0x33ee77(0x781)]=function(){const _0x2b3e89=_0x33ee77;this[_0x2b3e89(0x5ba)]=new Sprite(),this[_0x2b3e89(0xb83)](this[_0x2b3e89(0x5ba)]);},Window_BattleStatus[_0x33ee77(0x9a7)][_0x33ee77(0x639)]=function(){const _0x1fb134=_0x33ee77;this[_0x1fb134(0x37f)]=new Sprite();for(let _0x27b9ba=0x0;_0x27b9ba<0x9;_0x27b9ba++){this[_0x1fb134(0x37f)][_0x1fb134(0xb83)](new Sprite());}this['_cursorArea'][_0x1fb134(0xb83)](this[_0x1fb134(0x37f)]);},Window_BattleStatus['prototype'][_0x33ee77(0x44d)]=function(){const _0x5661a9=_0x33ee77;Window_StatusBase['prototype'][_0x5661a9(0x44d)][_0x5661a9(0x88f)](this),this[_0x5661a9(0x574)]();},Window_BattleStatus['prototype'][_0x33ee77(0x574)]=function(){const _0x44dfc8=_0x33ee77,_0x1ecd59=this['_padding'];this[_0x44dfc8(0x7c2)][_0x44dfc8(0x4ac)](_0x1ecd59,_0x1ecd59),this[_0x44dfc8(0x7c2)]['x']=_0x1ecd59-this[_0x44dfc8(0x430)]['x'],this[_0x44dfc8(0x7c2)]['y']=_0x1ecd59-this['origin']['y'],this[_0x44dfc8(0x802)]>0x0&&this[_0x44dfc8(0x2a1)]>0x0?this[_0x44dfc8(0x7c2)][_0x44dfc8(0xb1c)]=this[_0x44dfc8(0x58a)]():this[_0x44dfc8(0x7c2)][_0x44dfc8(0xb1c)]=![];},Window_BattleStatus['prototype'][_0x33ee77(0x7f8)]=function(){const _0x453d25=_0x33ee77;Window_StatusBase[_0x453d25(0x9a7)]['_updateFilterArea'][_0x453d25(0x88f)](this),this[_0x453d25(0x824)]();},Window_BattleStatus[_0x33ee77(0x9a7)][_0x33ee77(0x824)]=function(){const _0x2d99c3=_0x33ee77,_0x44eed9=this[_0x2d99c3(0x7c2)]['worldTransform'][_0x2d99c3(0x4e9)](new Point(0x0,0x0)),_0x3eab55=this['_cursorArea']['filterArea'];_0x3eab55['x']=_0x44eed9['x']+this[_0x2d99c3(0x430)]['x'],_0x3eab55['y']=_0x44eed9['y']+this[_0x2d99c3(0x430)]['y'],_0x3eab55['width']=this[_0x2d99c3(0x802)],_0x3eab55[_0x2d99c3(0x578)]=this['innerHeight'];},Window_BattleStatus[_0x33ee77(0x9a7)][_0x33ee77(0x51f)]=function(_0x1fae52){const _0x732aa4=_0x33ee77;if(this[_0x732aa4(0x7a9)]()!==_0x732aa4(0x9f2))return;this['drawItemImagePortraitStyle'](_0x1fae52[_0x732aa4(0xa63)]());},Window_BattleStatus[_0x33ee77(0x9a7)][_0x33ee77(0x418)]=function(_0x23ff9e,_0x6e75cf){const _0x559ece=_0x33ee77;if(!this[_0x559ece(0x5ba)])return;if(!_0x23ff9e)return;if(!_0x6e75cf)return;const _0x12e63=this[_0x559ece(0x987)](_0x6e75cf['index']());_0x12e63['x']+=_0x12e63[_0x559ece(0x3d9)]/0x2+this[_0x559ece(0x869)],_0x23ff9e['x']=_0x12e63['x'],_0x23ff9e['y']=_0x12e63['y'],this[_0x559ece(0x5ba)]['addChild'](_0x23ff9e);},Window_BattleStatus['prototype'][_0x33ee77(0x49f)]=function(_0x352b8b){const _0xbb5d3c=_0x33ee77;if(!this[_0xbb5d3c(0x5ba)])return;if(!_0x352b8b)return;this[_0xbb5d3c(0x5ba)]['removeChild'](_0x352b8b);},Window_BattleStatus['prototype']['updateBorderStyle']=function(){const _0x2db1f1=_0x33ee77;if(!this[_0x2db1f1(0x63b)]())return;if(!this[_0x2db1f1(0xb22)])this[_0x2db1f1(0x6ad)]();this[_0x2db1f1(0x4e8)](),this[_0x2db1f1(0x517)]();},Window_BattleStatus[_0x33ee77(0x9a7)]['isBorderStylePortraitShown']=function(){const _0x39fb8f=_0x33ee77;if(this[_0x39fb8f(0xa94)]!==Window_BattleStatus)return![];if(!SceneManager[_0x39fb8f(0x5d9)]())return![];return VisuMZ[_0x39fb8f(0x993)][_0x39fb8f(0x12b)][_0x39fb8f(0x826)][_0x39fb8f(0x7c4)];},Window_BattleStatus[_0x33ee77(0x9a7)][_0x33ee77(0x6ad)]=function(){const _0x4a61a2=_0x33ee77;this[_0x4a61a2(0xb22)]=new Sprite();const _0x44e401=SceneManager[_0x4a61a2(0x473)],_0x88fcad=_0x44e401[_0x4a61a2(0x724)][_0x4a61a2(0xba4)](_0x44e401[_0x4a61a2(0xbfb)]);_0x44e401['addChildAt'](this[_0x4a61a2(0xb22)],_0x88fcad),this['_borderPortraitSprite'][_0x4a61a2(0xbbb)]['x']=0.5,this[_0x4a61a2(0xb22)]['anchor']['y']=0x1;const _0x4f50d7=VisuMZ[_0x4a61a2(0x993)]['Settings'][_0x4a61a2(0x826)]['PortraitScaleBorderStyle'];this['_borderPortraitSprite'][_0x4a61a2(0x293)]['x']=_0x4f50d7,this['_borderPortraitSprite'][_0x4a61a2(0x293)]['y']=_0x4f50d7,this[_0x4a61a2(0xb22)]['y']=this['y']+this['height'],this[_0x4a61a2(0x6eb)]=0x0;},Window_BattleStatus[_0x33ee77(0x9a7)][_0x33ee77(0x8aa)]=function(){const _0x269fc2=_0x33ee77;return BattleManager[_0x269fc2(0x9bd)]();},Window_BattleStatus['prototype'][_0x33ee77(0x4e8)]=function(){const _0x2ff5ab=_0x33ee77;this[_0x2ff5ab(0xb22)][_0x2ff5ab(0xb1c)]=this['isBorderPortraitSpriteVisible']();const _0x44015b=BattleManager[_0x2ff5ab(0x2b0)](),_0x7efc25=_0x44015b?_0x44015b[_0x2ff5ab(0x744)]()||'':'';if(_0x44015b===this[_0x2ff5ab(0xb22)][_0x2ff5ab(0x2b0)]&&_0x7efc25===this[_0x2ff5ab(0xb22)][_0x2ff5ab(0x8db)])return;this[_0x2ff5ab(0xb22)][_0x2ff5ab(0x2b0)]=_0x44015b||this[_0x2ff5ab(0xb22)][_0x2ff5ab(0x2b0)],this['_borderPortraitSprite']['lastFilename']=_0x7efc25;if(!_0x44015b)return;else{if(_0x7efc25===''){this[_0x2ff5ab(0xb22)]['bitmap']=ImageManager[_0x2ff5ab(0x67a)],this[_0x2ff5ab(0xb22)][_0x2ff5ab(0x8db)]='';return;}else{const _0xfe53e3=ImageManager[_0x2ff5ab(0xbf5)](_0x7efc25);this[_0x2ff5ab(0xb22)][_0x2ff5ab(0x7fd)]=0x0,_0xfe53e3[_0x2ff5ab(0x410)](this[_0x2ff5ab(0xc00)][_0x2ff5ab(0x925)](this,_0xfe53e3));}}},Window_BattleStatus[_0x33ee77(0x9a7)][_0x33ee77(0xc00)]=function(_0x28dcab){const _0x56b2d4=_0x33ee77;this['_borderPortraitDuration']=0x14,this[_0x56b2d4(0xb22)]['bitmap']=_0x28dcab;SceneManager[_0x56b2d4(0x473)][_0x56b2d4(0xc26)]()?(this['_borderPortraitSprite']['x']=0x0,this['_borderPortraitTargetX']=Math[_0x56b2d4(0x399)](_0x28dcab[_0x56b2d4(0x3d9)]/0x2)):(this[_0x56b2d4(0xb22)]['x']=this[_0x56b2d4(0x3d9)],this[_0x56b2d4(0x426)]=this[_0x56b2d4(0x3d9)]*0x3/0x4);this[_0x56b2d4(0xb22)]['opacity']=0x0,this[_0x56b2d4(0xb22)]['y']=this['y']+this[_0x56b2d4(0x578)];const _0x4d056f=BattleManager[_0x56b2d4(0x2b0)]();_0x4d056f&&(this[_0x56b2d4(0x426)]+=_0x4d056f[_0x56b2d4(0x2b8)](),this[_0x56b2d4(0xb22)]['y']+=_0x4d056f['getBattlePortraitOffsetY']());},Window_BattleStatus[_0x33ee77(0x9a7)]['updateBorderSprite']=function(){const _0x2e4732=_0x33ee77;if(this['_borderPortraitDuration']>0x0){const _0x2b1214=this['_borderPortraitDuration'],_0xa34774=this[_0x2e4732(0xb22)];_0xa34774['x']=(_0xa34774['x']*(_0x2b1214-0x1)+this[_0x2e4732(0x426)])/_0x2b1214,_0xa34774[_0x2e4732(0x7fd)]=(_0xa34774[_0x2e4732(0x7fd)]*(_0x2b1214-0x1)+0xff)/_0x2b1214,this['_borderPortraitDuration']--;}},Window_BattleStatus[_0x33ee77(0x9a7)][_0x33ee77(0xb6a)]=function(){const _0x4a79f4=_0x33ee77;return;this[_0x4a79f4(0xa97)]&&(this[_0x4a79f4(0xa97)]['x']=this['x'],this[_0x4a79f4(0xa97)]['y']=this['y']),this[_0x4a79f4(0x5ba)]&&(this['_damageContainer']['x']=this['x'],this[_0x4a79f4(0x5ba)]['y']=this['y']);},Window_BattleStatus[_0x33ee77(0x9a7)][_0x33ee77(0x1ef)]=function(){const _0x44d928=_0x33ee77,_0xaaf8b8=VisuMZ[_0x44d928(0x993)]['Settings'][_0x44d928(0x826)];if(_0xaaf8b8['StatusWindowAttachmentBack']){const _0x4db01a=new Sprite();_0x4db01a[_0x44d928(0x490)]=ImageManager[_0x44d928(0xa9d)](_0xaaf8b8[_0x44d928(0x1fc)]),_0x4db01a['x']=_0xaaf8b8[_0x44d928(0x650)]||0x0,_0x4db01a['y']=_0xaaf8b8['StatusWindowAttachmentBackOffsetY']||0x0,this['addChildToBack'](_0x4db01a),this[_0x44d928(0x2c9)]=_0x4db01a;}if(_0xaaf8b8[_0x44d928(0x72b)]){const _0x33fa7e=new Sprite();_0x33fa7e[_0x44d928(0x490)]=ImageManager[_0x44d928(0xa9d)](_0xaaf8b8[_0x44d928(0x72b)]),_0x33fa7e['x']=_0xaaf8b8[_0x44d928(0x810)]||0x0,_0x33fa7e['y']=_0xaaf8b8[_0x44d928(0x531)]||0x0,this[_0x44d928(0xb83)](_0x33fa7e),this[_0x44d928(0x801)]=_0x33fa7e;}},Window_BattleStatus[_0x33ee77(0x9a7)][_0x33ee77(0x766)]=function(){const _0x5bfa5d=_0x33ee77;this[_0x5bfa5d(0x801)]&&this[_0x5bfa5d(0xb83)](this[_0x5bfa5d(0x801)]),this['_backAttachmentSprite']&&this[_0x5bfa5d(0x644)](this[_0x5bfa5d(0x2c9)]);},Window_BattleActor[_0x33ee77(0x9a7)][_0x33ee77(0x85c)]=function(){const _0x4bfb6c=_0x33ee77;return this[_0x4bfb6c(0xa05)]();},Window_BattleActor[_0x33ee77(0x9a7)]['isActionSelectionValid']=function(){const _0x2a577b=_0x33ee77,_0x4dcf12=BattleManager[_0x2a577b(0x21e)]();if(!_0x4dcf12)return!![];if(!_0x4dcf12[_0x2a577b(0x5b0)]())return!![];const _0x57241a=this[_0x2a577b(0x2b0)](this[_0x2a577b(0xa63)]()),_0x5ae10f=_0x4dcf12[_0x2a577b(0x5b0)]()[_0x2a577b(0x448)];if(_0x4dcf12[_0x2a577b(0x55d)]()){if(_0x57241a===BattleManager['actor']())return![];}if(_0x4dcf12[_0x2a577b(0x11b)]()){if(!_0x57241a[_0x2a577b(0x385)]())return![];}if(_0x4dcf12['isForAliveFriend']()){if(!_0x57241a[_0x2a577b(0x4ad)]())return![];}return!![];},Window_BattleActor['prototype'][_0x33ee77(0x54e)]=function(_0xd76427){const _0x113e13=_0x33ee77;this[_0x113e13(0x291)]=_0xd76427;},VisuMZ[_0x33ee77(0x993)][_0x33ee77(0x6d1)]=Window_BattleActor['prototype'][_0x33ee77(0x702)],Window_BattleActor[_0x33ee77(0x9a7)]['processTouch']=function(){const _0x36f482=_0x33ee77;Window_BattleStatus[_0x36f482(0x9a7)][_0x36f482(0x702)]['call'](this),this['_enemyWindowMode']?this['processEnemyModeTouchBattleCore']():VisuMZ['BattleCore'][_0x36f482(0x6d1)][_0x36f482(0x88f)](this);},Window_BattleActor['prototype'][_0x33ee77(0x8c2)]=function(){const _0x1ed200=_0x33ee77,_0x4f8700=SceneManager[_0x1ed200(0x473)][_0x1ed200(0x7d5)];if(!_0x4f8700)return;this['_doubleTouch']=![];const _0x28179f=this[_0x1ed200(0xaa3)]();if(_0x28179f>=0x0){this[_0x1ed200(0x92b)](_0x28179f);if(TouchInput[_0x1ed200(0xa02)]()){const _0x51f3bc=$gameParty['members']()[_0x28179f],_0x3d2560=_0x4f8700[_0x1ed200(0x72d)][_0x1ed200(0xba4)](_0x51f3bc);_0x3d2560>=0x0&&(_0x4f8700[_0x1ed200(0x92b)](_0x3d2560),_0x4f8700['processOk']());}}},Window_BattleActor[_0x33ee77(0x9a7)][_0x33ee77(0x3ce)]=function(){const _0xdb6d3e=_0x33ee77;this['_enemyWindowMode']&&(this[_0xdb6d3e(0x65b)]++,this[_0xdb6d3e(0x5c8)]=!![]);const _0x56d5c4=Window_BattleStatus[_0xdb6d3e(0x9a7)][_0xdb6d3e(0x3ce)][_0xdb6d3e(0x88f)](this);return this[_0xdb6d3e(0x291)]&&(this['active']=![]),_0x56d5c4;},VisuMZ[_0x33ee77(0x993)]['Window_BattleActor_show']=Window_BattleActor['prototype'][_0x33ee77(0x6e7)],Window_BattleActor[_0x33ee77(0x9a7)][_0x33ee77(0x6e7)]=function(){const _0x1798de=_0x33ee77;VisuMZ[_0x1798de(0x993)][_0x1798de(0x9a8)][_0x1798de(0x88f)](this);const _0x584452=BattleManager[_0x1798de(0x21e)]();if(_0x584452){const _0x5571d2=$gameParty[_0x1798de(0x373)]();_0x584452['canSingleOrMultipleSelect']()&&_0x5571d2[_0x1798de(0x70c)]>0x1&&this[_0x1798de(0xa11)](_0x1798de(0x5bc),this[_0x1798de(0x451)]['bind'](this));}},VisuMZ[_0x33ee77(0x993)][_0x33ee77(0x242)]=Window_BattleActor['prototype'][_0x33ee77(0x9ac)],Window_BattleActor[_0x33ee77(0x9a7)][_0x33ee77(0x9ac)]=function(){const _0x86f198=_0x33ee77;VisuMZ[_0x86f198(0x993)][_0x86f198(0x242)][_0x86f198(0x88f)](this),delete this['_handlers']['pageup'],delete this['_handlers'][_0x86f198(0x5bc)];},Window_BattleActor[_0x33ee77(0x9a7)]['selectAllActors']=function(){const _0x5d2162=_0x33ee77,_0x1b4b12=BattleManager[_0x5d2162(0x21e)]();if(_0x1b4b12)_0x1b4b12[_0x5d2162(0x7ef)]('all\x20actors');this[_0x5d2162(0x8b4)]();},VisuMZ[_0x33ee77(0x993)]['Window_BattleEnemy_initialize']=Window_BattleEnemy[_0x33ee77(0x9a7)][_0x33ee77(0x54f)],Window_BattleEnemy[_0x33ee77(0x9a7)][_0x33ee77(0x54f)]=function(_0x2505ee){const _0x26ebd9=_0x33ee77;this[_0x26ebd9(0xa90)]=null,VisuMZ[_0x26ebd9(0x993)][_0x26ebd9(0x57d)][_0x26ebd9(0x88f)](this,_0x2505ee);if(Imported[_0x26ebd9(0xb63)]){if(VisuMZ[_0x26ebd9(0x97e)][_0x26ebd9(0x71e)]<1.12){let _0x1ac990='';_0x1ac990+='VisuMZ_2_AggroControlSystem\x20needs\x20to\x20be\x20updated\x20',_0x1ac990+=_0x26ebd9(0x129),_0x1ac990+='with\x20latest\x20version\x20of\x20VisuMZ_1_BattleCore!',alert(_0x1ac990),SceneManager[_0x26ebd9(0x41d)]();}}},Window_BattleEnemy[_0x33ee77(0x9a7)][_0x33ee77(0x48d)]=function(){const _0x22bd57=_0x33ee77;return this[_0x22bd57(0x649)]();},VisuMZ[_0x33ee77(0x993)][_0x33ee77(0xc24)]=Window_BattleEnemy[_0x33ee77(0x9a7)][_0x33ee77(0x6e7)],Window_BattleEnemy[_0x33ee77(0x9a7)][_0x33ee77(0x6e7)]=function(){const _0x27a393=_0x33ee77;VisuMZ[_0x27a393(0x993)][_0x27a393(0xc24)][_0x27a393(0x88f)](this),this['y']=Graphics[_0x27a393(0x578)]*0xa,this[_0x27a393(0x76c)]()&&this[_0x27a393(0x2d1)]();},VisuMZ[_0x33ee77(0x993)][_0x33ee77(0x5ae)]=Window_BattleEnemy['prototype'][_0x33ee77(0x9ac)],Window_BattleEnemy[_0x33ee77(0x9a7)][_0x33ee77(0x9ac)]=function(){const _0x4e7fa6=_0x33ee77;VisuMZ[_0x4e7fa6(0x993)]['Window_BattleEnemy_hide'][_0x4e7fa6(0x88f)](this),$gameParty[_0x4e7fa6(0x92b)](null),delete this[_0x4e7fa6(0xb7f)][_0x4e7fa6(0xb49)],delete this['_handlers'][_0x4e7fa6(0x5bc)];},Window_BattleEnemy['prototype']['validTargets']=function(){const _0x22fa86=_0x33ee77;let _0x320978=$gameTroop[_0x22fa86(0x373)]();const _0x493c5a=BattleManager[_0x22fa86(0x21e)]();if(_0x493c5a){_0x493c5a[_0x22fa86(0x552)]()&&_0x320978[_0x22fa86(0x70c)]>0x1&&this[_0x22fa86(0xa11)](_0x22fa86(0xb49),this[_0x22fa86(0x4ec)][_0x22fa86(0x925)](this));if(_0x493c5a[_0x22fa86(0x82d)]()){const _0x3408cd=$gameParty[_0x22fa86(0x373)]();_0x320978=_0x320978[_0x22fa86(0x770)](_0x3408cd),_0x493c5a[_0x22fa86(0x552)]()&&_0x3408cd[_0x22fa86(0x70c)]>0x1&&this['setHandler']('pagedown',this[_0x22fa86(0x451)][_0x22fa86(0x925)](this));}}return _0x320978;},Window_BattleEnemy[_0x33ee77(0x9a7)][_0x33ee77(0x8d6)]=function(){const _0x130e7a=_0x33ee77;this[_0x130e7a(0x72d)]=this['validTargets'](),this[_0x130e7a(0x1bd)](),Window_Selectable['prototype'][_0x130e7a(0x8d6)][_0x130e7a(0x88f)](this);},Window_BattleEnemy[_0x33ee77(0x9a7)][_0x33ee77(0x1bd)]=function(){const _0x5cd219=_0x33ee77;this[_0x5cd219(0x72d)]['sort']((_0x3dcf24,_0x554351)=>{const _0x15cb4a=_0x5cd219;if(_0x3dcf24['isActor']()!==_0x554351['isActor']()){if(_0x3dcf24[_0x15cb4a(0x43e)]())return-0x1;if(_0x554351['isEnemy']())return 0x1;}if(_0x3dcf24['isActor']()&&_0x554351[_0x15cb4a(0x6c3)]())return _0x3dcf24[_0x15cb4a(0xa63)]()-_0x554351['index']();return _0x3dcf24['battler']()[_0x15cb4a(0x1f7)]===_0x554351[_0x15cb4a(0x157)]()[_0x15cb4a(0x1f7)]?_0x3dcf24[_0x15cb4a(0x157)]()[_0x15cb4a(0x74a)]-_0x554351[_0x15cb4a(0x157)]()[_0x15cb4a(0x74a)]:_0x3dcf24[_0x15cb4a(0x157)]()['_baseX']-_0x554351['battler']()[_0x15cb4a(0x1f7)];}),SceneManager[_0x5cd219(0x8ad)]()&&this[_0x5cd219(0x72d)][_0x5cd219(0x998)]();},Window_BattleEnemy[_0x33ee77(0x9a7)][_0x33ee77(0xbb9)]=function(){const _0x31c335=_0x33ee77,_0x28a5b2=VisuMZ[_0x31c335(0x993)][_0x31c335(0x12b)][_0x31c335(0xc1d)];_0x28a5b2[_0x31c335(0xaf0)]?this['autoSelectLastSelected']():this[_0x31c335(0x15b)]();},Window_BattleEnemy[_0x33ee77(0x9a7)][_0x33ee77(0x5e2)]=function(){const _0x3583bc=_0x33ee77,_0x96fd1c=BattleManager[_0x3583bc(0x21e)]();if(_0x96fd1c&&_0x96fd1c['isForAnyone']()){if(_0x96fd1c[_0x3583bc(0xaca)]()){if(this[_0x3583bc(0x88c)]&&this[_0x3583bc(0x72d)][_0x3583bc(0x741)](this[_0x3583bc(0x88c)])){const _0x764c54=this['_enemies']['indexOf'](this[_0x3583bc(0x88c)]);return this[_0x3583bc(0xa45)](_0x764c54);}else return this['autoSelectPriority']();}}if(this['_lastEnemy']&&this['_enemies']['includes'](this['_lastEnemy'])){const _0x1467f9=this['_enemies'][_0x3583bc(0xba4)](this[_0x3583bc(0xa90)]);this[_0x3583bc(0xa45)](_0x1467f9);}else this['autoSelectPriority']();},Window_BattleEnemy[_0x33ee77(0x9a7)][_0x33ee77(0x15b)]=function(){const _0x142ec7=_0x33ee77,_0x20ffa9=BattleManager[_0x142ec7(0x21e)]();if(_0x20ffa9&&_0x20ffa9[_0x142ec7(0x82d)]()){const _0x5102cf=$gameParty[_0x142ec7(0x373)]()[0x0];let _0x11e9c5=this[_0x142ec7(0x72d)]['indexOf'](_0x5102cf);const _0x158ebd=_0x20ffa9[_0x142ec7(0x5b0)]()[_0x142ec7(0x519)];if(_0x158ebd[_0x142ec7(0x7c1)](/(?:ALLY|FRIEND) OR (?:ENEMY|FOE)/i)){this[_0x142ec7(0xa45)](_0x11e9c5);return;}else{if(_0x158ebd[_0x142ec7(0x7c1)](/(?:ENEMY|FOE) OR (?:ALLY|FRIEND)/i)){this[_0x142ec7(0xa45)](_0x11e9c5-0x1);return;}}}const _0x14c217=VisuMZ[_0x142ec7(0x993)][_0x142ec7(0x12b)][_0x142ec7(0xc1d)];let _0x1ee9bf=![];$gameSystem[_0x142ec7(0x7a6)]()?_0x1ee9bf=_0x14c217[_0x142ec7(0x24d)]:_0x1ee9bf=_0x14c217['FrontViewSelect'],this[_0x142ec7(0xa45)](_0x1ee9bf?this[_0x142ec7(0x649)]()-0x1:0x0);},Window_BattleEnemy['prototype'][_0x33ee77(0x92c)]=function(){const _0x57c9a9=_0x33ee77;Window_Selectable[_0x57c9a9(0x9a7)]['callOkHandler'][_0x57c9a9(0x88f)](this);if(!this['enemy']())return;if(this['enemy']()[_0x57c9a9(0x43e)]())this[_0x57c9a9(0xa90)]=this[_0x57c9a9(0x246)]();if(this[_0x57c9a9(0x246)]()[_0x57c9a9(0x6c3)]())this[_0x57c9a9(0x88c)]=this['enemy']();},Window_BattleEnemy[_0x33ee77(0x9a7)][_0x33ee77(0x92b)]=function(_0x533e32){const _0x21798c=_0x33ee77;Window_Selectable[_0x21798c(0x9a7)][_0x21798c(0x92b)]['call'](this,_0x533e32),$gameTroop[_0x21798c(0x92b)](this[_0x21798c(0x246)]()),$gameParty[_0x21798c(0x92b)](this[_0x21798c(0x246)]());if(!this[_0x21798c(0x246)]())return;if(this[_0x21798c(0x76c)]()){const _0x37da44=SceneManager['_scene']['_actorWindow'];this[_0x21798c(0x246)]()['isActor']()?_0x37da44['select'](this[_0x21798c(0x246)]()[_0x21798c(0xa63)]()):_0x37da44[_0x21798c(0x15e)]();}},Window_BattleEnemy['prototype']['meetsSelectFrontviewActorConditions']=function(){const _0x131bc5=_0x33ee77;if(!this['visible'])return![];if($gameSystem[_0x131bc5(0x7a6)]())return![];const _0xed9d39=SceneManager[_0x131bc5(0x473)][_0x131bc5(0x7a9)](),_0x17d71a=[_0x131bc5(0x331),_0x131bc5(0x6a3),'xp',_0x131bc5(0x9f2),_0x131bc5(0x2ea)];return _0x17d71a[_0x131bc5(0x741)](_0xed9d39);},Window_BattleEnemy[_0x33ee77(0x9a7)][_0x33ee77(0x2d1)]=function(){const _0x12fa4c=_0x33ee77,_0x2d9b02=SceneManager[_0x12fa4c(0x473)][_0x12fa4c(0x78a)];_0x2d9b02[_0x12fa4c(0x6e7)](),_0x2d9b02[_0x12fa4c(0x54e)](!![]),_0x2d9b02[_0x12fa4c(0x8d6)](),_0x2d9b02[_0x12fa4c(0x15e)]();const _0x167027=SceneManager[_0x12fa4c(0x473)][_0x12fa4c(0x7a9)](),_0x68c9b2=['xp',_0x12fa4c(0x9f2),_0x12fa4c(0x2ea)];if(_0x68c9b2[_0x12fa4c(0x741)](_0x167027)){const _0x1b65fe=SceneManager[_0x12fa4c(0x473)][_0x12fa4c(0x189)];_0x1b65fe[_0x12fa4c(0x293)]['y']=0x0;}},Window_BattleEnemy['prototype'][_0x33ee77(0xa07)]=function(){const _0x53c4f4=_0x33ee77,_0x3eb5ca=SceneManager['_scene']['_actorWindow'];_0x3eb5ca[_0x53c4f4(0x9ac)](),_0x3eb5ca[_0x53c4f4(0x54e)](![]),_0x3eb5ca[_0x53c4f4(0x15e)]();const _0x444476=SceneManager[_0x53c4f4(0x473)]['_statusWindow'];_0x444476[_0x53c4f4(0x293)]['y']=0x1;},Window_BattleEnemy[_0x33ee77(0x9a7)][_0x33ee77(0x4ec)]=function(){const _0x25514e=_0x33ee77,_0x299393=BattleManager[_0x25514e(0x21e)]();if(_0x299393)_0x299393[_0x25514e(0x7ef)](_0x25514e(0x667));this[_0x25514e(0x8b4)]();},Window_BattleEnemy[_0x33ee77(0x9a7)][_0x33ee77(0x451)]=function(){const _0x4829e7=_0x33ee77,_0x3e8ea7=BattleManager['inputtingAction']();if(_0x3e8ea7)_0x3e8ea7['setTargetBattlerKey'](_0x4829e7(0xb9a));this[_0x4829e7(0x8b4)]();},Window_BattleEnemy[_0x33ee77(0x9a7)][_0x33ee77(0x85c)]=function(){const _0x5d2825=_0x33ee77;return this[_0x5d2825(0xa05)]();},Window_BattleEnemy['prototype'][_0x33ee77(0xa05)]=function(){const _0x5dec5d=_0x33ee77,_0x458fed=BattleManager[_0x5dec5d(0x21e)]();if(!_0x458fed)return!![];if(!_0x458fed[_0x5dec5d(0x5b0)]())return!![];const _0x3a3d14=this[_0x5dec5d(0x246)](),_0x2e49ec=_0x458fed['item']()[_0x5dec5d(0x448)];if(_0x458fed[_0x5dec5d(0x55d)]()){if(_0x3a3d14===BattleManager[_0x5dec5d(0x2b0)]())return![];}return!![];},Window_BattleItem['prototype'][_0x33ee77(0x741)]=function(_0x57c91b){const _0x965173=_0x33ee77;if(!_0x57c91b)return![];return _0x57c91b[_0x965173(0x7b1)]===0x0||_0x57c91b[_0x965173(0x7b1)]===0x1;};function Window_AutoBattleCancel(){const _0x2a13fb=_0x33ee77;this[_0x2a13fb(0x54f)](...arguments);}Window_AutoBattleCancel[_0x33ee77(0x9a7)]=Object[_0x33ee77(0xa58)](Window_Base['prototype']),Window_AutoBattleCancel['prototype'][_0x33ee77(0xa94)]=Window_AutoBattleCancel,Window_AutoBattleCancel[_0x33ee77(0x9a7)][_0x33ee77(0x54f)]=function(_0x1d961b){const _0x470f57=_0x33ee77;Window_Base['prototype'][_0x470f57(0x54f)][_0x470f57(0x88f)](this,_0x1d961b),this['setBackgroundType'](this[_0x470f57(0x7bf)]()),this[_0x470f57(0x8d6)]();},Window_AutoBattleCancel[_0x33ee77(0x9a7)][_0x33ee77(0x7bf)]=function(){const _0x596003=_0x33ee77;return VisuMZ[_0x596003(0x993)][_0x596003(0x12b)][_0x596003(0x27f)]['AutoBattleBgType'];},Window_AutoBattleCancel[_0x33ee77(0x9a7)]['refresh']=function(){const _0x17fb14=_0x33ee77;this[_0x17fb14(0x3a6)]['clear']();const _0x5323ea=VisuMZ[_0x17fb14(0x993)]['Settings'][_0x17fb14(0x27f)][_0x17fb14(0x47f)],_0x24e2f0=_0x5323ea[_0x17fb14(0x23d)](this[_0x17fb14(0xb29)](),this[_0x17fb14(0x5ac)]()),_0x92ae33=this[_0x17fb14(0x8f6)](_0x24e2f0)['width'],_0x567b8c=Math[_0x17fb14(0x816)]((this[_0x17fb14(0x802)]-_0x92ae33)/0x2);this[_0x17fb14(0x4ce)](_0x24e2f0,_0x567b8c,0x0,_0x92ae33);},Window_AutoBattleCancel[_0x33ee77(0x9a7)]['okButtonText']=function(){const _0x40a99e=_0x33ee77;return Imported[_0x40a99e(0x2e4)]?TextManager[_0x40a99e(0x35f)]('ok'):VisuMZ[_0x40a99e(0x993)]['Settings'][_0x40a99e(0x27f)][_0x40a99e(0x5a5)];},Window_AutoBattleCancel[_0x33ee77(0x9a7)][_0x33ee77(0x5ac)]=function(){const _0x2cc534=_0x33ee77;return Imported[_0x2cc534(0x2e4)]?TextManager[_0x2cc534(0x35f)](_0x2cc534(0x4f9)):VisuMZ[_0x2cc534(0x993)]['Settings']['AutoBattle'][_0x2cc534(0x3bf)];},Window_AutoBattleCancel[_0x33ee77(0x9a7)][_0x33ee77(0x1b4)]=function(){const _0x24e3be=_0x33ee77;Window_Base['prototype'][_0x24e3be(0x1b4)][_0x24e3be(0x88f)](this),this[_0x24e3be(0xb1b)](),this['updateCancel']();},Window_AutoBattleCancel['prototype'][_0x33ee77(0xb1b)]=function(){const _0x18e3e7=_0x33ee77;this[_0x18e3e7(0xb1c)]=BattleManager[_0x18e3e7(0x5bb)];},Window_AutoBattleCancel['prototype'][_0x33ee77(0x968)]=function(){const _0x18cc9d=_0x33ee77;if(!BattleManager[_0x18cc9d(0x5bb)])return;(Input[_0x18cc9d(0xa31)]('ok')||Input['isTriggered'](_0x18cc9d(0x4f9))||TouchInput[_0x18cc9d(0xa02)]()||TouchInput[_0x18cc9d(0xa59)]())&&(SoundManager[_0x18cc9d(0x5e9)](),BattleManager['_autoBattle']=![],Input[_0x18cc9d(0x7aa)](),TouchInput[_0x18cc9d(0x7aa)]());};function Window_EnemyName(){this['initialize'](...arguments);}Window_EnemyName[_0x33ee77(0x9a7)]=Object[_0x33ee77(0xa58)](Window_StatusBase['prototype']),Window_EnemyName[_0x33ee77(0x9a7)]['constructor']=Window_EnemyName,Window_EnemyName[_0x33ee77(0x9a7)]['initialize']=function(_0x41f7b3){const _0x266dae=_0x33ee77;this[_0x266dae(0xa19)]=_0x41f7b3,this[_0x266dae(0x87e)]='';const _0x498b23=new Rectangle(0x0,0x0,Graphics[_0x266dae(0x71a)],this[_0x266dae(0x6dd)]()*0x4);Window_StatusBase[_0x266dae(0x9a7)][_0x266dae(0x54f)]['call'](this,_0x498b23),this[_0x266dae(0x17b)](0x2),this[_0x266dae(0x3eb)]=0x0;},Window_EnemyName[_0x33ee77(0x9a7)][_0x33ee77(0x96c)]=function(){const _0x424e92=_0x33ee77;this[_0x424e92(0x869)]=0x0;},Window_EnemyName[_0x33ee77(0x9a7)]['enemy']=function(){const _0x30a69d=_0x33ee77;return $gameTroop[_0x30a69d(0x32f)]()[this[_0x30a69d(0xa19)]];},Window_EnemyName['prototype'][_0x33ee77(0x1b4)]=function(){const _0x118d66=_0x33ee77;Window_StatusBase['prototype'][_0x118d66(0x1b4)][_0x118d66(0x88f)](this),this[_0x118d66(0x246)]()&&this['enemy']()['name']()!==this['_text']&&(this[_0x118d66(0x87e)]=this[_0x118d66(0x246)]()[_0x118d66(0xac3)](),this[_0x118d66(0x8d6)]()),this['updateOpacity'](),this[_0x118d66(0x23b)]();},Window_EnemyName[_0x33ee77(0x9a7)][_0x33ee77(0x86f)]=function(){const _0x3743ab=_0x33ee77;if(!this[_0x3743ab(0x246)]()){if(this[_0x3743ab(0x3eb)]>0x0)this['contentsOpacity']-=0x10;}else{if(this[_0x3743ab(0x246)]()['isDead']()){if(this[_0x3743ab(0x3eb)]>0x0)this['contentsOpacity']-=0x10;}else{if(SceneManager[_0x3743ab(0x473)]['_enemyWindow']&&SceneManager[_0x3743ab(0x473)][_0x3743ab(0x7d5)][_0x3743ab(0x5c8)]&&SceneManager[_0x3743ab(0x473)]['_enemyWindow'][_0x3743ab(0x72d)][_0x3743ab(0x741)](this[_0x3743ab(0x246)]())){if(this[_0x3743ab(0x3eb)]<0xff)this[_0x3743ab(0x3eb)]+=0x10;}else this['contentsOpacity']>0x0&&(this[_0x3743ab(0x3eb)]-=0x10);}}},Window_EnemyName['prototype']['updatePosition']=function(){const _0x5811fe=_0x33ee77;if(!this[_0x5811fe(0x246)]())return;SceneManager[_0x5811fe(0x8ad)]()?this['x']=Graphics[_0x5811fe(0x71a)]-this[_0x5811fe(0x246)]()[_0x5811fe(0x157)]()[_0x5811fe(0x1f7)]:this['x']=this[_0x5811fe(0x246)]()[_0x5811fe(0x157)]()[_0x5811fe(0x1f7)];this['x']-=Math[_0x5811fe(0x20e)](this['width']/0x2),this['y']=this['enemy']()[_0x5811fe(0x157)]()[_0x5811fe(0x74a)]-Math[_0x5811fe(0x20e)](this['lineHeight']()*1.5);const _0x58fa67=VisuMZ['BattleCore'][_0x5811fe(0x12b)][_0x5811fe(0xc1d)];this['x']+=_0x58fa67[_0x5811fe(0x73a)]||0x0,this['y']+=_0x58fa67[_0x5811fe(0x445)]||0x0;},Window_EnemyName[_0x33ee77(0x9a7)][_0x33ee77(0x262)]=function(){const _0x4d0c04=_0x33ee77;Window_Base[_0x4d0c04(0x9a7)][_0x4d0c04(0x262)][_0x4d0c04(0x88f)](this),this[_0x4d0c04(0x3a6)][_0x4d0c04(0x898)]=VisuMZ[_0x4d0c04(0x993)][_0x4d0c04(0x12b)][_0x4d0c04(0xc1d)][_0x4d0c04(0x4df)];},Window_EnemyName['prototype'][_0x33ee77(0x8d6)]=function(){const _0x527618=_0x33ee77;Window_StatusBase[_0x527618(0x9a7)][_0x527618(0x8d6)][_0x527618(0x88f)](this),this[_0x527618(0x3a6)][_0x527618(0x7aa)]();if(!this[_0x527618(0x246)]())return;this[_0x527618(0x7e9)]();},Window_EnemyName[_0x33ee77(0x9a7)][_0x33ee77(0x7e9)]=function(){const _0x261437=_0x33ee77;this['_text']=this['enemy']()[_0x261437(0xac3)]();const _0x4c2311=this['textSizeEx'](this[_0x261437(0x87e)])['width'],_0x5d9f71=Math['round']((this[_0x261437(0x802)]-_0x4c2311)/0x2);this[_0x261437(0x4ce)](this[_0x261437(0x87e)],_0x5d9f71,0x0,_0x4c2311+0x8);},Window_BattleLog[_0x33ee77(0x9a7)]['maxLines']=function(){const _0x502225=_0x33ee77;return VisuMZ[_0x502225(0x993)][_0x502225(0x12b)][_0x502225(0x589)]['MaxLines'];},Window_BattleLog[_0x33ee77(0x9a7)][_0x33ee77(0x14d)]=function(){const _0x1f1c52=_0x33ee77;return VisuMZ[_0x1f1c52(0x993)]['Settings'][_0x1f1c52(0x589)]['MessageWait'];},Window_BattleLog[_0x33ee77(0x9a7)][_0x33ee77(0x56d)]=function(){const _0x224073=_0x33ee77;return VisuMZ[_0x224073(0x993)][_0x224073(0x12b)][_0x224073(0x589)][_0x224073(0x19a)];},Window_BattleLog[_0x33ee77(0x9a7)]['isFastForward']=function(){return![];},Window_BattleLog['prototype'][_0x33ee77(0x1d5)]=function(_0x2f7a63,_0x2e33f3){const _0x5ee05a=_0x33ee77;this[_0x5ee05a(0x900)](_0x5ee05a(0x827)),BattleManager[_0x5ee05a(0x6fc)](_0x2f7a63,_0x2e33f3),this['callNextMethod']();},Window_BattleLog[_0x33ee77(0x9a7)][_0x33ee77(0x2b6)]=function(_0x3f63bd,_0x537196,_0x2ec939){const _0x3090f3=_0x33ee77;this[_0x3090f3(0x900)](_0x3090f3(0x827)),BattleManager[_0x3090f3(0xadc)](_0x3f63bd,_0x537196,_0x2ec939),this[_0x3090f3(0x337)]();},Window_BattleLog[_0x33ee77(0x9a7)]['actionSplicePoint']=function(){const _0x466acf=_0x33ee77;this[_0x466acf(0x337)]();},Window_BattleLog[_0x33ee77(0x9a7)]['push']=function(_0x2abb92){const _0x1189c1=_0x33ee77,_0x19debf=Array[_0x1189c1(0x9a7)][_0x1189c1(0x9fd)][_0x1189c1(0x88f)](arguments,0x1),_0x2e01d8={'name':_0x2abb92,'params':_0x19debf},_0x44f9b9=this[_0x1189c1(0x859)][_0x1189c1(0x6f2)](_0x44bd5d=>_0x44bd5d[_0x1189c1(0xac3)])[_0x1189c1(0xba4)]('actionSplicePoint');_0x44f9b9>=0x0?this['_methods'][_0x1189c1(0x47c)](_0x44f9b9,0x0,_0x2e01d8):this['_methods'][_0x1189c1(0x7ab)](_0x2e01d8);},Window_BattleLog[_0x33ee77(0x9a7)][_0x33ee77(0x900)]=function(_0x2e0697){const _0x42c2bd=_0x33ee77,_0x32ef90=Array[_0x42c2bd(0x9a7)][_0x42c2bd(0x9fd)][_0x42c2bd(0x88f)](arguments,0x1);this[_0x42c2bd(0x859)]['unshift']({'name':_0x2e0697,'params':_0x32ef90});},Window_BattleLog[_0x33ee77(0x9a7)]['logActionList']=function(){const _0x24e2ce=_0x33ee77;if(!$gameTemp[_0x24e2ce(0x7e4)]())return;console[_0x24e2ce(0x950)](this[_0x24e2ce(0x859)][_0x24e2ce(0x6f2)](_0x149dfd=>_0x149dfd[_0x24e2ce(0xac3)])[_0x24e2ce(0x316)]('\x0a'));},VisuMZ[_0x33ee77(0x993)][_0x33ee77(0xc09)]=Window_BattleLog[_0x33ee77(0x9a7)][_0x33ee77(0x8d6)],Window_BattleLog[_0x33ee77(0x9a7)][_0x33ee77(0x8d6)]=function(){const _0x2aae64=_0x33ee77;this[_0x2aae64(0xbb8)]=!![];},VisuMZ[_0x33ee77(0x993)]['Window_BattleLog_update']=Window_BattleLog[_0x33ee77(0x9a7)]['update'],Window_BattleLog['prototype'][_0x33ee77(0x1b4)]=function(){const _0x2c723a=_0x33ee77;VisuMZ[_0x2c723a(0x993)]['Window_BattleLog_update'][_0x2c723a(0x88f)](this);if(this[_0x2c723a(0xbb8)])this[_0x2c723a(0xb6e)]();},Window_BattleLog[_0x33ee77(0x9a7)]['processRefresh']=function(){const _0x5816ab=_0x33ee77;this[_0x5816ab(0xbb8)]=![],VisuMZ['BattleCore'][_0x5816ab(0xc09)][_0x5816ab(0x88f)](this);},Window_BattleLog[_0x33ee77(0x9a7)][_0x33ee77(0x20c)]=function(_0x5b5d26){const _0x5d6b7c=_0x33ee77;let _0x3fc932=VisuMZ[_0x5d6b7c(0x993)][_0x5d6b7c(0x12b)][_0x5d6b7c(0x589)][_0x5d6b7c(0x871)][_0x5d6b7c(0x172)]()[_0x5d6b7c(0xaf2)](),_0x179ffa=this[_0x5d6b7c(0x81c)][_0x5b5d26];if(_0x179ffa['match'](/<LEFT>/i))_0x3fc932=_0x5d6b7c(0x4b7);else{if(_0x179ffa[_0x5d6b7c(0x7c1)](/<CENTER>/i))_0x3fc932='center';else _0x179ffa['match'](/<RIGHT>/i)&&(_0x3fc932=_0x5d6b7c(0x409));}_0x179ffa=_0x179ffa[_0x5d6b7c(0x7dd)](/<(?:LEFT|CENTER|RIGHT)>/gi,''),_0x179ffa=_0x179ffa[_0x5d6b7c(0x7dd)](/\\I\[0\]/gi,'');const _0x1eeee8=this['lineRect'](_0x5b5d26);this[_0x5d6b7c(0x3a6)][_0x5d6b7c(0x832)](_0x1eeee8['x'],_0x1eeee8['y'],_0x1eeee8[_0x5d6b7c(0x3d9)],_0x1eeee8[_0x5d6b7c(0x578)]);const _0x25e7b1=this[_0x5d6b7c(0x8f6)](_0x179ffa)[_0x5d6b7c(0x3d9)];let _0x15b1da=_0x1eeee8['x'];if(_0x3fc932===_0x5d6b7c(0x614))_0x15b1da+=(_0x1eeee8[_0x5d6b7c(0x3d9)]-_0x25e7b1)/0x2;else _0x3fc932===_0x5d6b7c(0x409)&&(_0x15b1da+=_0x1eeee8[_0x5d6b7c(0x3d9)]-_0x25e7b1);this[_0x5d6b7c(0x4ce)](_0x179ffa,_0x15b1da,_0x1eeee8['y'],_0x25e7b1+0x8);},Window_BattleLog[_0x33ee77(0x9a7)][_0x33ee77(0x25a)]=function(_0x25d18a){const _0x1c139f=_0x33ee77;this[_0x1c139f(0x81c)]['push'](_0x25d18a),this[_0x1c139f(0x8d6)](),this[_0x1c139f(0x337)]();},Window_BattleLog['prototype'][_0x33ee77(0xba1)]=function(){const _0x203c04=_0x33ee77;let _0x64d71=![];switch(this[_0x203c04(0xb1e)]){case _0x203c04(0xb30):_0x64d71=this['_spriteset'][_0x203c04(0x849)]();break;case'movement':_0x64d71=this[_0x203c04(0x850)][_0x203c04(0x2af)]();break;case _0x203c04(0x1ab):_0x64d71=this['_spriteset']['isAnimationPlaying']();break;case _0x203c04(0x571):_0x64d71=this[_0x203c04(0x850)]['isAnyoneFloating']();break;case _0x203c04(0x885):_0x64d71=this[_0x203c04(0x850)][_0x203c04(0x311)]();break;case _0x203c04(0x7fd):_0x64d71=this[_0x203c04(0x850)]['isAnyoneChangingOpacity']();break;}return!_0x64d71&&(this[_0x203c04(0xb1e)]=''),_0x64d71;},Window_BattleLog[_0x33ee77(0x9a7)][_0x33ee77(0xc2a)]=function(){this['setWaitMode']('animation');},Window_BattleLog[_0x33ee77(0x9a7)]['waitForFloat']=function(){const _0x2a2b59=_0x33ee77;this[_0x2a2b59(0xa7e)](_0x2a2b59(0x571));},Window_BattleLog['prototype'][_0x33ee77(0xbdc)]=function(){const _0x1d888a=_0x33ee77;this[_0x1d888a(0xa7e)](_0x1d888a(0x885));},Window_BattleLog[_0x33ee77(0x9a7)][_0x33ee77(0x941)]=function(){const _0xa0c191=_0x33ee77;this[_0xa0c191(0xa7e)](_0xa0c191(0x7fd));},Window_BattleLog[_0x33ee77(0x9a7)][_0x33ee77(0x9d0)]=function(){const _0x4a4ee4=_0x33ee77,_0x71eed2=VisuMZ[_0x4a4ee4(0x993)]['Settings']['BattleLog'];if(!_0x71eed2['StartTurnShow'])return;this[_0x4a4ee4(0x7ab)]('addText',_0x71eed2[_0x4a4ee4(0xac5)][_0x4a4ee4(0x23d)]($gameTroop[_0x4a4ee4(0x253)]())),this[_0x4a4ee4(0x7ab)]('waitCount',_0x71eed2[_0x4a4ee4(0x566)]),this[_0x4a4ee4(0x7ab)](_0x4a4ee4(0x7aa));};var $subject,$action,$targets;Window_BattleLog[_0x33ee77(0x9a7)][_0x33ee77(0x16b)]=function(_0x1fcf44,_0x53f806,_0x48d668){const _0x33d54e=_0x33ee77;$subject=_0x1fcf44,$action=_0x53f806,$targets=_0x48d668,this[_0x33d54e(0x7e2)](_0x53f806)?BattleManager[_0x33d54e(0x295)]():this[_0x33d54e(0x47d)](_0x1fcf44,_0x53f806,_0x48d668);},Window_BattleLog[_0x33ee77(0x9a7)][_0x33ee77(0x7e2)]=function(_0x2c220c){const _0x3e4938=_0x33ee77;if(!SceneManager[_0x3e4938(0x5d9)]())return![];if(!_0x2c220c)return![];if(!_0x2c220c[_0x3e4938(0x5b0)]())return![];if(_0x2c220c[_0x3e4938(0x5b0)]()['note'][_0x3e4938(0x7c1)](/<CUSTOM ACTION SEQUENCE>/i))return!![];if(DataManager[_0x3e4938(0x591)](_0x2c220c['item']()))return!![];return![];},Window_BattleLog[_0x33ee77(0x9a7)][_0x33ee77(0x47d)]=function(_0x3b2a46,_0x11ed3e,_0x5d5755){const _0x355193=_0x33ee77;this[_0x355193(0x76f)](_0x3b2a46,_0x11ed3e,_0x5d5755),this[_0x355193(0x991)](_0x3b2a46,_0x11ed3e,_0x5d5755),this[_0x355193(0x66e)](_0x3b2a46,_0x11ed3e,_0x5d5755);},Window_BattleLog['prototype']['displayAction']=function(_0x176eaf,_0x5e19e8){const _0x3236f3=_0x33ee77,_0x14ee87=VisuMZ[_0x3236f3(0x993)][_0x3236f3(0x12b)][_0x3236f3(0x589)];_0x14ee87[_0x3236f3(0x5f8)]&&this[_0x3236f3(0x7ab)](_0x3236f3(0x25a),'<CENTER>%1'['format'](DataManager['battleDisplayText'](_0x5e19e8)));if(DataManager[_0x3236f3(0x22e)](_0x5e19e8)){if(_0x14ee87[_0x3236f3(0x632)])this[_0x3236f3(0x6d2)](_0x5e19e8['message1'],_0x176eaf,_0x5e19e8);if(_0x14ee87[_0x3236f3(0xb19)])this[_0x3236f3(0x6d2)](_0x5e19e8['message2'],_0x176eaf,_0x5e19e8);}else{if(_0x14ee87[_0x3236f3(0x4e0)])this[_0x3236f3(0x6d2)](TextManager[_0x3236f3(0x862)],_0x176eaf,_0x5e19e8);}},Window_BattleLog['prototype']['setupActionSet']=function(_0x300929,_0x239694,_0x52b7bc){const _0x195c0d=_0x33ee77,_0x6a54c9=_0x239694['item']();this['displayAction'](_0x300929,_0x6a54c9),this[_0x195c0d(0x7ab)](_0x195c0d(0x1f5),_0x300929,_0x52b7bc,!![]),this['push'](_0x195c0d(0x49b),_0x300929,_0x239694),this[_0x195c0d(0x7ab)](_0x195c0d(0x5b7)),this['push']('performCastAnimation',_0x300929,_0x239694),this[_0x195c0d(0x7ab)](_0x195c0d(0xc2a));},Window_BattleLog[_0x33ee77(0x9a7)][_0x33ee77(0x991)]=function(_0x58a6d4,_0x39a297,_0x5c46d8){const _0x4b9636=_0x33ee77;if(this['isMeleeSingleTargetAction'](_0x39a297))this[_0x4b9636(0x153)](_0x58a6d4,_0x39a297,_0x5c46d8);else{if(this['isMeleeMultiTargetAction'](_0x39a297))this[_0x4b9636(0x778)](_0x58a6d4,_0x39a297,_0x5c46d8);else _0x39a297[_0x4b9636(0x513)]()?this['targetActionSet'](_0x58a6d4,_0x39a297,_0x5c46d8):this[_0x4b9636(0xae1)](_0x58a6d4,_0x39a297,_0x5c46d8);}},Window_BattleLog[_0x33ee77(0x9a7)][_0x33ee77(0x456)]=function(_0x300c57,_0x536cc1,_0x1517e3,_0x79eb05){const _0x30823f=_0x33ee77;if(_0x536cc1){const _0x5405b1=_0x300c57[_0x30823f(0x157)]();this[_0x30823f(0x7ab)]('performJump',[_0x300c57],_0x1517e3,_0x79eb05),this['push'](_0x30823f(0x3e7),_0x300c57,_0x5405b1[_0x30823f(0x2ca)],_0x5405b1['_homeY'],_0x79eb05,![],_0x30823f(0x8d8)),this[_0x30823f(0x7ab)](_0x30823f(0x2a8),[_0x300c57],_0x30823f(0xa77)),this['push'](_0x30823f(0x5b7)),this[_0x30823f(0x7ab)](_0x30823f(0x2a8),[_0x300c57],'walk');}},Window_BattleLog[_0x33ee77(0x9a7)][_0x33ee77(0x1c5)]=function(_0x3cd317){const _0x29fd07=_0x33ee77;if(!_0x3cd317['isPhysical']())return![];if(!_0x3cd317[_0x29fd07(0x362)]())return![];if(!_0x3cd317['isForOpponent']())return![];return VisuMZ[_0x29fd07(0x993)]['Settings'][_0x29fd07(0x3f4)][_0x29fd07(0x2ed)];},Window_BattleLog[_0x33ee77(0x9a7)][_0x33ee77(0x153)]=function(_0x722e1c,_0x238f88,_0x402dc5){const _0x34dc35=_0x33ee77,_0x494860=_0x722e1c[_0x34dc35(0x74d)]()[_0x34dc35(0xa0f)]<0x2,_0x2b47ae=0x14,_0x131701=0x30;let _0x26174f=!![];_0x402dc5[_0x34dc35(0x70c)]>0x0&&_0x722e1c['isActor']()===_0x402dc5[0x0][_0x34dc35(0x6c3)]()&&(_0x26174f=![]);_0x494860&&_0x26174f&&(this[_0x34dc35(0x7ab)](_0x34dc35(0x9da),[_0x722e1c],_0x131701,_0x2b47ae),this['push']('performMoveToTargets',_0x722e1c,_0x402dc5,'front\x20base',_0x2b47ae,!![],_0x34dc35(0x8d8),!![]),this[_0x34dc35(0x7ab)](_0x34dc35(0x2a8),[_0x722e1c],_0x34dc35(0xb09)),this[_0x34dc35(0x7ab)](_0x34dc35(0x5b7)));let _0x76ad4a=_0x238f88[_0x34dc35(0x33a)]()?this['getDualWieldTimes'](_0x722e1c):0x1;for(let _0x240f60=0x0;_0x240f60<_0x76ad4a;_0x240f60++){_0x238f88[_0x34dc35(0x33a)]()&&_0x722e1c[_0x34dc35(0x6c3)]()&&this[_0x34dc35(0x7ab)]('setActiveWeaponSet',_0x722e1c,_0x240f60),_0x238f88[_0x34dc35(0x5b0)]()[_0x34dc35(0xc12)]<0x0?this['targetActionSet'](_0x722e1c,_0x238f88,_0x402dc5):this[_0x34dc35(0xae1)](_0x722e1c,_0x238f88,_0x402dc5);}_0x238f88[_0x34dc35(0x33a)]()&&_0x722e1c['isActor']()&&this[_0x34dc35(0x7ab)]('clearActiveWeaponSet',_0x722e1c),this['push'](_0x34dc35(0x1f5),_0x722e1c,_0x402dc5,![]),this[_0x34dc35(0x456)](_0x722e1c,_0x494860,_0x131701,_0x2b47ae);},Window_BattleLog[_0x33ee77(0x9a7)][_0x33ee77(0x164)]=function(_0x54a0b8){const _0x2d6d39=_0x33ee77;if(!_0x54a0b8[_0x2d6d39(0x36e)]())return![];if(!_0x54a0b8['isForAll']())return![];if(!_0x54a0b8[_0x2d6d39(0x463)]())return![];return VisuMZ['BattleCore']['Settings'][_0x2d6d39(0x3f4)][_0x2d6d39(0x4dd)];},Window_BattleLog[_0x33ee77(0x9a7)]['autoMeleeMultiTargetActionSet']=function(_0x480e42,_0x3946ca,_0x246943){const _0x4ceff7=_0x33ee77,_0x2012b4=_0x480e42[_0x4ceff7(0x74d)]()[_0x4ceff7(0xa0f)]<0x2,_0x4d86fd=0x14,_0x3450c5=0x30;if(_0x2012b4){this['push'](_0x4ceff7(0x9da),[_0x480e42],_0x3450c5,_0x4d86fd);const _0x3503f6=_0x246943[_0x4ceff7(0x70c)]>0x1?'front\x20center':_0x4ceff7(0x918);this[_0x4ceff7(0x7ab)](_0x4ceff7(0xb2a),_0x480e42,_0x246943,_0x3503f6,_0x4d86fd,!![],_0x4ceff7(0x8d8),!![]),this[_0x4ceff7(0x7ab)](_0x4ceff7(0x2a8),[_0x480e42],_0x4ceff7(0xb09)),this[_0x4ceff7(0x7ab)](_0x4ceff7(0x5b7));}let _0x114181=_0x3946ca[_0x4ceff7(0x33a)]()?this['getDualWieldTimes'](_0x480e42):0x1;for(let _0xbad113=0x0;_0xbad113<_0x114181;_0xbad113++){_0x3946ca['isAttack']()&&_0x480e42[_0x4ceff7(0x6c3)]()&&this[_0x4ceff7(0x7ab)](_0x4ceff7(0x9fa),_0x480e42,_0xbad113),this[_0x4ceff7(0xae1)](_0x480e42,_0x3946ca,_0x246943);}_0x3946ca[_0x4ceff7(0x33a)]()&&_0x480e42['isActor']()&&this['push'](_0x4ceff7(0x9e5),_0x480e42),this[_0x4ceff7(0x7ab)](_0x4ceff7(0x1f5),_0x480e42,_0x246943,![]),this[_0x4ceff7(0x456)](_0x480e42,_0x2012b4,_0x3450c5,_0x4d86fd);},Window_BattleLog[_0x33ee77(0x9a7)][_0x33ee77(0xc19)]=function(_0x421618,_0x38a3c5,_0x23b371){const _0x48f5ee=_0x33ee77,_0x4bad7c=_0x38a3c5[_0x48f5ee(0x5b0)]();for(const _0x2f691a of _0x23b371){if(!_0x2f691a)continue;this['push'](_0x48f5ee(0x805),_0x421618,_0x38a3c5),this[_0x48f5ee(0x7ab)](_0x48f5ee(0xb93),Sprite_Battler[_0x48f5ee(0x9d4)]),this[_0x48f5ee(0x7ab)]('showAnimation',_0x421618,[_0x2f691a],_0x4bad7c[_0x48f5ee(0xc12)]),this[_0x48f5ee(0x7ab)](_0x48f5ee(0xb93),0x18),this[_0x48f5ee(0x7ab)](_0x48f5ee(0x1d5),_0x421618,_0x2f691a);}},Window_BattleLog[_0x33ee77(0x9a7)][_0x33ee77(0xae1)]=function(_0x4fb335,_0x54a1a4,_0x534518){const _0x4c028b=_0x33ee77,_0x28bbf9=_0x54a1a4[_0x4c028b(0x5b0)]();let _0x7aacb8=_0x54a1a4[_0x4c028b(0x33a)]()?0x1+_0x4fb335[_0x4c028b(0xa57)]():0x1;while(_0x7aacb8--){this[_0x4c028b(0x7ab)](_0x4c028b(0x805),_0x4fb335,_0x54a1a4),this[_0x4c028b(0x7ab)](_0x4c028b(0xb93),Sprite_Battler[_0x4c028b(0x9d4)]),this['push']('showAnimation',_0x4fb335,_0x534518[_0x4c028b(0x321)](),_0x28bbf9[_0x4c028b(0xc12)]),this[_0x4c028b(0x7ab)](_0x4c028b(0xc2a));}for(const _0x46ae18 of _0x534518){if(!_0x46ae18)continue;this['push']('actionEffect',_0x4fb335,_0x46ae18);}},Window_BattleLog[_0x33ee77(0x9a7)][_0x33ee77(0x66e)]=function(_0x786bbd,_0x5e39fa,_0x20933a){const _0x40220e=_0x33ee77,_0x4c9c93=_0x5e39fa[_0x40220e(0x5b0)]();this['push']('applyImmortal',_0x786bbd,_0x20933a,![]),this[_0x40220e(0x7ab)](_0x40220e(0x14a)),this[_0x40220e(0x7ab)](_0x40220e(0x8a6)),this[_0x40220e(0x7ab)](_0x40220e(0x7aa)),this[_0x40220e(0x7ab)]('performActionEnd',_0x786bbd),this[_0x40220e(0x7ab)](_0x40220e(0x5b7));},Window_BattleLog['prototype'][_0x33ee77(0x7ae)]=function(_0x3ecb0c){$subject=null,$action=null,$targets=[];},VisuMZ[_0x33ee77(0x993)][_0x33ee77(0x8e2)]=Window_BattleLog[_0x33ee77(0x9a7)][_0x33ee77(0xb03)],Window_BattleLog[_0x33ee77(0x9a7)]['displayCurrentState']=function(_0x222211){const _0x30a316=_0x33ee77;if(!VisuMZ[_0x30a316(0x993)][_0x30a316(0x12b)][_0x30a316(0x589)]['ShowCurrentState'])return;VisuMZ[_0x30a316(0x993)][_0x30a316(0x8e2)][_0x30a316(0x88f)](this,_0x222211);},Window_BattleLog['prototype']['displayCounter']=function(_0x293601){const _0x476977=_0x33ee77;this['push'](_0x476977(0x532),_0x293601);VisuMZ[_0x476977(0x993)][_0x476977(0x12b)][_0x476977(0x3f4)][_0x476977(0x35c)]&&this[_0x476977(0x7ab)]('showAnimation',_0x293601,[BattleManager[_0x476977(0x7c0)]],-0x1);if(!VisuMZ[_0x476977(0x993)][_0x476977(0x12b)][_0x476977(0x589)][_0x476977(0x63f)])return;this[_0x476977(0x7ab)]('addText',TextManager[_0x476977(0x7cf)][_0x476977(0x23d)](_0x293601[_0x476977(0xac3)]()));const _0x5aa432=VisuMZ[_0x476977(0x993)]['Settings'][_0x476977(0x589)][_0x476977(0x875)]??0x0;if(_0x5aa432>0x0)this['push'](_0x476977(0xb93),_0x5aa432);;},Window_BattleLog[_0x33ee77(0x9a7)][_0x33ee77(0x707)]=function(_0x51f982){const _0x443ae6=_0x33ee77;this[_0x443ae6(0x7ab)]('performReflection',_0x51f982);if(!VisuMZ[_0x443ae6(0x993)][_0x443ae6(0x12b)]['BattleLog']['ShowReflect'])return;this['push'](_0x443ae6(0x25a),TextManager[_0x443ae6(0xb13)][_0x443ae6(0x23d)](_0x51f982['name']()));const _0x347cc9=VisuMZ[_0x443ae6(0x993)]['Settings'][_0x443ae6(0x589)][_0x443ae6(0xbe9)]??0x0;if(_0x347cc9>0x0)this[_0x443ae6(0x7ab)](_0x443ae6(0xb93),_0x347cc9);;},Window_BattleLog[_0x33ee77(0x9a7)]['displayReflectionPlayBack']=function(_0x4e31c7,_0x4b286a){const _0x5366fa=_0x33ee77;if(VisuMZ[_0x5366fa(0x993)][_0x5366fa(0x12b)][_0x5366fa(0x3f4)]['ReflectPlayback']){const _0x202610=_0x4b286a['item']();this[_0x5366fa(0x7ab)](_0x5366fa(0xab9),_0x4e31c7,[_0x4e31c7],_0x202610[_0x5366fa(0xc12)]);}},Window_BattleLog[_0x33ee77(0x9a7)]['displaySubstitute']=function(_0x488b57,_0x33b63f){const _0x14932a=_0x33ee77;this[_0x14932a(0x7ab)](_0x14932a(0xaae),_0x488b57,_0x33b63f);if(!VisuMZ['BattleCore'][_0x14932a(0x12b)][_0x14932a(0x589)][_0x14932a(0x1f9)])return;const _0x16fca3=_0x488b57[_0x14932a(0xac3)](),_0x2ceb84=TextManager[_0x14932a(0xb64)][_0x14932a(0x23d)](_0x16fca3,_0x33b63f[_0x14932a(0xac3)]());this[_0x14932a(0x7ab)](_0x14932a(0x25a),_0x2ceb84);const _0x16749f=VisuMZ[_0x14932a(0x993)][_0x14932a(0x12b)]['BattleLog']['ShowSubstituteWait']??0x0;if(_0x16749f>0x0)this[_0x14932a(0x7ab)](_0x14932a(0xb93),_0x16749f);;},VisuMZ[_0x33ee77(0x993)][_0x33ee77(0xb73)]=Window_BattleLog[_0x33ee77(0x9a7)]['displayActionResults'],Window_BattleLog[_0x33ee77(0x9a7)][_0x33ee77(0xbee)]=function(_0x58a71b,_0x4b4c08){const _0x5ee5e2=_0x33ee77;VisuMZ['BattleCore'][_0x5ee5e2(0xb73)][_0x5ee5e2(0x88f)](this,_0x58a71b,_0x4b4c08);},VisuMZ['BattleCore'][_0x33ee77(0x118)]=Window_BattleLog[_0x33ee77(0x9a7)][_0x33ee77(0x5a3)],Window_BattleLog[_0x33ee77(0x9a7)][_0x33ee77(0x5a3)]=function(_0x352e55){const _0xdc2266=_0x33ee77;if(!VisuMZ[_0xdc2266(0x993)][_0xdc2266(0x12b)]['BattleLog'][_0xdc2266(0x6c5)])return;VisuMZ[_0xdc2266(0x993)][_0xdc2266(0x118)][_0xdc2266(0x88f)](this,_0x352e55);},VisuMZ[_0x33ee77(0x993)][_0x33ee77(0x202)]=Window_BattleLog[_0x33ee77(0x9a7)][_0x33ee77(0x1e8)],Window_BattleLog[_0x33ee77(0x9a7)][_0x33ee77(0x1e8)]=function(_0x3a0f43){const _0x2a1008=_0x33ee77;if(!VisuMZ['BattleCore'][_0x2a1008(0x12b)][_0x2a1008(0x589)][_0x2a1008(0x18b)])return;VisuMZ['BattleCore'][_0x2a1008(0x202)]['call'](this,_0x3a0f43);},VisuMZ[_0x33ee77(0x993)][_0x33ee77(0x926)]=Window_BattleLog[_0x33ee77(0x9a7)][_0x33ee77(0x3e4)],Window_BattleLog[_0x33ee77(0x9a7)][_0x33ee77(0x3e4)]=function(_0x49736e){const _0x41c9c4=_0x33ee77;!VisuMZ[_0x41c9c4(0x993)][_0x41c9c4(0x12b)][_0x41c9c4(0x589)][_0x41c9c4(0x538)]?this[_0x41c9c4(0x7ab)](_0x41c9c4(0x227),_0x49736e):VisuMZ[_0x41c9c4(0x993)]['Window_BattleLog_displayMiss'][_0x41c9c4(0x88f)](this,_0x49736e);},VisuMZ[_0x33ee77(0x993)][_0x33ee77(0x13c)]=Window_BattleLog['prototype'][_0x33ee77(0x4ae)],Window_BattleLog[_0x33ee77(0x9a7)]['displayEvasion']=function(_0x272e5c){const _0x2c4da1=_0x33ee77;!VisuMZ[_0x2c4da1(0x993)][_0x2c4da1(0x12b)][_0x2c4da1(0x589)][_0x2c4da1(0x538)]?_0x272e5c[_0x2c4da1(0x491)]()['physical']?this[_0x2c4da1(0x7ab)](_0x2c4da1(0xa00),_0x272e5c):this[_0x2c4da1(0x7ab)]('performMagicEvasion',_0x272e5c):VisuMZ[_0x2c4da1(0x993)]['Window_BattleLog_displayEvasion'][_0x2c4da1(0x88f)](this,_0x272e5c);},Window_BattleLog[_0x33ee77(0x9a7)][_0x33ee77(0x8f9)]=function(_0x38b59c){const _0x23a380=_0x33ee77;_0x38b59c[_0x23a380(0x491)]()[_0x23a380(0x8f3)]&&(_0x38b59c[_0x23a380(0x9f8)]=0x0,_0x38b59c['result']()[_0x23a380(0x3a5)]>0x0&&!_0x38b59c[_0x23a380(0x491)]()[_0x23a380(0x6a4)]&&(_0x38b59c[_0x23a380(0x9f8)]=_0x38b59c[_0x23a380(0x491)]()[_0x23a380(0x3a5)],this[_0x23a380(0x7ab)](_0x23a380(0xa53),_0x38b59c)),_0x38b59c[_0x23a380(0x491)]()[_0x23a380(0x3a5)]<0x0&&this[_0x23a380(0x7ab)](_0x23a380(0x5dc),_0x38b59c),VisuMZ[_0x23a380(0x993)]['Settings']['BattleLog']['ShowHpDmg']&&this[_0x23a380(0x7ab)]('addText',this[_0x23a380(0x7bd)](_0x38b59c)));},VisuMZ[_0x33ee77(0x993)][_0x33ee77(0x429)]=Window_BattleLog[_0x33ee77(0x9a7)][_0x33ee77(0x5e4)],Window_BattleLog[_0x33ee77(0x9a7)][_0x33ee77(0x5e4)]=function(_0x1140d1){const _0x5198df=_0x33ee77;if(!VisuMZ[_0x5198df(0x993)][_0x5198df(0x12b)][_0x5198df(0x589)][_0x5198df(0x31a)])return;VisuMZ[_0x5198df(0x993)][_0x5198df(0x429)][_0x5198df(0x88f)](this,_0x1140d1);},VisuMZ[_0x33ee77(0x993)]['Window_BattleLog_displayTpDamage']=Window_BattleLog['prototype'][_0x33ee77(0xb14)],Window_BattleLog[_0x33ee77(0x9a7)][_0x33ee77(0xb14)]=function(_0x28f6c5){const _0x336e40=_0x33ee77;if(!VisuMZ['BattleCore']['Settings'][_0x336e40(0x589)][_0x336e40(0xa9f)])return;VisuMZ[_0x336e40(0x993)][_0x336e40(0x8a9)][_0x336e40(0x88f)](this,_0x28f6c5);},Window_BattleLog['prototype'][_0x33ee77(0x600)]=function(_0x3464ee){const _0x5c75e9=_0x33ee77;_0x3464ee[_0x5c75e9(0x491)]()[_0x5c75e9(0xa42)]()&&(this['push']('pushBaseLine'),this['displayChangedStates'](_0x3464ee),this[_0x5c75e9(0x79a)](_0x3464ee),this[_0x5c75e9(0x7ab)]('waitForNewLine'));},Window_BattleLog[_0x33ee77(0x9a7)][_0x33ee77(0x1dc)]=function(_0xd990b6){const _0x5aa42f=_0x33ee77,_0x2ce4e1=_0xd990b6['result'](),_0xb388f7=_0x2ce4e1[_0x5aa42f(0x58f)]();for(const _0x3f1718 of _0xb388f7){const _0x3b8b8e=_0xd990b6['isActor']()?_0x3f1718[_0x5aa42f(0x332)]:_0x3f1718[_0x5aa42f(0x13a)];_0x3b8b8e&&VisuMZ[_0x5aa42f(0x993)]['Settings']['BattleLog'][_0x5aa42f(0xa61)]&&(this[_0x5aa42f(0x7ab)](_0x5aa42f(0x2fc)),this[_0x5aa42f(0x7ab)]('pushBaseLine'),this['push'](_0x5aa42f(0x25a),_0x3b8b8e['format'](_0xd990b6[_0x5aa42f(0xac3)]())),this['push'](_0x5aa42f(0xc10))),_0x3f1718['id']===_0xd990b6[_0x5aa42f(0x61b)]()&&this[_0x5aa42f(0x7ab)](_0x5aa42f(0x1ce),_0xd990b6);}},Window_BattleLog[_0x33ee77(0x9a7)][_0x33ee77(0x174)]=function(_0x4de419){const _0x441b09=_0x33ee77;if(!VisuMZ['BattleCore'][_0x441b09(0x12b)][_0x441b09(0x589)][_0x441b09(0xa38)])return;const _0x355e4e=_0x4de419[_0x441b09(0x491)](),_0x23b967=_0x355e4e['removedStateObjects']();for(const _0x1eb087 of _0x23b967){_0x1eb087[_0x441b09(0x83a)]&&(this[_0x441b09(0x7ab)](_0x441b09(0x2fc)),this[_0x441b09(0x7ab)](_0x441b09(0xb7e)),this[_0x441b09(0x7ab)](_0x441b09(0x25a),_0x1eb087[_0x441b09(0x83a)][_0x441b09(0x23d)](_0x4de419[_0x441b09(0xac3)]())),this[_0x441b09(0x7ab)](_0x441b09(0xc10)));}},Window_BattleLog[_0x33ee77(0x9a7)][_0x33ee77(0x79a)]=function(_0xe96ee4){const _0x5d9dc7=_0x33ee77,_0x5d73cb=VisuMZ['BattleCore'][_0x5d9dc7(0x12b)]['BattleLog'],_0x2c30c0=_0xe96ee4['result']();if(_0x5d73cb[_0x5d9dc7(0x956)])this[_0x5d9dc7(0x61d)](_0xe96ee4,_0x2c30c0[_0x5d9dc7(0x674)],TextManager[_0x5d9dc7(0xb34)]);if(_0x5d73cb[_0x5d9dc7(0xb60)])this[_0x5d9dc7(0x61d)](_0xe96ee4,_0x2c30c0[_0x5d9dc7(0x99e)],TextManager['debuffAdd']);if(_0x5d73cb[_0x5d9dc7(0xb3f)])this[_0x5d9dc7(0x61d)](_0xe96ee4,_0x2c30c0[_0x5d9dc7(0x638)],TextManager['buffRemove']);},Window_BattleLog[_0x33ee77(0x9a7)]['displayBuffs']=function(_0x1c3a0a,_0x5d31ef,_0xbaf036){const _0x48a4eb=_0x33ee77;for(const _0x11971c of _0x5d31ef){const _0x23b274=_0xbaf036[_0x48a4eb(0x23d)](_0x1c3a0a['name'](),TextManager[_0x48a4eb(0x68a)](_0x11971c));this['push'](_0x48a4eb(0x2fc)),this[_0x48a4eb(0x7ab)]('pushBaseLine'),this['push'](_0x48a4eb(0x25a),_0x23b274),this[_0x48a4eb(0x7ab)](_0x48a4eb(0xc10));}},VisuMZ[_0x33ee77(0x993)][_0x33ee77(0x5b9)]=Window_BattleLog[_0x33ee77(0x9a7)]['clear'],Window_BattleLog[_0x33ee77(0x9a7)][_0x33ee77(0x7aa)]=function(){const _0x1f7ab5=_0x33ee77;VisuMZ[_0x1f7ab5(0x993)][_0x1f7ab5(0x5b9)]['call'](this),this[_0x1f7ab5(0x337)]();},VisuMZ['BattleCore']['Window_BattleLog_pushBaseLine']=Window_BattleLog[_0x33ee77(0x9a7)][_0x33ee77(0xb7e)],Window_BattleLog['prototype'][_0x33ee77(0xb7e)]=function(){const _0x4d45fb=_0x33ee77;VisuMZ[_0x4d45fb(0x993)][_0x4d45fb(0xa81)][_0x4d45fb(0x88f)](this),this[_0x4d45fb(0x337)]();},VisuMZ[_0x33ee77(0x993)]['Window_BattleLog_popBaseLine']=Window_BattleLog[_0x33ee77(0x9a7)]['popBaseLine'],Window_BattleLog[_0x33ee77(0x9a7)]['popBaseLine']=function(){const _0x190b42=_0x33ee77;VisuMZ['BattleCore'][_0x190b42(0x28e)]['call'](this),this[_0x190b42(0xb6e)](),this[_0x190b42(0x337)]();},VisuMZ['BattleCore'][_0x33ee77(0x199)]=Window_BattleLog['prototype'][_0x33ee77(0xb02)],Window_BattleLog[_0x33ee77(0x9a7)][_0x33ee77(0xb02)]=function(_0x4b05d1){const _0x4e5286=_0x33ee77;VisuMZ[_0x4e5286(0x993)][_0x4e5286(0x199)][_0x4e5286(0x88f)](this,_0x4b05d1),this[_0x4e5286(0x337)]();},Window_BattleLog['prototype'][_0x33ee77(0x14a)]=function(){const _0x325dc5=_0x33ee77;let _0x13ebfd=0x0;this[_0x325dc5(0x6cf)][_0x325dc5(0x70c)]>0x0&&(_0x13ebfd=this[_0x325dc5(0x6cf)][this[_0x325dc5(0x6cf)]['length']-0x1]),this[_0x325dc5(0x81c)][_0x325dc5(0x70c)]>_0x13ebfd?this[_0x325dc5(0xc10)]():this['callNextMethod']();},VisuMZ[_0x33ee77(0x993)]['Window_BattleLog_performActionStart']=Window_BattleLog[_0x33ee77(0x9a7)][_0x33ee77(0x49b)],Window_BattleLog[_0x33ee77(0x9a7)]['performActionStart']=function(_0x35a159,_0x5d8d8f){const _0x265311=_0x33ee77;VisuMZ[_0x265311(0x993)][_0x265311(0x6f0)]['call'](this,_0x35a159,_0x5d8d8f),this[_0x265311(0x337)]();},VisuMZ[_0x33ee77(0x993)][_0x33ee77(0xb56)]=Window_BattleLog[_0x33ee77(0x9a7)][_0x33ee77(0x805)],Window_BattleLog[_0x33ee77(0x9a7)][_0x33ee77(0x805)]=function(_0x661a08,_0x545557){const _0x317718=_0x33ee77;VisuMZ[_0x317718(0x993)][_0x317718(0xb56)][_0x317718(0x88f)](this,_0x661a08,_0x545557),this['callNextMethod']();},VisuMZ[_0x33ee77(0x993)][_0x33ee77(0x6f1)]=Window_BattleLog[_0x33ee77(0x9a7)][_0x33ee77(0x73c)],Window_BattleLog['prototype'][_0x33ee77(0x73c)]=function(_0x1ba35d){const _0x2cc3b3=_0x33ee77;VisuMZ['BattleCore']['Window_BattleLog_performActionEnd']['call'](this,_0x1ba35d);for(const _0x53ff87 of BattleManager[_0x2cc3b3(0x1ac)]()){if(!_0x53ff87)continue;if(_0x53ff87[_0x2cc3b3(0x385)]())continue;_0x53ff87[_0x2cc3b3(0x626)]();}this[_0x2cc3b3(0x337)]();},VisuMZ[_0x33ee77(0x993)][_0x33ee77(0x934)]=Window_BattleLog[_0x33ee77(0x9a7)][_0x33ee77(0xa53)],Window_BattleLog[_0x33ee77(0x9a7)][_0x33ee77(0xa53)]=function(_0x27737f){const _0x5009e5=_0x33ee77;VisuMZ[_0x5009e5(0x993)][_0x5009e5(0x934)][_0x5009e5(0x88f)](this,_0x27737f),this[_0x5009e5(0x337)]();},VisuMZ[_0x33ee77(0x993)][_0x33ee77(0x6a5)]=Window_BattleLog['prototype']['performMiss'],Window_BattleLog[_0x33ee77(0x9a7)]['performMiss']=function(_0x41f85d){const _0x46a64c=_0x33ee77;VisuMZ[_0x46a64c(0x993)][_0x46a64c(0x6a5)][_0x46a64c(0x88f)](this,_0x41f85d),this['callNextMethod']();},VisuMZ[_0x33ee77(0x993)][_0x33ee77(0x562)]=Window_BattleLog['prototype'][_0x33ee77(0x5dc)],Window_BattleLog[_0x33ee77(0x9a7)][_0x33ee77(0x5dc)]=function(_0x406968){const _0x548517=_0x33ee77;VisuMZ[_0x548517(0x993)][_0x548517(0x562)][_0x548517(0x88f)](this,_0x406968),this[_0x548517(0x337)]();},VisuMZ[_0x33ee77(0x993)]['Window_BattleLog_performEvasion']=Window_BattleLog[_0x33ee77(0x9a7)][_0x33ee77(0xa00)],Window_BattleLog[_0x33ee77(0x9a7)][_0x33ee77(0xa00)]=function(_0xe28960){const _0x57a793=_0x33ee77;VisuMZ[_0x57a793(0x993)][_0x57a793(0x8e5)][_0x57a793(0x88f)](this,_0xe28960),this[_0x57a793(0x337)]();},VisuMZ['BattleCore'][_0x33ee77(0x714)]=Window_BattleLog[_0x33ee77(0x9a7)][_0x33ee77(0x136)],Window_BattleLog['prototype'][_0x33ee77(0x136)]=function(_0x20b10a){const _0xff995b=_0x33ee77;VisuMZ[_0xff995b(0x993)]['Window_BattleLog_performMagicEvasion'][_0xff995b(0x88f)](this,_0x20b10a),this[_0xff995b(0x337)]();},VisuMZ[_0x33ee77(0x993)]['Window_BattleLog_performCounter']=Window_BattleLog[_0x33ee77(0x9a7)]['performCounter'],Window_BattleLog[_0x33ee77(0x9a7)][_0x33ee77(0x532)]=function(_0x40df6a){const _0x139100=_0x33ee77;VisuMZ['BattleCore'][_0x139100(0x1f4)][_0x139100(0x88f)](this,_0x40df6a),this[_0x139100(0x337)]();},VisuMZ[_0x33ee77(0x993)][_0x33ee77(0x8cd)]=Window_BattleLog['prototype']['performReflection'],Window_BattleLog['prototype']['performReflection']=function(_0x49a725){const _0xca3053=_0x33ee77;VisuMZ['BattleCore'][_0xca3053(0x8cd)]['call'](this,_0x49a725),this[_0xca3053(0x337)]();},VisuMZ[_0x33ee77(0x993)]['Window_BattleLog_performSubstitute']=Window_BattleLog[_0x33ee77(0x9a7)][_0x33ee77(0xaae)],Window_BattleLog[_0x33ee77(0x9a7)][_0x33ee77(0xaae)]=function(_0x5c43ca,_0x495cef){const _0x228d48=_0x33ee77;VisuMZ[_0x228d48(0x993)][_0x228d48(0x6c2)][_0x228d48(0x88f)](this,_0x5c43ca,_0x495cef),this[_0x228d48(0x337)]();},VisuMZ[_0x33ee77(0x993)][_0x33ee77(0x384)]=Window_BattleLog[_0x33ee77(0x9a7)][_0x33ee77(0x1ce)],Window_BattleLog[_0x33ee77(0x9a7)]['performCollapse']=function(_0x25d1b9){const _0xa01062=_0x33ee77;VisuMZ[_0xa01062(0x993)]['Window_BattleLog_performCollapse'][_0xa01062(0x88f)](this,_0x25d1b9),this[_0xa01062(0x337)]();},Window_BattleLog[_0x33ee77(0x9a7)][_0x33ee77(0x351)]=function(_0xfb50f7,_0x40d852){const _0x464787=_0x33ee77;_0xfb50f7[_0x464787(0x351)](_0x40d852),this[_0x464787(0x337)]();},Window_BattleLog[_0x33ee77(0x9a7)][_0x33ee77(0x32c)]=function(_0x4e25dc,_0x1ed955){const _0x279b4f=_0x33ee77,_0x35041e=_0x4e25dc['attackAnimationId1']();_0x35041e<=0x0?SoundManager[_0x279b4f(0xbfc)]():this[_0x279b4f(0x725)](_0x1ed955,_0x35041e);},Window_BattleLog[_0x33ee77(0x9a7)][_0x33ee77(0x1f5)]=function(_0x12162c,_0x3fed2f,_0x245fd3){const _0x26386e=_0x33ee77,_0x32f6e2=[_0x12162c][_0x26386e(0x770)](_0x3fed2f);for(const _0x593f88 of _0x32f6e2){if(!_0x593f88)continue;_0x593f88[_0x26386e(0x536)](_0x245fd3);}this[_0x26386e(0x337)]();},Window_BattleLog[_0x33ee77(0x9a7)][_0x33ee77(0xb93)]=function(_0x1c10dd){const _0x4043b0=_0x33ee77;this[_0x4043b0(0x437)]=_0x1c10dd;},Window_BattleLog[_0x33ee77(0x9a7)][_0x33ee77(0x2a8)]=function(_0xb17ca7,_0x5d13dd){const _0x1a4dee=_0x33ee77;for(const _0x2458f0 of _0xb17ca7){if(!_0x2458f0)continue;_0x2458f0[_0x1a4dee(0x2a8)](_0x5d13dd);}this[_0x1a4dee(0x337)]();},Window_BattleLog['prototype']['performMoveToPoint']=function(_0x69e1df,_0x1fff52,_0x50329d,_0x5db938,_0x159f61,_0x1759c4){const _0x44d942=_0x33ee77;_0x69e1df[_0x44d942(0x511)](_0x1fff52,_0x50329d,_0x5db938,_0x159f61,_0x1759c4,-0x1),this[_0x44d942(0x337)]();},Window_BattleLog[_0x33ee77(0x9a7)][_0x33ee77(0xb2a)]=function(_0x43af81,_0x38725f,_0x470986,_0x12f502,_0x120432,_0x164d0e,_0x48f45e){const _0x50b407=_0x33ee77,_0xaa1aa0=Math['min'](..._0x38725f['map'](_0x164079=>_0x164079[_0x50b407(0x157)]()[_0x50b407(0x1f7)]-_0x164079[_0x50b407(0x157)]()[_0x50b407(0x776)]()/0x2)),_0x398c1c=Math['max'](..._0x38725f['map'](_0x25ee2a=>_0x25ee2a[_0x50b407(0x157)]()[_0x50b407(0x1f7)]+_0x25ee2a[_0x50b407(0x157)]()[_0x50b407(0x776)]()/0x2)),_0xd6e333=Math[_0x50b407(0x480)](..._0x38725f[_0x50b407(0x6f2)](_0x5d4bdf=>_0x5d4bdf['battler']()['_baseY']-_0x5d4bdf[_0x50b407(0x157)]()[_0x50b407(0xafe)]())),_0x3a1dca=Math['max'](..._0x38725f[_0x50b407(0x6f2)](_0x362850=>_0x362850[_0x50b407(0x157)]()[_0x50b407(0x74a)])),_0x266725=_0x38725f[_0x50b407(0x313)](_0xf34f=>_0xf34f[_0x50b407(0x6c3)]())['length'],_0x45e747=_0x38725f[_0x50b407(0x313)](_0x322d11=>_0x322d11[_0x50b407(0x43e)]())[_0x50b407(0x70c)];let _0x5b7524=0x0,_0xc5a5e1=0x0;if(_0x470986[_0x50b407(0x7c1)](/front/i))_0x5b7524=_0x266725>=_0x45e747?_0xaa1aa0:_0x398c1c;else{if(_0x470986[_0x50b407(0x7c1)](/middle/i))_0x5b7524=(_0xaa1aa0+_0x398c1c)/0x2,_0x48f45e=-0x1;else _0x470986[_0x50b407(0x7c1)](/back/i)&&(_0x5b7524=_0x266725>=_0x45e747?_0x398c1c:_0xaa1aa0);}if(_0x470986[_0x50b407(0x7c1)](/head/i))_0xc5a5e1=_0xd6e333;else{if(_0x470986[_0x50b407(0x7c1)](/center/i)){_0xc5a5e1=(_0xd6e333+_0x3a1dca)/0x2;if(_0x43af81[_0x50b407(0x157)]())_0xc5a5e1+=_0x43af81[_0x50b407(0x157)]()[_0x50b407(0x578)]/0x2;}else _0x470986[_0x50b407(0x7c1)](/base/i)&&(_0xc5a5e1=_0x3a1dca);}_0x43af81[_0x50b407(0x511)](_0x5b7524,_0xc5a5e1,_0x12f502,_0x120432,_0x164d0e,_0x48f45e),this[_0x50b407(0x337)]();},Window_BattleLog['prototype'][_0x33ee77(0x9da)]=function(_0x388003,_0x20f4b6,_0x24cac4){const _0x3754a3=_0x33ee77;for(const _0xbb9b3a of _0x388003){if(!_0xbb9b3a)continue;_0xbb9b3a[_0x3754a3(0x1b3)](_0x20f4b6,_0x24cac4);}this[_0x3754a3(0x337)]();};function Window_BattleMultiTarget(){const _0x5f4fdd=_0x33ee77;this[_0x5f4fdd(0x54f)](...arguments);}Window_BattleMultiTarget[_0x33ee77(0x9a7)]=Object[_0x33ee77(0xa58)](Window_Command[_0x33ee77(0x9a7)]),Window_BattleMultiTarget[_0x33ee77(0x9a7)][_0x33ee77(0xa94)]=Window_BattleMultiTarget,VisuMZ[_0x33ee77(0x993)][_0x33ee77(0x12b)][_0x33ee77(0x83c)]=VisuMZ[_0x33ee77(0x993)]['Settings'][_0x33ee77(0x83c)]||{},Window_BattleMultiTarget[_0x33ee77(0x568)]=VisuMZ[_0x33ee77(0x993)][_0x33ee77(0x12b)][_0x33ee77(0x83c)][_0x33ee77(0x8c4)]??0x118,Window_BattleMultiTarget[_0x33ee77(0x390)]=VisuMZ[_0x33ee77(0x993)]['Settings'][_0x33ee77(0x83c)][_0x33ee77(0xb79)]??0x2,Window_BattleMultiTarget[_0x33ee77(0x345)]=VisuMZ[_0x33ee77(0x993)][_0x33ee77(0x12b)][_0x33ee77(0x83c)]['ShowButton']??!![],Window_BattleMultiTarget[_0x33ee77(0x738)]=VisuMZ[_0x33ee77(0x993)][_0x33ee77(0x12b)][_0x33ee77(0x83c)][_0x33ee77(0x669)]??_0x33ee77(0x431),Window_BattleMultiTarget['ALL_ENEMIES']=VisuMZ[_0x33ee77(0x993)][_0x33ee77(0x12b)]['MultiTarget'][_0x33ee77(0x2d5)]??_0x33ee77(0x7e0),Window_BattleMultiTarget[_0x33ee77(0x2ad)]=VisuMZ[_0x33ee77(0x993)]['Settings'][_0x33ee77(0x83c)]['ActorOffsetX']??0x0,Window_BattleMultiTarget[_0x33ee77(0x8de)]=VisuMZ[_0x33ee77(0x993)]['Settings']['MultiTarget'][_0x33ee77(0x90a)]??0x0,Window_BattleMultiTarget['ENEMY_OFFSET_X']=VisuMZ[_0x33ee77(0x993)][_0x33ee77(0x12b)]['MultiTarget'][_0x33ee77(0xab2)]??0x0,Window_BattleMultiTarget[_0x33ee77(0x981)]=VisuMZ[_0x33ee77(0x993)][_0x33ee77(0x12b)][_0x33ee77(0x83c)][_0x33ee77(0x752)]??0x0,Window_BattleMultiTarget['prototype'][_0x33ee77(0x54f)]=function(_0x195b57,_0x2c6015){const _0x16915f=_0x33ee77;this[_0x16915f(0x289)]=_0x2c6015,Window_Command[_0x16915f(0x9a7)]['initialize']['call'](this,_0x195b57),this['setBackgroundType'](Window_BattleMultiTarget['BG_TYPE']),this[_0x16915f(0x299)](),this[_0x16915f(0x9ac)](),this[_0x16915f(0x15e)]();},Window_BattleMultiTarget[_0x33ee77(0x9a7)][_0x33ee77(0x685)]=function(){const _0x403ee8=_0x33ee77;return this[_0x403ee8(0x289)];},Window_BattleMultiTarget['prototype']['makeCommandList']=function(){const _0x210d4d=_0x33ee77;let _0x432dca=this[_0x210d4d(0x685)]()?Window_BattleMultiTarget[_0x210d4d(0x738)]:Window_BattleMultiTarget[_0x210d4d(0x7cd)];if(Imported['VisuMZ_0_CoreEngine']&&Window_BattleMultiTarget[_0x210d4d(0x345)]){this[_0x210d4d(0x37d)]=this['forActor']()?_0x210d4d(0x5bc):_0x210d4d(0xb49),this[_0x210d4d(0x16d)]=TextManager[_0x210d4d(0x35f)](this['_buttonKey']);const _0x29439d=VisuMZ[_0x210d4d(0x36f)][_0x210d4d(0x12b)][_0x210d4d(0x791)][_0x210d4d(0x4cd)];_0x432dca=_0x29439d[_0x210d4d(0x23d)](this[_0x210d4d(0x16d)],_0x432dca);}this[_0x210d4d(0x41a)](_0x432dca,_0x210d4d(0x377));},Window_BattleMultiTarget['prototype'][_0x33ee77(0x80b)]=function(_0x27376e){const _0x1880da=_0x33ee77,_0x3fb59d=this[_0x1880da(0x525)](_0x27376e);this[_0x1880da(0xa2b)](),this[_0x1880da(0x7e5)](this[_0x1880da(0x6b2)](_0x27376e));const _0x343673=this[_0x1880da(0x28d)](_0x27376e),_0x34c638=this['textSizeEx'](_0x343673)[_0x1880da(0x3d9)],_0x2cb046=_0x3fb59d['x']+Math[_0x1880da(0x816)]((_0x3fb59d['width']-_0x34c638)/0x2);this['drawTextEx'](_0x343673,_0x2cb046,_0x3fb59d['y'],_0x3fb59d[_0x1880da(0x3d9)]);},Window_BattleMultiTarget[_0x33ee77(0x9a7)][_0x33ee77(0x1b4)]=function(){const _0x206281=_0x33ee77;Window_Command['prototype'][_0x206281(0x1b4)][_0x206281(0x88f)](this),this[_0x206281(0xb1b)](),this['updateKeyboardKeys']();},Window_BattleMultiTarget[_0x33ee77(0x9a7)][_0x33ee77(0xb1b)]=function(){const _0x2b6e59=_0x33ee77;this[_0x2b6e59(0xb1c)]=this[_0x2b6e59(0x668)]();},Window_BattleMultiTarget[_0x33ee77(0x9a7)][_0x33ee77(0x668)]=function(){const _0x10c763=_0x33ee77,_0x12dedb=BattleManager[_0x10c763(0x21e)](),_0x16ce04=_0x12dedb&&_0x12dedb[_0x10c763(0x552)]();if(!_0x16ce04)return![];const _0xe7a686=SceneManager[_0x10c763(0x473)];if(this[_0x10c763(0x685)]()){if(_0xe7a686[_0x10c763(0x78a)][_0x10c763(0x5c8)]&&_0xe7a686['_actorWindow'][_0x10c763(0xb7f)][_0x10c763(0x5bc)])return!![];if(_0xe7a686[_0x10c763(0x7d5)]['active']&&_0xe7a686['_enemyWindow'][_0x10c763(0xb7f)][_0x10c763(0x5bc)])return!![];}else{if(_0xe7a686[_0x10c763(0x7d5)][_0x10c763(0x5c8)]&&_0xe7a686[_0x10c763(0x7d5)][_0x10c763(0xb7f)][_0x10c763(0xb49)])return!![];}return![];},Window_BattleMultiTarget[_0x33ee77(0x9a7)][_0x33ee77(0x1cf)]=function(){const _0x219c41=_0x33ee77;if(!Imported[_0x219c41(0x2e4)])return;this[_0x219c41(0x16d)]!==TextManager['getInputButtonString'](this[_0x219c41(0x37d)])&&this[_0x219c41(0x8d6)]();},Window_BattleMultiTarget[_0x33ee77(0x9a7)][_0x33ee77(0x702)]=function(){const _0x48fcea=_0x33ee77;if(this[_0x48fcea(0xb1c)]&&TouchInput[_0x48fcea(0xa02)]()){const _0x4db283=this[_0x48fcea(0xaa3)]();if(_0x4db283>=0x0){const _0x327377=this[_0x48fcea(0x685)]()?_0x48fcea(0x5bc):'pageup';Input[_0x48fcea(0x22b)](_0x327377);}}};function Window_DamageCounter(){this['initialize'](...arguments);}Window_DamageCounter[_0x33ee77(0x9a7)]=Object[_0x33ee77(0xa58)](Window_Base[_0x33ee77(0x9a7)]),Window_DamageCounter[_0x33ee77(0x9a7)][_0x33ee77(0xa94)]=Window_DamageCounter,Window_DamageCounter['SETTINGS']={'enabled':VisuMZ[_0x33ee77(0x993)][_0x33ee77(0x12b)][_0x33ee77(0xa8c)][_0x33ee77(0x6d3)]??!![],'customFontFace':VisuMZ[_0x33ee77(0x993)][_0x33ee77(0x12b)][_0x33ee77(0xa8c)][_0x33ee77(0x5e1)]??'','textAlign':VisuMZ[_0x33ee77(0x993)][_0x33ee77(0x12b)]['ComboWindow']['TextAlign']??_0x33ee77(0x4b7),'hitsDmgFmt':VisuMZ[_0x33ee77(0x993)][_0x33ee77(0x12b)][_0x33ee77(0xa8c)][_0x33ee77(0x3bd)]??'\x5cC[6]%1\x5c}\x20\x5cC[4]Hit\x20Combo\x5c{','hitsHealFmt':VisuMZ[_0x33ee77(0x993)][_0x33ee77(0x12b)][_0x33ee77(0xa8c)][_0x33ee77(0x716)]??'\x5cC[6]%1\x5c}\x20\x5cC[4]Heal\x20Combo\x5c{','totalDmgFmt':VisuMZ[_0x33ee77(0x993)][_0x33ee77(0x12b)]['ComboWindow'][_0x33ee77(0xaa4)]??_0x33ee77(0x72f),'totalHealFmt':VisuMZ[_0x33ee77(0x993)][_0x33ee77(0x12b)][_0x33ee77(0xa8c)]['totalHealFmt']??'\x5c}\x5cC[21]Total\x20Healing:\x20\x5c{\x5cC[24]+%1','fadeShiftX':VisuMZ[_0x33ee77(0x993)]['Settings']['ComboWindow'][_0x33ee77(0xbe3)]??-0x2,'fadeShiftY':VisuMZ[_0x33ee77(0x993)][_0x33ee77(0x12b)]['ComboWindow'][_0x33ee77(0x258)]??0x0,'positionOffsetX':VisuMZ[_0x33ee77(0x993)]['Settings'][_0x33ee77(0xa8c)][_0x33ee77(0x1f8)]??0x0,'positionOffsetY':VisuMZ['BattleCore']['Settings'][_0x33ee77(0xa8c)]['PosOffsetY']??0x0,'updateDuration':VisuMZ[_0x33ee77(0x993)]['Settings'][_0x33ee77(0xa8c)][_0x33ee77(0x79b)]??0x14,'minimumStayDuration':VisuMZ[_0x33ee77(0x993)]['Settings'][_0x33ee77(0xa8c)][_0x33ee77(0x2f6)]??0x28,'minimumHits':VisuMZ[_0x33ee77(0x993)][_0x33ee77(0x12b)][_0x33ee77(0xa8c)]['minimumHits']??0x1,'opacitySpeed':VisuMZ[_0x33ee77(0x993)][_0x33ee77(0x12b)][_0x33ee77(0xa8c)][_0x33ee77(0x7c5)]??0x10},Window_DamageCounter[_0x33ee77(0x9a7)][_0x33ee77(0x54f)]=function(_0xa61a3f){const _0x5764c6=_0x33ee77;this[_0x5764c6(0x69a)]=0x0,Window_Base['prototype']['initialize']['call'](this,_0xa61a3f),this[_0x5764c6(0x2c0)]=_0xa61a3f['x'],this[_0x5764c6(0x2a2)]=_0xa61a3f['y'],this['resetCounter'](),this[_0x5764c6(0x17b)](0x2);},Window_DamageCounter['prototype']['resetCounter']=function(){const _0x2455d1=_0x33ee77;this[_0x2455d1(0x966)]=0x0,this[_0x2455d1(0x20b)]=0x0,this[_0x2455d1(0xbe4)]=0x0,this[_0x2455d1(0x967)]=0x0,this[_0x2455d1(0x39b)]=0x0;},Window_DamageCounter[_0x33ee77(0x9a7)][_0x33ee77(0x262)]=function(){const _0x7d8020=_0x33ee77;Window_Base[_0x7d8020(0x9a7)][_0x7d8020(0x262)][_0x7d8020(0x88f)](this);const _0x1a2035=Window_DamageCounter[_0x7d8020(0x76a)];_0x1a2035[_0x7d8020(0x364)]?this['contents']['fontFace']=_0x1a2035[_0x7d8020(0x364)]:this['contents'][_0x7d8020(0xa5b)]=$gameSystem[_0x7d8020(0x24a)]();};var $comboWindowReset=function(){const _0x22fff7=_0x33ee77;if(!SceneManager[_0x22fff7(0x5d9)]())return;const _0x1967be=SceneManager[_0x22fff7(0x473)]['_damageCounterWindow'];if(_0x1967be)_0x1967be[_0x22fff7(0x58b)]();};Window_DamageCounter['prototype'][_0x33ee77(0x41c)]=function(_0xc06cee){const _0x5a2fe7=_0x33ee77;this[_0x5a2fe7(0x967)]+=Math[_0x5a2fe7(0x20e)](_0xc06cee);const _0x41ec6d=Window_DamageCounter['SETTINGS'];this[_0x5a2fe7(0x966)]=_0x41ec6d[_0x5a2fe7(0x79b)],this[_0x5a2fe7(0x967)]>=_0x41ec6d[_0x5a2fe7(0x3a3)]&&(this['_visibleDuration']=_0x41ec6d[_0x5a2fe7(0x2f6)]);};var $comboWindowIncreaseHits=function(_0x57fd96){const _0x3449be=_0x33ee77;if(!SceneManager[_0x3449be(0x5d9)]())return;const _0xb47348=SceneManager[_0x3449be(0x473)]['_damageCounterWindow'];if(_0xb47348)_0xb47348[_0x3449be(0x41c)](_0x57fd96);};Window_DamageCounter['prototype']['increaseTotal']=function(_0x1b7362){const _0x1e0ee0=_0x33ee77;this[_0x1e0ee0(0x39b)]+=Math[_0x1e0ee0(0x20e)](_0x1b7362);const _0x156afa=Window_DamageCounter[_0x1e0ee0(0x76a)];this[_0x1e0ee0(0x966)]=_0x156afa[_0x1e0ee0(0x79b)],this[_0x1e0ee0(0x967)]>=_0x156afa[_0x1e0ee0(0x3a3)]&&(this['_visibleDuration']=_0x156afa['minimumStayDuration']);};var $comboWindowIncreaseDamage=function(_0x41f4e9){const _0x5d07fb=_0x33ee77;if(!SceneManager[_0x5d07fb(0x5d9)]())return;const _0x39096c=SceneManager['_scene']['_damageCounterWindow'];if(_0x39096c)_0x39096c['increaseTotal'](_0x41f4e9);},$comboWindowIncreaseHealing=function(_0x1dab05){const _0x20bd47=_0x33ee77;if(!SceneManager[_0x20bd47(0x5d9)]())return;const _0x3f4c89=SceneManager[_0x20bd47(0x473)][_0x20bd47(0x8a2)];if(_0x3f4c89)_0x3f4c89[_0x20bd47(0x88e)](-_0x1dab05);};VisuMZ[_0x33ee77(0x993)][_0x33ee77(0x895)]=Scene_Battle[_0x33ee77(0x9a7)][_0x33ee77(0x8ab)],Scene_Battle[_0x33ee77(0x9a7)]['createAllWindows']=function(){const _0x5cf05e=_0x33ee77;this['createDamageCounterWindow'](),VisuMZ[_0x5cf05e(0x993)][_0x5cf05e(0x895)][_0x5cf05e(0x88f)](this);},Scene_Battle[_0x33ee77(0x9a7)][_0x33ee77(0xab0)]=function(){const _0x416604=_0x33ee77;if(!Window_DamageCounter[_0x416604(0x76a)][_0x416604(0x38f)])return;const _0x370d01=this[_0x416604(0x75e)](),_0x5af691=new Window_DamageCounter(_0x370d01);this[_0x416604(0x4f7)](_0x5af691),this[_0x416604(0x8a2)]=_0x5af691;},Scene_Battle[_0x33ee77(0x9a7)][_0x33ee77(0x75e)]=function(){const _0x131cdd=_0x33ee77;if(VisuMZ[_0x131cdd(0x993)][_0x131cdd(0x12b)][_0x131cdd(0xa8c)][_0x131cdd(0x36c)])return VisuMZ[_0x131cdd(0x993)][_0x131cdd(0x12b)][_0x131cdd(0xa8c)][_0x131cdd(0x36c)][_0x131cdd(0x88f)](this);const _0x57d86c=Math['ceil'](Graphics['width']/0x4),_0x56b0c0=this['calcWindowHeight'](0x2,!![]),_0x473dbe=0x0+this['comboWindowOffsetX'](),_0x2150f5=Math[_0x131cdd(0x20e)](Graphics[_0x131cdd(0x238)]*0x1/0x3)+this['comboWindowOffsetY']();return new Rectangle(_0x473dbe,_0x2150f5,_0x57d86c,_0x56b0c0);},Scene_Battle[_0x33ee77(0x9a7)][_0x33ee77(0x2fe)]=function(){const _0x572c1a=_0x33ee77;return Window_DamageCounter[_0x572c1a(0x76a)][_0x572c1a(0x526)];},Scene_Battle[_0x33ee77(0x9a7)][_0x33ee77(0x1d0)]=function(){const _0x49266a=_0x33ee77;return Window_DamageCounter[_0x49266a(0x76a)][_0x49266a(0x3b8)];},Window_DamageCounter[_0x33ee77(0x9a7)][_0x33ee77(0x1b4)]=function(){const _0x21efc0=_0x33ee77;Window_Base['prototype'][_0x21efc0(0x1b4)][_0x21efc0(0x88f)](this),this[_0x21efc0(0x5ca)](),this[_0x21efc0(0x86f)]();},Window_DamageCounter['prototype'][_0x33ee77(0x5ca)]=function(){const _0x118ea9=_0x33ee77;if(this[_0x118ea9(0x966)]<=0x0)return;const _0x3258bc=this[_0x118ea9(0x966)];this[_0x118ea9(0x20b)]=this[_0x118ea9(0x967)],this[_0x118ea9(0xbe4)]=(this[_0x118ea9(0xbe4)]*(_0x3258bc-0x1)+this[_0x118ea9(0x39b)])/_0x3258bc,this[_0x118ea9(0x966)]--,this[_0x118ea9(0x966)]<=0x0&&(this['_totalHits']=this[_0x118ea9(0x967)],this[_0x118ea9(0xbe4)]=this['_targetDamage']),this[_0x118ea9(0x8d6)]();},Window_DamageCounter[_0x33ee77(0x9a7)]['updateOpacity']=function(){const _0x160e82=_0x33ee77,_0x37622e=Window_DamageCounter[_0x160e82(0x76a)],_0x2704ba=this[_0x160e82(0x668)](),_0x31db37=_0x37622e[_0x160e82(0x7c5)]||0x1;if(_0x2704ba&&this['contentsOpacity']<0xff)this[_0x160e82(0x3eb)]+=_0x31db37;else!_0x2704ba&&this['contentsOpacity']>0x0&&(this['contentsOpacity']-=_0x31db37,this['x']+=_0x37622e[_0x160e82(0xbe3)]||0x0,this['y']+=_0x37622e[_0x160e82(0x258)]||0x0);},Window_DamageCounter[_0x33ee77(0x9a7)][_0x33ee77(0x668)]=function(){const _0x2743f3=_0x33ee77,_0x1f4ecb=Window_DamageCounter[_0x2743f3(0x76a)];if(this[_0x2743f3(0x967)]>=_0x1f4ecb[_0x2743f3(0x3a3)])return!![];if(this[_0x2743f3(0x69a)]-->0x0)return!![];return![];},VisuMZ['BattleCore']['Game_Action_executeHpDamage_ComboWindow']=Game_Action['prototype']['executeHpDamage'],Game_Action[_0x33ee77(0x9a7)][_0x33ee77(0x1d8)]=function(_0x26e58e,_0x22728f){const _0x1f3dac=_0x33ee77;$comboWindowIncreaseHits(0x1),$comboWindowIncreaseDamage(_0x22728f),VisuMZ[_0x1f3dac(0x993)][_0x1f3dac(0x88b)][_0x1f3dac(0x88f)](this,_0x26e58e,_0x22728f);},VisuMZ[_0x33ee77(0x993)][_0x33ee77(0x256)]=BattleManager[_0x33ee77(0x7ae)],BattleManager[_0x33ee77(0x7ae)]=function(){const _0x24626a=_0x33ee77;$comboWindowReset(),VisuMZ[_0x24626a(0x993)]['BattleManager_endAction_ComboWindow'][_0x24626a(0x88f)](this);},Window_DamageCounter[_0x33ee77(0x9a7)][_0x33ee77(0x8d6)]=function(){const _0x14f4f6=_0x33ee77;this['contents']['clear'](),this[_0x14f4f6(0x9c8)](),this['x']=this[_0x14f4f6(0x2c0)],this['y']=this[_0x14f4f6(0x2a2)];},Window_DamageCounter[_0x33ee77(0x9a7)][_0x33ee77(0x16c)]=function(){const _0x8d7ec6=_0x33ee77,_0x372279=Window_DamageCounter[_0x8d7ec6(0x76a)];return _0x372279['textAlign']||_0x8d7ec6(0x4b7);},Window_DamageCounter[_0x33ee77(0x9a7)][_0x33ee77(0xc03)]=function(){const _0x532326=_0x33ee77,_0x4868f8=Window_DamageCounter[_0x532326(0x76a)];let _0x49e1fa=this[_0x532326(0xbe4)]>=0x0?_0x4868f8[_0x532326(0x3bd)]:_0x4868f8[_0x532326(0x716)];return _0x49e1fa[_0x532326(0x23d)](Math['abs'](Math[_0x532326(0x399)](this[_0x532326(0x20b)])));},Window_DamageCounter['prototype'][_0x33ee77(0x483)]=function(){const _0x300f20=_0x33ee77,_0x387d20=Window_DamageCounter[_0x300f20(0x76a)];let _0x36ce87=this[_0x300f20(0xbe4)]>=0x0?_0x387d20['totalDmgFmt']:_0x387d20[_0x300f20(0x4fe)];return _0x36ce87[_0x300f20(0x23d)](Math[_0x300f20(0x960)](Math[_0x300f20(0x20e)](this[_0x300f20(0xbe4)])));},Window_DamageCounter[_0x33ee77(0x9a7)][_0x33ee77(0x9c8)]=function(){const _0x148d50=_0x33ee77;if(VisuMZ['BattleCore'][_0x148d50(0x12b)][_0x148d50(0xa8c)][_0x148d50(0x844)])return VisuMZ['BattleCore'][_0x148d50(0x12b)][_0x148d50(0xa8c)][_0x148d50(0x844)][_0x148d50(0x88f)](this);let _0x590bae=0x0,_0x466576=0x0;const _0x5432b9=this['hitText'](),_0x23e6cf=this[_0x148d50(0x8f6)](_0x5432b9);if(this['textAlignment']()===_0x148d50(0x409))_0x590bae=this[_0x148d50(0x802)]-this['itemPadding']()-_0x23e6cf[_0x148d50(0x3d9)];else this[_0x148d50(0x16c)]()===_0x148d50(0x614)?_0x590bae=Math[_0x148d50(0x816)]((this[_0x148d50(0x802)]-_0x23e6cf['width'])/0x2):_0x590bae=this[_0x148d50(0x2b4)]();this[_0x148d50(0x4ce)](_0x5432b9,_0x590bae,_0x466576),_0x466576+=Math[_0x148d50(0x399)](this[_0x148d50(0x6dd)]()*0x2/0x3);const _0x269f84=this[_0x148d50(0x483)](),_0x19c0ae=this[_0x148d50(0x8f6)](_0x269f84);if(this[_0x148d50(0x16c)]()===_0x148d50(0x409))_0x590bae=this[_0x148d50(0x802)]-this[_0x148d50(0x2b4)]()-_0x19c0ae[_0x148d50(0x3d9)];else this['textAlignment']()===_0x148d50(0x614)?_0x590bae=Math[_0x148d50(0x816)]((this[_0x148d50(0x802)]-_0x19c0ae[_0x148d50(0x3d9)])/0x2):_0x590bae=this[_0x148d50(0x2b4)]();this[_0x148d50(0x4ce)](_0x269f84,_0x590bae,_0x466576);};function Window_InBattleStatus(){const _0x42fd2e=_0x33ee77;this[_0x42fd2e(0x54f)](...arguments);}Window_InBattleStatus[_0x33ee77(0x9a7)]=Object['create'](Window_StatusBase[_0x33ee77(0x9a7)]),Window_InBattleStatus[_0x33ee77(0x9a7)][_0x33ee77(0xa94)]=Window_InBattleStatus,Window_InBattleStatus[_0x33ee77(0x76a)]={'bgType':VisuMZ['BattleCore'][_0x33ee77(0x12b)][_0x33ee77(0x471)]['StatusWindow_BgType']??0x0,'statusGraphic':VisuMZ[_0x33ee77(0x993)][_0x33ee77(0x12b)][_0x33ee77(0x471)][_0x33ee77(0xb82)]??_0x33ee77(0xbab),'statusHelpDesc':VisuMZ[_0x33ee77(0x993)][_0x33ee77(0x12b)][_0x33ee77(0x471)][_0x33ee77(0x3c8)]??_0x33ee77(0x149),'pageButtons':VisuMZ[_0x33ee77(0x993)]['Settings'][_0x33ee77(0x471)][_0x33ee77(0x7c6)]??!![],'pageButtonPosition':VisuMZ[_0x33ee77(0x993)]['Settings'][_0x33ee77(0x471)][_0x33ee77(0x3f9)]??_0x33ee77(0x4b7),'pageOffsetX':VisuMZ[_0x33ee77(0x993)][_0x33ee77(0x12b)][_0x33ee77(0x471)][_0x33ee77(0x239)]??0x0,'pageOffsetY':VisuMZ[_0x33ee77(0x993)][_0x33ee77(0x12b)][_0x33ee77(0x471)][_0x33ee77(0xb41)]??0x0,'buffValueFmt':VisuMZ[_0x33ee77(0x993)][_0x33ee77(0x12b)][_0x33ee77(0x471)][_0x33ee77(0x2f7)]??_0x33ee77(0x126),'debuffValueFmt':VisuMZ[_0x33ee77(0x993)][_0x33ee77(0x12b)][_0x33ee77(0x471)][_0x33ee77(0x749)]??_0x33ee77(0xc18),'enemyStatus':VisuMZ[_0x33ee77(0x993)]['Settings'][_0x33ee77(0x471)]['enemyStatus']??!![],'enemyShowLevel':VisuMZ['BattleCore']['Settings'][_0x33ee77(0x471)][_0x33ee77(0x224)]??!![],'enemyHpGaugeRate':!![],'enemyMpGaugeRate':!![],'enemyTpGaugeRate':!![],'enemyHiddenParameter':VisuMZ[_0x33ee77(0x993)]['Settings'][_0x33ee77(0x471)]['enemyHiddenParameter']??'???','enemyShowParametersAlways':VisuMZ[_0x33ee77(0x993)][_0x33ee77(0x12b)][_0x33ee77(0x471)][_0x33ee77(0xb88)]??![],'enemyShowParametersIfBattleTest':VisuMZ[_0x33ee77(0x993)]['Settings'][_0x33ee77(0x471)][_0x33ee77(0x365)]??!![],'enemyShowParametersIfDefeated':VisuMZ['BattleCore'][_0x33ee77(0x12b)][_0x33ee77(0x471)]['enemyShowParametersIfDefeated']??!![]},Window_InBattleStatus['prototype'][_0x33ee77(0x54f)]=function(_0x3ad8ce){const _0x420cb5=_0x33ee77;Window_StatusBase['prototype'][_0x420cb5(0x54f)][_0x420cb5(0x88f)](this,_0x3ad8ce),this[_0x420cb5(0x17b)](Window_InBattleStatus[_0x420cb5(0x76a)][_0x420cb5(0x7bf)]),this['createEnemySprite'](),this['createStatesWindow'](),this[_0x420cb5(0x64a)]();},Window_InBattleStatus[_0x33ee77(0x9a7)][_0x33ee77(0x95b)]=function(_0x2b06b4){const _0x2374df=_0x33ee77;this[_0x2374df(0x17c)]=_0x2b06b4,this[_0x2374df(0x8d6)](),this[_0x2374df(0xb4a)]&&this['_statesWindow'][_0x2374df(0x95b)](_0x2b06b4);},Window_InBattleStatus[_0x33ee77(0x9a7)][_0x33ee77(0x71f)]=function(){const _0x1e1baa=_0x33ee77;Window_StatusBase['prototype']['open']['call'](this);if(this['_statesWindow'])this['_statesWindow'][_0x1e1baa(0x71f)]();this['updatePageButtonVisibility'](),Imported['VisuMZ_3_StateTooltips']&&SceneManager[_0x1e1baa(0x87d)](null);},Window_InBattleStatus[_0x33ee77(0x9a7)][_0x33ee77(0xa49)]=function(){const _0x3ee5a3=_0x33ee77;Window_StatusBase[_0x3ee5a3(0x9a7)][_0x3ee5a3(0xa49)][_0x3ee5a3(0x88f)](this);if(this[_0x3ee5a3(0xb4a)])this[_0x3ee5a3(0xb4a)][_0x3ee5a3(0xa49)]();},Window_InBattleStatus[_0x33ee77(0x9a7)][_0x33ee77(0x302)]=function(_0x4b918a){this['_returnWindow']=_0x4b918a;},Window_InBattleStatus[_0x33ee77(0x9a7)]['getReturnWindow']=function(){const _0x16fb6c=_0x33ee77;return this[_0x16fb6c(0xbf4)]||SceneManager[_0x16fb6c(0x473)][_0x16fb6c(0x651)];},Window_InBattleStatus[_0x33ee77(0x9a7)]['loadFaceImages']=function(){const _0x39ec2a=_0x33ee77;Window_StatusBase['prototype'][_0x39ec2a(0x228)][_0x39ec2a(0x88f)](this),this[_0x39ec2a(0x84b)]();},Window_InBattleStatus[_0x33ee77(0x9a7)][_0x33ee77(0x84b)]=function(){const _0x334020=_0x33ee77;for(const _0x175037 of $gameParty[_0x334020(0x32f)]()){if(!_0x175037)continue;_0x175037[_0x334020(0x812)]()&&ImageManager[_0x334020(0x23c)](_0x175037[_0x334020(0x812)]()),_0x175037['battlerName']()&&ImageManager['loadSvActor'](_0x175037[_0x334020(0xaba)]()),Imported[_0x334020(0x8a8)]&&_0x175037[_0x334020(0x619)]()&&ImageManager[_0x334020(0xbf5)](_0x175037[_0x334020(0x619)]());}},Window_InBattleStatus[_0x33ee77(0x9a7)][_0x33ee77(0x5c2)]=function(){const _0x4769ab=_0x33ee77;this[_0x4769ab(0x2d3)]=new Sprite(),this[_0x4769ab(0x2d3)][_0x4769ab(0xbbb)]['x']=0.5,this[_0x4769ab(0x2d3)]['anchor']['y']=0x1,this[_0x4769ab(0xb83)](this[_0x4769ab(0x2d3)]);},Window_InBattleStatus['prototype'][_0x33ee77(0x6bf)]=function(){const _0x4ad8f1=_0x33ee77,_0x2d8fe7=this[_0x4ad8f1(0x166)](),_0xe0306d=new Window_InBattleStatusStates(_0x2d8fe7);this[_0x4ad8f1(0xb83)](_0xe0306d),_0xe0306d['setHelpWindow'](SceneManager[_0x4ad8f1(0x473)][_0x4ad8f1(0xb58)]),this['_statesWindow']=_0xe0306d;},Window_InBattleStatus[_0x33ee77(0x9a7)][_0x33ee77(0x166)]=function(){const _0x1e2e31=_0x33ee77,_0x3ae7d9=Window_InBattleStatusStates[_0x1e2e31(0x76a)][_0x1e2e31(0x406)],_0x3fd335=Math[_0x1e2e31(0x480)](_0x3ae7d9,Math['floor'](this[_0x1e2e31(0x3d9)]/0x2)),_0x539866=Graphics[_0x1e2e31(0x71a)]>0x44c?this['height']:this[_0x1e2e31(0x6dd)]()*0x4+this[_0x1e2e31(0x869)]*0x2,_0x2886ad=this['width']-_0x3fd335,_0x1d9284=this['height']-_0x539866;return new Rectangle(_0x2886ad,_0x1d9284,_0x3fd335,_0x539866);},Window_InBattleStatus[_0x33ee77(0x9a7)][_0x33ee77(0x64a)]=function(){const _0x3c043e=_0x33ee77;if(!ConfigManager['touchUI'])return;if(!Window_InBattleStatus['SETTINGS'][_0x3c043e(0x7c6)])return;this[_0x3c043e(0x3a1)]=new Sprite_Button(_0x3c043e(0xb49)),this['_pageupButton']['x']=this[_0x3c043e(0x792)]()+Window_InBattleStatus[_0x3c043e(0x76a)][_0x3c043e(0x239)],this['_pageupButton']['y']=this[_0x3c043e(0x45b)]()+Window_InBattleStatus['SETTINGS']['pageOffsetY'];const _0x19e78e=this[_0x3c043e(0x3a1)]['x']+this[_0x3c043e(0x3a1)][_0x3c043e(0x3d9)];this['_pagedownButton']=new Sprite_Button('pagedown'),this[_0x3c043e(0x11e)]['x']=_0x19e78e+0x4,this[_0x3c043e(0x11e)]['y']=this['_pageupButton']['y'],this[_0x3c043e(0xb83)](this[_0x3c043e(0x3a1)]),this['addChild'](this['_pagedownButton']),this[_0x3c043e(0x3a1)][_0x3c043e(0xaee)](this['previousActor']['bind'](this)),this['_pagedownButton'][_0x3c043e(0xaee)](this[_0x3c043e(0x665)][_0x3c043e(0x925)](this));},Window_InBattleStatus[_0x33ee77(0x9a7)]['pageButtonX']=function(){const _0x3295b2=_0x33ee77;if(Graphics[_0x3295b2(0x71a)]>0x44c&&Graphics[_0x3295b2(0x238)]>0x2bc){if(Window_InBattleStatus[_0x3295b2(0x76a)]['pageButtonPosition']===_0x3295b2(0x4b7)){let _0x285b80=Math['ceil']((-this['x']-0x64)/0x2);if(_0x285b80>=-0x64)_0x285b80=this[_0x3295b2(0x869)];return _0x285b80;}else{const _0x91a05e=Graphics[_0x3295b2(0x71a)]-this['x']-this[_0x3295b2(0x3d9)];let _0x48940e=Math[_0x3295b2(0x816)]((_0x91a05e-0x64)/0x2)+this[_0x3295b2(0x3d9)];return _0x48940e;}}else return this[_0x3295b2(0x3d9)]-0x64-this[_0x3295b2(0x869)]/0x2;},Window_InBattleStatus[_0x33ee77(0x9a7)][_0x33ee77(0x45b)]=function(){const _0x3fe2cd=_0x33ee77;return Graphics[_0x3fe2cd(0x71a)]>0x44c&&Graphics[_0x3fe2cd(0x238)]>0x2bc?this['height']-0x30-this['padding']:0x30+this['padding'];},Window_InBattleStatus[_0x33ee77(0x9a7)][_0x33ee77(0x676)]=function(){const _0xfa9493=_0x33ee77;let _0x52f807=this['getBattleMembers']();if(_0x52f807[_0xfa9493(0x70c)]<=0x1&&!Window_InBattleStatus[_0xfa9493(0x76a)][_0xfa9493(0x790)])return;let _0x30e4b2=_0x52f807[_0xfa9493(0xba4)](this[_0xfa9493(0x17c)]);_0x30e4b2--;_0x30e4b2<0x0&&(Window_InBattleStatus[_0xfa9493(0x76a)]['enemyStatus']&&(_0x52f807=this[_0xfa9493(0x54b)](!![])),_0x30e4b2=_0x52f807[_0xfa9493(0x70c)]-0x1);const _0x520bb0=_0x52f807[_0x30e4b2];this[_0xfa9493(0x95b)](_0x520bb0),SoundManager['playCursor']();},Window_InBattleStatus['prototype'][_0x33ee77(0x665)]=function(){const _0x37ba94=_0x33ee77;let _0x2ba25d=this[_0x37ba94(0x54b)]();if(_0x2ba25d['length']<=0x1&&!Window_InBattleStatus[_0x37ba94(0x76a)]['enemyStatus'])return;let _0x56de38=_0x2ba25d[_0x37ba94(0xba4)](this[_0x37ba94(0x17c)]);_0x56de38++;_0x56de38>=_0x2ba25d[_0x37ba94(0x70c)]&&(Window_InBattleStatus[_0x37ba94(0x76a)][_0x37ba94(0x790)]&&(_0x2ba25d=this[_0x37ba94(0x54b)](!![])),_0x56de38=0x0);const _0x2aac3e=_0x2ba25d[_0x56de38];this['setBattler'](_0x2aac3e),SoundManager[_0x37ba94(0x216)]();},Window_InBattleStatus[_0x33ee77(0x9a7)][_0x33ee77(0x54b)]=function(_0x24c070){const _0x12d058=_0x33ee77;let _0x5ac182=[];const _0x16451e=_0x24c070?this[_0x12d058(0x17c)][_0x12d058(0x20d)]():this[_0x12d058(0x17c)][_0x12d058(0x95f)]();return _0x16451e===$gameParty?_0x5ac182=$gameParty[_0x12d058(0xa6a)]():_0x5ac182=$gameTroop[_0x12d058(0x373)](),_0x5ac182['remove'](null);},Window_InBattleStatus[_0x33ee77(0x9a7)][_0x33ee77(0x1b4)]=function(){const _0x1435cb=_0x33ee77;Window_Base[_0x1435cb(0x9a7)]['update'][_0x1435cb(0x88f)](this),this[_0x1435cb(0x203)]();},Window_InBattleStatus[_0x33ee77(0x9a7)][_0x33ee77(0x203)]=function(){const _0xa383da=_0x33ee77;if(this[_0xa383da(0x27b)]()){if(this[_0xa383da(0x254)]())return this[_0xa383da(0x661)]();if(Input['isRepeated'](_0xa383da(0x409)))return this[_0xa383da(0x665)]();if(Input[_0xa383da(0x4e5)]('left'))return this['previousActor']();}},SoundManager['playCursor']=function(){const _0x4f34e0=_0x33ee77;this[_0x4f34e0(0xbca)](0x0);},Window_InBattleStatus[_0x33ee77(0x9a7)][_0x33ee77(0x27b)]=function(){const _0x58228e=_0x33ee77;return this[_0x58228e(0x58a)]()&&this['visible'];},Window_InBattleStatus[_0x33ee77(0x9a7)][_0x33ee77(0x254)]=function(){const _0x26d089=_0x33ee77;if(Input[_0x26d089(0xa31)](_0x26d089(0x4f9)))return!![];if(TouchInput[_0x26d089(0xa59)]())return!![];return![];},Window_InBattleStatus[_0x33ee77(0x9a7)]['processCancel']=function(){const _0x48d17c=_0x33ee77;SoundManager['playCancel'](),this[_0x48d17c(0x299)](),this[_0x48d17c(0xb4a)]&&(this[_0x48d17c(0xb4a)][_0x48d17c(0x15e)](),this[_0x48d17c(0xb4a)][_0x48d17c(0x299)]()),SceneManager[_0x48d17c(0x473)]['endInBattleStatus']();},Window_InBattleStatus[_0x33ee77(0x9a7)]['updatePageButtonVisibility']=function(){const _0x56205f=_0x33ee77;if(!this['_pageupButton'])return;if(!this[_0x56205f(0x11e)])return;const _0x415fcc=$gameParty['battleMembers']()[_0x56205f(0x70c)]>0x0||Window_InBattleStatus[_0x56205f(0x76a)][_0x56205f(0x790)];this[_0x56205f(0x3a1)][_0x56205f(0xb1c)]=_0x415fcc,this['_pagedownButton'][_0x56205f(0xb1c)]=_0x415fcc;},Window_InBattleStatus[_0x33ee77(0x9a7)]['refresh']=function(){const _0x221043=_0x33ee77;Window_StatusBase[_0x221043(0x9a7)][_0x221043(0x8d6)][_0x221043(0x88f)](this);if(this[_0x221043(0x2d3)])this[_0x221043(0x2d3)][_0x221043(0x9ac)]();this['contents']['clear'](),this['contentsBack']['clear']();if(!this['_battler'])return;this[_0x221043(0xa2c)]();},Window_InBattleStatus['prototype'][_0x33ee77(0xa2c)]=function(){const _0x2cbb95=_0x33ee77;if(VisuMZ[_0x2cbb95(0x993)]['Settings']['InBattleStatus'][_0x2cbb95(0x751)])return VisuMZ[_0x2cbb95(0x993)][_0x2cbb95(0x12b)][_0x2cbb95(0x471)]['StatusWindow_DrawJS'][_0x2cbb95(0x88f)](this);{const _0x4db68f=this[_0x2cbb95(0xbbe)]()/0x2,_0x395d61=ImageManager[_0x2cbb95(0x541)],_0x382d39=_0x395d61/0x2-this[_0x2cbb95(0x6dd)]()*1.5;this[_0x2cbb95(0x255)](this[_0x2cbb95(0x17c)],_0x4db68f+0x1,0x0,ImageManager['faceWidth'],_0x395d61),this['drawActorSimpleStatus'](this['_battler'],_0x4db68f+0xb4,_0x382d39);}{let _0x5b52f7=this[_0x2cbb95(0x376)](),_0x4caeea=0x0,_0x278e53=Math[_0x2cbb95(0x399)](this['drawingAreaWidth']()/0x2),_0x3052fb=0x0;const _0x425d08=this['displayedParams']();let _0x395e3d=_0x4caeea;const _0x26bb6b=this[_0x2cbb95(0x2a1)]-ImageManager[_0x2cbb95(0x541)],_0x586404=Math['ceil'](_0x425d08[_0x2cbb95(0x70c)]/0x2)*this[_0x2cbb95(0x6dd)]();let _0x1ef4d5=Math['ceil']((_0x26bb6b-_0x586404)/0x2)+ImageManager[_0x2cbb95(0x541)],_0x2e4644=Math[_0x2cbb95(0x816)](_0x5b52f7/0x2);this[_0x2cbb95(0xb4a)]['y']!==0x0&&(this[_0x2cbb95(0xb4a)]['y']=_0x1ef4d5);for(const _0x101009 of _0x425d08){this['drawDarkRect'](_0x395e3d,_0x1ef4d5,_0x2e4644,this['lineHeight']()),this[_0x2cbb95(0x53b)](_0x101009,_0x395e3d,_0x1ef4d5,_0x2e4644),_0x3052fb++,_0x3052fb%0x2===0x0?(_0x395e3d=_0x4caeea,_0x1ef4d5+=this[_0x2cbb95(0x6dd)]()):_0x395e3d=_0x278e53;}}},Window_InBattleStatus['prototype'][_0x33ee77(0x29f)]=function(){const _0x79e7aa=_0x33ee77;return VisuMZ[_0x79e7aa(0x993)][_0x79e7aa(0x12b)][_0x79e7aa(0x471)][_0x79e7aa(0xb82)];},Window_InBattleStatus[_0x33ee77(0x9a7)][_0x33ee77(0x255)]=function(_0x40e09d,_0x33260b,_0x696e55,_0x18e63c,_0x155fe9){const _0x3946fb=_0x33ee77;if(_0x40e09d[_0x3946fb(0x6c3)]())switch(this[_0x3946fb(0x29f)]()){case _0x3946fb(0x9c1):break;case _0x3946fb(0x56e):this[_0x3946fb(0x59e)](_0x40e09d,_0x33260b,_0x696e55+0x1,_0x18e63c,_0x155fe9-0x2);break;case _0x3946fb(0x1e9):this[_0x3946fb(0xae9)](_0x40e09d,_0x33260b,_0x696e55+0x1,_0x18e63c,_0x155fe9-0x2);break;default:this['drawItemActorFace'](_0x40e09d,_0x33260b,_0x696e55,_0x18e63c,_0x155fe9);break;}else this[_0x3946fb(0x865)](_0x40e09d,_0x33260b,_0x696e55,_0x18e63c,_0x155fe9);},Window_InBattleStatus['prototype'][_0x33ee77(0x2bf)]=function(_0x5a3a39,_0x2cd68f,_0x184c3c,_0x3396d4,_0x11dcf2){const _0x510785=_0x33ee77;_0x3396d4=_0x3396d4||ImageManager[_0x510785(0x212)],_0x11dcf2=_0x11dcf2||ImageManager['faceHeight'];const _0x44cdf1=ImageManager[_0x510785(0x212)],_0x277dff=_0x11dcf2-0x2,_0x31212f=_0x2cd68f+Math['floor']((_0x3396d4-_0x44cdf1)/0x2);this[_0x510785(0xa94)]===Window_MenuStatus&&this[_0x510785(0x7e5)](_0x5a3a39[_0x510785(0x527)]()),this[_0x510785(0x983)](_0x5a3a39,_0x31212f,_0x184c3c,_0x44cdf1,_0x277dff),this[_0x510785(0x7e5)](!![]);},Window_InBattleStatus['prototype']['drawItemActorSprite']=function(_0x390d4a,_0x32f8c2,_0xa2c013,_0x5f1780,_0x500251){const _0x3c3a3f=_0x33ee77;_0x5f1780=_0x5f1780||ImageManager[_0x3c3a3f(0x212)],_0x500251=_0x500251||ImageManager[_0x3c3a3f(0x541)];const _0x44f597=_0x390d4a['characterName'](),_0x1ae90d=_0x390d4a[_0x3c3a3f(0x1da)](),_0x47ced2=ImageManager[_0x3c3a3f(0x23c)](_0x44f597),_0x5f9625=ImageManager[_0x3c3a3f(0x1f0)](_0x44f597),_0x25d806=_0x47ced2[_0x3c3a3f(0x3d9)]/(_0x5f9625?0x3:0xc),_0x5c434e=_0x47ced2[_0x3c3a3f(0x578)]/(_0x5f9625?0x4:0x8),_0x9edc1a=_0x5f1780,_0x414ae0=_0x500251-0x2,_0x3149a0=_0x32f8c2+Math[_0x3c3a3f(0x816)](_0x9edc1a/0x2),_0x53e0c1=_0xa2c013+Math[_0x3c3a3f(0x399)]((_0x500251+_0x5c434e)/0x2);this[_0x3c3a3f(0xa94)]===Window_MenuStatus&&this[_0x3c3a3f(0x7e5)](_0x390d4a[_0x3c3a3f(0x527)]());const _0x2f21b8=Math[_0x3c3a3f(0x480)](_0x5f1780,_0x25d806),_0x59de05=Math['min'](_0x500251,_0x5c434e),_0x4dd7d1=Math[_0x3c3a3f(0x816)](_0x32f8c2+Math['max'](_0x5f1780-_0x25d806,0x0)/0x2),_0xecb0f2=Math['floor'](_0xa2c013+Math[_0x3c3a3f(0x657)](_0x500251-_0x5c434e,0x0)/0x2),_0x564732=_0x5f9625?0x0:_0x1ae90d,_0x1a9b72=(_0x564732%0x4*0x3+0x1)*_0x25d806,_0x49b84e=Math[_0x3c3a3f(0x816)](_0x564732/0x4)*0x4*_0x5c434e;this[_0x3c3a3f(0x3a6)][_0x3c3a3f(0x2a9)](_0x47ced2,_0x1a9b72,_0x49b84e,_0x2f21b8,_0x59de05,_0x4dd7d1,_0xecb0f2),this[_0x3c3a3f(0x7e5)](!![]);},Window_InBattleStatus[_0x33ee77(0x9a7)][_0x33ee77(0xae9)]=function(_0x6363bc,_0xb2caff,_0x277ea0,_0xfc0c15,_0x183483,_0x1a23e9){const _0x259558=_0x33ee77;_0xfc0c15=_0xfc0c15||ImageManager[_0x259558(0x212)],_0x183483=_0x183483||ImageManager[_0x259558(0x541)];const _0x198444=ImageManager[_0x259558(0x8be)](_0x1a23e9?_0x6363bc['svBattlerName']():_0x6363bc['battlerName']()),_0x3a60f8=_0x198444[_0x259558(0x3d9)]/ImageManager['svActorHorzCells'],_0x24e5b6=_0x198444[_0x259558(0x578)]/ImageManager[_0x259558(0x9b9)],_0x28487d=_0xfc0c15,_0x1b8cf4=_0x183483-0x2,_0x595da4=_0xb2caff+Math[_0x259558(0x816)](_0x28487d/0x2),_0x1b56f1=_0x277ea0+Math[_0x259558(0x399)]((_0x183483+_0x24e5b6)/0x2);this[_0x259558(0xa94)]===Window_MenuStatus&&this[_0x259558(0x7e5)](_0x6363bc['isBattleMember']());const _0x507980=_0x6363bc['hasStaticSvBattler']&&_0x6363bc[_0x259558(0x3df)](),_0x474bf0=0x0,_0x3bdc32=0x0,_0x24f8da=_0x507980?_0x198444[_0x259558(0x3d9)]:_0x3a60f8,_0x2ed4d2=_0x507980?_0x198444['height']:_0x24e5b6,_0xe4dcd6=Math[_0x259558(0x480)](0x1,_0xfc0c15/_0x24f8da,_0x183483/_0x2ed4d2),_0x595bb5=_0xe4dcd6*_0x24f8da,_0x23b3ce=_0xe4dcd6*_0x2ed4d2,_0x2ed319=Math[_0x259558(0x816)](_0xb2caff+Math[_0x259558(0x657)](_0xfc0c15-_0x595bb5,0x0)/0x2),_0x1c98d7=Math[_0x259558(0x816)](_0x277ea0+Math[_0x259558(0x657)](_0x183483-_0x23b3ce,0x0)/0x2);this[_0x259558(0x3a6)][_0x259558(0x2a9)](_0x198444,_0x474bf0,_0x3bdc32,_0x24f8da,_0x2ed4d2,_0x2ed319,_0x1c98d7,_0x595bb5,_0x23b3ce),this[_0x259558(0x7e5)](!![]);},Window_InBattleStatus[_0x33ee77(0x9a7)][_0x33ee77(0x865)]=function(_0x3fafcf,_0x1121ec,_0x2c1926,_0x1f8621,_0x14ab5d){const _0x12faf7=_0x33ee77;if(_0x3fafcf[_0x12faf7(0x175)]()){this[_0x12faf7(0xae9)](_0x3fafcf,_0x1121ec,_0x2c1926+0x1,_0x1f8621,_0x14ab5d-0x2,!![]);return;}const _0x130c10=_0x3fafcf[_0x12faf7(0xaba)](),_0x51e96e=$gameSystem[_0x12faf7(0x7a6)]()?ImageManager['loadSvEnemy'](_0x130c10):ImageManager['loadEnemy'](_0x130c10);_0x51e96e[_0x12faf7(0x410)](this[_0x12faf7(0x75d)][_0x12faf7(0x925)](this,_0x3fafcf,_0x51e96e,_0x1121ec,_0x2c1926,_0x1f8621,_0x14ab5d));},Window_InBattleStatus['prototype'][_0x33ee77(0x75d)]=function(_0x26eb41,_0x391a2f,_0x2adcc4,_0x222ab5,_0x19127f,_0x12a63d){const _0x43e3e1=_0x33ee77;if(this[_0x43e3e1(0x17c)]!==_0x26eb41)return;this[_0x43e3e1(0x2d3)][_0x43e3e1(0x6e7)](),this[_0x43e3e1(0x2d3)][_0x43e3e1(0x490)]=new Bitmap(_0x19127f,_0x12a63d);const _0x305ce6=_0x19127f,_0x13b3a8=_0x12a63d,_0x13928f=Math[_0x43e3e1(0x480)](_0x305ce6,_0x13b3a8),_0x3e1507=this[_0x43e3e1(0x2d3)][_0x43e3e1(0x490)],_0x25513c=Math[_0x43e3e1(0x480)](0x1,_0x13928f/_0x391a2f['width'],_0x13928f/_0x391a2f[_0x43e3e1(0x578)]),_0x387b2c=_0x391a2f['width']*_0x25513c,_0x3c056f=_0x391a2f[_0x43e3e1(0x578)]*_0x25513c,_0x5f1850=Math[_0x43e3e1(0x20e)]((_0x305ce6-_0x387b2c)/0x2),_0x262811=Math[_0x43e3e1(0x20e)]((_0x13b3a8-_0x3c056f)/0x2);_0x3e1507['blt'](_0x391a2f,0x0,0x0,_0x391a2f[_0x43e3e1(0x3d9)],_0x391a2f[_0x43e3e1(0x578)],_0x5f1850,_0x262811,_0x387b2c,_0x3c056f),this['_enemySprite'][_0x43e3e1(0xbbb)]['x']=0.5,this[_0x43e3e1(0x2d3)][_0x43e3e1(0xbbb)]['y']=0x1,this[_0x43e3e1(0x2d3)]['x']=_0x2adcc4+_0x19127f/0x2+this[_0x43e3e1(0x869)],this[_0x43e3e1(0x2d3)]['y']=_0x222ab5+_0x12a63d+this[_0x43e3e1(0x869)],this['_enemySprite'][_0x43e3e1(0x315)](this[_0x43e3e1(0x17c)][_0x43e3e1(0x768)]());},Window_InBattleStatus[_0x33ee77(0x9a7)]['drawActorName']=function(_0x5babbf,_0x2bb62,_0x3b4f80,_0x470950){const _0x142e96=_0x33ee77;if(_0x5babbf['isEnemy']())_0x470950=this['innerWidth']-_0x2bb62;Window_StatusBase['prototype'][_0x142e96(0x92e)][_0x142e96(0x88f)](this,_0x5babbf,_0x2bb62,_0x3b4f80,_0x470950);},Window_InBattleStatus[_0x33ee77(0x9a7)][_0x33ee77(0x706)]=function(_0x329ba5,_0x14b6b8,_0x1c1ff4,_0x5a1b54){const _0x335ccc=_0x33ee77;if(!_0x329ba5[_0x335ccc(0x6c3)]())return;Window_StatusBase[_0x335ccc(0x9a7)][_0x335ccc(0x706)][_0x335ccc(0x88f)](this,_0x329ba5,_0x14b6b8,_0x1c1ff4,_0x5a1b54);},Window_InBattleStatus[_0x33ee77(0x9a7)][_0x33ee77(0x6ed)]=function(_0x37cc6d,_0x54bb4c,_0x1c0b15){const _0x4d3937=_0x33ee77;if(_0x37cc6d[_0x4d3937(0x43e)]()&&!Window_InBattleStatus[_0x4d3937(0x76a)]['enemyShowLevel'])return;Window_StatusBase[_0x4d3937(0x9a7)][_0x4d3937(0x6ed)]['call'](this,_0x37cc6d,_0x54bb4c,_0x1c0b15);},Window_InBattleStatus[_0x33ee77(0x9a7)][_0x33ee77(0x522)]=function(_0x2e01ee,_0x531cf2,_0x150174,_0x292f07){const _0xa6f3e6=_0x33ee77;_0x2e01ee[_0xa6f3e6(0x4c6)]=!![],Window_StatusBase[_0xa6f3e6(0x9a7)][_0xa6f3e6(0x522)][_0xa6f3e6(0x88f)](this,_0x2e01ee,_0x531cf2,_0x150174,_0x292f07),_0x2e01ee['_hideAllIcons']=undefined;},VisuMZ['BattleCore']['Game_BattlerBase_allIconsIBS']=Game_BattlerBase[_0x33ee77(0x9a7)][_0x33ee77(0x3b2)],Game_BattlerBase['prototype'][_0x33ee77(0x3b2)]=function(){const _0x173f0f=_0x33ee77;if(this[_0x173f0f(0x4c6)])return[];return VisuMZ[_0x173f0f(0x993)]['Game_BattlerBase_allIconsIBS']['call'](this);},Window_InBattleStatus[_0x33ee77(0x9a7)][_0x33ee77(0xc1a)]=function(_0x9178ed,_0x3a9e9b,_0x4f9dac,_0x46382a){const _0x3ff3d1=_0x33ee77,_0x4cd8ec=_0x3ff3d1(0x30f)[_0x3ff3d1(0x23d)](_0x9178ed['battlerKey'](),_0x3a9e9b);let _0x58594b=![];if(_0x9178ed[_0x3ff3d1(0x43e)]()){const _0x2c7b49=Window_InBattleStatus['SETTINGS'];if(_0x3a9e9b==='hp'&&_0x2c7b49[_0x3ff3d1(0xa6f)])_0x58594b=!![];if(_0x3a9e9b==='mp'&&_0x2c7b49[_0x3ff3d1(0x682)])_0x58594b=!![];if(_0x3a9e9b==='tp'&&_0x2c7b49[_0x3ff3d1(0xa48)])_0x58594b=!![];}const _0x200568=this['createInnerSprite'](_0x4cd8ec,_0x58594b?Sprite_GaugeRate:Sprite_Gauge);_0x200568['setup'](_0x9178ed,_0x3a9e9b),_0x200568['move'](_0x4f9dac,_0x46382a),_0x200568[_0x3ff3d1(0x6e7)]();},Window_InBattleStatus['prototype']['drawingAreaWidth']=function(){const _0x3f959a=_0x33ee77,_0x54c74d=this[_0x3f959a(0xb4a)]?this[_0x3f959a(0xb4a)]['width']:0x0;return this[_0x3f959a(0x802)]-_0x54c74d+this[_0x3f959a(0x869)]*0x2;},Window_InBattleStatus[_0x33ee77(0x9a7)][_0x33ee77(0x887)]=function(){const _0x1474cf=_0x33ee77;return Imported['VisuMZ_0_CoreEngine']?VisuMZ[_0x1474cf(0x36f)][_0x1474cf(0x12b)]['Param'][_0x1474cf(0x3c5)]:[_0x1474cf(0x1b7),'MaxMP',_0x1474cf(0x756),_0x1474cf(0x55a),_0x1474cf(0x1d7),_0x1474cf(0x938),_0x1474cf(0x75c),_0x1474cf(0x51e)];},Window_InBattleStatus['prototype']['drawParamData']=function(_0x59904b,_0x23a18c,_0x423f6e,_0x4be378){const _0x271f1c=_0x33ee77,_0x46270d=Window_InBattleStatus[_0x271f1c(0x76a)],_0x30e8d2=Imported[_0x271f1c(0x2e4)];this['resetFontSettings']();let _0x564b6a='',_0x3dde9a=0x0,_0x114b51=[_0x271f1c(0x353),_0x271f1c(0x4bc),_0x271f1c(0x756),_0x271f1c(0x55a),_0x271f1c(0x1d7),_0x271f1c(0x938),_0x271f1c(0x75c),_0x271f1c(0x51e)][_0x271f1c(0xba4)](String(_0x59904b)[_0x271f1c(0x46b)]()[_0x271f1c(0xaf2)]());if(_0x30e8d2)_0x564b6a=TextManager['paramName'](_0x59904b),_0x3dde9a=VisuMZ[_0x271f1c(0x704)](_0x59904b);else{if(_0x114b51>=0x0&&_0x114b51<0x8)_0x564b6a=TextManager['param'](_0x114b51);}if(_0x114b51>=0x0&&_0x114b51<0x8){const _0x21e617=this['_battler']['_buffs'][_0x114b51];this[_0x271f1c(0x17c)]['buffIconIndex'](_0x21e617,_0x114b51)!==0x0&&(_0x3dde9a=this['_battler']['buffIconIndex'](_0x21e617,_0x114b51));}if(_0x564b6a){let _0x21e887='\x5cI[%2]\x5cC[16]%1\x5cC[0]'[_0x271f1c(0x23d)](_0x564b6a,_0x3dde9a);_0x4be378<=0xd4&&(_0x21e887='\x5cC[16]%1\x5cC[0]'[_0x271f1c(0x23d)](_0x564b6a));const _0xc997f9=_0x4be378<=0xd4?'\x20':'\x20\x20';this[_0x271f1c(0x4ce)](_0xc997f9+_0x21e887,_0x23a18c,_0x423f6e);}this['resetTextColor']();let _0xbc443a='';_0x30e8d2?_0xbc443a=this['_battler'][_0x271f1c(0x772)](_0x59904b,!![]):_0xbc443a=String(this[_0x271f1c(0x17c)][_0x271f1c(0x68a)](_0x114b51));if(this[_0x271f1c(0x17c)][_0x271f1c(0x43e)]()){let _0x36c0cd=!![];if(_0x46270d[_0x271f1c(0xb88)])_0x36c0cd=![];if(_0x46270d['enemyShowParametersIfBattleTest']&&BattleManager[_0x271f1c(0x26a)]())_0x36c0cd=![];if(_0x46270d[_0x271f1c(0x34e)]&&$gameSystem[_0x271f1c(0x1de)]()[_0x271f1c(0x741)](this[_0x271f1c(0x17c)]['enemyId']()))_0x36c0cd=![];_0x36c0cd&&(_0xbc443a=_0x46270d[_0x271f1c(0x976)]);}if(_0x114b51>=0x0&&_0x114b51<0x8){if(this['_battler']['getParamBuffAndStateRate'](_0x114b51)>0x1)_0xbc443a=_0x46270d[_0x271f1c(0x2f7)][_0x271f1c(0x23d)](_0xbc443a),Imported[_0x271f1c(0x4e6)]?this['changeTextColor'](ColorManager[_0x271f1c(0x1e7)]()):this[_0x271f1c(0x27e)](ColorManager[_0x271f1c(0x94a)]());else this[_0x271f1c(0x17c)]['getParamBuffAndStateRate'](_0x114b51)<0x1&&(_0xbc443a=_0x46270d[_0x271f1c(0x749)][_0x271f1c(0x23d)](_0xbc443a),Imported[_0x271f1c(0x4e6)]?this[_0x271f1c(0x27e)](ColorManager[_0x271f1c(0x6c1)]()):this['changeTextColor'](ColorManager[_0x271f1c(0x346)]()));}if(String(_0xbc443a)){const _0x52d2d6=_0x4be378<=0xd4?'\x20':'\x20\x20';this[_0x271f1c(0x45a)](_0xbc443a+_0x52d2d6,_0x23a18c,_0x423f6e,_0x4be378,'right');}},Window_InBattleStatus[_0x33ee77(0x9a7)][_0x33ee77(0x1ca)]=function(_0x250d39,_0x238410,_0x7aee4,_0x62e028){const _0x28ef1a=_0x33ee77;_0x62e028=_0x62e028||this[_0x28ef1a(0x6dd)](),this['contentsBack'][_0x28ef1a(0xbd5)]=0xa0;const _0x117114=ColorManager[_0x28ef1a(0x231)]();this[_0x28ef1a(0x9b3)][_0x28ef1a(0x736)](_0x250d39+0x1,_0x238410+0x1,_0x7aee4-0x2,_0x62e028-0x2,_0x117114),this[_0x28ef1a(0x9b3)]['paintOpacity']=0xff;},Game_BattlerBase[_0x33ee77(0x9a7)]['getParamBuffAndStateRate']=function(_0x1d0f60){const _0x14b5d3=_0x33ee77;let _0x1490f1=0x1;_0x1490f1*=this[_0x14b5d3(0x565)](_0x1d0f60);for(const _0xfa6010 of this['states']()){if(!_0xfa6010)continue;for(const _0x3e29ab of _0xfa6010[_0x14b5d3(0x139)]){if(!_0x3e29ab)continue;if(_0x3e29ab['code']!==Game_BattlerBase[_0x14b5d3(0x7f9)])continue;if(_0x3e29ab[_0x14b5d3(0x9dc)]!==_0x1d0f60)continue;_0x1490f1*=_0x3e29ab['value'];}}return _0x1490f1;};function Window_InBattleStatusStates(){const _0x1e985e=_0x33ee77;this[_0x1e985e(0x54f)](...arguments);}function _0x5d49(_0x3d6e1e,_0x49150a){const _0x129d65=_0x129d();return _0x5d49=function(_0x5d49d3,_0x4f08ba){_0x5d49d3=_0x5d49d3-0x116;let _0x4af882=_0x129d65[_0x5d49d3];return _0x4af882;},_0x5d49(_0x3d6e1e,_0x49150a);}function _0x129d(){const _0x3f2ebe=['Window_BattleLog_performAction','battleCorePreBattleCommonEvent','_helpWindow','\x5cC[4](Passive)','helpAreaBottom','BattleManager_inputtingAction','ActSeq_Mechanics_PtbFullHalfAction','updateTargetValue','ActSeq_Cutin_EndVisualCutinEffectType','BattleManager_processAbort','ShowAddedDebuff','font','HelpAutoBattle','VisuMZ_2_AggroControlSystem','substitute','Scene_Battle_update','getBattlerKeyTargets','cancelActorInput','ActSeq_Projectile_Picture','_jumpHeight','updateEffectContainers','CreateActionSequenceTargets','isTickBased','startBattle','processRefresh','customDamageFormula','retreat','silentHomeMove','flipVisualCutinVert','Window_BattleLog_displayActionResults','ActSeq_Horror_GlitchCreate','_inBattleStatusWindow','USER-DEFINED\x203','getConfigValue','optDisplayTp','BgType','applyDamageCaps','Height','drawItemImage','partyCommandWindowRectXPStyle','pushBaseLine','_handlers','CastCertain','isSpinning','StatusGraphic','addChild','DigitGrouping','playOnceParallelInterpreter','clearMotion','_forcedBattleLayout','enemyShowParametersAlways','TextColor','PostDamageAsTargetJS','updateCollapse','addItemCommand','checkSceneBattleTransitionable','battlerSprites','PreStartBattleJS','_buffs','ShowPopup','BattleLogRectJS','waitCount','_cacheTextWidth','ActSeq_Impact_ShockwaveEachTargets','ActSeq_Mechanics_OnceParallel','_multipliers','100%','_flashColor','all\x20actors','gaugeRate','drawItemStyleIcon','applyAngleChange','debuffHelpFmt','getItemDamageAmountLabelOriginal','_homeEasing','updateWaitMode','skewDuration','gainFullActionsPTB','indexOf','isDying','EscapeSuccess','#%1','VariableHeal','ANTI_TINT_UI','Strength','face','ConfigManager_makeData','Targets1','command339','save','ActSeq_Motion_PerformAction','commandSymbol','_offsetX','onAngleEnd','MANUAL','PostRegenerateJS','targetBattlerContainerOpacity','selectPreviousCommand','_requestRefresh','autoSelect','WaitForMovement','anchor','portraitIndex','ActorCmd','colSpacing','TP_Rate','VisuMZ_2_PartySystem','createDistortionSprite','makeSuccess','cutinExit','ActionEndUpdate','getEnemyIdWithName','createEnemyNameContainer','moveBattlerHomeToPoint','invokeCounterAttack','addSkillCommands','playSystemSound','addImmortal','_baseTexture','_selectionEffectCount','process_VisuMZ_BattleCore_BaseTroops','_item','removeChildFromUiContainer','FullActions','updateStateSprite','clearFreezeMotionForWeapons','Shadow','paintOpacity','ForceRandom','32963cnQwxr','_forcedBattlers','skillItemWindowRectBorderStyle','updateBorderStyle','ActSeq_Mechanics_EtbAction','waitForJump','createTroopNote','_targetGrowY','isAppeared','commandStyle','ActSeq_Inject_AnimationPauseResume','CheckVisibleSwitchNotetags','fadeShiftX','_totalDamage','ActSeq_Movement_HomeMoveToPoint','PartyCmd','SvMotionIdleMass-%1-%2','redrawForGaugeRate','ShowReflectWait','updateLastTarget','BattlebackScale','process_VisuMZ_BattleCore_Action_Notetags','pow','displayActionResults','getNextSubjectFromPool','updateStatusWindowPosition','PRE-','helpWindowRect','VisuMZ_2_BattleSystemBTB','_returnWindow','loadPicture','addOnceParallelInterpreter','setCommonEvent','Scene_Battle_selectPreviousCommand','isSubjectValidForAnyoneSelect','surprise','_windowLayer','playEnemyAttack','Game_Map_battleback1Name','_totalValue','okTargetSelectionVisibility','processBorderActor','isDebuffAffected','AddOption','hitText','setupDesaturateImpactFilter','_opacityEasing','isDTB','chant','ActSeq_Zoom_WaitForZoom','Window_BattleLog_refresh','removeAnimationFromContainer','ActSeq_Motion_ClearFreezeFrame','process_VisuMZ_BattleCore_PreBattleCommonEvent','status','ActSeq_Movement_MoveToTarget','isChanting','wait','makeTargetsBattleCore','animationId','ArPenFlat','parallaxScrollX','alive\x20actors\x20not\x20user','_canLose','endIcon','▼%1','targetActionSet','placeGauge','dead\x20opponents','Game_Action_isForDeadFriend','Enemy','expRate','Game_Battler_onBattleStart','alive\x20enemies\x20not\x20target','updateAction','Scene_Battle_commandFight','_isProjectile','Window_BattleEnemy_show','_createColorFilter','isRightInputMode','ActSeq_BattleLog_AddText','PreDamage%1JS','alive\x20actors','waitForAnimation','PrioritySortActive','_motion','alterChange','pop','traitSet','ActSeq_Animation_AttackAnimation','Window_BattleLog_displayFailure','setBalloonPose','itemEffectRecoverHp','isForDeadFriend','parallaxScrollY','VisuMZ_3_VisualCutinEffect','_pagedownButton','StepDuration','BattleManager_endBattle','ActSeq_Motion_WaitMotionFrame','createShadowSprite','_actorSprites','ActSeq_Grid_PullToTargetNode','Sprite_Enemy_setBattler','▲%1','Sprite_Gauge_smoothness','_battlerContainer','in\x20order\x20for\x20Taunt\x20and\x20Provoke\x20features\x20to\x20work\x20','Game_Battler_performMiss','Settings','PreEndActionJS','ActSeq_Impact_BlueRedInvert','displayType','createHpGaugeSprite','fittingHeight','faceRect','inputting','Damage','_createEffectsContainer','\x5cHEXCOLOR<%1>','performMagicEvasion','Game_Enemy_setup','eraseState','traits','message2','createEnemyNames','Window_BattleLog_displayEvasion','Game_Action_isForOne','Increases\x20%1\x20to\x20%3%2\x5cC[0].\x20%4','_performDamageMotion','drawDebuffs','createBattleBalloon','addStatusCommand','activate','time','UNTITLED','ParseClassNotetags','setupBattlebackBattleCore','drawTurnsRemaining','View\x20battle\x20member\x20status.','waitForNewLine','jsScaleDown','battleJump','messageSpeed','isMoving','isGuard','onDisabledPartyCommandSelection','ActSeq_Motion_RefreshMotion','updateLink','autoMeleeSingleTargetActionSet','VisuMZ_3_SideviewBattleUI','ActSeq_Grid_RemoveTriggerFromNode','Game_Temp_initialize','battler','flashColor','Window_BattleStatus_initialize','VisuMZ_3_ActSeqImpact','autoSelectPriority','_wtypeIDs','setHelpWindow','deselect','ActSeq_Animation_AttackAnimation2','setupTextPopup','_active','removeBuffsAuto','makeBuffHelpText','isMeleeMultiTargetAction','applyHardDamageCap','statesWindowRect','Victory','getDragonbones','Game_Action_isForFriend','isUnderAnimation','startAction','textAlignment','_buttonText','ActSeq_Impact_ShockwaveCenterTargets','_enemyId','clearResult','filterArea','toLowerCase','STATUS','displayRemovedStates','hasSvBattler','_colorFilter','jsScaleToFit','frontview_ui','getAspectData','_skewEasing','setBackgroundType','_battler','ActSeq_Animation_WaitForAnimation','isTpb','Mirror','Mute','ActSeq_Mechanics_EmulateGuardEffect','mpDamage','hpHealingFmt','_partyCommandWindow','setColorTone','shouldDisperseDamage','icon','VisuMZ_4_IconBalloons','_statusWindow','AS\x20USER','ShowCritical','StatusWindowSkinFilename','ActSeq_Movement_WaitForMovement','ARRAYEVAL','PopupOffsetX','battleZoom','drawBackgroundRect','createMultiTargetWindow','ApplyImmortal','ActSeq_Mechanics_BoostPointsStoreData','AlphaFilter','jsCritRateAsUser','PopupShiftX','DefaultDamageStyle','Window_BattleLog_popupDamage','BackColor','addSingleSkillCommand','skewBattler','_targetSkewY','ActSeq_Element_AddElements','battlerKey','createAutoBattleWindow','isGrowing','updateShadow','setupBattleCoreAspects','EndBattlePopups','setBattleAngle','addActor','refreshDimmerBitmap','...','normalIcon','Sprite_SvEnemy','animation','allBattleMembers','Scene_Battle_selectNextCommand','Game_Battler_startTpbTurn','isAutoBattleCommandAdded','startIcon','Actions','setLastPluginCommandInterpreter','jumpBattler','update','_growDuration','ResetFocus','MaxHP','createAnimationContainer','ActSeq_Set_FinishAction','revealNewWeaknesses','parseLocalizedText','forceEscapeSprite','sortEnemies','startDamagePopup','iconIndex','MIN_SAFE_INTEGER','Debuffs','setHorrorEffectSettings','Sprite_Actor_moveToStartPosition','FlashDuration','isMeleeSingleTargetAction','onActorOk','executeDamage','SkewY','isNonSubmenuCancel','drawDarkRect','updatePositionBattleCore','setSTBExploited','isAutoBattle','performCollapse','updateKeyboardKeys','comboWindowOffsetY','some','Sprite_Actor_updateFrame','onHomeMoveEnd','Game_BattlerBase_die','actionEffect','_targetBattlerKey','MAT','executeHpDamage','shouldHideBattleEndPopups','characterIndex','ActSeq_Mechanics_RemoveBuffDebuff','displayAddedStates','textBaseline','getDefeatedEnemies','isSideButtonLayout','removeChild','MotionType','canAlterActionCostPTB','dying','rec','alive\x20battlers','battleInjectAni','buffColor','displayCritical','svbattler','missle','MotionIdle','_customDamageFormula','CalcEscapeRaiseJS','pause','createAttachmentSprites','isBigCharacter','anchorX','process_VisuMZ_BattleCore_Notetags','WeaponTypeID','Window_BattleLog_performCounter','applyImmortal','PopupShiftY','_baseX','PosOffsetX','ShowSubstitute','Armor-%1-%2','applyBattleCoreJS','StatusWindowAttachmentBack','portraitFlipHorz','measureTextWidth','JS\x20ESCAPE\x20FAILURE','createDamageContainer','PostApplyJS','Window_BattleLog_displayCritical','processHandling','extraPositionY','_shadowSprite','Sprite_Weapon_loadBitmap','ForceExploiter','itemTargetCandidates','getBattlerKeyTargetReplacement','basicGaugesY','_totalHits','drawLineText','opponentsUnit','round','extendTroopMembers','HITTYPE_PHYSICAL','Status\x20is\x20currently\x20normal.','faceWidth','criticalDmgRate','WaitComplete','ActSeq_Impact_TimeStop','playCursor','alive\x20actors\x20not\x20target','partyCommandWindowRectBorderStyle','targetSpritePosition','processAnimationRequests','visualCutinPortraitType','PostStartBattleJS','disarmMpLifeSteal','inputtingAction','addCustomCommands','enemyNames','setupDamagePopup','textAlign','battleEffect','enemyShowLevel','ActSeq_Grid_AnimationIDAtNode','JS\x20%1END\x20BATTLE','performMiss','loadFaceImages','getStateDisplay','useDigitGrouping','virtualClick','createCancelButton','split','isSkill','skillWindowRect','setSkill','gaugeBackColor','onEncounterBattleCore','_growWholeDuration','ArRedFlat','_tpbNeedsPartyCommand','smooth','Game_Battler_onBattleEnd','boxHeight','pageOffsetX','_phase','updatePosition','loadCharacter','format','_makeFontNameText','_motionType','createKeyJS','Game_Action_itemTargetCandidates','Window_BattleActor_hide','_drawTextOutline','Scene_Map_updateCallMenu','VisuMZ_2_BattleSystemATB','enemy','setHalfActionsPTB','setValue','VisuMZ_2_BattleSystemSTB','numberFontFace','skill','\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20Declare\x20Arguments\x0a\x20\x20\x20\x20\x20\x20\x20\x20const\x20user\x20=\x20arguments[0];\x0a\x20\x20\x20\x20\x20\x20\x20\x20const\x20a\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20const\x20b\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20let\x20targets\x20=\x20arguments[1];\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20Process\x20Code\x0a\x20\x20\x20\x20\x20\x20\x20\x20try\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20%1\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x20catch\x20(e)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20($gameTemp.isPlaytest())\x20console.log(e);\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20Return\x20Value\x0a\x20\x20\x20\x20\x20\x20\x20\x20return\x20targets\x20||\x20[];\x0a\x20\x20\x20\x20','SideviewSelect','Game_Action_setGuard','battlerShadowScaleY','Game_Battler_clearMotion','PreEndTurnJS','drawSingleSkillCost','turnCount','isCancelTriggered','drawActorGraphic','BattleManager_endAction_ComboWindow','auto','fadeShiftY','remove','addText','regenerateAll','WaitForCamera','isForFriend','isDrain','_battleCoreBattleStartEvent','prepare','_actor','resetFontSettings','description','filters','damagePopupOffsetY','makeDeepCopy','AllowCollapse','Game_BattlerBase_refresh','commandOptions','isBattleTest','ParseAllNotetags','AddHpGaugeOption','_hpGaugeSprite','clearForcedGameTroopSettingsBattleCore','onOpacityEnd','Elements','CalcActionSpeedJS','mainSpriteScaleY','onEnemyCancel','registerCommand','inBattle','Shadow2','WaitForAnimation','_effectDuration','addAttackCommand','_targetIndex','isOpenAndActive','_armorPenetration','Scene_Battle_needsInputWindowChangeIBS','changeTextColor','AutoBattle','weatherPower','alive\x20friends\x20not\x20target','initBattleCore','\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20Declare\x20Arguments\x0a\x20\x20\x20\x20\x20\x20\x20\x20const\x20user\x20=\x20arguments[0];\x0a\x20\x20\x20\x20\x20\x20\x20\x20const\x20skill\x20=\x20arguments[1];\x0a\x20\x20\x20\x20\x20\x20\x20\x20const\x20a\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20const\x20b\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20let\x20visible\x20=\x20true;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20Process\x20Code\x0a\x20\x20\x20\x20\x20\x20\x20\x20try\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20%1\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x20catch\x20(e)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20($gameTemp.isPlaytest())\x20console.log(e);\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20Return\x20Value\x0a\x20\x20\x20\x20\x20\x20\x20\x20return\x20visible;\x0a\x20\x20\x20\x20','_isBattlerFlipped','isBTB','isBattleRefreshRequested','drawTextTopAligned','IconStypeNorm','_forActor','loadWindowskin','BTB','maxBattleMembers','commandName','Window_BattleLog_popBaseLine','_regionBattleback2','FaceDirection','_enemyWindowMode','addOptionsCommand','scale','isAnyBattleBalloonPlaying','prepareCustomActionSequence','ARRAYSTR','attachSpritesToDistortionSprite','find','deactivate','processBattleCoreJS','skills','value2','CriticalDmgRate','_actions','graphicType','adjustPosition_1for1','innerHeight','_targetY','effects','with\x20latest\x20version\x20of\x20VisuMZ_1_BattleCore!','_jumpMaxHeight','createStateIconSprite','addWeaponSwapCommand','requestMotion','blt','_skillIDs','itemEffectRecoverMp','updateShakeFlinch','ACTOR_OFFSET_X','isEscapeCommandEnabled','isAnyoneMoving','actor','_actionBattlers','isSpriteVisible','damagePopupOffsetX','itemPadding','ActSeq_Grid_TraverseToNode','emulateActionEffect','performWeaponAnimation','getBattlePortraitOffsetX','alphabetic','battleSpin','symbol','GuardFormulaJS','recoverAll','ActionStart','drawItemActorFace','_targetX','PostDamageAsUserJS','PrioritySortActors','isActiveTpbReady','autoRemovalTiming','_damagePopupArray','sideview_ui','Scale','isStateResist','_backAttachmentSprite','_homeX','ActSeq_Mechanics_PtbAlterCost','battleCamera','getBattlePortrait','clearAllVisualCutins','ActSeq_Mechanics_AddBuffDebuff','allowCollapse','openBattleActorWindow','_shakeFlinchDuration','_enemySprite','SkillItemBorderCols','AllEnemiesText','context','damage','GetActionSequenceSpecialTargetWithFlags','itemWindowRect','actorCommandAutoBattle','JS\x20%1START\x20TURN','BreakShields','isCTB','_commonEventIDs','growBattler','updateBattlerContainer','repeats','isCommonEventReserved','_jumpDuration','VisuMZ_0_CoreEngine','Weapon-%1-%2','isSTB','setupFont','shift','getSkillTypes','border','ActSeq_Camera_WaitForCamera','startInjectAnimation','AutoMeleeSolo','isForOpponentBattleCore','ActSeq_Target_CurrentIndex','createLowerLayer','AnimationID','adjustPosition_ScaleDown','clearBattleCoreAspects','freezeTime','changeCtbCastTime','minimumStayDuration','buffValueFmt','terminate','isLearnedSkill','gainCurrentActionsETB','needsSelectionBattleCore','popBaseLine','OffsetAdjust','comboWindowOffsetX','ActSeq_Set_WholeActionSet','isAnyoneFloating','removeActor','setReturnWindow','setBattleCameraPoint','command301','gainMp','startOpacity','_shadowScaleY','_actorMultiTargetWindow','Sprite_Actor_setActorHome','Immortal','loadBattleback2','state','_battlerHue','isAutoBattleCommandEnabled','actor%1-gauge-%2','_targetOffsetX','isAnyoneJumping','Targets','filter','becomeSTBExploited','setHue','join','isBattleCoreTargetScope','PreStartTurnJS','BattleGridSystem','ShowMpDmg','EnableDamageCap','LifeStealRegExp','\x5cI[%1]\x5cC[%3]%2','performLifeSteal','StyleOFF','Reveal','clone','PreStartActionJS','setFullActionsPTB','ActSeqImpact','ActSeq_Grid_AddTriggerToNode','Targets2','\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Declare\x20Arguments\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20user\x20=\x20arguments[0];\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20target\x20=\x20arguments[1];\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20obj\x20=\x20arguments[2];\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20let\x20rate\x20=\x20arguments[3]\x20||\x200;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20let\x20originalRate\x20=\x20rate;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Declare\x20Constants\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20action\x20=\x20(this.constructor\x20===\x20Game_Action)\x20?\x20this\x20:\x20user.currentAction();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20a\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20b\x20=\x20target;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20attacker\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20defender\x20=\x20target;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20healer\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20receiver\x20=\x20target;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20actor\x20=\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20currentClass\x20=\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20skill\x20=\x20(this.constructor\x20===\x20Game_Action)\x20?\x20this.item()\x20:\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20item\x20=\x20(this.constructor\x20===\x20Game_Action)\x20?\x20this.item()\x20:\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20weapon\x20=\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20armor\x20=\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20enemy\x20=\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20state\x20=\x20obj;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Create\x20Compatibility\x20Variables\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20let\x20origin\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(Imported.VisuMZ_1_SkillsStatesCore\x20&&\x20$dataStates.includes(obj))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20origin\x20=\x20target.getStateOrigin(obj.id);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Process\x20Code\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20try\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20%1\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x20catch\x20(e)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20($gameTemp.isPlaytest())\x20console.log(e);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20NaN\x20Check\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(isNaN(rate)){\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20($gameTemp.isPlaytest())\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20console.log(\x27NaN\x20rate\x20created\x20by\x20%2\x27.format(\x27\x27,obj.name));\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20console.log(\x27Restoring\x20rate\x20to\x20%2\x27.format(\x27\x27,originalRate));\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20value\x20=\x20originalRate;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Return\x20rate\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20rate;\x0a\x20\x20\x20\x20\x20\x20\x20\x20','TpGaugeOffsetY','HP_Rate','ActSeq_Inject_WaitForInjectAni','placeTimeGauge','showEnemyAttackAnimation','IconStypeMagic','ActSeq_Horror_TVRemove','members','sliceMax','default','message1','Game_Action_itemEffectAddNormalState','Name','traitObjects','logWindowRect','callNextMethod','updateCustomActionSequence','ActSeq_Zoom_Scale','isAttack','parse','_commonEventQueue','MotionFrameWait','Scene_Battle_createEnemyWindow','drawActorBuffRates','stepForward','Destination','makeTurnsText','autoBattleWindowRect','Game_Party_addActor','SHOW_BUTTON','powerDownColor','start','addTextToCombatLog','ActSeq_Movement_MoveBy','setActionState','%1\x27s\x20version\x20does\x20not\x20match\x20plugin\x27s.\x20Please\x20update\x20it\x20in\x20the\x20Plugin\x20Manager.','return\x200','Amp','enemyShowParametersIfDefeated','SwitchCritical','Variable','performCastAnimation','selectNextActor','MAXHP','GetActionSequenceSpecialTarget','isTpbReady','applyGlobal','VisuMZ_2_BattleSystemCTB','BattleManager_startTurn','updatePhase','motionType','onActorCancel','CounterPlayback','clearFreezeMotion','ActSeq_Horror_Clear','getInputButtonString','applyArmorModifiers','isTimeActive','isForOne','isGuardLifeSteal','customFontFace','enemyShowParametersIfBattleTest','_surprise','repositionCancelButtonBorderStyle','ShowActorGauge','drawActorBuffTurns','currentMaxValue','VoiceLine','ComboWindow_RectJS','updateBattleBalloons','isPhysical','CoreEngine','BattleManager_selectNextCommand','isBypassDamageCap','startActorSelection','aliveMembers','value1','originalName','drawingAreaWidth','selectAll','findIndex','canAttackBattleCore','ActSeq_Animation_BalloonIconRange','STB','pattern','_buttonKey','alive\x20enemies\x20not\x20user','_cursorSprite','ActSeq_Target_NextTarget','setupOversaturateImpactFilter','ActSeq_Movement_Jump','_index','Window_BattleLog_performCollapse','isDead','_defeatedEnemies','Game_Map_setupBattleback','XPActorDefaultHeight','FvAniEachTarget','ActSeq_BattleVoice_PlayCommonLine','addState','svAnchorX','isPlaying','gradientFillRect','enabled','BG_TYPE','processDefeat','ITEM','onMoveEnd','WaitForScale','DefeatEvent','stepFlinch','1:1','parseForcedGameTroopSettingsBattleCore','ceil','setSubject','_targetDamage','createRateJS','uiInputPosition','visualCutinPortraitIndex','TimeScale','_enemy','_pageupButton','commandEscape','minimumHits','smoothness','hpDamage','contents','removeBattleBalloon','ActSeq_Mechanics_StateTurnsChangeTo','CmdIconOptions','ActSeq_Angle_Reset','forceWeaponAnimation','gainHp','makeActionList','_targets','portraitFilename','ActSeq_Cutin_WaitForEntrance','VisuMZ_3_ActSeqProjectiles\x20needs\x20to\x20be\x20updated\x20','allIcons','attackAnimationId1','isMagical','updateEvent','_floatHeight','%1StartActionJS','positionOffsetY','random','VisuMZ_1_MessageCore','ActSeq_Grid_TeleportToNode','createMiss','hitsDmgFmt','\x5cI[%1]%2','AutoBattleCancel','Scene_Battle_updateBattleProcess','_injectAnimationSprite','rate','createPartyCommandWindow','command357','ExtDisplayedParams','VisuMZ_2_DragonbonesUnion','CTB','HelpStatus','Game_Action_testApply','ActSeq_Animation_CastAnimation','setBattleCameraOffset','setupWeaponAnimation','_indent','_makeCursorAlpha','Buffs','%1\x20is\x20missing\x20a\x20required\x20plugin.\x0aPlease\x20install\x20%2\x20into\x20the\x20Plugin\x20Manager.','Game_Battler_makeSpeed','charged','_itemWindow','battleCoreTpbMainPhase','floatBattler','angleDuration','ActSeq_Grid_AnimationTypeAtNode','_floatEasing','width','statusDescription','AUTO\x20BATTLE','_activeWeaponSlot','requestMotionRefresh','ParseItemNotetags','hasStaticSvBattler','Scene_Map_initialize','setBattlerFacePoint','createTargetsJS','normalColor','displayMiss','ChargeRate','Scene_Battle_terminate','performMoveToPoint','ARRAYNUM','resetNameTempVisibility','_skewX','contentsOpacity','ActSeq_Projectile_Animation','SwitchMissEvade','_tpbState','startPartyCommandSelection','_enemySprites','createBattleField','_growX','canMove','ActionSequence','Sprite_Enemy_createStateIconSprite','isImmortal','Scene_Battle_itemWindowRect','FlashColor','pageButtonPosition','lifeStealRate','temporaryVisibile','_onceParallelInterpreters','drawItemStatus','iterateBattler','itemEffectAddAttackState','slices','_executeHpDamage','CriticalHitRateJS','autoBattleUseSkills','putActiveBattlerOnTop','statusTextAutoBattleStyle','maxWidth','drawSkillCost','addChildToUiContainer','right','setActorHome','displayBattleCoreTransitionErrorMsg','NameDamageVisibility','AttachStateOffsetY','_dimmerSprite','Sprite_Battler_setBattler','addLoadListener','_lastRegenFrameCount','createString','finalizeScale','skew','XPActorCommandLines','angle','Scene_Battle_createAllWindowsIBS','addDamageSprite','WaitForAngle','addCommand','setVisibleUI','increaseHits','exit','isItemCommandEnabled','HpGaugeOffsetY','_battlerKeyCache','actor%1-portrait','SyncBuffExpire','\x5cI[%1]\x5cHEXCOLOR<%3>%2','reduce','changeInputWindow','_borderPortraitTargetX','ActSeq_Movement_Scale','onRegeneratePlayStateAnimation','Window_BattleLog_displayMpDamage','ARRAYSTRUCT','ReflectAnimation','_damages','prev\x20target','updateJump','ActSeq_Impact_ZoomBlurPoint','origin','All\x20Allies','isBuffAffected','Scene_Battle_initialize','Sprite_Enemy_initVisibility','Game_Action_itemHit','%1▲','_waitCount','_floatDuration','ActSeq_Movement_Float','VisuMZ_3_ActiveChainSkills','StateIconOffsetY','trueRandomTarget','clearDamagePopup','isEnemy','Spriteset_Battle_updateActors','ActSeq_Grid_ClearPassiveStatesFromNode','_targetAngle','SkillID','drawItemStatusListStyle','reserveCommonEvent','NameOffsetY','Window_PartyCommand_initialize','icons','note','removeHorrorEffect','base','_iconIndex','casting','_updateClientArea','createDamageSprite','_displayBattleCoreTransitionErrorMsg','882LCBvnM','selectAllActors','critical','DistanceAdjust','Window_SkillList_maxCols','damageOffsetY','addMeleeReturnActionSet','isCharging','randomTargets','regenerateAllBattleCore','drawText','pageButtonY','numRepeats','destroyDamageSprite','Game_Actor_setup','portraitHue','svBattlerName','svActorHorzCells','guard','isForOpponent','WaitForNewLine','updateTargetPosition','updateNameTempVisibility','Scene_Map_launchBattle','WaitForProjectile','MpGaugeOffsetY','regionId','toUpperCase','MOTIONS','_ptbActionCost','Game_Action_itemEffectAddAttackState','Actor','isJumping','InBattleStatus','maxCommands','_scene','setHome','isAnyoneInjectAnimating','_list','normalHelp','Letter','ActSeq_Projectile_Icon','HelpEscape','getDamageStyle','splice','usePremadeActionSequence','dead','AutoBattleMsg','min','addStateTurns','DefaultSoftCap','damageText','ActSeq_Mechanics_FtbAction','user','enemyId','Opacity','VisuMZ_3_BattleVoices','applyBattleCoreCriticalHitRateJS','_flipScaleX','NameLegacy','_shake','maxCols','DistanceY','extraPositionX','bitmap','result','_animation','initBattlePortrait','SmoothImage','_distortionSprite','ActSeq_Mechanics_BreakShieldReset','removeImmortal','VariableDmg','alterType','endVisualCutin','performActionStart','valueColor','updateStateIconSprite','ActSeq_Animation_BalloonIconSpecific','removeDamageSprite','Scene_ItemBase_applyItem','BattleManager_checkBattleEnd','Scene_Battle_onActorOk','addBattlerStates','Game_Action_evalDamageFormula','ActSeq_Weapon_SetActiveWeapon','Sprite_Battler_initMembers','ANGLE','action','focus','preemptive','position','move','isAlive','displayEvasion','Game_Battler_clearDamagePopup','ActSeq_Impact_ColorBreak','DamageDisplay','Class-%1-%2','isPartyTpbInputtable','addGuardCommand','ActSeq_Grid_ActionAnimationAtNode','isPreviousSceneBattleTransitionable','left','BindCommonEventKeysForGroup','isDuringNonLoopingMotion','%1-%2','createAnimationSprite','MAXMP','clearBattlerMotionTrailData','textWidth','isDisarmLifeSteal','checkExtendTroopCompatibility','RegExp','ActionCount','buffHelpFmt','Game_Battler_forceAction','attack','_hideAllIcons','Scene_Battle_startActorSelection','createInnerPortrait','Game_Temp_requestAnimation','VisuMZ_3_ActSeqProjectiles','Scene_QuickLoad','_floatWholeDuration','TextFmt','drawTextEx','_lineHeight','frameDelay','swing','tpbCommandFight','updateInterpreter','PostDamage%1JS','sort','Scene_Battle_createPartyCommandWindow','adjustPosition_ScaleUp','cancelHpLifeSteal','battleSkew','CmdIconAutoBattle','RequiresDefeat','selectNextCommand','AutoMeleeAoE','createActorCommandWindow','NameFontSize','ActionItemMsg','loadEnemy','hidden','itemHeight','placeStateIcon','isRepeated','VisuMZ_1_SkillsStatesCore','CastMagical','prepareBorderActor','apply','DamageFlat','adjustWeaponSpriteOffset','selectAllEnemies','setupBattleCore','jsScaleUp','magicSkills','applySoftDamageCap','setBattlerBattleCore','_freezeMotionData','getSpecificBattlerKeyTarget','spinBattler','makeAutoBattleActions','command119','addWindow','ChangeOrderBy','cancel','equips','_motionCount','getColor','isFTB','totalHealFmt','PostDamageJS','HEART','TPB','ActSeq_BattleLog_WaitForNewLine','BattleDefeatJS','SceneManager_push','setHelpWindowItem','_battleBalloonQueue','FollowTurn','gaugeLineHeight','itemHit','command283','_inputting','onBattleEnd','stop','Window_ItemList_maxCols','ActSeq_Mechanics_BreakShieldChange','nameColor','moveBattlerToPoint','SkillItemMiddleLayout','isForRandom','ShowCosts','TpbActiveChangeEnabled','performActionMotions','updateBorderSprite','evalDamageFormula','scope','portraitType','onBattleEndBattleCore','PostApplyAsUserJS','checkBattleEnd','LUK','refreshActorPortrait','BattleManager_cancelActorInput','ActSeq_BattleLog_UI','drawActorIcons','StateOverlayOffsetY','updateBattleProcess','itemLineRect','positionOffsetX','isBattleMember','setAttack','Formula','softDamageCap','addExtendedTroopMembers','_additionalSprites','Game_Action_isForAliveFriend','isQueueOptionsMenu','skillTypes','ActSeq_Zoom_Reset','StatusWindowAttachmentFrontOffsetY','performCounter','Sprite_Battler_startMove','battleStatusSprite','ActSeq_Mechanics_EmulateSkillEffect','setImmortal','startMotion','ShowMissEvasion','CurrentTurn','makeActionListAutoAttack','drawParamData','createEnemies','resizeWindowXPStyle','_angleEasing','createEnemyWindow','Scene_Battle_updateCancelButton','faceHeight','Game_Action_isForAll','actorCommandCancelTPB','clearGlobalVariables','updateShadowBattleCore','ActSeq_BattleLog_WaitForBattleLog','isBattleSys','_targetOffsetY','VisuMZ_2_BattleSystemPTB','drawStates','getBattleMembers','performTpbActiveCheckSwitch','isFightCommandEnabled','setEnemyWindowMode','initialize','changeAtbCastTime','Scene_Battle_startActorCommandSelection','canSingleOrMultipleSelect','portraitFlipVert','statusHelpDesc','ActSeq_Animation_ChangeBattlePortrait_JS','AspectNameFmt','BattleManager_onEscapeFailure','retrieveBattleBalloon','delay','DEF','isNextScene','BattleManager_makeActionOrders','isForNotUser','refreshBattlerMotions','EscapeFailureJS','ScaleX','commandRemember','Window_BattleLog_performRecovery','updateFloat','battleGrow','paramBuffRate','StartTurnWait','isAnimationShownOnBattlePortrait','WIDTH','Turns','playBattleVoice','battleMove','MUSIC-NOTE','backColor','sprite','setFrame','startTpbTurn','float','setLetter','_angleRevertOnFinish','_updateCursorArea','ActSeq_Movement_HomeMoveToTarget','isTpbMainPhase','Scene_Battle_commandEscape','height','CriticalHitFlat','canBattlerMove','createActionSequenceProjectile','updateShadowVisibility','Window_BattleEnemy_initialize','_svBattlerSprite','removeStatesAuto','ActionAnimation','SceneManager_isSceneChanging','ActionEffect','ActSeq_Movement_WaitForSkew','setActiveWeaponSlot','frontviewSpriteY','ActSeq_Grid_MoveTargetsInDirection','mmp','MUSIC','BattleLog','isOpen','resetCounter','Game_Interpreter_command283','MotionAni','Sprite_AnimationMV_updatePosition','addedStateObjects','isSceneChanging','checkAutoCustomActionSequenceNotetagEffect','addAnimationSpriteToContainer','ext','Game_Action_apply','hpRate','VisuMZ_3_ActSeqCamera','_shakeFlinchPower','ActSeq_Grid_PushFromTargetNode','setupHpGaugeSprite','GUARD','showPortraits','ActSeq_Animation_SkillAnimation','makeData','drawItemActorSprite','setupMotionBlurImpactFilter','ZZZ','_targetHomeY','createBattleFieldBattleCore','displayFailure','CheckVisibleSkillNotetags','AutoBattleOK','BattleManager_isTpbMainPhase','startGrow','AttachStateOffsetX','onFloatEnd','_targetHomeX','Action\x20Sequence\x20Impact\x20needs\x20an\x20update!','cancelButtonText','_autoBattleWindow','Window_BattleEnemy_hide','SlotID','item','CreateCutinSettings','checkTpbInputClose','\x5cC[%1]','ActSeq_Weapon_ClearActiveWeapon','startHomeMove','notFocusValid','waitForMovement','excludeListing','Window_BattleLog_clear','_damageContainer','_autoBattle','pagedown','isBreakStunned','\x5cC[0]','Game_Map_battleback2Name','clearOnceParallelInterpreters','ActSeq_Camera_FocusTarget','createEnemySprite','createJS','partyCommandWindowRect','debuffNameFmt','buffIconIndex','getWtypeIdWithName','active','<CUSTOM\x20ACTION\x20SEQUENCE>','updateCounter','battleStatusWindowAnimationContainer','custom','Actor-%1-%2','value','battleAnimation','_appeared','startSkew','startJump','_tempBattler','GroupDigits','code','HpGauge','ActSeq_Element_NullElements','DestinationJS','isSceneBattle','%1\x20is\x20incorrectly\x20placed\x20on\x20the\x20plugin\x20list.\x0aIt\x20is\x20a\x20Tier\x20%2\x20plugin\x20placed\x20over\x20other\x20Tier\x20%3\x20plugins.\x0aPlease\x20reorder\x20the\x20plugin\x20list\x20from\x20smallest\x20to\x20largest\x20tier\x20numbers.','battleEnd','performRecovery','createWeather','_character','_dragonbonesSpriteContainer','_currentAngle','CustomFontFace','autoSelectLastSelected','offsetX','displayMpDamage','_interpreter','setupBattleback','battleback2Name','VisuMZ_2_HorrorEffects','playCancel','swapEnemyIDs','refreshStatusWindow','ANGER','onSkewEnd','_back1Sprite','CmdStyle','currentValue','moveBattlerDistance','mainSpriteScaleX','_tpbSceneChangeCacheActor','createHelpWindow','applyItem','_stateSprite','isForOneBattleCore','ActionCenteredName','_stateIconSprite','declareGlobalVariables','createCommandNameWindow','AutoAddState','PostStartTurnJS','Game_Battler_performEvasion','flashDuration','displayAffectedStatus','redraw','statusWindowRect','setupNegativeImpactFilter','Users','battleAngle','thrust','checkSubstitute','_target','hardDamageCap','requestBattleBalloon','_angleWholeDuration','playReflection','isMagicSkill','alterPriority','clearHorrorEffects','addBattleCoreAutoBattleStartupCommand','criticalDmgFlat','WaitForEntrance','revertTpbCachedActor','center','removeOnceParallelInterpreter','balloonId','missile','setStateTurns','getMenuImage','WEAPON\x20SWAP','deathStateId','Skill-%1-%2','displayBuffs','isBattlerGrounded','createDigits','VisuMZ_2_BattleGridSystem','AnchorY','BattleManager_startInput','compatibilityVisible','ActSeq_Horror_NoiseRemove','battleInjectPrep','performActionEndMembers','isTurnBased','currentAction','updateScale','isAnyoneSkewing','processVictory','battleBalloon','createMainSprite','_forcedHomeX','StepDistanceY','JS\x20%1START\x20BATTLE','SvWeaponSolo-%1-%2','ActionSkillMsg1','AnchorX','JS\x20%1START\x20ACTION','updateOnceParallelInterpreters','meetsUsableItemConditions','ShowHide','removedBuffs','_createCursorSprite','Sprite_Battler_damageOffsetY','isBorderStylePortraitShown','isAnyoneSpinning','JS\x20%1APPLY\x20%2','ActSeq_Camera_Offset','ShowCounter','ParseEnemyNotetags','endBattle','Duration','ParseArmorNotetags','addChildToBack','StatusWindowSkinHide','TpbGaugeOffsetY','SvMotionIdleSolo-%1-%2','Window_Options_statusText','maxItems','createPageButtons','Game_Party_removeActor','gaugeX','addFightCommand','createActorCommandWindowBattleCore','GRID\x20MOVE','StatusWindowAttachmentBackOffsetX','_partyWindow','pauseInjectAnimation','JumpToLabel','compareBattlerSprites','FlinchDistanceY','_battlerName','max','_aspectData','_drawTextBody','startActorCommandSelection','_animationCount','%1RegenerateJS','updateGrow','calcWindowHeight','tpbActorSwitchConditionsMet','_targetFloatHeight','processCancel','linkSprite','singleSkill','checkShowHideBattleNotetags','nextActor','%1EndTurnJS','all\x20enemies','visibilityState','AllActorsText','endAnimation','makeActionOrders','%1StartTurnJS','windowAreaHeight','finishActionSet','displayAction','MUSIC\x20NOTE','createBattleUIOffsetX','Rate','offsetY','addedBuffs','performAttackSlot','previousActor','Scene_Battle_windowAreaHeight','finishActorInput','POST-','_emptyBitmap','partyCommandWindowRectDefaultStyle','PostEndActionJS','StateIconOffsetX','_colorTone','ActSeq_Grid_AnimationJsAtNode','OffsetX','ActSeq_Skew_Reset','enemyMpGaugeRate','isArray','_bypass_applyBattleCoreHitRateJS','forActor','updateEventMain','isDeathStateAffected','5483400jQWFJK','Scene_Battle_start','param','isAffectedByBreakShield','getBattlerFromKey','createCommandVisibleJS','_duration','VisuMZ_1_BattleCore\x20does\x20NOT\x20support\x20changing','startShakeFlinch','moveToStartPositionBattleCore','HpGaugeOffsetX','parent','BoostPoints','performAttack','TpGaugeOffsetX','ElementStatusCore','ActSeq_Animation_BalloonAnimation','svActor','_visibleDuration','isAnimationPlaying','Game_Map_encounterList','BaseTroopIDs','SLEEP','ActSeq_Mechanics_VariablePopup','showHelpWindow','isAtbChargingState','stateColor','list','drain','Window_BattleLog_performMiss','PostStartActionJS','noise','NUM','clamp','canUse','mainSprite','troop','createBorderStylePortraitSprite','buff','Game_BattlerBase_meetsUsableItemConditions','addShowHpGaugeCommand','allowRandomSpeed','isCommandEnabled','displayStartMessages','actorCommandSingleSkill','addBattleCoreAutoBattleStyleCommand','BattleManager_initMembers','VisuMZ_4_CombatLog','motionSpeed','arRedFlat','2953620DoRlmN','randomInt','ItemID','disperseDamage','options','createStatesWindow','transform','debuffColor','Window_BattleLog_performSubstitute','isActor','undecided','ShowFailure','updateRefresh','textColor','updateSelectionEffect','weaponTypes','canInput','ParseSkillNotetags','CmdIconFight','_back2Sprite','_forcedHomeY','_baseLineStack','abnormal','Window_BattleActor_processTouch','displayItemMessage','Enable','findSymbolExt','35810zFXtXr','target','FvAniCenterAll','tone','setBattleSkew','hasSkill','Sprite_Actor_updateBitmap','ActSeq_Movement_Opacity','lineHeight','command3011','ActSeq_Skew_WaitForSkew','_enemyMultiTargetWindow','contains','isFriendly','setItem','BravePoints','mhp','BattleManager_startBattle','show','helpWindowRectBorderStyle','CheckMapBattleEventValid','PopupOffsetY','_borderPortraitDuration','actorCommandEscape','drawActorLevel','ForceDeath','currentDisplayedValue','Window_BattleLog_performActionStart','Window_BattleLog_performActionEnd','map','isActiveTpb','onEscapeSuccess','_escapeRatio','not\x20focus','isFloating','performSTBExploiter','_homeDuration','ActSeq_Mechanics_OtbOrder','ActSeq_Mechanics_AtbGauge','invokeAction','NameAttachStateIcon','_deathStateApplied','alignBattleCoreDamageSprite','_skillWindow','jsAccuracyAsUser','processTouch','VisualCutinEffect','GetParamIcon','commandNameWindowDrawBackground','drawActorClass','displayReflection','ActSeq_Cutin_AddVisualCutinEffect','PostApply%1JS','stepBack','FaceAway','length','FilenameJS','_animationSprites','Game_System_initialize','softDamageCapRate','Game_Actor_makeActionList','battleback1Name','isFlipped','Window_BattleLog_performMagicEvasion','PopupDuration','hitsHealFmt','stateMotionIndex','svBattlerShadowVisible','onEnemyOk','boxWidth','cancelTargetSelectionVisibility','callUpdateHelp','Game_Interpreter_command301','version','open','Scene_Battle_createCancelButton','Spriteset_Battle_update','stateRate','makeSpeed','children','showNormalAnimation','CmdIconItem','adjustPosition_ScaleToFit','DisplayAction','_playTestFastMode','refreshCursor','StatusWindowAttachmentFront','targetsForFriends','_enemies','isCertainHit','\x5c}\x5cC[21]Total\x20Damage:\x20\x5c{\x5cC[0]%1','VisuMZ_2_WeaponSwapSystem','_flashDuration','SkillItemStandardCols','multiTargetWindowRect','canGuardBattleCore','LIGHT\x20BULB','fillRect','ArRedRate','ALL_ACTORS','addEscapeCommand','NameOffsetX','\x20to\x20%1\x20midbattle.','performActionEnd','NameAlwaysSelectOnly','cutinEnter','processForcedAction','stypeId','includes','makeDamageValue','guardSkillId','getBattlePortraitFilename','dimColor2','pointY','setBattleZoom','isAlwaysVisible','debuffValueFmt','_baseY','damageFlat','jsAccuracy','getAttackMotion','skillId','_nameTempVisibleDuration','ScaleDown','StatusWindow_DrawJS','EnemyOffsetY','STR','Sprite_Enemy_updateCollapse','aspect','ATK','getTraitSetKeys','_opacityWholeDuration','attackStatesRate','motionIdle','ActSeq_Horror_GlitchRemove','AGI','processDrawEnemyBattler','damageCounterWindowRect','HelpFight','Sprite_Battler_isMoving','_angleDuration','VisuMZ_3_FrontviewBattleUI','TargetLocation','Sprite_Battleback_adjustPosition','cameraDuration','updateAttachmentSprites','Scene_Options','battlerHue','weapons','SETTINGS','battleSpriteSkew','meetsSelectFrontviewActorConditions','DistanceX','Frame','setupActionSet','concat','ActSeq_Mechanics_PtbConvert','paramValueByName','MeleeDistance','isDisplayEmergedEnemies','LIGHT-BULB','mainSpriteWidth','applyTargetFilters','autoMeleeMultiTargetActionSet','ActSeq_Target_PrevTarget','setupZoomBlurImpactFilter','battleOpacity','process_VisuMZ_BattleCore_CreateRegExp','_endingBattle','IconSet','AllowRandomSpeed','CriticalDmgFlat','_createDamageContainer','doesPageHaveOnceParallelStart','\x5cC[5](Turns\x20%2%1\x5cC[5])\x5cC[0]','isForAliveFriendBattleCore','setTroopPage','skillItemWindowRectMiddle','getAttackWeaponAnimationId','createChildSprite','BattleManager_abort','_actorWindow','opacityStart','ActSeq_Mechanics_Collapse','missed','ActSeq_Mechanics_CtbOrder','PostEndBattleJS','enemyStatus','ButtonAssist','pageButtonX','Sprite_Enemy_update','FvAniCenterScreen','MP_Flat','VoiceLineType','Game_Battler_performDamage','updateAttachedSprites','loadBattleback1','displayChangedBuffs','updateDuration','_cache','HelpItem','guardHpLifeSteal','_enemyIDs','_growY','process_VisuMZ_BattleCore_TraitObject_Notetags','isSelected','damageContainer','applyFreezeMotionFrames','destroy','isSideView','commandAutoBattle','checkCacheKey','battleLayoutStyle','clear','push','lifeStealTrait','ActSeq_Mechanics_AddState','endAction','Direction','Scene_Battle_createActorCommandWindow','occasion','requestBalloon','battlerSmoothImage','isOptionsCommandEnabled','isCancelLifeSteal','battleVoices','battleCoreResumeLaunchBattle','ShakeFlinchPower','isGuardWaiting','Game_Enemy_transform','Exploited','moveToStartPosition','makeHpDamageText','setupRgbSplitImpactFilter','bgType','_subject','match','_cursorArea','frameCount','ShowPortraitsBorderStyle','opacitySpeed','pageButtons','updateSpin','_preemptive','setSvBattlerSprite','ActSeq_Mechanics_BtbGain','PreApply%1JS','damageOffsetX','ALL_ENEMIES','Game_Action_setSkill','counterAttack','isOptionsCommandAdded','damagePopupPosition','evalDamageFormulaBattleCore','battleCameraData','PreDamageJS','_enemyWindow','nameY','updateForceAction','updateShadowScale','adjustPosition','ActSeq_Motion_FreezeMotionFrame','ActSeq_Mechanics_ArmorPenetration','command236','replace','statusWindowRectDefaultStyle','autoBattleStart','All\x20Enemies','isItem','isCustomActionSequence','selectNextCommandTpb','isPlaytest','changePaintOpacity','OverallFormulaJS','iconText','Game_BattlerBase_eraseState','drawEnemyName','MUSICNOTE','updateCommandNameWindow','Scene_Battle_startEnemySelection','Scene_Battle_updateStatusWindowPosition','_currentActor','setTargetBattlerKey','BattleEndEvent','hasAspectData','in\x20order\x20for\x20VisuMZ_1_BattleCore\x20to\x20work.','_lastAction','drawItemStatusXPStyle','Scene_Battle_startPartyCommandSelection','string','freezeFrame','_updateFilterArea','TRAIT_PARAM','Game_Action_isForRandom','_shadowScaleX','makeEscapeRatio','opacity','getNextDamagePopup','chantStyle','Game_Action_needsSelection','_frontAttachmentSprite','innerWidth','Mechanics','onTurnEnd','performAction','BattleManager_onEscapeSuccess','ShowWeapon','isHiddenSkill','isAlwaysHidden','PointJS','drawItem','rowSpacing','$target','Sprite_Actor_initMembers','currentSymbol','StatusWindowAttachmentFrontOffsetX','addChildAt','characterName','updateActors','ActSeq_Movement_MoveToJsPoint','isPartyCommandWindowDisabled','floor','ActSeq_Grid_RemovePassiveStatesFromNode','addSkillTypeCommand','Interrupt','StatusWindow_RectJS','overworldBattleback1Name','_lines','addBattleGridMoveCommand','ActSeq_Impact_Negative','DefaultHardCap','playOnceParallelTroopPage','Index','overworldBattleback2Name','ActSeq_Mechanics_Multipliers','_updateCursorFilterArea','BattleStartEvent','BattleLayout','actionSplicePoint','CombatLogIcon','updateSkew','NameAlwaysHidden','setBlendColor','10640pslSTQ','isForAnyone','updateBitmap','isSkewing','canAttack','updateMain','clearRect','ShowFacesListStyle','needsSelection','_fauxAnimationSprites','Sprite_Battler_setHome','BattleManager_endAction','moveBattlerHomeDistance','alive\x20opponents\x20not\x20target','message4','Game_BattlerBase_canAttack','MultiTarget','getBattlePortraitOffsetY','ActSeq_Mechanics_ActiveChainInputDisable','helpAreaHeight','COMBATLOG','-----','fight','updateFlip','ComboWindow_DrawJS','ActSeq_Mechanics_StateTurnsChangeBy','HITTYPE_CERTAIN','isConfused','parallaxScrollYinvertEnemy','isEffecting','Filename','loadOtherActorImages','updateHomeMove','requestAnimation','updateEffectsContainer','isFrameVisible','_spriteset','svBattlerAnchorY','CheckActSeqProjectileVersion','Sprite_Battler_updateMain','BattleSystemSTB','_targetOpacity','callOptions','_uiContainer','EFFECT_COMMON_EVENT','_methods','ActSeq_Mechanics_BoostPointsChange','deadMembers','isCurrentItemEnabled','_svBattlerData','getHardDamageCap','_actorCommandWindow','isBattlerTargeted','ActSeq_Movement_HomeReset','useItem','TpbGaugeOffsetX','updateBossCollapse','drawEnemyBattler','EscapeSuccessJS','PreRegenerateJS','ShowPortraits','padding','repeatTargets','_battleCoreBattleResumeAfter','globalAlpha','applyCritical','isForFriendBattleCore','updateOpacity','BattleManager_onEncounter','TextAlign','ConfigManager_applyData','Scene_Options_maxCommands','isNameTemporarilyVisible','ShowCounterWait','createStateSprite','CmdTextAlign','ANNOYED','ActSeq_Mechanics_EmulateItemEffect','getLastPluginCommandInterpreter','setMoveEasingType','setBattleCameraTargets','setStateTooltipBattler','_text','Scene_Map_initializeAfter','autoBattleStyle','WaitForZoom','PostApplyAsTargetJS','_stateTurns','frameVisible','jump','autoBattle','displayedParams','setup','weaponImageId','_battlePortrait','Game_Action_executeHpDamage_ComboWindow','_lastActor','expTotal','increaseTotal','call','WaitForExit','endInBattleStatus','placeActorName','Game_Action_isForOpponent','ActSeq_ChangeSkew','Scene_Battle_createAllWindows_ComboWindow','ActSeq_Weapon_NextActiveWeapon','SvBattlerSolo-%1-%2','fontSize','isAnyoneChangingOpacity','VisuMZ_3_BattleAI\x20needs\x20to\x20be\x20updated\x20','createMultiTargetWindows','NameAsTarget','performFlinch','BULB','adjustFlippedBattlefield','AdjustRect','resizeWindowBorderStyle','_damageCounterWindow','getHalfActionsPTB','attackSkillId','battleFloat','waitForEffect','_jumpWholeDuration','VisuMZ_1_MainMenuCore','Window_BattleLog_displayTpDamage','isBorderPortraitSpriteVisible','createAllWindows','CalcEscapeRatioJS','isBattleFlipped','RevertAngle','WaitForEffect','_cancelButton','_offsetY','Decreases\x20%1\x20to\x20%3%2\x5cC[0].\x20%4','setupShockwaveImpactFilter','processOk','animationBaseDelay','%1StartBattleJS','makeBattleCommand','%1▼','ScaleY','ActSeq_Cutin_WaitForExit','_skewWholeDuration','PreEndBattleJS','createInBattleStatusWindow','loadSvActor','BattleSystemCTB','ConvertActionSequenceTarget','_commonEventKey','processEnemyModeTouchBattleCore','_preBattleCommonEvent','WindowWidth','processBattleBalloonRequests','WaitCount2','clearElementChanges','alterCost','windowPadding','ActSeq_Movement_FaceTarget','equipSlots','_targetGrowX','Window_BattleLog_performReflection','\x5cC[6](Actions\x20%2%1\x5cC[6])\x5cC[0]','onBattleStart','makeStateHelpText','isSkipPartyCommandWindow','COMBAT\x20LOG','targetDistortionSpritePosition','PARTY','selectSymbol','refresh','itemEffectGainTp','Linear','loadSvEnemy','isAnyProjectilePresent','lastFilename','changeBattlebacks','setBattleImpactTimeScale','ACTOR_OFFSET_Y','Parse_Notetags_TraitObjects','mpHealingFmt','svAnchorY','Window_BattleLog_displayCurrentState','ShakeFlinch','cancelLifeSteal','Window_BattleLog_performEvasion','getFullActionsPTB','Sprite_Battler_damageOffsetX','USER-DEFINED\x205','battleCommands','Game_Action_numRepeats','bitmapWidth','targetsForOpponents','updateBattlebackBitmap2','victory','NewPopupBottom','Sprite_Actor_update','makeTargets','ActSeq_Impact_Oversaturate','hpAffected','statesMaxWidth','startFloat','textSizeEx','27544TREjZQ','bottom','displayHpDamage','Scene_Battle_createHelpWindow','EscapeFail','cancelMpLifeSteal','processActorCommandCancelTPB','updateUiContainerPosition','updatePointAnimations','unshift','_allTargets','spriteId','Game_Action_updateLastTarget','Game_Action_applyGlobal','updateBattlebackBitmap1','BattleManager_setup','Scene_Battle_isTimeActiveIBS','battlerShadowScaleX','changeTurnOrderByCTB','ActorOffsetY','Scene_Battle_onEnemyCancel','animationShouldMirror','%1EndBattleJS','includeState','ActSeq_ChangeAngle','_commandNameWindow','setupMotion','Game_Troop_setup','ActSeq_Camera_Clamp','ConvertCount','drawBuffs','commandStyleCheck','CreateCommonEventKeys','front\x20base','SvBattlerMass-%1-%2','drawItemStyleIconText','ActSeq_Motion_MotionType','ActSeq_Impact_TimeScale','Window_ActorCommand_initialize','XPSpriteYLocation','632sgWrbu','ActSeq_Mechanics_CustomDmgFormula','isActing','onEscapeFailure','ActSeq_Animation_GuardAnimation','buffNameFmt','bind','Window_BattleLog_displayMiss','unchanged','setBattlerMotionTrailData','performShakeFlinch','hasBeenDefeatedBefore','select','callOkHandler','isForAll','drawActorName','battleDisplayText','_branch','svBattlerAnchorX','_visualHpGauge_JustDied','addBattlerBuffsDebuffs','Window_BattleLog_performDamage','actions','loadBitmap','BTestBypass','MDF','isTpbCharged','alterActionCostPTB','snapForBackground','ResetOffset','updateShadowPosition','WaitForSkew','_targetSkewX','attackAnimationIdSlot','waitForOpacity','attackAnimationId2','EasingType','startWeaponAnimation','hue','collapse','parallaxScrollXinvertEnemy','abort','svBattlerData','powerUpColor','_enemyNameContainer','updateStyleOpacity','isBattlerFlipped','Defeat','isDamagePopupRequested','log','onEncounter','BattleManager_checkSubstitute','%1Damage%2JS','statusWindowRectXPStyle','addAutoBattleCommand','ShowAddedBuff','Window_Options_addGeneralOptions','createBattleUIOffsetY','NOTE','USER-DEFINED\x201','setBattler','encounterList','States','iconWidth','friendsUnit','abs','alive\x20friends','ActSeq_Mechanics_DamagePopup','#ffffff','_forceAction','WaitCount1','_updateDuration','_targetHits','updateCancel','Scene_Battle_createAllWindows','HITTYPE_MAGICAL','BattleManager_invokeCounterAttack','updatePadding','clearTargetBattlerKey','CmdIconStatus','extraHeight','JS\x20%1END\x20ACTION','ActSeq_Movement_HomeMoveBy','_createClientArea','passiveText','Scene_Battle_skillWindowRect','formula','enemyHiddenParameter','Window_BattleStatus_drawItemImage','Scene_Battle_onEnemyOk','_opacityDuration','CriticalHitMultiplier','Window_ActorCommand_setup','_stypeIDs','Game_Troop_expTotal','AggroControlSystem','AspectIcon','DefaultSoftScaler','ENEMY_OFFSET_Y','TP_Flat','drawActorFace','isVisualHpGaugeDisplayed','startInput','WaitCount','itemRect','_lastPluginCommandInterpreter','makeTargetSelectionMoreVisible','criticalHitFlat','_animationContainer','VisuMZ_1_ElementStatusCore','processPostBattleCommonEvents','parameters','_colorType','EmergeText','createEffectActionSet','bitmapHeight','BattleCore','DamageStyles','OffsetY','BindCommonEventKeysForObj','Sprite_Actor_setBattler','reverse','_weaponImageId','initElementStatusCore','PreApplyAsTargetJS','isPTB','_performActionEnd','addedDebuffs','clearBattleRefreshRequest','CriticalColor','itemLifeStealRate','normal','BattleManager_updatePhase','_actionInputIndex','processExtendTroopMembers','pointX','prototype','Window_BattleActor_show','statusText','glitch','_weaponSprite','hide','NO\x20ACTOR\x20FOUND!','parallaxHue','battleProjectiles','autoBattleAtStart','damageStyle','createUIContainer','contentsBack','_frame','ActSeq_Animation_BalloonIcon','gainTp','commandFight','PopupPosition','svActorVertCells','process_VisuMZ_BattleCore_Failsafes','PortraitScale','NextTurn','isInputting','StateID','itemCri','ActSeq_Mechanics_HpMpTp','none','preparePartyRefresh','registerDefeatedEnemy','process_VisuMZ_BattleCore_CommonEventKeys','itemTextAlign','_blendColor','updateStateSpriteBattleCore','drawComboText','ParseActorNotetags','_showWeapon','MpGaugeOffsetX','SWEAT','compareEnemySprite','svShadow','restore','startTurn','isNextSceneBattleTransitionable','_updateTargetValue','ActSeq_DB_DragonbonesMotionAni','_motionSpeed','_weather','_updateColorFilter','requestRefresh','Radius','ActSeq_Mechanics_AnalyzeWeakness','performJump','Text','dataId','DTB','negativeMpLifeSteal','Parse_Notetags_Targets','Game_Temp_requestBalloon','DamageRate','ClearBattleLog','initMembersBattleCore','Game_Interpreter_PluginCommand','clearActiveWeaponSet','AsTarget','_endBattle','ShuffleArray','+%1\x20MP','updateWeather','forceAction','currentExt','numTargets','Sprite_Animation_targetSpritePosition','ConvertParams','applyGuard','_skewY','portrait','updateMotionCount','setCustomDamageFormula','turn','_callSceneOptions','clearBattleCoreData','_lastHpDamage','processAbort','setActiveWeaponSet','extraPositionScaledY','shadow','slice','arPenFlat','process_VisuMZ_BattleCore_jsFunctions','performEvasion','_linkedSprite','isClicked','makeTargetsBattleCoreJS','setBattlePortrait','isActionSelectionValid','StepDistanceX','closeBattleActorWindow','_states','process_VisuMZ_BattleCore_PluginParams','bossCollapse','flipVisualCutinHorz','jsOneForOne','%1\x20%2','AsUser','type','Sprite_Battler_updatePosition','setHandler','isSkillItemWindowsMiddle','getSkillIdWithName','ActSeq_BattleLog_Refresh','PreApplyAsUserJS','duration','_battleField','statusWindowRectBorderStyle','_enemyID','createSeparateDamagePopups','_immortal','isWaiting','sleep','startMove','VariableID','Game_Action_setSubject','updateCancelButton','VisuMZ_4_BreakShields','getChildIndex','Scene_Battle_helpWindowRect','Game_Action_setItem','lifeSteaItem','Game_Action_makeDamageValueDisperse','ParseWeaponNotetags','_eventId','ENEMY_OFFSET_X','resetTextColor','drawBattlerData','alive\x20friends\x20not\x20user','battleUIOffsetX','anchorY','turnOrderChangeOTB','isTriggered','_reflectionTarget','Game_Action_executeHpDamage','ActSeq_Grid_AddPassiveStatesToNode','startEnemySelection','updateHelp','EnableSoftCap','ShowRemovedState','turnsFmt','freezeMotion','updateStaticSvBattlerFrames','guardMpLifeSteal','Sprite_Battler_update','sortDamageSprites','VisuMZ_3_WeaknessDisplay','243SyTWMM','pages','isStatusAffected','isForAnyoneFocusOpponents','targetObject','forceSelect','ActSeq_Movement_Skew','ScaleToFit','enemyTpGaugeRate','close','makeBuffName','clearNameTempVisibility','performReflection','ActSeq_Mechanics_EmulateAttackEffect','smoothSelect','DamageType%1','commandNameWindowCenter','ActSeq_Movement_FaceDirection','_namesCount','performDamage','BattleManager_processVictory','Game_Interpreter_updateWaitMode','passive','attackTimesAdd','create','isCancelled','findTargetSprite','fontFace','canGuard','isBusy','animationWait','ActSeq_Mechanics_EnemyEscape','visualCutinPortraitHue','ShowAddedState','State-%1-%2','index','CheckSkillCommandShowSwitches','<%1>\x5cs*([\x5cs\x5cS]*)\x5cs*<\x5c/%1>','ActSeq_Animation_ShowAnimationJS','Game_Interpreter_terminate','Game_BattlerBase_addNewState','_growEasing','battleMembers','Enemy-%1-%2','battleCommandName','turns','Spriteset_Battle_createBattleField','enemyHpGaugeRate','clearActiveWeaponSlot','isCustomBattleScope','isHidden','_speed','Scene_Boot_onDatabaseLoaded','ActSeq_Movement_WaitForScale','Game_BattlerBase_initMembers','evade','setText','ActSeq_Mechanics_RemoveState','Slot','setBattlerFlip','battlelog','jsCritRateAsTarget','setWaitMode','updateFrame','damageRate','Window_BattleLog_pushBaseLine','_regionBattleback1','inHomePosition','changeWeather','lukEffectRate','PerformAction','ActSeq_Animation_ChangeBattlePortrait','battleCommandIcon','centerFrontViewSprite','drawItemBackground','removeCurrentAction','ComboWindow','Game_BattlerBase_isStateResist','stateHelpFmt','refreshMotion','_lastEnemy','ActSeq_Mechanics_StbRemoveExcessActions','makeStateName','PostEndTurnJS','constructor','HelpSkillType','startAttackWeaponAnimation','_effectsContainer','commandNameWindowDrawText','makeUniqueNames','WaitForJump','applyEasing','ActSeq_Inject_AnimationEnd','loadSystem','isStateAffected','ShowTpDmg','ActSeq_BattleLog_PopBaseLine','CmdTextAutoBattle','CommandWidth','hitIndex','totalDmgFmt','mainFontSize','createContents','isIncludedInEnemyWindow','WaitForSpin','_tempEquipCheck','getReturnWindow','Style','actionsFmt','_underAnimationContainer','performSubstitute','subject','createDamageCounterWindow','Scene_Battle_partyCommandWindowRect','EnemyOffsetX','_mainSprite','attackMotions','DualWield','FocusY','_homeY','setupBattleCoreData','showAnimation','battlerName','battleUIOffsetY','setupCriticalEffect','iconHeight','onBattleStartOnceParallels','shouldPopupDamage','ActSeq_Element_Clear','repositionEnemiesByResolution','negativeLifeSteal','name','onJumpEnd','StartTurnMsg','_action','onGrowEnd','getAttackMotionSlot','addSingleSkillCommands','isForAnyoneFocusFriends','SkewX','Game_BattlerBase_param','ParseStateNotetags','BattleManager_processDefeat','Angle','isShownOnBattlePortrait','canAddSkillCommand','BattleVictoryJS','TurnsFmt','ActSeq_Impact_MotionTrailRemove','_tempActor','forceMotion','makeCommandList','_battleLayoutStyle','changeCtbChargeTime','ActSeq_Impact_MotionBlurTarget','setGuard','emulateAction','startSpin','AspectColor','createBattleFieldContainer','mpColor','wholeActionSet','Sprite_Enemy_updateBossCollapse','_bypassCanCounterCheck','ATTACK','CommandAddOptions','updateCallMenu','VisuMZ_3_BoostAction','Game_Action_makeTargets','drawItemActorSvBattler','alive\x20battlers\x20not\x20user','isATB','launchBattle','_inBattleStatusMode','setClickHandler','mpDamageFmt','LastSelected','loop','trim','dragonbonesData','Parse_Notetags_HelpDescription','ActSeq_BattleLog_Clear','battleSys','Pre','addCombatLogCommand','Game_Actor_equips','inBattleStatusWindowRect','isNegativeLifeSteal','canEscape','visualHpGauge','mainSpriteHeight','getCommonEventIdWithName','CommonEventID','isForRandomBattleCore','popupDamage','displayCurrentState','Point','applyGlobalCommonEventNotetags','processRandomizedData','updateHpGaugePosition','CopyCombatLog','walk','%1\x20Aspect','setupIconTextPopup','COBWEB','Sprite_Enemy_updateStateSprite','_pattern','_padding','obj','SkillsStatesCore','onBattleStartBattleCore','magicReflection','displayTpDamage','VisuMZ_2_BattleSystemFTB','getStypeIdWithName','die','_battleBalloonSprites','ActionSkillMsg2','atbInterrupt','updateVisibility','visible','_forcing','_waitMode','ActSeq_Grid_AddTriggerToNodeJS','switchToWeaponType','drawActorStateTurns','_borderPortraitSprite','_createCursorArea','FlinchDuration','updateBattleVariables','StyleON','targetObjects','executeMpDamage','okButtonText','performMoveToTargets','drawGauge','escape','evaded','_homeWholeDuration','processEscape','effect','_attackAnimationId','%1EndActionJS','isChangingOpacity','buffAdd','_skewDuration','actorId','actionBattleCoreJS','isForAliveFriend','ExtraSettings','_flinched','ActSeq_Animation_PlayAtCoordinate','CmdIconEscape','onStaticEnemyBitmapLoad','lastBattleSkill','ShowRemovedBuff','wtypeId','pageOffsetY','BattleManager_startAction','_logWindow','isMVAnimation','7765zEtuhM','-%1','top','Parse_Notetags_Action','pageup','_statesWindow','negativeHpLifeSteal','initMembers','createActors','pha','addGeneralOptions','HomePosJS','drawItemImageListStyle','text','getDualWieldTimes','Sprite_StateIcon_updateFrame','ActSeq_Angle_WaitForAngle'];_0x129d=function(){return _0x3f2ebe;};return _0x129d();}Window_InBattleStatusStates[_0x33ee77(0x9a7)]=Object['create'](Window_Command[_0x33ee77(0x9a7)]),Window_InBattleStatusStates[_0x33ee77(0x9a7)][_0x33ee77(0xa94)]=Window_InBattleStatusStates,Window_InBattleStatusStates[_0x33ee77(0x76a)]={'maxWidth':VisuMZ[_0x33ee77(0x993)]['Settings'][_0x33ee77(0x471)][_0x33ee77(0x8f4)]??0x180,'drawStates':VisuMZ[_0x33ee77(0x993)][_0x33ee77(0x12b)][_0x33ee77(0x471)][_0x33ee77(0x54a)]??!![],'drawBuffs':VisuMZ[_0x33ee77(0x993)][_0x33ee77(0x12b)][_0x33ee77(0x471)]['drawBuffs']??!![],'drawDebuffs':VisuMZ[_0x33ee77(0x993)][_0x33ee77(0x12b)]['InBattleStatus']['drawDebuffs']??!![],'normalIcon':VisuMZ[_0x33ee77(0x993)][_0x33ee77(0x12b)]['InBattleStatus'][_0x33ee77(0x1a9)]??0x54,'normalText':VisuMZ[_0x33ee77(0x993)][_0x33ee77(0x12b)][_0x33ee77(0x471)]['normalText']??'Normal','normalHelp':VisuMZ[_0x33ee77(0x993)][_0x33ee77(0x12b)][_0x33ee77(0x471)][_0x33ee77(0x477)]??_0x33ee77(0x211),'stateHelpFmt':VisuMZ[_0x33ee77(0x993)][_0x33ee77(0x12b)][_0x33ee77(0x471)]['stateHelpFmt']??_0x33ee77(0xa0d),'buffNameFmt':VisuMZ['BattleCore'][_0x33ee77(0x12b)]['InBattleStatus'][_0x33ee77(0x924)]??_0x33ee77(0x436),'buffHelpFmt':VisuMZ[_0x33ee77(0x993)]['Settings']['InBattleStatus'][_0x33ee77(0x4c3)]??_0x33ee77(0x13e),'debuffNameFmt':VisuMZ[_0x33ee77(0x993)][_0x33ee77(0x12b)]['InBattleStatus'][_0x33ee77(0x5c5)]??_0x33ee77(0x8b8),'debuffHelpFmt':VisuMZ['BattleCore'][_0x33ee77(0x12b)][_0x33ee77(0x471)][_0x33ee77(0xb9e)]??_0x33ee77(0x8b2),'actionsFmt':VisuMZ[_0x33ee77(0x993)][_0x33ee77(0x12b)][_0x33ee77(0x471)][_0x33ee77(0xaac)]??_0x33ee77(0x8ce),'turnsFmt':VisuMZ[_0x33ee77(0x993)]['Settings'][_0x33ee77(0x471)][_0x33ee77(0xad3)]??_0x33ee77(0x783),'passiveText':VisuMZ[_0x33ee77(0x993)]['Settings']['InBattleStatus'][_0x33ee77(0x973)]??_0x33ee77(0xb59)},Window_InBattleStatusStates[_0x33ee77(0x9a7)][_0x33ee77(0x54f)]=function(_0x5c9e9b){const _0xd42ac8=_0x33ee77;this['_battler']=null,Window_Command['prototype'][_0xd42ac8(0x54f)]['call'](this,_0x5c9e9b),this[_0xd42ac8(0x299)](),this['deselect'](),this[_0xd42ac8(0x17b)](0x2);},Window_InBattleStatusStates[_0x33ee77(0x9a7)][_0x33ee77(0x95b)]=function(_0x473fbd){const _0x510b3c=_0x33ee77;this[_0x510b3c(0x17c)]=_0x473fbd||null,this[_0x510b3c(0x8d6)](),this[_0x510b3c(0xa4e)](0x0),this['scrollTo'](0x0,0x0),this[_0x510b3c(0x143)]();},Window_InBattleStatusStates[_0x33ee77(0x9a7)]['playOkSound']=function(){},Window_InBattleStatusStates[_0x33ee77(0x9a7)]['makeCommandList']=function(){const _0x771a7d=_0x33ee77;if(!this[_0x771a7d(0x17c)])return;this['addBattlerAspect'](),this[_0x771a7d(0x4a3)](),this[_0x771a7d(0x933)](),this['addNormalStatus']();},Window_InBattleStatusStates['prototype']['addBattlerAspect']=function(){const _0x7d956=_0x33ee77;if(!this[_0x7d956(0x17c)]['isEnemy']())return;if(!this[_0x7d956(0x17c)]['hasAspectData']())return;const _0x4b84c0=this[_0x7d956(0x17c)][_0x7d956(0x179)]()['name'],_0x1b1fc9=this[_0x7d956(0x17c)][_0x7d956(0x179)]()[_0x7d956(0x1bf)],_0x192265=this[_0x7d956(0x17c)][_0x7d956(0x179)]()['nameColor'];let _0x213021='';_0x192265['match'](/#(.*?)/gi)&&Imported[_0x7d956(0x3ba)]?_0x213021=_0x7d956(0x423)[_0x7d956(0x23d)](_0x1b1fc9,_0x4b84c0,_0x192265):_0x213021='\x5cI[%1]\x5cC[%3]%2'[_0x7d956(0x23d)](_0x1b1fc9,_0x4b84c0,_0x192265),this['addCommand'](_0x213021,_0x7d956(0x755),!![]);},Window_InBattleStatusStates[_0x33ee77(0x9a7)][_0x33ee77(0x4a3)]=function(){const _0xefeab4=_0x33ee77;if(!Window_InBattleStatusStates[_0xefeab4(0x76a)][_0xefeab4(0x54a)])return;for(const _0x393d65 of this[_0xefeab4(0x17c)]['states']()){if(!this['includeState'](_0x393d65))continue;const _0x2c323e=this['makeStateName'](_0x393d65);this['addCommand'](_0x2c323e,_0xefeab4(0x30c),!![],_0x393d65['id']);}},Window_InBattleStatusStates['prototype'][_0x33ee77(0x90e)]=function(_0x183442){const _0x334002=_0x33ee77;if(!_0x183442)return![];if(_0x183442['name'][_0x334002(0xaf2)]()==='')return![];if(_0x183442['name']['includes'](_0x334002(0x841)))return![];if(_0x183442[_0x334002(0x1bf)]<=0x0)return![];if(_0x183442[_0x334002(0x5b8)])return![];return!![];},Window_InBattleStatusStates[_0x33ee77(0x9a7)][_0x33ee77(0xa92)]=function(_0x42d4c8){const _0x5d3e04=_0x33ee77;let _0x4550af=_0x42d4c8[_0x5d3e04(0x1bf)],_0x131e48=_0x42d4c8[_0x5d3e04(0xac3)],_0x73da9c='0';return Imported[_0x5d3e04(0x4e6)]&&Imported[_0x5d3e04(0x3ba)]&&(_0x73da9c=String(ColorManager[_0x5d3e04(0x6a2)](_0x42d4c8))),_0x73da9c[_0x5d3e04(0x7c1)](/#(.*?)/gi)?_0x5d3e04(0x423)[_0x5d3e04(0x23d)](_0x4550af,_0x131e48,_0x73da9c):_0x5d3e04(0x31d)['format'](_0x4550af,_0x131e48,_0x73da9c);},Window_InBattleStatusStates[_0x33ee77(0x9a7)][_0x33ee77(0x933)]=function(){const _0x442d35=_0x33ee77;for(let _0x4e38a0=0x0;_0x4e38a0<0x8;_0x4e38a0++){const _0x488479=this[_0x442d35(0xa4a)](_0x4e38a0);if(!_0x488479)continue;this[_0x442d35(0x41a)](_0x488479,'buff',!![],_0x4e38a0);}},Window_InBattleStatusStates[_0x33ee77(0x9a7)][_0x33ee77(0xa4a)]=function(_0x46d0fb){const _0x33eea6=_0x33ee77;if(!this[_0x33eea6(0x17c)]['isBuffAffected'](_0x46d0fb)&&!this['_battler'][_0x33eea6(0xc01)](_0x46d0fb))return'';const _0x41b0a3=Window_InBattleStatusStates['SETTINGS'];if(this[_0x33eea6(0x17c)][_0x33eea6(0x432)](_0x46d0fb)&&!_0x41b0a3[_0x33eea6(0x915)])return'';if(this[_0x33eea6(0x17c)][_0x33eea6(0xc01)](_0x46d0fb)&&!_0x41b0a3[_0x33eea6(0x140)])return'';const _0x54bb66=this['_battler'][_0x33eea6(0xb90)][_0x46d0fb];let _0x24a142=this[_0x33eea6(0x17c)][_0x33eea6(0x5c6)](_0x54bb66,_0x46d0fb),_0x2164ea=TextManager[_0x33eea6(0x68a)](_0x46d0fb);_0x54bb66>0x0?_0x2164ea=_0x41b0a3[_0x33eea6(0x924)][_0x33eea6(0x23d)](_0x2164ea):_0x2164ea=_0x41b0a3['debuffNameFmt']['format'](_0x2164ea);let _0x2dad48=0x0;return Imported['VisuMZ_1_SkillsStatesCore']&&(_0x2dad48=_0x54bb66>0x0?ColorManager['buffColor']():ColorManager[_0x33eea6(0x6c1)]()),String(_0x2dad48)[_0x33eea6(0x7c1)](/#(.*?)/gi)?_0x33eea6(0x423)[_0x33eea6(0x23d)](_0x24a142,_0x2164ea,_0x2dad48):'\x5cI[%1]\x5cC[%3]%2'['format'](_0x24a142,_0x2164ea,_0x2dad48);},Window_InBattleStatusStates[_0x33ee77(0x9a7)]['addNormalStatus']=function(){const _0x54c8bc=_0x33ee77;if(this[_0x54c8bc(0x476)][_0x54c8bc(0x70c)]>0x0)return;const _0x58c919=Window_InBattleStatusStates[_0x54c8bc(0x76a)],_0x3a9b9f=_0x58c919[_0x54c8bc(0x1a9)],_0x50c27a=_0x58c919['normalText'],_0x4e0caa='\x5cI[%1]%2'[_0x54c8bc(0x23d)](_0x3a9b9f,_0x50c27a);this[_0x54c8bc(0x41a)](_0x4e0caa,_0x54c8bc(0x9a2));},Window_InBattleStatusStates['prototype']['drawItem']=function(_0x3d03c2){const _0x721937=_0x33ee77,_0x4a1b79=this[_0x721937(0x525)](_0x3d03c2);this[_0x721937(0x7e5)](0xff),this[_0x721937(0x4ce)](this[_0x721937(0x28d)](_0x3d03c2),_0x4a1b79['x'],_0x4a1b79['y']),this[_0x721937(0x148)](_0x3d03c2,_0x4a1b79);},Window_InBattleStatusStates['prototype'][_0x33ee77(0x148)]=function(_0x62e6ef,_0x3e1794){const _0xd3d6f9=_0x33ee77;if(!Imported['VisuMZ_1_SkillsStatesCore'])return;const _0x5d28b9=this[_0xd3d6f9(0xbb1)](_0x62e6ef),_0x414165=_0x3e1794['x']+0x2;if(_0x5d28b9===_0xd3d6f9(0x30c)){const _0x5c340b=$dataStates[this[_0xd3d6f9(0x476)][_0x62e6ef][_0xd3d6f9(0x593)]||0x0];this[_0xd3d6f9(0xb21)](this[_0xd3d6f9(0x17c)],_0x5c340b,_0x414165,_0x3e1794['y']),this['drawActorStateData'](this[_0xd3d6f9(0x17c)],_0x5c340b,_0x414165,_0x3e1794['y']);}else{if(_0x5d28b9===_0xd3d6f9(0x6ae)){const _0x143103=this[_0xd3d6f9(0x476)][_0x62e6ef]['ext'];this[_0xd3d6f9(0x369)](this[_0xd3d6f9(0x17c)],_0x143103,_0x414165,_0x3e1794['y']),this[_0xd3d6f9(0x33f)](this['_battler'],_0x143103,_0x414165,_0x3e1794['y']);}}},Window_InBattleStatusStates['prototype']['updateHelp']=function(){const _0x2d68e4=_0x33ee77,_0x21d298=this[_0x2d68e4(0x80f)]();let _0x4db793='';if(_0x21d298===_0x2d68e4(0x755))_0x4db793=this[_0x2d68e4(0x17c)][_0x2d68e4(0x179)]()[_0x2d68e4(0x263)];else{if(_0x21d298===_0x2d68e4(0x30c))_0x4db793=this[_0x2d68e4(0x8d0)]();else{if(_0x21d298==='buff')_0x4db793=this[_0x2d68e4(0x163)]();else _0x21d298==='normal'&&(_0x4db793=Window_InBattleStatusStates['SETTINGS']['normalHelp']);}}_0x4db793?this[_0x2d68e4(0xb58)][_0x2d68e4(0xa78)](_0x4db793):this['_helpWindow'][_0x2d68e4(0x7aa)]();},Window_InBattleStatusStates[_0x33ee77(0x9a7)][_0x33ee77(0x8d0)]=function(){const _0x3d5d2a=_0x33ee77,_0x28a448=Window_InBattleStatusStates['SETTINGS'],_0x39db75=this[_0x3d5d2a(0x9ec)]();let _0x410883='';const _0x313d75=$dataStates[_0x39db75]||null;if(_0x313d75){const _0xfdb5db=_0x28a448[_0x3d5d2a(0xa8e)];let _0x2fc785=_0x313d75[_0x3d5d2a(0x3da)]||_0x313d75[_0x3d5d2a(0x263)]||'';Imported[_0x3d5d2a(0x4e6)]&&(_0x2fc785=_0x2fc785[_0x3d5d2a(0x23d)](this[_0x3d5d2a(0x17c)][_0x3d5d2a(0x229)](_0x39db75)));let _0x2df7a6=_0x3d5d2a(0xa56);if(this[_0x3d5d2a(0x17c)][_0x3d5d2a(0xa9e)](_0x39db75)){if(_0x313d75[_0x3d5d2a(0x2c4)]===0x0)_0x2df7a6='none';if(_0x313d75['autoRemovalTiming']===0x1)_0x2df7a6=_0x3d5d2a(0x935);if(_0x313d75['autoRemovalTiming']===0x2)_0x2df7a6=_0x3d5d2a(0xa6d);}const _0x546558=this['_battler'][_0x3d5d2a(0x883)][_0x39db75]||0x0;let _0x5a322f=_0x3d5d2a(0x5be);Imported[_0x3d5d2a(0x4e6)]&&Imported['VisuMZ_1_MessageCore']&&(_0x5a322f=ColorManager['stateColor'](_0x313d75),_0x5a322f['match'](/#(.*?)/gi)?_0x5a322f='\x5cHEXCOLOR<%1>'[_0x3d5d2a(0x23d)](_0x5a322f):_0x5a322f=_0x3d5d2a(0x5b3)[_0x3d5d2a(0x23d)](_0x5a322f)),_0x410883=_0xfdb5db[_0x3d5d2a(0x23d)](_0x2fc785,this[_0x3d5d2a(0x342)](_0x2df7a6,_0x546558,_0x5a322f));}return _0x410883;},Window_InBattleStatusStates['prototype'][_0x33ee77(0x163)]=function(){const _0x28fac0=_0x33ee77,_0x440f79=Window_InBattleStatusStates[_0x28fac0(0x76a)],_0x225ecf=this[_0x28fac0(0x9ec)]();let _0x556308='';const _0x41b995=this[_0x28fac0(0x17c)][_0x28fac0(0x432)](_0x225ecf),_0x54c7dc=_0x41b995?_0x28fac0(0x4c3):_0x28fac0(0xb9e),_0x37ad16=_0x440f79[_0x54c7dc];let _0x46b36e=_0x28fac0(0x5be);Imported['VisuMZ_1_SkillsStatesCore']&&Imported[_0x28fac0(0x3ba)]&&(_0x46b36e=_0x41b995?ColorManager['buffColor']():ColorManager[_0x28fac0(0x6c1)](),_0x46b36e[_0x28fac0(0x7c1)](/#(.*?)/gi)?_0x46b36e=_0x28fac0(0x135)[_0x28fac0(0x23d)](_0x46b36e):_0x46b36e='\x5cC[%1]'[_0x28fac0(0x23d)](_0x46b36e));const _0x373cc6=this[_0x28fac0(0x17c)]['_buffTurns'][_0x225ecf]||0x0;return _0x556308=_0x37ad16[_0x28fac0(0x23d)](TextManager[_0x28fac0(0x68a)](_0x225ecf),Math['floor'](this[_0x28fac0(0x17c)][_0x28fac0(0x565)](_0x225ecf)*0x64)+'%',_0x46b36e,this[_0x28fac0(0x342)]('turns',_0x373cc6,_0x46b36e)),_0x556308;},Window_InBattleStatusStates[_0x33ee77(0x9a7)][_0x33ee77(0x342)]=function(_0x2bda76,_0x3f5279,_0xc54f64){const _0x5b7d61=_0x33ee77,_0x1b3a96=Window_InBattleStatusStates['SETTINGS'];let _0x55a7ab=_0x1b3a96['passiveText'];if(_0x2bda76==='actions')_0x55a7ab=_0x1b3a96['actionsFmt'];if(_0x2bda76===_0x5b7d61(0xa6d))_0x55a7ab=_0x1b3a96[_0x5b7d61(0xa39)];if(_0x2bda76===_0x5b7d61(0x9c1))return'';return _0x55a7ab[_0x5b7d61(0x23d)](_0x3f5279,_0xc54f64);};